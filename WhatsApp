/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

typedef struct _NSZone NSZone;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct _NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} XXStruct_pwHToB;

typedef struct {
	XXStruct_pwHToB start;
	XXStruct_pwHToB duration;
} XXStruct_yD8eWC;

typedef struct {
	double x;
	double y;
} XXStruct_gLbvpC;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct opaqueCMSampleBuffer opaqueCMSampleBuffer;

typedef struct {
	unsigned long _field1;
	id* _field2;
	unsigned long* _field3;
	unsigned long _field4[5];
} XXStruct_kFm5bA;

typedef struct __SecTrust SecTrust;

typedef struct axolotl_crypto_provider {
	/*function-pointer*/ void* _field1;
	/*function-pointer*/ void* _field2;
	/*function-pointer*/ void* _field3;
	/*function-pointer*/ void* _field4;
	/*function-pointer*/ void* _field5;
	/*function-pointer*/ void* _field6;
	/*function-pointer*/ void* _field7;
	void* _field8;
} axolotl_crypto_provider;

typedef struct {
	XXStruct_gLbvpC origin;
	XXStruct_gLbvpC size;
} XXStruct_Yvvv9D;

typedef struct __CFString* CFStringRef;

typedef struct __sFILE {
	char* _field1;
	int _field2;
	int _field3;
	short _field4;
	short _field5;
	sbuf _field6;
	int _field7;
	void* _field8;
	/*function-pointer*/ void* _field9;
	/*function-pointer*/ void* _field10;
	/*function-pointer*/ void* _field11;
	/*function-pointer*/ void* _field12;
	sbuf _field13;
	sFILEX* _field14;
	int _field15;
	unsigned char _field16[3];
	unsigned char _field17[1];
	sbuf _field18;
	int _field19;
	long long _field20;
} sFILE;

typedef struct OpusEncoder OpusEncoder;

typedef struct opusEncodingInfo {
	sFILE* file;
	long long currentPosition;
	long long recordTime;
	OpusEncoder* opusEncoder;
	struct {
		char* body_data;
		long body_storage;
		long body_fill;
		long body_returned;
		int* lacing_vals;
		long long* granule_vals;
		long lacing_storage;
		long lacing_fill;
		long lacing_packet;
		long lacing_returned;
		unsigned char header[282];
		int header_fill;
		int e_o_s;
		int b_o_s;
		long serialno;
		long pageno;
		long long packetno;
		long long granulepos;
	} ogg_stream_state;
	short pcmBuffer[320];
	int pcmBufferCount;
} opusEncodingInfo;

typedef struct OpaqueAudioQueue OpaqueAudioQueue;

typedef struct AudioQueueBuffer AudioQueueBuffer;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct {
	unsigned long long _field1;
	unsigned long long _field2;
	unsigned long long _field3;
	unsigned long long _field4;
} XXStruct_IjzfkD;

typedef struct {
	XXStruct_IjzfkD _field1;
	long long _field2;
	long long _field3;
	long long _field4;
} XXStruct_krKngD;

typedef struct CGPattern* CGPatternRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct {
	int version;
	void* info;
	/*function-pointer*/ void* retain;
	/*function-pointer*/ void* release;
	/*function-pointer*/ void* copyDescription;
} XXStruct_4pnlqD;

typedef struct sockaddr {
	unsigned char _field1;
	unsigned char _field2;
	BOOL _field3[14];
} sockaddr;

typedef struct OggOpusFile OggOpusFile;

typedef struct opusInfo {
	OggOpusFile* file;
	long long length;
	long long currentPosition;
	WAPttPlayer* pttPlayer;
} opusInfo;

typedef struct axolotl_store_context axolotl_store_context;

typedef struct ratchet_identity_key_pair ratchet_identity_key_pair;

typedef struct axolotl_context axolotl_context;

typedef struct sb_stemmer sb_stemmer;

typedef struct __sbuf {
	char* _field1;
	int _field2;
} sbuf;

typedef struct __sFILEX sFILEX;

typedef struct ec_public_key ec_public_key;

typedef struct __CFReadStream* CFReadStreamRef;

typedef struct __CFWriteStream* CFWriteStreamRef;

typedef struct SSLContext* SSLContextRef;

typedef struct in_addr {
	unsigned _field1;
} in_addr;

typedef struct sockaddr_in {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	in_addr _field4;
	BOOL _field5[8];
} sockaddr_in;

typedef struct in6_addr {
	union {
		unsigned char _field1[16];
		unsigned short _field2[8];
		unsigned _field3[4];
	} _field1;
} in6_addr;

typedef struct sockaddr_in6 {
	unsigned char _field1;
	unsigned char _field2;
	unsigned short _field3;
	unsigned _field4;
	in6_addr _field5;
	unsigned _field6;
} sockaddr_in6;

typedef struct {
	double call_side;
	double call_result;
	double call_setup_error_type;
	double call_offer_nack_error_code;
	double call_term_reason;
	double call_transport;
	double call_network;
	double call_p2p_disabled;
	double call_transition_count;
	double call_relay_bind_status;
	double call_self_ipv4;
	double call_peer_ipv4;
	double call_relay_create_t;
	double call_agc_mode;
	double call_aec_mode;
	double call_ns_mode;
	double call_sw_aec_type;
	double call_sw_aec_mode;
	double call_aec_offset;
	double call_aec_tail_length;
	double call_echo_likelihood;
	double call_echo_likelihood_before_ec;
	double call_play_cb_avg_t;
	double call_record_cb_avg_t;
	double call_clock_cb_avg_t;
	double call_playback_cb_stopped;
	double call_record_cb_stopped;
	double call_record_get_frame_avg_t;
	double call_tones_detected_in_ringback;
	double call_tones_detected_in_record;
	double call_tones_offset;
	double call_tones_offset_stddev;
	double call_t;
	double call_setup_t;
	double call_ringing_t;
	double call_offer_receipt_delay;
	double call_relay_to_relay_fallback_count;
	double call_p2p_to_relay_fallback_count;
	double call_min_rtt;
	double call_max_rtt;
	double call_avg_rtt;
	double call_last_rtt;
	double call_initial_rtt;
	double call_tx_pkt_loss_pct;
	double call_tx_avg_bitrate;
	double call_tx_avg_bwe;
	double call_tx_min_jitter;
	double call_tx_max_jitter;
	double call_tx_avg_jitter;
	double call_tx_min_loss_period;
	double call_tx_max_loss_period;
	double call_tx_avg_loss_period;
	double call_rx_pkt_loss_pct;
	double call_rx_avg_bitrate;
	double call_rx_avg_bwe;
	double call_rx_min_jitter;
	double call_rx_max_jitter;
	double call_rx_avg_jitter;
	double call_rx_min_loss_period;
	double call_rx_max_loss_period;
	double call_rx_avg_loss_period;
	double call_rx_stopped_t;
	double call_start_time;
	double call_end_time;
	double call_accept_time;
	double call_reject_time;
	double create_sound_port_time;
	double avg_encode_ms;
	double avg_decode_ms;
	double avg_target_bitrate;
	double tx_total_bytes;
	double rx_total_bytes;
	double tx_total_bitrate;
	double rx_total_bitrate;
	double num_encoder_comp_stepdowns;
	BOOL abtest_bucket[32];
	double jb_avg_delay;
	double jb_min_delay;
	double jb_max_delay;
	double jb_last_delay;
	double jb_empties;
	double jb_gets;
	double jb_puts;
	double jb_discards;
	BOOL relay_server_address[32];
	double rc_minrtt;
	double rc_maxrtt;
	double call_record_silence_ratio;
	double call_record_max_energy_ratio;
	double call_record_frames_per_second;
	double call_playback_frames_per_second;
	double call_recent_record_frames_per_second;
	double call_recent_playback_frames_per_second;
	double call_audio_restart_count;
	double call_audio_restart_reason;
	double call_ec_restart_count;
	double call_interrupted_count;
	double call_sampling_rate;
	double audio_buffer_underflow_per_second;
	double audio_buffer_overflow_per_second;
	double audio_buffer_frame_count;
	double low_data_usage_bitrate;
	double pings_sent;
	double pongs_received;
	double reflective_ports_diff;
	double call_end_reconnecting;
	double is_ipv6_capable;
} XXStruct_QeyDBA;

typedef struct {
	unsigned char _field1;
	struct {
		unsigned _field1;
		unsigned short _field2;
		unsigned char _field3;
	} _field2[20];
} XXStruct_sJOP8D;

typedef struct wa_call_relay_addr {
	unsigned _field1;
	unsigned short _field2;
} wa_call_relay_addr;

typedef struct {
	unsigned char _field1;
	wa_call_relay_addr _field2[8];
} XXStruct_qLb2pC;

typedef struct wa_call_relay_token {
	unsigned char _field1[128];
	int _field2;
} wa_call_relay_token;

typedef struct {
	unsigned char _field1;
	wa_call_relay_token _field2[8];
} XXStruct_Ez__$B;

typedef struct {
	int _field1;
	int _field2;
} XXStruct_K5nmsA;

typedef struct {
	struct {
		int _field1;
		int _field2;
		unsigned _field3;
		unsigned _field4;
		unsigned _field5;
		unsigned _field6;
		int _field7;
		int _field8;
		unsigned char _field9;
		int _field10;
		int _field11;
		unsigned char _field12;
	} _field1;
	struct {
		int _field1;
		unsigned char _field2;
		unsigned char _field3;
		unsigned char _field4;
		unsigned char _field5;
	} _field2;
	XXStruct_K5nmsA _field3;
	struct {
		unsigned char _field1;
	} _field4;
	struct {
		unsigned char _field1;
		unsigned char _field2;
		unsigned char _field3;
		unsigned char _field4;
		unsigned short _field5;
		unsigned char _field6;
		int _field7;
	} _field5;
	struct {
		int _field1;
		unsigned char _field2;
		int _field3;
	} _field6;
	int _field7;
	struct {
		unsigned char _field1;
		unsigned char _field2;
		unsigned _field3;
		unsigned _field4;
		unsigned _field5;
		unsigned char _field6;
		unsigned _field7;
		unsigned _field8;
		int _field9;
		unsigned _field10;
		int _field11;
		unsigned _field12;
		int _field13;
		unsigned _field14;
		int _field15;
		int _field16;
	} _field8;
	struct {
		int _field1;
		int _field2;
		int _field3;
		int _field4;
		unsigned char _field5;
	} _field9;
	struct {
		int _field1;
		int _field2;
		unsigned _field3;
		unsigned _field4;
		unsigned _field5;
		int _field6;
		unsigned char _field7;
		int _field8;
		unsigned _field9;
	} _field10;
	struct {
		unsigned _field1;
		unsigned _field2;
		unsigned _field3;
	} _field11;
	struct {
		unsigned char _field1;
		unsigned _field2;
		unsigned _field3;
	} _field12;
	unsigned char _field13;
	int _field14;
	int _field15;
	int _field16;
	int _field17;
	int _field18;
	BOOL _field19[32];
	wa_call_relay_addr _field20;
	int _field21;
	int _field22;
	unsigned _field23;
	int _field24;
	int _field25;
	int _field26;
	unsigned char _field27;
	int _field28;
	int _field29;
	unsigned _field30;
	unsigned _field31;
	unsigned _field32;
	unsigned _field33;
	unsigned _field34;
} XXStruct_v2Fk5C;

typedef struct {
	unsigned char _field1;
	BOOL _field2[32];
	BOOL _field3[64];
	unsigned _field4;
	XXStruct_qLb2pC _field5;
	XXStruct_Ez__$B _field6;
	XXStruct_v2Fk5C _field7;
} XXStruct_K5V6bD;

typedef struct {
	unsigned char _field1;
	struct {
		unsigned _field1;
		unsigned short _field2;
		int _field3;
	} _field2[8];
} XXStruct_sT6xeB;

typedef struct {
	unsigned char _field1;
	BOOL _field2[32];
	BOOL _field3[64];
	unsigned _field4;
	unsigned short _field5;
	int _field6;
} XXStruct_jraSTC;

typedef struct {
	unsigned char _field1;
	BOOL _field2[32];
	BOOL _field3[64];
	unsigned _field4;
	unsigned char _field5[256];
	int _field6;
	unsigned char _field7[32];
	int _field8;
	XXStruct_sJOP8D _field9;
	XXStruct_qLb2pC _field10;
	XXStruct_Ez__$B _field11;
	XXStruct_v2Fk5C _field12;
} XXStruct_qdxGfC;

typedef struct pj_time_val {
	long _field1;
	long _field2;
} pj_time_val;

typedef struct pj_math_stat {
	int _field1;
	int _field2;
	int _field3;
	int _field4;
	int _field5;
	float _field6;
	double _field7;
} pj_math_stat;

typedef struct pjmedia_rtcp_stream_stat {
	pj_time_val _field1;
	unsigned _field2;
	unsigned _field3;
	unsigned _field4;
	unsigned _field5;
	unsigned _field6;
	unsigned _field7;
	unsigned _field8;
	pj_math_stat _field9;
	unsigned _field10;
	struct {
		unsigned _field1 : 1;
		unsigned _field2 : 1;
	} _field11;
	pj_math_stat _field12;
	pj_math_stat _field13;
} pjmedia_rtcp_stream_stat;

typedef struct pj_str_t {
	char* _field1;
	int _field2;
} pj_str_t;

typedef struct pjmedia_rtcp_sdes {
	pj_str_t _field1;
	pj_str_t _field2;
	pj_str_t _field3;
	pj_str_t _field4;
	pj_str_t _field5;
	pj_str_t _field6;
	pj_str_t _field7;
} pjmedia_rtcp_sdes;

typedef struct pjmedia_rtcp_stat {
	pj_time_val _field1;
	pjmedia_rtcp_stream_stat _field2;
	pjmedia_rtcp_stream_stat _field3;
	pj_math_stat _field4;
	unsigned _field5;
	unsigned short _field6;
	pjmedia_rtcp_sdes _field7;
	BOOL _field8[64];
	unsigned _field9;
	unsigned _field10;
	unsigned _field11;
} pjmedia_rtcp_stat;

typedef struct {
	CGSize cropSize;
	CGPoint anchorPoint;
	float rotationAngle;
} XXStruct_hhSZyC;

typedef struct opaqueCMBufferQueue opaqueCMBufferQueue;

typedef struct __CVBuffer* CVBufferRef;

typedef struct CGContext* CGContextRef;

typedef struct __CTFramesetter* CTFramesetterRef;

typedef struct __CTLine* CTLineRef;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct opaqueCMFormatDescription opaqueCMFormatDescription;

typedef struct sqlite3 sqlite3;

typedef struct sqlite3_stmt sqlite3_stmt;

typedef struct __CFHost* CFHostRef;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct __CFSocket* CFSocketRef;

typedef struct axolotl_address {
	char* _field1;
	unsigned _field2;
	int _field3;
} axolotl_address;

typedef struct {
	unsigned _field1;
	sockaddr* _field2;
	CGPoint* _field3;
	CGPoint** _field4;
	CGPoint** _field5;
	CGPoint** _field6;
	CGPoint** _field7;
} XXStruct_uGjhZD;

typedef struct axolotl_sender_key_name {
	char* _field1;
	unsigned _field2;
	axolotl_address _field3;
} axolotl_sender_key_name;

@protocol NSObject
@optional
@property(readonly, copy) NSString* debugDescription;
@required
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(NSZone*)zone;
-(unsigned)retainCount;
-(id)autorelease;
-(oneway void)release;
-(id)retain;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)conformsToProtocol:(id)protocol;
-(BOOL)isMemberOfClass:(Class)aClass;
-(BOOL)isKindOfClass:(Class)aClass;
-(BOOL)isProxy;
-(id)performSelector:(SEL)selector withObject:(id)object withObject:(id)object3;
-(id)performSelector:(SEL)selector withObject:(id)object;
-(id)performSelector:(SEL)selector;
-(id)self;
-(Class)class;
-(BOOL)isEqual:(id)equal;
@end

@protocol UIActionSheetDelegate <NSObject>
@optional
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentActionSheet:(id)sheet;
-(void)willPresentActionSheet:(id)sheet;
-(void)actionSheetCancel:(id)cancel;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
@end

@protocol CLLocationManagerDelegate <NSObject>
@optional
-(void)locationManager:(id)manager didVisit:(id)visit;
-(void)locationManager:(id)manager didFinishDeferredUpdatesWithError:(id)error;
-(void)locationManagerDidResumeLocationUpdates:(id)locationManager;
-(void)locationManagerDidPauseLocationUpdates:(id)locationManager;
-(void)locationManager:(id)manager didStartMonitoringForRegion:(id)region;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)locationManager:(id)manager monitoringDidFailForRegion:(id)monitoring withError:(id)error;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didExitRegion:(id)region;
-(void)locationManager:(id)manager didEnterRegion:(id)region;
-(void)locationManager:(id)manager rangingBeaconsDidFailForRegion:(id)rangingBeacons withError:(id)error;
-(void)locationManager:(id)manager didRangeBeacons:(id)beacons inRegion:(id)region;
-(void)locationManager:(id)manager didDetermineState:(int)state forRegion:(id)region;
-(BOOL)locationManagerShouldDisplayHeadingCalibration:(id)locationManager;
-(void)locationManager:(id)manager didUpdateHeading:(id)heading;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
@end

@protocol NSFetchedResultsControllerDelegate <NSObject>
@optional
-(id)controller:(id)controller sectionIndexTitleForSectionName:(id)sectionName;
-(void)controllerDidChangeContent:(id)controller;
-(void)controllerWillChangeContent:(id)controller;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
@end

@protocol UIGestureRecognizerDelegate <NSObject>
@optional
-(BOOL)gestureRecognizer:(id)recognizer shouldReceivePress:(id)press;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)failByGestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRequireFailureOfGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
@end

@protocol UITabBarControllerDelegate <NSObject>
@optional
-(id)tabBarController:(id)controller animationControllerForTransitionFromViewController:(id)viewController toViewController:(id)viewController3;
-(id)tabBarController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)tabBarControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)tabBarControllerSupportedInterfaceOrientations:(id)orientations;
-(void)tabBarController:(id)controller didEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willEndCustomizingViewControllers:(id)controllers changed:(BOOL)changed;
-(void)tabBarController:(id)controller willBeginCustomizingViewControllers:(id)controllers;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
@end

@protocol WAChatDatabaseMigrationViewControllerDelegate
-(void)chatDatabaseMigrationViewController:(id)controller didCompleteSuccessfully:(BOOL)successfully;
@end

@protocol WANotificationWindowDelegate <NSObject>
@optional
-(void)notificationWindowTapped:(id)tapped;
@end

@protocol WARepairDatabaseViewControllerDelegate <NSObject>
-(void)repairDatabaseViewControllerDidFail:(id)repairDatabaseViewController;
-(void)repairDatabaseViewControllerDidSucceed:(id)repairDatabaseViewController;
@end

@protocol RestoreBackupViewControllerDelegate <NSObject>
-(void)restoreBackupViewControllerDidFinish:(id)restoreBackupViewController;
@end

@protocol WAVoiceCallViewControllerDelegate <NSObject>
-(void)voiceCallViewController:(id)controller didRequestToShowChatWithJID:(id)jid presentKeyboard:(BOOL)keyboard;
-(id)voiceCallViewControllerNeedsUpdatedSnapshot:(id)snapshot;
-(void)voiceCallViewControllerWillResignActive:(id)voiceCallViewController;
-(void)voiceCallViewControllerDidFinish:(id)voiceCallViewController;
-(void)voiceCallViewControllerWillFinish:(id)voiceCallViewController;
@end

@protocol WADeleteAccountControllerDelegate <NSObject>
-(void)deleteAccountControllerDidCancel:(id)deleteAccountController;
-(void)deleteAccountControllerDidFinish:(id)deleteAccountController;
@end

@protocol PKPushRegistryDelegate <NSObject>
-(void)pushRegistry:(id)registry didReceiveIncomingPushWithPayload:(id)payload forType:(id)type;
-(void)pushRegistry:(id)registry didUpdatePushCredentials:(id)credentials forType:(id)type;
@optional
-(void)pushRegistry:(id)registry didInvalidatePushTokenForType:(id)type;
@end

@protocol VerificationControllerDelegate
-(void)verificationControllerDidSucceed:(id)verificationController;
@optional
-(void)verificationControllerDidCancel:(id)verificationController;
@end

@protocol UINavigationControllerDelegate <NSObject>
@optional
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(id)navigationController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(int)navigationControllerPreferredInterfaceOrientationForPresentation:(id)presentation;
-(unsigned)navigationControllerSupportedInterfaceOrientations:(id)orientations;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
@end

@protocol UIApplicationDelegate <NSObject>
@optional
@property(retain, nonatomic) UIWindow* window;
-(void)application:(id)application didUpdateUserActivity:(id)activity;
-(void)application:(id)application didFailToContinueUserActivityWithType:(id)type error:(id)error;
-(BOOL)application:(id)application continueUserActivity:(id)activity restorationHandler:(id)handler;
-(BOOL)application:(id)application willContinueUserActivityWithType:(id)type;
-(void)application:(id)application didDecodeRestorableStateWithCoder:(id)coder;
-(void)application:(id)application willEncodeRestorableStateWithCoder:(id)coder;
-(BOOL)application:(id)application shouldRestoreApplicationState:(id)state;
-(BOOL)application:(id)application shouldSaveApplicationState:(id)state;
-(id)application:(id)application viewControllerWithRestorationIdentifierPath:(id)restorationIdentifierPath coder:(id)coder;
-(BOOL)application:(id)application shouldAllowExtensionPointIdentifier:(id)identifier;
-(unsigned)application:(id)application supportedInterfaceOrientationsForWindow:(id)window;
-(void)applicationProtectedDataDidBecomeAvailable:(id)applicationProtectedData;
-(void)applicationProtectedDataWillBecomeUnavailable:(id)applicationProtectedData;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationShouldRequestHealthAuthorization:(id)application;
-(void)application:(id)application handleWatchKitExtensionRequest:(id)request reply:(id)reply;
-(void)application:(id)application handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
-(void)application:(id)application performActionForShortcutItem:(id)shortcutItem completionHandler:(id)handler;
-(void)application:(id)application performFetchWithCompletionHandler:(id)completionHandler;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification completionHandler:(id)handler;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)application:(id)application didRegisterUserNotificationSettings:(id)settings;
-(void)application:(id)application didChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application willChangeStatusBarFrame:(CGRect)frame;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)applicationSignificantTimeChange:(id)change;
-(void)applicationWillTerminate:(id)application;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(BOOL)application:(id)application openURL:(id)url options:(id)options;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application handleOpenURL:(id)url;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(BOOL)application:(id)application willFinishLaunchingWithOptions:(id)options;
-(void)applicationDidFinishLaunching:(id)application;
@end

@protocol ABPeoplePickerNavigationControllerDelegate <NSObject>
@optional
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(const void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(const void*)person;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(const void*)person property:(int)property identifier:(int)identifier;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(const void*)person;
@end

@protocol ABNewPersonViewControllerDelegate <NSObject>
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(const void*)newPerson;
@end

@protocol MFMailComposeViewControllerDelegate <NSObject>
@optional
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
@end

@protocol MFMessageComposeViewControllerDelegate <NSObject>
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
@end

@protocol PeopleMultiPickerNavigationControllerDelegate
-(void)peopleMultiPickerNavigationControllerDidCancel:(id)peopleMultiPickerNavigationController;
-(void)peopleMultiPickerNavigationController:(id)controller didSelectContacts:(id)contacts;
@end

@protocol WAQRCodeScannerViewControllerDelegate <NSObject>
-(void)qrCodeScannerViewController:(id)controller didFinishWithCode:(id)code;
-(void)qrCodeScannerViewControllerDidCancel:(id)qrCodeScannerViewController;
-(BOOL)qrCodeScannerViewController:(id)controller shouldAcceptCode:(id)code;
@end

@protocol GroupViewControllerDelegate
-(void)groupViewController:(id)controller didSelectGroupWithID:(id)anId;
@optional
-(void)groupViewControllerDidCancel:(id)groupViewController;
@end

@protocol PeopleViewControllerDelegate
-(void)peopleViewController:(id)controller didSelectContacts:(id)contacts;
-(void)peopleViewControllerDidCancel:(id)peopleViewController;
@end

@protocol WAWebClientQRHelpViewDelegate <NSObject>
-(void)webClientQRHelpViewDidCompleteFirstIteration:(id)webClientQRHelpView;
@end

@protocol WAContactsSearchControllerDelegate <NSObject>
-(void)contactsSearchControllerDelegateDidInvalidateSearchResults:(id)contactsSearchControllerDelegate;
@end

@protocol UITextFieldDelegate <NSObject>
@optional
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldClear:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
@end

@protocol NSCopying
-(id)copyWithZone:(NSZone*)zone;
@end

@protocol WACountryPickerControllerDelegate
-(void)countryPicker:(id)picker didSelectCountry:(id)country;
@end

@protocol WAPhoneNumberTextFieldDelegate <NSObject>
-(void)phoneNumberTextFieldDidChange:(id)phoneNumberTextField;
@optional
-(BOOL)phoneNumberTextFieldShouldReturn:(id)phoneNumberTextField;
-(void)phoneNumberTextFieldDidBeginEditing:(id)phoneNumberTextField;
@end

@protocol ABDisabledControllerDelegate <NSObject>
@optional
-(id)helperTextForABDisabledViewController:(id)abdisabledViewController;
-(id)helperTitleForABDisabledViewController:(id)abdisabledViewController;
-(void)abDisabledViewControllerDidCancel:(id)abDisabledViewController;
@end

@protocol WKNavigationDelegate <NSObject>
@optional
-(void)webViewWebContentProcessDidTerminate:(id)webViewWebContentProcess;
-(void)webView:(id)view didReceiveAuthenticationChallenge:(id)challenge completionHandler:(id)handler;
-(void)webView:(id)view didFailNavigation:(id)navigation withError:(id)error;
-(void)webView:(id)view didFinishNavigation:(id)navigation;
-(void)webView:(id)view didCommitNavigation:(id)navigation;
-(void)webView:(id)view didFailProvisionalNavigation:(id)navigation withError:(id)error;
-(void)webView:(id)view didReceiveServerRedirectForProvisionalNavigation:(id)provisionalNavigation;
-(void)webView:(id)view didStartProvisionalNavigation:(id)navigation;
-(void)webView:(id)view decidePolicyForNavigationResponse:(id)navigationResponse decisionHandler:(id)handler;
-(void)webView:(id)view decidePolicyForNavigationAction:(id)navigationAction decisionHandler:(id)handler;
@end

@protocol UIWebViewDelegate <NSObject>
@optional
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
@end

@protocol UIBarPositioningDelegate <NSObject>
@optional
-(int)positionForBar:(id)bar;
@end

@protocol UISearchBarDelegate <UIBarPositioningDelegate>
@optional
-(void)searchBar:(id)bar selectedScopeButtonIndexDidChange:(int)selectedScopeButtonIndex;
-(void)searchBarResultsListButtonClicked:(id)clicked;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarBookmarkButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(BOOL)searchBar:(id)bar shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(BOOL)searchBarShouldEndEditing:(id)searchBar;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(BOOL)searchBarShouldBeginEditing:(id)searchBar;
@end

@protocol UISearchDisplayDelegate <NSObject>
@optional
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchScope:(int)searchScope;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller willUnloadSearchResultsTableView:(id)view;
-(void)searchDisplayController:(id)controller didLoadSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
@end

@protocol UITableViewDataSource <NSObject>
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
@optional
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(BOOL)tableView:(id)view canMoveRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
@end

@protocol UIScrollViewDelegate <NSObject>
@optional
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillEndDragging:(id)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)offset;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
@end

@protocol UITableViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(id)indexPathForPreferredFocusedViewInTableView:(id)tableView;
-(void)tableView:(id)view didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)animationCoordinator;
-(BOOL)tableView:(id)view shouldUpdateFocusInContext:(id)context;
-(BOOL)tableView:(id)view canFocusRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view performAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view canPerformAction:(SEL)action forRowAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)tableView:(id)view shouldShowMenuForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view indentationLevelForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view editActionsForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didDeselectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willDeselectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didUnhighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didHighlightRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view shouldHighlightRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view accessoryTypeForRowWithIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForFooterInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForHeaderInSection:(int)section;
-(float)tableView:(id)view estimatedHeightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayFooterView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
@end

@protocol WAMediaPlayerDelegate <NSObject>
-(void)mediaPlayerDidEndScrubbing:(id)mediaPlayer;
-(void)mediaPlayerDidBeginScrubbing:(id)mediaPlayer;
-(void)mediaPlayerDidRequestPlaybackStart:(id)mediaPlayer;
-(void)mediaPlayerDidPlayToEndTime:(id)mediaPlayer;
-(void)mediaPlayerDidFinishLoading:(id)mediaPlayer;
-(void)mediaPlayerDidChangeCurrentTime:(id)mediaPlayer;
-(void)mediaPlayerStatusDidChange:(id)mediaPlayerStatus;
@end

@protocol WAVideoScrubberDelegate <NSObject>
-(CGSize)videoScrubberThumbnailAspectRatio:(id)ratio;
-(void)videoScrubber:(id)scrubber videoFramesAtTimes:(id)times size:(CGSize)size tolerance:(XXStruct_pwHToB)tolerance block:(id)block;
-(void)videoScrubberDidEndScrubbing:(id)videoScrubber;
-(void)videoScrubberDidChangeCurrentTime:(id)videoScrubber;
-(void)videoScrubberDidBeginScrubbing:(id)videoScrubber pausePlayback:(BOOL)playback;
-(void)videoScrubberDidChangeSlowMotionTimeRange:(id)videoScrubber;
-(void)videoScrubberDidChangeTrimmedTimeRange:(id)videoScrubber;
@end

@protocol WAImageToImageTransitioning <NSObject>
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
@end

@protocol WAStatusListEditViewControllerDelegate
-(void)statusListEditViewViewControllerDidFinish:(id)statusListEditViewViewController;
@end

@protocol StatusEditControllerDelegate
-(void)statusEditControllerDidCancel:(id)statusEditController;
-(void)statusEditController:(id)controller didSaveStatus:(id)status;
@end

@protocol WAEditableImageScrollViewEditingDelegate <NSObject>
-(void)editableImageScrollViewDidEndUserScrolling:(id)editableImageScrollView;
-(void)editableImageScrollViewDidScroll:(id)editableImageScrollView;
-(void)editableImageScrollViewDidBeginUserScrolling:(id)editableImageScrollView;
-(void)editableImageScrollViewDidEndZooming:(id)editableImageScrollView withView:(id)view atScale:(float)scale;
-(void)editableImageScrollViewWillBeginZooming:(id)editableImageScrollView withView:(id)view;
@end

@protocol WAEditableImagePreviewScrollViewEditingDelegate <WAEditableImageScrollViewEditingDelegate>
-(void)editableImagePreviewScrollView:(id)view didAnimateRotationByAngle:(float)angle;
-(void)editableImagePreviewScrollView:(id)view willAnimateRotationByAngle:(float)angle;
-(void)editableImagePreviewScrollViewDidEndEditingAnimation:(id)editableImagePreviewScrollView;
-(void)editableImagePreviewScrollViewWillBeginEditingAnimation:(id)editableImagePreviewScrollView;
@end

@protocol WAEditableImageEditingViewDelegate <NSObject>
-(id)editableImageEditingViewContainingViewController:(id)controller;
-(void)editableImageEditingViewDidEndDeferringRendering:(id)editableImageEditingView;
-(void)editableImageEditingViewDidBeginDeferringRendering:(id)editableImageEditingView;
@end

@protocol WACameraViewControllerDelegate <NSObject>
-(void)cameraViewController:(id)controller didSelectMediaPickerAsset:(id)asset cancelSelectionHandler:(id)handler;
-(void)cameraViewController:(id)controller didFinishWithMediaItems:(id)mediaItems;
-(void)cameraViewControllerDidCancel:(id)cameraViewController;
@end

@protocol WAMultiSendPreviewViewControllerDelegate <NSObject>
-(void)multiSendPreviewViewControllerDidRequestRetakePhoto:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewControllerDidCancel:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewController:(id)controller didConfirmItems:(id)items;
@end

@protocol WAVideoPreviewViewControllerDelegate <NSObject>
-(void)videoPreviewViewControllerDidCancel:(id)videoPreviewViewController;
-(void)videoPreviewViewController:(id)controller didFailWithError:(id)error;
-(void)videoPreviewViewControllerDidConfirmVideo:(id)videoPreviewViewController;
@end

@protocol UIViewControllerAnimatedTransitioning <NSObject>
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@optional
-(void)animationEnded:(BOOL)ended;
@end

@protocol WAScrollTracking <NSObject>
-(void)setDidScrollWithUserInteraction:(BOOL)scrollWithUserInteraction;
@end

@protocol UITextViewDelegate <NSObject, UIScrollViewDelegate>
@optional
-(BOOL)textView:(id)view shouldInteractWithTextAttachment:(id)textAttachment inRange:(NSRange)range;
-(BOOL)textView:(id)view shouldInteractWithURL:(id)url inRange:(NSRange)range;
-(void)textViewDidChangeSelection:(id)textView;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
@end

@protocol MKMapViewDelegate <NSObject>
@optional
-(void)mapView:(id)view didAddOverlayViews:(id)views;
-(id)mapView:(id)view viewForOverlay:(id)overlay;
-(void)mapView:(id)view didAddOverlayRenderers:(id)renderers;
-(id)mapView:(id)view rendererForOverlay:(id)overlay;
-(void)mapView:(id)view didChangeUserTrackingMode:(int)mode animated:(BOOL)animated;
-(void)mapView:(id)view annotationView:(id)view2 didChangeDragState:(unsigned)state fromOldState:(unsigned)oldState;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)mapViewDidStopLocatingUser:(id)mapView;
-(void)mapViewWillStartLocatingUser:(id)mapView;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(void)mapView:(id)view didAddAnnotationViews:(id)views;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapViewDidFinishRenderingMap:(id)mapView fullyRendered:(BOOL)rendered;
-(void)mapViewWillStartRenderingMap:(id)mapView;
-(void)mapViewDidFailLoadingMap:(id)mapView withError:(id)error;
-(void)mapViewDidFinishLoadingMap:(id)mapView;
-(void)mapViewWillStartLoadingMap:(id)mapView;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
@end

@protocol WAStaticPinControllerDelegate <NSObject>
-(void)staticPinControllerPinDropped:(id)dropped;
-(void)staticPinControllerCalloutTapped:(id)tapped;
@end

@protocol AVSpeechSynthesizerDelegate <NSObject>
@optional
-(void)speechSynthesizer:(id)synthesizer willSpeakRangeOfSpeechString:(NSRange)speechString utterance:(id)utterance;
-(void)speechSynthesizer:(id)synthesizer didCancelSpeechUtterance:(id)utterance;
-(void)speechSynthesizer:(id)synthesizer didContinueSpeechUtterance:(id)utterance;
-(void)speechSynthesizer:(id)synthesizer didPauseSpeechUtterance:(id)utterance;
-(void)speechSynthesizer:(id)synthesizer didFinishSpeechUtterance:(id)utterance;
-(void)speechSynthesizer:(id)synthesizer didStartSpeechUtterance:(id)utterance;
@end

@protocol PhoneConfirmationControllerDelegate <NSObject>
-(void)phoneConfirmationControllerDidCancel:(id)phoneConfirmationController;
-(void)phoneConfirmationControllerDidFinish:(id)phoneConfirmationController;
@end

@protocol WAMediaPickerDataSource <NSObject>
-(void)clearSelection;
-(void)showMaximumSelectionCountExceededError;
-(void)toggleSelectionOfMediaPickerAsset:(id)mediaPickerAsset;
-(BOOL)canAddMoreMediaPickerAssets;
-(BOOL)canSelectMediaPickerAsset:(id)asset;
-(id)selectedAssetIdentifiers;
-(BOOL)allowsMultipleSelection;
-(id)libraryController;
@end

@protocol WAWallpaperPreviewControllerDelegate <NSObject>
-(void)wallpaperPreviewControllerDidCancel:(id)wallpaperPreviewController;
-(void)wallpaperPreviewController:(id)controller didSelectCustomImage:(id)image;
-(void)wallpaperPreviewController:(id)controller didSelectLibraryImageAtIndex:(unsigned)index;
@end

@protocol NSCoding
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

@protocol NSSecureCoding <NSCoding>
+(BOOL)supportsSecureCoding;
@end

@protocol WAWallpaperImageViewDelegate <NSObject>
-(void)userDidSelectWallpaperImageView:(id)user;
@end

@protocol _WAImageMessageContainerViewDelegate <NSObject>
-(void)viewDidLayoutSubviews:(id)view;
@end

@protocol PhoneInputViewControllerDelegate
@optional
-(void)phoneInputViewControllerDidCancel:(id)phoneInputViewController;
-(void)phoneInputViewController:(id)controller didFinishWithCountryCode:(id)countryCode phoneNumber:(id)number;
-(void)phoneInputViewControllerDidFinish:(id)phoneInputViewController;
-(void)phoneInputViewControllerDidEnterPhone:(id)phoneInputViewController;
@end

@protocol PassInputViewControllerDelegate
-(void)passInputViewControllerDidCancel:(id)passInputViewController;
-(void)passInputViewControllerDidFinish:(id)passInputViewController;
@end

@protocol ProfileViewControllerDelegate <NSObject>
-(void)profileViewControllerDidFinish:(id)profileViewController;
@end

@protocol ChangeConfirmationControllerDelegate <NSObject>
-(void)changeConfirmationControllerDidCancel:(id)changeConfirmationController;
-(void)changeConfirmationControllerDidFinish:(id)changeConfirmationController;
@end

@protocol ChangeNumberInputControllerDelegate <NSObject>
-(void)changeNumberInputControllerDidCancel:(id)changeNumberInputController;
-(void)changeNumberInputControllerDidEnterPhone:(id)changeNumberInputController;
-(void)changeNumberInputControllerDidFinish:(id)changeNumberInputController;
@end

@protocol PaymentEduControllerDelegate <NSObject>
-(void)paymentEduControllerDidFinish:(id)paymentEduController;
@end

@protocol WAVerificationAutoBackupViewControllerDelegate <NSObject>
-(BOOL)verificationAutoBackupControllerShouldShowNextButton:(id)verificationAutoBackupController;
-(void)verificationAutoBackupControllerDidFinish:(id)verificationAutoBackupController;
@end

@protocol WANetworkChangedControllerDelegate <NSObject>
-(void)networkChangedController:(id)controller didFinishWithResult:(BOOL)result;
@end

@protocol WAVerificationCloudReminderViewControllerDelegate <NSObject>
-(BOOL)verificationCloudReminderControllerShouldShowNextButton:(id)verificationCloudReminderController;
-(BOOL)verificationCloudReminderControllerShouldShowDoneButton:(id)verificationCloudReminderController;
-(void)verificationCloudReminderControllerDidFinish:(id)verificationCloudReminderController;
@end

@protocol CustomLabelInputViewContollerDelegate
-(void)labelInputViewControllerDidCancel:(id)labelInputViewController;
-(void)labelInputViewController:(id)controller didSaveLabel:(id)label;
@end

@protocol AVAudioRecorderDelegate <NSObject>
@optional
-(void)audioRecorderEndInterruption:(id)interruption;
-(void)audioRecorderEndInterruption:(id)interruption withFlags:(unsigned)flags;
-(void)audioRecorderEndInterruption:(id)interruption withOptions:(unsigned)options;
-(void)audioRecorderBeginInterruption:(id)interruption;
-(void)audioRecorderEncodeErrorDidOccur:(id)audioRecorderEncodeError error:(id)error;
-(void)audioRecorderDidFinishRecording:(id)audioRecorder successfully:(BOOL)successfully;
@end

@protocol WAContactInfoEditCellDelegate <NSObject>
-(void)labelButtonTappedInCell:(id)cell;
@end

@protocol LabelPickerViewControllerDelegate
-(void)labelPickerViewControllerDidCancel:(id)labelPickerViewController;
-(void)labelPickerViewController:(id)controller didSelectLabel:(id)label;
@end

@protocol AVAudioPlayerDelegate <NSObject>
@optional
-(void)audioPlayerEndInterruption:(id)interruption;
-(void)audioPlayerEndInterruption:(id)interruption withFlags:(unsigned)flags;
-(void)audioPlayerEndInterruption:(id)interruption withOptions:(unsigned)options;
-(void)audioPlayerBeginInterruption:(id)interruption;
-(void)audioPlayerDecodeErrorDidOccur:(id)audioPlayerDecodeError error:(id)error;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
@end

@protocol NSLayoutManagerDelegate <NSObject>
@optional
-(void)layoutManager:(id)manager textContainer:(id)container didChangeGeometryFromSize:(CGSize)size;
-(void)layoutManager:(id)manager didCompleteLayoutForTextContainer:(id)textContainer atEnd:(BOOL)end;
-(void)layoutManagerDidInvalidateLayout:(id)layoutManager;
-(BOOL)layoutManager:(id)manager shouldSetLineFragmentRect:(inout CGRect*)rect lineFragmentUsedRect:(inout CGRect*)rect3 baselineOffset:(inout float*)offset inTextContainer:(id)textContainer forGlyphRange:(NSRange)glyphRange;
-(CGRect)layoutManager:(id)manager boundingBoxForControlGlyphAtIndex:(unsigned)index forTextContainer:(id)textContainer proposedLineFragment:(CGRect)fragment glyphPosition:(CGPoint)position characterIndex:(unsigned)index6;
-(BOOL)layoutManager:(id)manager shouldBreakLineByHyphenatingBeforeCharacterAtIndex:(unsigned)index;
-(BOOL)layoutManager:(id)manager shouldBreakLineByWordBeforeCharacterAtIndex:(unsigned)index;
-(int)layoutManager:(id)manager shouldUseAction:(int)action forControlCharacterAtIndex:(unsigned)index;
-(float)layoutManager:(id)manager paragraphSpacingAfterGlyphAtIndex:(unsigned)index withProposedLineFragmentRect:(CGRect)proposedLineFragmentRect;
-(float)layoutManager:(id)manager paragraphSpacingBeforeGlyphAtIndex:(unsigned)index withProposedLineFragmentRect:(CGRect)proposedLineFragmentRect;
-(float)layoutManager:(id)manager lineSpacingAfterGlyphAtIndex:(unsigned)index withProposedLineFragmentRect:(CGRect)proposedLineFragmentRect;
-(unsigned)layoutManager:(id)manager shouldGenerateGlyphs:(const unsigned short*)glyphs properties:(const int*)properties characterIndexes:(const unsigned*)indexes font:(id)font forGlyphRange:(NSRange)glyphRange;
@end

@protocol WADownloadProgressViewDelegate <NSObject>
-(void)downloadProgressViewDidCancel:(id)downloadProgressView;
@end

@protocol WAMediaDataPresentationControllerDelegate <NSObject>
-(void)mediaDataPresentationControllerDidLayoutView:(id)mediaDataPresentationController;
-(void)mediaDataPresentationController:(id)controller didLongPressMediaAtIndex:(unsigned)index;
-(void)mediaDataPresentationController:(id)controller didTapMediaAtIndex:(unsigned)index;
-(void)mediaDataPresentationControllerContentsDidFinishLoadingMedia:(id)mediaDataPresentationControllerContents;
-(void)mediaDataPresentationController:(id)controller contentsDidChangeWithAnimation:(BOOL)contents;
@end

@protocol WAContactInfoTableViewCellDelegate <NSObject>
-(void)callButtonTappedInContactInfoCell:(id)contactInfoCell;
-(void)messageButtonTappedInContactInfoCell:(id)contactInfoCell;
@optional
-(void)profilePictureTappedInContactInfoCell:(id)contactInfoCell;
@end

@protocol ABPersonViewControllerDelegate <NSObject>
-(BOOL)personViewController:(id)controller shouldPerformDefaultActionForPerson:(const void*)person property:(int)property identifier:(int)identifier;
@end

@protocol AVVideoCompositionValidationHandling <NSObject>
@optional
-(BOOL)videoComposition:(id)composition shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:(id)instruction layerInstruction:(id)instruction3 asset:(id)asset;
-(BOOL)videoComposition:(id)composition shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:(id)instruction;
-(BOOL)videoComposition:(id)composition shouldContinueValidatingAfterFindingEmptyTimeRange:(XXStruct_yD8eWC)range;
-(BOOL)videoComposition:(id)composition shouldContinueValidatingAfterFindingInvalidValueForKey:(id)key;
@end

@protocol UIViewControllerPreviewingDelegate <NSObject>
-(void)previewingContext:(id)context commitViewController:(id)controller;
-(id)previewingContext:(id)context viewControllerForLocation:(CGPoint)location;
@end

@protocol WATableViewCellPreviewing <NSObject>
-(void)unregisterForPreviewing;
-(void)registerForPreviewingUsingViewController:(id)previewingUsingViewController;
@end

@protocol WAContactPropertyTextFieldDelegate <NSObject>
@optional
-(void)contactPropertyTextFieldValueChanged:(id)changed;
-(BOOL)contactPropertyTextFieldShouldReturn:(id)contactPropertyTextField;
-(void)contactPropertyTextFieldDidEndEditing:(id)contactPropertyTextField;
-(BOOL)contactPropertyTextFieldShouldEndEditing:(id)contactPropertyTextField;
-(void)contactPropertyTextFieldDidBeginEditing:(id)contactPropertyTextField;
-(BOOL)contactPropertyTextFieldShouldBeginEditing:(id)contactPropertyTextField;
@end

@protocol WAMediaUploadable <NSObject>
@property(readonly, copy, nonatomic) NSString* mediaCollectionName;
@property(readonly, assign, nonatomic) int multiSendMediaCount;
@property(readonly, assign, nonatomic) int multiSendMediaIndex;
@property(readonly, assign, nonatomic) int httpRetryCount;
@property(readonly, assign, nonatomic) BOOL isPTT;
@property(readonly, copy, nonatomic) NSString* fileHash;
@property(readonly, assign, nonatomic) unsigned mediaType;
@property(readonly, copy, nonatomic) NSString* mediaPath;
@property(readonly, assign, nonatomic) NSString* toJID;
@property(readonly, assign, nonatomic) NSString* stanzaID;
@property(readonly, assign, nonatomic) id<NSObject, NSCopying> uniqueID;
-(void)replaceMediaWithMediaAtPath:(id)path;
@end

@protocol WAMessageDetailsTableUpdateDelegate <NSObject>
-(void)tableView:(id)view messageUpdated:(id)updated;
-(void)reloadFonts;
-(void)stopOperations;
@end

@protocol NSURLSessionDelegate <NSObject>
@optional
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session didBecomeInvalidWithError:(id)error;
@end

@protocol NSURLSessionTaskDelegate <NSURLSessionDelegate>
@optional
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session task:(id)task didSendBodyData:(long long)data totalBytesSent:(long long)sent totalBytesExpectedToSend:(long long)send;
-(void)URLSession:(id)session task:(id)task needNewBodyStream:(id)stream;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSession:(id)session task:(id)task willPerformHTTPRedirection:(id)redirection newRequest:(id)request completionHandler:(id)handler;
@end

@protocol NSURLSessionDownloadDelegate <NSURLSessionTaskDelegate>
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
@optional
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
@end

@protocol XMPPStreamDelegate <NSObject>
-(BOOL)xmppStream:(id)stream didReceiveLoginResponseStanza:(id)stanza;
-(void)xmppStream:(id)stream initialConfigurationAsync:(id)async;
-(void)xmppStream:(id)stream didReceiveCustomStanza:(id)stanza;
-(void)xmppStream:(id)stream didReceiveNotification:(id)notification;
-(void)xmppStream:(id)stream didReceiveChatState:(id)state;
-(void)xmppStream:(id)stream didReceiveAck:(id)ack;
-(void)xmppStream:(id)stream didReceiveReceipt:(id)receipt;
-(void)xmppStream:(id)stream didReceivePresence:(id)presence;
-(void)xmppStream:(id)stream didReceiveMessages:(id)messages;
-(void)xmppStream:(id)stream didReceiveIQ:(id)iq;
-(void)xmppStreamDidClose:(id)xmppStream;
-(void)xmppStreamDidOpen:(id)xmppStream;
-(void)xmppStreamDidNotAuthenticate:(id)xmppStream lockDuration:(double)duration retryAfter:(double)after reasonCode:(int)code;
-(void)xmppStreamDidAuthenticate:(id)xmppStream attributes:(id)attributes serverTimeShift:(double)shift;
@end

@protocol WANavigationControllerPopFromAnimating <NSObject>
-(BOOL)usesScreenEdgePanGestureRecognizerForCustomPopTransition;
-(id)popFromAnimationIdentifier;
@end

@protocol WANavigationControllerPopToAnimating <NSObject>
-(BOOL)shouldBeginCustomPopAnimationForAnimationIdentifier:(id)animationIdentifier;
-(id)popAnimationControllerFromViewController:(id)viewController;
-(id)popAnimationInteractionControllerFromViewController:(id)viewController;
@end

@protocol WANavigationControllerPushAnimating <NSObject>
-(id)pushAnimationControllerToViewController:(id)viewController;
-(id)pushAnimationInteractionControllerToViewController:(id)viewController;
-(BOOL)isPerformingCustomPushAnimation;
@end

@protocol XMPPSocketDelegate <NSObject>
-(void)xmppSocketDidDisconnect:(id)xmppSocket;
-(void)xmppSocketDidWriteData:(id)xmppSocket;
-(void)xmppSocket:(id)socket didReadData:(id)data;
-(void)xmppSocket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)xmppSocket:(id)socket willConnectToHost:(id)host;
@end

@protocol WAForwardPickerDataSourceDelegate <NSObject>
-(void)forwardPickerSearchDataSourceDidChangeContent:(id)forwardPickerSearchDataSource;
-(BOOL)isSearchBarShownForForwardPickerDataSource:(id)forwardPickerDataSource;
@end

@protocol WAWebClientDelegate <NSObject>
-(id)allWhatsAppablePhonesInWebClient:(id)webClient;
-(id)allBroadcastListsInWebClient:(id)webClient;
-(id)allGroupChatsInWebClient:(id)webClient;
-(id)allChatSessionsInWebClient:(id)webClient;
-(void)webClient:(id)client didSetBlockedState:(BOOL)state ofUserWithJID:(id)jid reason:(id)reason requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didCreateGroupWithSubject:(id)subject participants:(id)participants requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didChangeSubjectOfGroupWithJID:(id)jid to:(id)to requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didLeaveGroupWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didPromoteParticipantWithJID:(id)jid inChatWithJID:(id)jid3 requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didAddParticipants:(id)participants inChatWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didRemoveParticipants:(id)participants inChatWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didRequestMediaUploadForMessageID:(id)messageID inChatWithJID:(id)jid requestID:(id)anId;
-(void)webClient:(id)client didDeletePictureForChatWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didSetPicture:(id)picture thumbnail:(id)thumbnail forChatWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(unsigned)webClient:(id)client didSetMuteDate:(id)date fromMuteDate:(id)muteDate ofChatWithJID:(id)jid;
-(unsigned)webClient:(id)client didSetArchivedState:(BOOL)state ofChatWithJID:(id)jid messageID:(id)anId;
-(unsigned)webClient:(id)client didDeleteMessageIDs:(id)ids inChatWithJID:(id)jid;
-(unsigned)webClient:(id)client didClearChatWithJID:(id)jid messageID:(id)anId;
-(unsigned)webClient:(id)client didDeleteChatWithJID:(id)jid messageID:(id)anId;
-(void)webClient:(id)client didPlayIncomingMessageWithStanzaID:(id)stanzaID participant:(id)participant inChatWithJID:(id)jid;
-(void)webClient:(id)client didUpdateStatus:(id)status requestInfo:(id)info completion:(id)completion;
-(unsigned)webClient:(id)client didReadUntilMessageID:(id)anId inChatWithJID:(id)jid readCount:(int)count;
-(void)webClient:(id)client didRequestResendMessage:(id)message;
-(void)webClient:(id)client didRelayMessageStanza:(id)stanza;
-(id)webClient:(id)client chatSessionForJID:(id)jid;
-(id)webClient:(id)client existingOutgoingMessageWithStanzaID:(id)stanzaID inJID:(id)jid;
-(void)webClient:(id)client didChangeOutgoingChatStateToJID:(id)jid;
-(void)webClient:(id)client didSubscribeToJID:(id)jid;
-(id)webClient:(id)client outgoingMessagesAndPTTWithOrAfterMessageID:(id)orAfterMessageID inChatSession:(id)chatSession;
-(id)recentlyRelevantMessagesInChatsForWebClient:(id)webClient;
-(id)webClient:(id)client memberJIDsInBroadcastList:(id)broadcastList;
-(id)webClient:(id)client messagesInChatSession:(id)chatSession afterMessageID:(id)anId count:(unsigned)count countExceeded:(out BOOL*)exceeded;
-(id)webClient:(id)client JIDToChatSessionMapWithJIDs:(id)jids;
-(id)webClient:(id)client messagesInJID:(id)jid beforeMessageID:(id)anId count:(unsigned)count;
@end

@protocol WASyncManagerDelegate <NSObject>
-(void)syncManager:(id)manager didFinishSyncWithResult:(int)result failureReason:(int)reason;
@end

@protocol WAChatStorageDelegate
-(void)chatStorage:(id)storage didSetAllChatSessionsArchived:(BOOL)archived notifyWebClient:(BOOL)client;
-(void)chatStorage:(id)storage didUpdateArchiveStateOfChatSession:(id)chatSession notifyWebClient:(BOOL)client;
-(void)chatStorage:(id)storage didGenerateNotificationMessage:(id)message fromParticipant:(id)participant;
-(void)chatStorageDidDeleteAllChatSessions:(id)chatStorage;
-(void)chatStorageDidClearAllChatSessions:(id)chatStorage;
-(void)chatStorage:(id)storage didUpdateParticipantsOfChatSession:(id)chatSession;
-(void)chatStorage:(id)storage didDeleteMessages:(id)messages inChatSession:(id)chatSession;
-(void)chatStorage:(id)storage willDeleteMessages:(id)messages inChatSession:(id)chatSession;
-(void)chatStorage:(id)storage didDeleteAllMessagesInChatSession:(id)chatSession;
-(void)chatStorage:(id)storage willDeleteChatSession:(id)session fromWebClient:(BOOL)webClient;
-(void)chatStorage:(id)storage didUpdateChatSessions:(id)sessions;
-(void)chatStorage:(id)storage didInsertChatSessions:(id)sessions;
-(void)chatStorage:(id)storage didDeleteChatSessions:(id)sessions;
-(void)chatStorage:(id)storage mediaDownloadDidFailForMessage:(id)mediaDownload withError:(id)error autodownload:(BOOL)autodownload;
-(void)chatStorage:(id)storage mediaUploadDidFailForMessage:(id)mediaUpload;
-(void)chatStorage:(id)storage mediaUploadDidFinishForMessage:(id)mediaUpload;
-(void)chatStorage:(id)storage didUpdateStatusOfMessage:(id)message from:(unsigned)from;
-(void)chatStorage:(id)storage didUpdateMessage:(id)message changedKeyPaths:(id)paths;
-(void)chatStorage:(id)storage didReceiveMessage:(id)message;
-(void)chatStorage:(id)storage didAddMessages:(id)messages notifyWebClient:(BOOL)client;
-(void)chatStorage:(id)storage didFailWithError:(id)error;
@end

@protocol WAContactsStorageDelegate
-(void)contactsStorage:(id)storage didAddOrUpdateContacts:(id)contacts didRemoveJIDs:(id)jids removeMissingJIDs:(BOOL)jids4;
-(void)contactsStorageDidFailToGenerateFavorites:(id)contactsStorage;
-(void)contactsStorageDidGenerateFavorites:(id)contactsStorage;
-(void)contactsStorageDidUpdateFavorites:(id)contactsStorage;
-(void)contactsStorageDidUpdateStatus:(id)contactsStorage;
-(void)contactsStorageDidUpdateContacts:(id)contactsStorage;
@end

@protocol XMPPConnectionDelegate <NSObject>
-(void)xmppConnection:(id)connection didReceiveOfflineReceiptWithStanzaIDs:(id)stanzaIDs fromJID:(id)jid participantJID:(id)jid4;
-(void)xmppConnection:(id)connection didReceiveServerRejectRetryForReceipt:(id)receipt registrationId:(int)anId fromJID:(id)jid participanr:(id)participanr;
-(void)xmppConnection:(id)connection didReceiveErrorReceiptForStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid4 type:(id)type;
-(void)xmppConnection:(id)connection didReceiveRetryReceiptForStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid4 registrationId:(int)anId retryCount:(int)count;
-(void)xmppConnection:(id)connection didRequestDownloadOfMediaInMessage:(id)message;
-(void)xmppConnection:(id)connection didReceiveServerErrorForOutgoingMessagesWithStanzaIDs:(id)stanzaIDs fromJID:(id)jid participantJID:(id)jid4;
-(void)xmppConnection:(id)connection didReceiveServerErrorAckForIncomingMessageWithStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid4;
-(void)xmppConnection:(id)connection didReceiveCallOfferReceipt:(id)receipt;
-(void)xmppConnectionDidChangeNetworkStateDuringCall:(id)xmppConnection;
-(void)xmppConnection:(id)connection didReceiveCallAck:(id)ack;
-(void)xmppConnection:(id)connection didReceiveIncomingCallStanza:(id)stanza;
-(void)xmppConnectionDidReceiveOfflineMarker:(id)xmppConnection;
-(void)xmppConnection:(id)connection callStanzaDidTimeOut:(id)callStanza;
-(void)xmppConnection:(id)connection receivedUpdatedContactCapabilities:(id)capabilities;
-(void)xmppConnection:(id)connection accountChangedWithAccountInfo:(id)accountInfo receitInfo:(id)info offlineStorage:(BOOL)storage;
-(void)xmppConnection:(id)connection contactUpdated:(id)updated offlineStorage:(BOOL)storage;
-(void)xmppConnection:(id)connection contactsSyncRequest:(id)request timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection contactRemoved:(id)removed;
-(void)xmppConnection:(id)connection contactAddedWithHash:(id)hash;
-(void)xmppConnection:(id)connection statusChanged:(id)changed;
-(void)xmppConnection:(id)connection profilePictureUploadRequestFor:(id)aFor timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection profilePictureChangedFor:(id)aFor identifier:(id)identifier author:(id)author name:(id)name timestamp:(id)timestamp;
-(void)xmppConnectionStopGroupLocationSharing:(id)sharing;
-(BOOL)xmppConnection:(id)connection startLocationSharingForGroup:(id)group duration:(int)duration;
-(void)xmppConnection:(id)connection dirtyFlagsReceived:(id)received timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection groupLockStateChanged:(BOOL)changed notification:(id)notification;
-(void)xmppConnection:(id)connection groupDeletedNotification:(id)notification;
-(void)xmppConnection:(id)connection groupCreated:(id)created notification:(id)notification;
-(void)xmppConnection:(id)connection userModified:(id)modified toJID:(id)jid inGroupWithJID:(id)jid4 timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection participantsDemoted:(id)demoted notification:(id)notification;
-(void)xmppConnection:(id)connection participantsPromoted:(id)promoted notification:(id)notification;
-(void)xmppConnection:(id)connection participantsRemoved:(id)removed groupSubject:(id)subject notification:(id)notification;
-(void)xmppConnection:(id)connection participantsAdded:(id)added notification:(id)notification;
-(void)xmppConnection:(id)connection groupSubjectChanged:(id)changed notification:(id)notification;
-(void)xmppConnection:(id)connection didReceiveMessages:(id)messages completion:(id)completion;
-(void)xmppConnection:(id)connection serverTimeShiftChanged:(double)changed;
-(void)xmppConnection:(id)connection chatStateChanged:(unsigned)changed forJID:(id)jid participantJID:(id)jid4;
-(void)xmppConnection:(id)connection presenceChanged:(unsigned)changed forJID:(id)jid;
-(void)xmppConnection:(id)connection presenceChanged:(unsigned)changed;
-(void)xmppConnection:(id)connection statusChanged:(unsigned)changed forIncomingMessageWithStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid5;
-(void)xmppConnection:(id)connection statusChanged:(unsigned)changed forOutgoingMessagesWithStanzaIDs:(id)stanzaIDs fromJID:(id)jid participantJID:(id)jid5 userData:(id)data;
-(void)xmppConnectionDidDisconnect:(id)xmppConnection;
-(void)xmppConnectionDidNotAuthenticate:(id)xmppConnection lockDuration:(double)duration retryAfter:(double)after reasonCode:(int)code;
-(void)xmppConnectionDidAuthenticate:(id)xmppConnection;
-(void)xmppConnectionDidConnect:(id)xmppConnection;
-(void)xmppConnection:(id)connection networkStatusChanged:(unsigned)changed;
-(void)xmppConnection:(id)connection stateChanged:(unsigned)changed;
@end

@protocol WAVideoScrubberPrecisionRangeSliderDelegate <NSObject>
-(void)videoScrubberPrecisionRangeSlider:(id)slider willPresentRangeFrom:(float)from to:(float)to around:(float)around animationDuration:(double)duration;
-(void)videoScrubberPrecisionRangeSlider:(id)slider mayPresentRangeFrom:(float)from to:(float)to;
-(void)videoScrubberPrecisionRangeSliderDidEndDraggingHandle:(id)videoScrubberPrecisionRangeSlider;
-(void)videoScrubberPrecisionRangeSliderDidDragHandle:(id)videoScrubberPrecisionRangeSlider;
-(void)videoScrubberPrecisionRangeSliderDidBeginDraggingHandle:(id)videoScrubberPrecisionRangeSlider;
@end

@protocol WAVideoScrubberTrimmerDelegate <WAVideoScrubberPrecisionRangeSliderDelegate>
-(void)videoScrubberTrimmerDidEndDraggingThumb:(id)videoScrubberTrimmer;
-(void)videoScrubberTrimmerDidChangeThumbValue:(id)videoScrubberTrimmer;
-(void)videoScrubberTrimmerDidBeginDraggingThumb:(id)videoScrubberTrimmer;
@end

@protocol WAVideoScrubberThumbnailBarDataSource <NSObject>
-(CGSize)videoScrubberThumbnailBarThumbnailAspectRatio:(id)ratio;
-(void)videoScrubberThumbnailBar:(id)bar videoFramesAtTimes:(id)times size:(CGSize)size tolerance:(XXStruct_pwHToB)tolerance block:(id)block;
@end

@protocol UIToolbarDelegate <UIBarPositioningDelegate>
@end

@protocol WAAxolotlStoreDelegate <NSObject>
-(void)axolotlFailedWithError:(id)error;
@end

@protocol HostSelectorDelegate <NSObject>
-(void)hostSelectorDidCancel:(id)hostSelector;
-(void)hostSelector:(id)selector didEnterHostname:(id)hostname;
@end

@protocol WADetailsTableSizeObzerver <NSObject>
-(void)setNeedsSizeUpdate;
@end

@protocol _WAContainerScrollViewDelegate <NSObject>
-(void)containerScrollViewDidEndDecelerating:(id)containerScrollView;
-(void)containerScrollViewDidEndDragging:(id)containerScrollView willDecelerate:(BOOL)decelerate;
-(void)containerScrollViewDidScroll:(id)containerScrollView;
@end

@protocol WASinglePhotoPickerControllerDelegate <NSObject>
-(void)singlePhotoPickerController:(id)controller didFinishWithImage:(id)image;
-(void)singlePhotoPickerControllerDidCancel:(id)singlePhotoPickerController;
@end

@protocol SinglePersonPickerDelegate <NSObject>
-(void)singlePersonPickerDidCancel:(id)singlePersonPicker;
-(void)singlePersonPicker:(id)picker didSelectContactInfo:(id)info;
@optional
-(id)singlePersonPicker:(id)picker confirmationButtonTitleForContactInfo:(id)contactInfo;
-(id)singlePersonPicker:(id)picker confirmationTextForContactInfo:(id)contactInfo;
-(id)excludedJIDsForSinglePersonPicker:(id)singlePersonPicker;
-(void)singlePersonPickerDidAskToCreateNewGroup:(id)singlePersonPicker;
-(void)singlePersonPickerDidAskToInviteFriends:(id)singlePersonPicker;
@end

@protocol WAGroupInfoHeaderViewDelegate <NSObject>
-(void)groupInfoHeaderViewEditSubjectTapped:(id)tapped;
-(void)groupInfoHeaderViewEditPhotoTapped:(id)tapped;
@end

@protocol WAGroupSubjectEditControllerDelegate
-(void)subjectEditViewController:(id)controller didFinishWithText:(id)text;
@optional
-(void)subjectEditViewControllerDidCancel:(id)subjectEditViewController;
@end

@protocol WAInfoInputViewControllerDelegate
-(void)infoInputViewControllerDidFinish:(id)infoInputViewController;
-(void)infoInputViewControllerDidCancel:(id)infoInputViewController;
@end

@protocol WALocationDataSource <NSObject>
-(id)locationsWithCoordinate:(XXStruct_gLbvpC)coordinate;
-(id)locationDataAtIndex:(int)index;
-(unsigned)numberOfLocations;
@optional
-(id)mapTitle;
@end

@protocol WebImagePickerDelegate <NSObject>
-(void)webImagePickerDidCancel:(id)webImagePicker;
-(void)webImagePicker:(id)picker didSelectImage:(id)image;
@end

@protocol WAURLSessionDownloadTaskHandlerOS6Delegate <NSObject>
-(void)downloadTaskOS6:(id)a6 didCompleteWithError:(id)error;
-(void)downloadTaskOS6:(id)a6 didFinishDownloadingToURL:(id)url;
-(void)downloadTaskOS6:(id)a6 didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
@end

@protocol WALinkLabelDelegate <NSObject>
@optional
-(void)handleOpenURL:(id)url fromLinkLabel:(id)linkLabel;
@end

@protocol NSStreamDelegate <NSObject>
@optional
-(void)stream:(id)stream handleEvent:(unsigned)event;
@end

@protocol NSURLConnectionDelegate <NSObject>
@optional
-(void)connection:(id)connection didCancelAuthenticationChallenge:(id)challenge;
-(void)connection:(id)connection didReceiveAuthenticationChallenge:(id)challenge;
-(BOOL)connection:(id)connection canAuthenticateAgainstProtectionSpace:(id)space;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(BOOL)connectionShouldUseCredentialStorage:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
@end

@protocol WAMediaScrollViewDelegate <NSObject>
-(BOOL)isMediaScrollViewInFullScreenMode:(id)fullScreenMode;
-(void)mediaScrollViewWillBeginDragging:(id)mediaScrollView;
-(void)mediaScrollViewDidEndZooming:(id)mediaScrollView;
-(void)mediaScrollViewWillBeginZooming:(id)mediaScrollView;
-(void)mediaScrollViewWillBeginZoomBounceAnimation:(id)mediaScrollView;
-(void)mediaScrollViewDidZoom:(id)mediaScrollView;
-(void)mediaScrollViewDidScroll:(id)mediaScrollView;
-(void)mediaScrollViewDidEndScrubbing:(id)mediaScrollView;
-(void)mediaScrollViewDidBeginScrubbing:(id)mediaScrollView;
-(UIEdgeInsets)mediaScrollViewLayoutInset:(id)inset;
-(BOOL)mediaScrollViewCanShowErrorAlertView:(id)view;
-(void)mediaScrollViewWantsFullscreenTimerInvalidated:(id)invalidated;
-(void)mediaScrollViewPlaybackDidFinish:(id)mediaScrollViewPlayback;
-(void)mediaScrollViewPlaybackStateDidChange:(id)mediaScrollViewPlaybackState;
-(BOOL)mediaScrollView:(id)view handleEncounteredError:(id)error;
-(void)mediaScrollViewLoadStateDidChange:(id)mediaScrollViewLoadState;
-(void)mediaScrollViewDidFinishLongPress:(id)mediaScrollView;
-(void)mediaScrollViewDidReceiveSingleTap:(id)mediaScrollView;
@end

@protocol WAMediaGalleryControllerDelegate <NSObject>
-(void)mediaGalleryController:(id)controller didSelectMediaAtIndexPath:(id)indexPath;
@optional
-(void)mediaGalleryController:(id)controller interactiveDismissGestureDidChange:(id)interactiveDismissGesture;
-(void)mediaGalleryControllerDidExit:(id)mediaGalleryController;
@end

@protocol WAImageToImagePanPopGestureRecognizerDelegate <UIGestureRecognizerDelegate>
-(void)gestureRecognizerWillFinishManagingInteractivePopTransition:(id)gestureRecognizer;
-(void)gestureRecognizerDidBeginManagingInteractivePopTransition:(id)gestureRecognizer;
-(void)gestureRecognizerWillBeginManagingInteractivePopTransition:(id)gestureRecognizer;
@end

@protocol WAMediaPlayerTransportControlViewDelegate <NSObject>
-(void)mediaPlayerTransportControlViewDidChangeCurrentTime:(id)mediaPlayerTransportControlView;
-(void)mediaPlayerTransportControlViewDidEndScrubbing:(id)mediaPlayerTransportControlView;
-(void)mediaPlayerTransportControlViewDidBeginScrubbing:(id)mediaPlayerTransportControlView;
@end

@protocol WAMediaGallery <NSObject>
@property(retain, nonatomic) NSIndexPath* indexPathOfMessageToScrollToWhenAppearing;
@property(assign, nonatomic) __weak id<WAMediaGalleryControllerDelegate> delegate;
@property(retain, nonatomic) WAMediaManager* mediaManager;
-(void)presentMediaAtIndexPath:(id)indexPath;
@end

@protocol WAThumbsTableViewCellDelegate <NSObject>
-(void)tableViewCell:(id)cell tappedImageAtIndex:(int)index;
@end

@protocol MKAnnotation <NSObject>
@optional
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy, nonatomic) NSString* title;
@required
@property(readonly, assign, nonatomic) XXStruct_gLbvpC coordinate;
@optional
-(void)setCoordinate:(XXStruct_gLbvpC)coordinate;
@end

@protocol WAContactEditViewControllerDelegate <NSObject>
-(void)contactEditControllerDidSave:(id)contactEditController;
-(void)contactEditControllerDidCancel:(id)contactEditController;
@end

@protocol WATableViewCellPreviewingDelegate <NSObject>
-(void)previewingContext:(id)context inTableViewCell:(id)tableViewCell commitViewController:(id)controller;
-(id)previewingContext:(id)context viewControllerForData:(id)data inTableViewCell:(id)tableViewCell;
@end

@protocol UISearchControllerDelegate <NSObject>
@optional
-(void)presentSearchController:(id)controller;
-(void)didDismissSearchController:(id)controller;
-(void)willDismissSearchController:(id)controller;
-(void)didPresentSearchController:(id)controller;
-(void)willPresentSearchController:(id)controller;
@end

@protocol UISearchResultsUpdating <NSObject>
-(void)updateSearchResultsForSearchController:(id)searchController;
@end

@protocol WAOutlineRoundButtonDelegate <NSObject>
-(id)outlineRoundButtonBackgroundImageView:(id)view;
@end

@protocol WAVoiceCallRatingViewDelegate <NSObject>
-(void)voiceCallRatingView:(id)view didFinishWithAction:(unsigned)action;
@end

@protocol WAImageAttachmentContainerViewDelegate <NSObject>
-(void)imageAttachmentContainerViewDidDeleteImage:(id)imageAttachmentContainerView;
-(void)imageAttachmentContainerViewDidRequestAddImage:(id)imageAttachmentContainerView;
@end

@protocol UIImagePickerControllerDelegate <NSObject>
@optional
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingImage:(id)image editingInfo:(id)info;
@end

@protocol WAFAQBrowserViewControllerDelegate <NSObject>
-(void)faqBrowserViewControllerShouldProceedToEmail:(id)faqBrowserViewController;
@end

@protocol XMPPConnectionHandler <NSObject>
-(void)connectionDidReceiveOfflineCompleteMarker:(id)connection;
-(BOOL)handleLoginResponseStanza:(id)stanza onConnection:(id)connection;
-(void)xmppConnection:(id)connection initialConfigurationAsync:(id)async;
-(BOOL)handleNotification:(id)notification onConnection:(id)connection;
@end

@protocol WACameraControllerDelegate <NSObject>
-(void)cameraControllerDidCancelVideoRecording:(id)cameraController;
-(void)cameraController:(id)controller videoRecordingDidFinishRecordingToFile:(id)videoRecording;
-(void)cameraController:(id)controller videoRecordingDidFailWithError:(id)videoRecording;
-(void)cameraControllerDidReceiveRuntimeErrorNotification:(id)cameraController;
-(void)cameraController:(id)controller didDetectQRCode:(id)code;
-(void)cameraControllerDidChangeFlashActiveState:(id)cameraController;
-(void)cameraControllerDidUpdateFaceObjects:(id)cameraController;
-(void)cameraControllerDidChangePreviewImageSize:(id)cameraController;
-(void)cameraControllerDidResetPointOfInterest:(id)cameraController;
-(void)cameraControllerSessionDidStopRunning:(id)cameraControllerSession;
-(void)cameraControllerSessionDidBeginRunning:(id)cameraControllerSession;
@end

@protocol WACameraButtonViewDelegate <NSObject>
-(void)cameraButtonViewDidChangeCancelsOnRelease:(id)cameraButtonView;
-(void)cameraButtonViewDidCancelLongPress:(id)cameraButtonView;
-(void)cameraButtonViewDidEndLongPress:(id)cameraButtonView;
-(void)cameraButtonViewDidBeginLongPress:(id)cameraButtonView;
-(BOOL)cameraButtonViewShouldAllowLongPress:(id)cameraButtonView;
-(void)cameraButtonViewDidReceiveTap:(id)cameraButtonView;
-(void)cameraButtonViewDidReceiveTouch:(id)cameraButtonView;
@end

@protocol WACameraRollStripViewDelegate <NSObject>
-(void)cameraRollStripViewDidChangePresentationState:(id)cameraRollStripView;
-(void)cameraRollStripView:(id)view didSelectMediaPickerAsset:(id)asset;
@end

@protocol WANavigationControllerPopDeferring <NSObject>
-(void)navigationControllerDidDeferPop:(id)navigationController;
@end

@protocol WAEditableImageRotationToolDelegate <NSObject>
-(void)editableImageRotationToolDidEndChangingAngle:(id)editableImageRotationTool;
-(void)editableImageRotationToolDidChangeAngle:(id)editableImageRotationTool;
-(void)editableImageRotationToolDidBeginChangingAngle:(id)editableImageRotationTool;
@end

@protocol WAImageCropToolViewDelegate <NSObject>
-(void)imageCropToolViewCropRectDidFinishChanging:(id)imageCropToolViewCropRect;
-(void)imageCropToolViewCropRectDidChange:(id)imageCropToolViewCropRect;
-(void)imageCropToolViewCropRectWillBeginChanging:(id)imageCropToolViewCropRect;
@end

@protocol WAChatBarDelegate <NSObject>
-(void)chatBarWantsToDismissWebURLPreview:(id)dismissWebURLPreview;
-(void)chatBarWantsToScrollToTop:(id)top;
-(void)chatBarUserDidFocusChatBar:(id)chatBarUser;
-(void)chatBarDidMoveToWindow:(id)chatBar;
-(void)chatBar:(id)bar willMoveToWindow:(id)window;
-(void)chatBar:(id)bar didCancelPTTRecordingByUser:(BOOL)user;
-(void)chatBarDidEndPTTRecording:(id)chatBar;
-(double)chatBarWillEndPTTRecording:(id)chatBar;
-(void)chatBarDidBeginPTTRecording:(id)chatBar;
-(BOOL)chatBarShouldBeginPTTRecording:(id)chatBar;
-(void)chatBarDidChangeHeight:(id)chatBar;
-(void)chatBarUserDidSubmitText:(id)chatBarUser;
-(void)chatBarWantsToPresentCamera:(id)presentCamera;
-(void)chatBarWantsToAttachMedia:(id)attachMedia;
-(void)chatBar:(id)bar didPasteImage:(id)image;
-(void)chatBarDidChangeText:(id)chatBar;
-(void)chatBarDidEndEditing:(id)chatBar;
-(void)chatBarWillEndEditing:(id)chatBar;
-(void)chatBarDidBeginEditing:(id)chatBar;
-(BOOL)chatBarShouldBeginEditing:(id)chatBar;
-(float)chatBarMaximumHeight:(id)height;
-(unsigned)chatBarVisibleConnectionStatus:(id)status;
@end

@protocol WAWebPageFromTextLoaderDelegate <NSObject>
-(void)webPageFromTextLoaderDidUpdateMetadata:(id)webPageFromTextLoader;
@end

@protocol WAChatBarManager <NSObject>
@property(readonly, assign, nonatomic) UIButton* pttButton;
@property(readonly, assign, nonatomic) UIButton* attachMediaButton;
@property(assign, nonatomic, getter=isKeyboardPresentationDisabled) BOOL keyboardPresentationDisabled;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, assign, nonatomic) BOOL shouldAutorotate;
@property(assign, nonatomic) BOOL interactiveKeyboardDraggingEnabled;
@property(assign, nonatomic) float chatBarAlpha;
@property(assign, nonatomic) BOOL scrollToBottomOnShowKeyboardOnAppear;
@property(assign, nonatomic) BOOL showKeyboardOnAppear;
@property(readonly, assign, nonatomic) BOOL interactiveKeyboardDraggingInProgress;
@property(copy, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) float bottomInset;
@property(readonly, assign, nonatomic) float contentViewHeight;
@property(readonly, assign, nonatomic) UIView* contentView;
@property(assign, nonatomic) __weak UIViewController<WAChatBarManagerDelegate>* delegate;
-(void)cancelPTTRecording;
-(void)setPTTRecordingTime:(double)time;
-(void)setNeedsUpdateButtons;
-(void)showPopupMenuForMessageCell:(id)messageCell;
-(void)endDraggingChatBarWithTranslation:(float)translation;
-(void)updateChatBarDraggingWithTranslation:(float)translation;
-(BOOL)beginDraggingChatBar;
-(void)ensureKeyboardHidden;
-(void)delegateWillDisappearWithoutInteraction;
-(void)didChangeInterfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation;
-(void)willChangeInterfaceOrientation;
-(void)hideKeyboard;
-(BOOL)isKeyboardVisible;
-(void)makeKeyboardWindowKeyWindow;
-(void)makeMainApplicationWindowKeyWindow;
-(void)restoreKeyWindow;
@end

@protocol WAAutoScrollingLabelDelegate <NSObject>
-(void)autoscrollingLabelDidFinishScrolling:(id)autoscrollingLabel;
@end

@protocol WAMediaPickerAssetPresenting <NSObject>
@property(assign, nonatomic) BOOL showsCheckmarkWhenSelected;
-(void)configureWithMediaPickerAsset:(id)mediaPickerAsset;
@end

@protocol ImageSearchControllerDelegate <NSObject>
-(void)imageSearchControllerDidCancel:(id)imageSearchController;
-(void)imageSearchController:(id)controller didSelectImageWithURL:(id)url;
@end

@protocol WAPhotoMoveAndScaleViewControllerDelegate <NSObject>
-(void)photoMoveAndScaleViewController:(id)controller didFinishWithImage:(id)image;
@end

@protocol WAMapViewDelegate <NSObject>
@optional
-(void)mapView:(id)view didSelectLocation:(id)location;
-(void)mapView:(id)view didSelectPlacemark:(id)placemark location:(id)location;
@end

@protocol UIAlertViewDelegate <NSObject>
@optional
-(BOOL)alertViewShouldEnableFirstOtherButton:(id)alertView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view willDismissWithButtonIndex:(int)buttonIndex;
-(void)didPresentAlertView:(id)view;
-(void)willPresentAlertView:(id)view;
-(void)alertViewCancel:(id)cancel;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
@end

@protocol FeedbackInputControllerDelegate <NSObject>
-(void)feedbackInputControllerDidCancel:(id)feedbackInputController;
-(void)feedbackInputController:(id)controller didFinishWithFeedbackText:(id)feedbackText;
@end

@protocol DeleteConfirmationControllerDelegate <NSObject>
-(void)deleteConfirmationControllerDidCancel:(id)deleteConfirmationController;
-(void)deleteConfirmationControllerDidFinish:(id)deleteConfirmationController;
@end

@protocol WASearchResultsControllerDelegate <NSObject>
-(void)searchResultsControllerDidChangeContent:(id)searchResultsController;
-(void)searchResultsControllerDidUpdateContent:(id)searchResultsController;
-(void)searchResultsController:(id)controller didDeleteSections:(id)sections;
-(void)searchResultsController:(id)controller didInsertSections:(id)sections;
-(void)searchResultsController:(id)controller didDeleteRowsAtIndexPaths:(id)indexPaths;
-(void)searchResultsController:(id)controller didInsertRowsAtIndexPaths:(id)indexPaths;
-(void)searchResultsControllerWillUpdateContent:(id)searchResultsController;
-(BOOL)searchResultsControllerShouldUpdateContent:(id)searchResultsController;
@end

@protocol WAChatComposerDelegate <NSObject>
-(void)chatComposerDidCancel:(id)chatComposer;
-(void)chatComposer:(id)composer didFinishWithContacts:(id)contacts subject:(id)subject picture:(id)picture;
-(void)chatComposer:(id)composer didFinishWithContactInfo:(id)contactInfo;
@optional
-(void)chatComposerDidAskToInviteFriends:(id)chatComposer;
@end

@protocol WAForwardPickerViewControllerDelegate <NSObject>
-(BOOL)forwardPicker:(id)picker shouldProceedWithContactInfo:(id)contactInfo;
-(void)forwardPickerDidCancel:(id)forwardPicker;
-(void)forwardPicker:(id)picker didSelectContactInfo:(id)info;
@optional
-(id)forwardPicker:(id)picker confirmationButtonTitleForContactInfo:(id)contactInfo;
-(id)forwardPicker:(id)picker confirmationTextForContactInfo:(id)contactInfo;
@end

@protocol WAEmptyChatListViewDelegate <NSObject>
-(void)emptyChatListViewWillInviteContacts:(id)emptyChatListView;
@end

@protocol WAAllChatsArchivedViewDelegate <NSObject>
-(void)allChatsArchivedViewDidChooseViewArchivedChats:(id)allChatsArchivedView;
@end

@protocol UIViewControllerTransitioningDelegate <NSObject>
@optional
-(id)presentationControllerForPresentedViewController:(id)presentedViewController presentingViewController:(id)controller sourceViewController:(id)controller3;
-(id)interactionControllerForDismissal:(id)dismissal;
-(id)interactionControllerForPresentation:(id)presentation;
-(id)animationControllerForDismissedController:(id)dismissedController;
-(id)animationControllerForPresentedController:(id)presentedController presentingController:(id)controller sourceController:(id)controller3;
@end

@protocol UIVideoEditorControllerDelegate <NSObject>
@optional
-(void)videoEditorControllerDidCancel:(id)videoEditorController;
-(void)videoEditorController:(id)controller didFailWithError:(id)error;
-(void)videoEditorController:(id)controller didSaveEditedVideoToPath:(id)path;
@end

@protocol WAChatListSearchBarDelegate <UISearchBarDelegate>
-(void)chatListSearchBarWillShowArchivedChats:(id)chatListSearchBar;
@end

@protocol WAChatSessionCellDelegate <NSObject>
-(void)chatSessionCellMarkAsReadOrUnread:(id)unread;
-(void)chatSessionCellPerformArchiveAction:(id)action;
-(void)chatSessionCellShowMoreOptions:(id)options;
-(void)chatSessionCellDidEndChangingSideButtons:(id)chatSessionCell buttonsVisible:(BOOL)visible;
-(void)chatSessionCellDidStartChangingSideButtons:(id)chatSessionCell;
@end

@protocol WARecipientsViewControllerDelegate <NSObject>
-(void)recipientsControllerDidCancel:(id)recipientsController;
-(void)recipientsController:(id)controller didFinishWithContacts:(id)contacts;
@end

@protocol ProblemInputControllerDelegate <NSObject>
-(void)probleminputControllerDidCancel:(id)probleminputController;
-(void)problemInputController:(id)controller didFinishWithText:(id)text attachment:(id)attachment imageAttachments:(id)attachments;
@end

@protocol WAURLSessionDownloadTaskHandler <NSObject>
@property(readonly, assign, nonatomic) NSURLResponse* response;
@property(readonly, assign, nonatomic) NSURLRequest* currentRequest;
@property(readonly, assign, nonatomic) long long countOfBytesReceived;
@property(readonly, assign, nonatomic) long long countOfBytesExpectedToReceive;
@property(copy, nonatomic) WAURLTaskData* wa_taskData;
@property(readonly, assign, nonatomic) int state;
-(void)cancelByProducingResumeData:(id)data;
-(void)suspend;
-(void)resume;
@end

@protocol WAConversationHeaderViewDelegate <NSObject>
@optional
-(void)headerViewTapped:(id)tapped;
-(void)callButtonTapped:(id)tapped;
-(void)profilePictureTapped:(id)tapped;
@end

@protocol ShareLocationControllerDelegate <NSObject>
-(void)shareLocationControllerDidCancel:(id)shareLocationController;
-(void)shareLocationControllerDidSelectWAPlace:(id)shareLocationController;
@end

@protocol WAChatBarManagerDelegate <NSObject>
-(void)chatBarManager:(id)manager didCancelPTTRecordingByUser:(BOOL)user;
-(void)chatBarManagerDidEndPTTRecording:(id)chatBarManager;
-(double)chatBarManagerWillEndPTTRecording:(id)chatBarManager;
-(void)chatBarManagerDidBeginPTTRecording:(id)chatBarManager;
-(BOOL)chatBarManagerShouldBeginPTTRecording:(id)chatBarManager;
-(void)chatBarManagerWantsToPresentCamera:(id)presentCamera;
-(void)chatBarManagerWantsToAttachMedia:(id)attachMedia;
-(void)chatBarManager:(id)manager didPasteImage:(id)image;
-(void)chatBarManager:(id)manager didEndDraggingChatBarWithAdditionalTranslation:(float)additionalTranslation finalBottomInset:(float)inset;
-(void)chatBarManagerWillBeginDraggingChatBar:(id)chatBarManager;
-(void)chatBarManagerWantsToScrollToTop:(id)top;
-(BOOL)chatBarManagerDelegateIsPreviewingContent:(id)content;
-(BOOL)chatBarManagerDelegateIsDisappearing:(id)disappearing;
-(BOOL)chatBarManagerDelegateIsAppearing:(id)appearing;
-(void)chatBarManager:(id)manager needsAdjustBottomInset:(float)inset withScrolling:(BOOL)scrolling;
-(void)chatBarManager:(id)manager userDidSubmitText:(id)user metadata:(id)metadata completion:(id)completion;
-(void)chatBarManagerDidChangeText:(id)chatBarManager;
-(float)chatBarManagerMaximumHeight:(id)height;
-(unsigned)chatBarManagerVisibleConnectionStatus:(id)status;
@end

@protocol WAPttRecorderDelegate <NSObject>
-(void)pttRecorderWasInterrupted:(id)interrupted;
-(void)pttRecorder:(id)recorder didFinishRecordingSuccessfully:(BOOL)successfully filePath:(id)path;
-(void)pttRecorderDidFailToRecord:(id)pttRecorder;
-(void)pttRecorderDidStartRecording:(id)pttRecorder;
-(void)pttRecordWillStartRecording:(id)pttRecord;
@end

@protocol WAMultiSendMediaPickerControllerDelegate <NSObject>
-(void)multiSendMediaPickerController:(id)controller didSelectVideoAtURL:(id)url referenceURL:(id)url3 caption:(id)caption;
-(void)multiSendMediaPickerControllerDidRequestRetakePhoto:(id)multiSendMediaPickerController;
-(void)multiSendMediaPickerControllerDidCancel:(id)multiSendMediaPickerController;
-(void)multiSendMediaPickerController:(id)controller didSaveVideoToURL:(id)url caption:(id)caption;
-(void)multiSendMediaPickerController:(id)controller didSelectItems:(id)items;
@end

@protocol WAShareContactViewControllerDelegate <NSObject>
-(void)shareContactViewControllerDidCancel:(id)shareContactViewController;
-(void)shareContactViewController:(id)controller didFinishWithVCard:(id)vcard;
@end

@protocol MPMediaPickerControllerDelegate <NSObject>
@optional
-(void)mediaPickerDidCancel:(id)mediaPicker;
-(void)mediaPicker:(id)picker didPickMediaItems:(id)items;
@end

@protocol WAMultiShotCameraControllerDelegate <NSObject>
-(void)multiShotCameraController:(id)controller didSelectVideoAtURL:(id)url referenceURL:(id)url3 caption:(id)caption;
-(void)multiShotCameraControllerDidCancel:(id)multiShotCameraController;
-(void)multiShotCameraController:(id)controller didCaptureItems:(id)items;
@end

@protocol WAMediaProgressDelegate <NSObject>
-(void)setProgress:(float)progress forMessage:(id)message;
@end

@protocol WAMessageTextViewDelegate <NSObject>
-(void)messageTextView:(id)view willShowMoreOptionsForTextBlock:(id)textBlock completionHandler:(id)handler;
-(void)messageTextView:(id)view didSelectTextBlock:(id)block;
@end

@protocol WACaptionBarDelegate <NSObject>
-(void)captionBarDidChangeText:(id)captionBar;
-(void)captionBarDidFinishEditing:(id)captionBar;
-(void)captionBarDidHideKeyboard:(id)captionBar;
-(void)captionBarWillHideKeyboard:(id)captionBar;
-(void)captionBarWillShowKeyboard:(id)captionBar;
@end

@protocol AVCaptureVideoDataOutputSampleBufferDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didDropSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol AVCaptureMetadataOutputObjectsDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didOutputMetadataObjects:(id)objects fromConnection:(id)connection;
@end

@protocol AVCaptureAudioDataOutputSampleBufferDelegate <NSObject>
@optional
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
@end

@protocol WACameraPreviewViewDelegate <NSObject>
-(void)cameraPreviewViewDidChangeImageSize:(id)cameraPreviewView;
@end

@protocol WAAppearanceAnimating <NSObject>
-(void)didAnimateDisappearance;
-(void)animateDisappearance;
-(void)willAnimateDisappearance;
-(void)didAnimateAppearance;
-(void)animateAppearance;
-(void)willAnimateAppearance;
@end

@protocol WAInputTextViewDelegate <UITextViewDelegate>
-(void)textViewDictationDidEnd:(id)textViewDictation;
-(void)textViewDidPasteImage:(id)textView;
-(void)textView:(id)view needsHeightChangedTo:(float)to;
-(float)textViewMaximumHeight:(id)height;
@end

@protocol WAWebURLPreviewViewDelegate <NSObject>
-(void)webURLPreviewViewDidDismiss:(id)webURLPreviewView;
@end

@protocol NSFastEnumeration
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
@end

@protocol WANewGroupViewControllerDelegate <NSObject>
-(void)newGroupViewControllerDidCancel:(id)newGroupViewController;
-(void)newGroupViewController:(id)controller didFinishWithSubject:(id)subject picture:(id)picture;
@end

@protocol WAMediaPickerControllerDelegate <NSObject>
-(void)mediaPickerController:(id)controller didFinishWithSelectedItems:(id)selectedItems;
-(void)mediaPickerControllerDidFinishPresenting:(id)mediaPickerController;
@end

@protocol WAPageableItemBrowserViewDelegate <UIScrollViewDelegate>
-(id)pageableItemBrowserViewContainingViewController:(id)controller;
-(void)pageableItemBrowserView:(id)view didUpdateThumbnailOfItemAtIndex:(int)index;
-(BOOL)pageableItemBrowserViewKeyboardIsShown:(id)shown;
-(void)pageableItemBrowserViewDidScroll:(id)pageableItemBrowserView;
-(void)pageableItemBrowserViewDidEndFocusedTask:(id)pageableItemBrowserView;
-(void)pageableItemBrowserViewWillBeginFocusedTask:(id)pageableItemBrowserView;
-(void)pageableItemBrowserView:(id)view didFinishRotatingItemAtIndex:(int)index;
-(void)pageableItemBrowserView:(id)view willAnimateRotationOfItemAtIndex:(int)index angle:(float)angle;
-(void)pageableItemBrowserView:(id)view didEndEditingAnimationForItemAtIndex:(int)index;
-(void)pageableItemBrowserView:(id)view willBeginEditingAnimationForItemAtIndex:(int)index;
-(void)pageableItemBrowserView:(id)view wantsToDeleteItemAtIndex:(int)index;
-(void)pageableItemBrowserViewCurrentIndexDidChange:(id)pageableItemBrowserViewCurrentIndex;
-(int)pageableItemCount:(id)count;
-(id)pageableItemBrowserView:(id)view itemAtIndex:(int)index;
@end

@protocol WAMultiSendThumbnailBrowserViewDelegate <NSObject>
-(void)multiSendThumbnailBrowserView:(id)view willChangeFrame:(CGRect)frame;
-(void)multiSendThumbnailBrowserViewDidRequestItemSort:(id)multiSendThumbnailBrowserView;
-(void)multiSendThumbnailBrowserViewDidChangeEditingMode:(id)multiSendThumbnailBrowserView;
-(void)multiSendThumbnailBrowserView:(id)view didMoveItemAtIndex:(int)index toIndex:(int)index3;
-(void)multiSendThumbnailBrowserView:(id)view didRequestSelectionOfItemAtIndex:(int)index;
-(void)multiSendThumbnailBrowserView:(id)view didRequestRemovalOfItemAtIndex:(int)index;
-(void)multiSendThumbnailBrowserViewDidRequestSend:(id)multiSendThumbnailBrowserView;
-(void)multiSendThumbnailBrowserViewDidRequestAddItem:(id)multiSendThumbnailBrowserView;
-(BOOL)areMultiSendMediaItemsSorted;
-(id)indicesOfMultiSendMediaItemsSortedByDate;
-(id)multiSendMediaItemAtIndex:(int)index;
-(int)multiSendThumbnailBrowserViewItemCount;
@end

@protocol WAMultiSendTitleViewDelegate <NSObject>
-(void)multiSendTitleViewDidChangeCropping:(id)multiSendTitleView;
-(void)multiSendTitleView:(id)view willChangeCroppingWithCompletionHandler:(id)completionHandler;
-(void)multiSendTitleViewWillRotateCurrentItem:(id)multiSendTitleView;
-(void)multiSendTitleViewWillDeleteCurrentItem:(id)multiSendTitleView;
@end

@protocol WAPageableItemViewDelegate <NSObject>
-(id)pageableItemViewContainingViewController:(id)controller;
-(void)pageableItemViewDidUpdateThumbnail:(id)pageableItemView;
-(BOOL)pageableItemViewKeyboardIsShown:(id)shown;
-(void)pageableItemViewDidFinishRotationAnimation:(id)pageableItemView;
-(void)pageableItemView:(id)view willAnimateRotationByAngle:(float)angle;
-(void)pageableItemViewDidEndEditingAnimation:(id)pageableItemView;
-(void)pageableItemViewWillBeginEditingAnimation:(id)pageableItemView;
-(void)pageableItemViewDidEndFocusedTask:(id)pageableItemView;
-(void)pageableItemViewWillBeginFocusedTask:(id)pageableItemView;
@end

@protocol GCDAsyncSocketDelegate
@optional
-(void)socket:(id)socket didReceiveTrust:(SecTrust*)trust completionHandler:(id)handler;
-(void)socketDidSecure:(id)socket;
-(void)socketDidDisconnect:(id)socket withError:(id)error;
-(void)socketDidCloseReadStream:(id)socket;
-(double)socket:(id)socket shouldTimeoutWriteWithTag:(long)tag elapsed:(double)elapsed bytesDone:(unsigned)done;
-(double)socket:(id)socket shouldTimeoutReadWithTag:(long)tag elapsed:(double)elapsed bytesDone:(unsigned)done;
-(void)socket:(id)socket didWritePartialDataOfLength:(unsigned)length tag:(long)tag;
-(void)socket:(id)socket didWriteDataWithTag:(long)tag;
-(void)socket:(id)socket didReadPartialDataOfLength:(unsigned)length tag:(long)tag;
-(void)socket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)socket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)socket:(id)socket didAcceptNewSocket:(id)socket2;
-(id)newSocketQueueForConnectionFromAddress:(id)address onSocket:(id)socket;
@end

@protocol WAMultiSendThumbnailBrowserItemViewDelegate <NSObject>
-(void)multiSendThumbnailBrowserItemViewCenterDidChange:(id)multiSendThumbnailBrowserItemViewCenter;
-(void)multiSendThumbnailBrowserItemViewDidEndDragging:(id)multiSendThumbnailBrowserItemView;
-(void)multiSendThumbnailBrowserItemViewDidBeginDragging:(id)multiSendThumbnailBrowserItemView;
-(void)multiSendThumbnailBrowserItemViewWantsToEnterEditMode:(id)enterEditMode;
-(void)multiSendThumbnailBrowserItemViewWasTapped:(id)tapped;
@end

@protocol UICollectionViewDataSource <NSObject>
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
@optional
-(void)collectionView:(id)view moveItemAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(BOOL)collectionView:(id)view canMoveItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
@end

@protocol PHPhotoLibraryChangeObserver <NSObject>
-(void)photoLibraryDidChange:(id)photoLibrary;
@end

@protocol WAMediaPickerAlbumTableViewCellDelegate <NSObject>
-(BOOL)mediaPickerAlbumTableViewCell:(id)cell didReceiveTapAtIndex:(int)index;
@end

@protocol WAMediaPickerAlbumControllerDelegate <NSObject>
-(void)mediaPickerAlbumController:(id)controller didFinishLoadingAlbumWithOutcome:(BOOL)outcome;
-(void)mediaPickerAlbumControllerWillBeginLoadingAlbum:(id)mediaPickerAlbumController;
@end

@protocol UIPickerViewDataSource <NSObject>
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
@end

@protocol UIPickerViewDelegate <NSObject>
@optional
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(id)pickerView:(id)view attributedTitleForRow:(int)row forComponent:(int)component;
-(id)pickerView:(id)view titleForRow:(int)row forComponent:(int)component;
-(float)pickerView:(id)view rowHeightForComponent:(int)component;
-(float)pickerView:(id)view widthForComponent:(int)component;
@end

@protocol WAMediaUploadOperationDelegate <NSObject>
-(void)mediaUploadOperation:(id)operation didFailWithError:(id)error;
-(void)mediaUploadOperationDidFinish:(id)mediaUploadOperation;
@optional
-(void)mediaUploadOperation:(id)operation uploadProgressChanged:(float)changed;
@end

@protocol WAVCardSerializing <NSObject>
@property(assign, nonatomic) BOOL sharingEnabled;
@property(readonly, copy, nonatomic) NSString* stringForVCard;
@end

@protocol UICollectionViewDelegate <UIScrollViewDelegate>
@optional
-(CGPoint)collectionView:(id)view targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset;
-(id)collectionView:(id)view targetIndexPathForMoveFromItemAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(id)indexPathForPreferredFocusedViewInCollectionView:(id)collectionView;
-(void)collectionView:(id)view didUpdateFocusInContext:(id)context withAnimationCoordinator:(id)animationCoordinator;
-(BOOL)collectionView:(id)view shouldUpdateFocusInContext:(id)context;
-(BOOL)collectionView:(id)view canFocusItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view transitionLayoutForOldLayout:(id)oldLayout newLayout:(id)layout;
-(void)collectionView:(id)view performAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view canPerformAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view shouldShowMenuForItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingSupplementaryView:(id)view2 forElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view didEndDisplayingCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplaySupplementaryView:(id)view2 forElementKind:(id)elementKind atIndexPath:(id)indexPath;
-(void)collectionView:(id)view willDisplayCell:(id)cell forItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didDeselectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldDeselectItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldSelectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didUnhighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didHighlightItemAtIndexPath:(id)indexPath;
-(BOOL)collectionView:(id)view shouldHighlightItemAtIndexPath:(id)indexPath;
@end

@protocol UICollectionViewDelegateFlowLayout <UICollectionViewDelegate>
@optional
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForHeaderInSection:(int)section;
-(float)collectionView:(id)view layout:(id)layout minimumInteritemSpacingForSectionAtIndex:(int)index;
-(float)collectionView:(id)view layout:(id)layout minimumLineSpacingForSectionAtIndex:(int)index;
-(UIEdgeInsets)collectionView:(id)view layout:(id)layout insetForSectionAtIndex:(int)index;
-(CGSize)collectionView:(id)view layout:(id)layout sizeForItemAtIndexPath:(id)indexPath;
@end

@protocol WAMediaGalleryCellMenuDelegate <NSObject>
-(void)copyMessageInCell:(id)cell;
-(void)markMessageAsStarredInCell:(id)cell;
-(BOOL)canPerformAction:(SEL)action forMediaGalleryCell:(id)mediaGalleryCell withSender:(id)sender;
@end

@protocol UIActivityItemSource <NSObject>
-(id)activityViewController:(id)controller itemForActivityType:(id)activityType;
-(id)activityViewControllerPlaceholderItem:(id)item;
@optional
-(id)activityViewController:(id)controller thumbnailImageForActivityType:(id)activityType suggestedSize:(CGSize)size;
-(id)activityViewController:(id)controller dataTypeIdentifierForActivityType:(id)activityType;
-(id)activityViewController:(id)controller subjectForActivityType:(id)activityType;
@end

@protocol UILayoutSupport <NSObject>
@property(readonly, assign) NSLayoutDimension* heightAnchor;
@property(readonly, assign) NSLayoutYAxisAnchor* bottomAnchor;
@property(readonly, assign) NSLayoutYAxisAnchor* topAnchor;
@property(readonly, assign, nonatomic) float length;
@end

@protocol WAViewControllerExtensions <NSObject>
@property(retain, nonatomic) NSArray* defaultPreviewActionItems;
@property(readonly, assign, nonatomic) unsigned visibleConnectionStatus;
-(void)dismissAllDropDownAlertViewsWithAnimation:(BOOL)animation;
-(void)dismissDropDownAlertView:(id)view animated:(BOOL)animated;
-(void)showDropDownAlertView:(id)view animated:(BOOL)animated;
-(BOOL)wa_is3DTouchAvailable;
-(BOOL)wa_isBeingPreviewed;
-(void)visibleConnectionStatusDidChange;
-(void)performAfterTransitionEnds:(id)ends;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)wa_applicationDidBecomeActive;
-(void)wa_applicationWillResignActive;
-(void)wa_applicationDidEnterBackground;
-(void)wa_applicationWillEnterForeground;
-(id)uniqueIdentifier;
@end

@protocol WAViewControllerPrivateExtensions <WAViewControllerExtensions>
@property(readonly, assign, nonatomic) _WAViewControllerHelper* wa_helper;
@end

@protocol WADropDownAlertViewDelegate <NSObject>
-(void)dropDownAlertViewDidDismiss:(id)dropDownAlertView;
@end

@protocol UIViewControllerInteractiveTransitioning <NSObject>
-(void)startInteractiveTransition:(id)transition;
@optional
-(int)completionCurve;
-(float)completionSpeed;
@end

@protocol WAPercentDrivenInteractiveTransitioning <UIViewControllerInteractiveTransitioning>
@property(copy, nonatomic) id updateHandler;
@property(assign, nonatomic) float completionSpeed;
@property(readonly, assign, nonatomic) float percentComplete;
@property(readonly, assign, nonatomic) float duration;
-(void)finishInteractiveTransition;
-(void)cancelInteractiveTransition;
@end

@protocol _WACameraRollStripScrollViewDelegate <UIScrollViewDelegate>
-(void)cameraRollStripScrollView:(id)view didDeselectItemAtIndex:(int)index;
-(void)cameraRollStripScrollView:(id)view didSelectItemAtIndex:(int)index;
-(void)cameraRollStripScrollView:(id)view didUnhighlightItemAtIndex:(int)index;
-(void)cameraRollStripScrollView:(id)view didHighlightItemAtIndex:(int)index;
-(void)cameraRollStripScrollView:(id)view willDisplayCell:(id)cell atIndex:(int)index;
-(int)numberOfItemsInCameraRollStripScrollView:(id)cameraRollStripScrollView;
@end

@protocol WAImageAttachmentViewDelegate <NSObject>
-(void)imageAttachmentViewDidRequestAddImage:(id)imageAttachmentView;
-(void)imageAttachmentViewDidRequestRemoveImage:(id)imageAttachmentView;
@end

@protocol WADateBubbleViewDelegate <NSObject>
-(id)dateBubbleBlurredImage:(id)image;
-(id)dateBubbleBackgroundImageView:(id)view;
@end

@protocol EKEventEditViewDelegate <NSObject>
-(void)eventEditViewController:(id)controller didCompleteWithAction:(int)action;
@optional
-(id)eventEditViewControllerDefaultCalendarForNewEvents:(id)newEvents;
@end

@protocol WAVCardMessagePreviewActionDelegate <NSObject>
-(void)addVCardContactToExistingContact:(id)existingContact withPreviewAction:(id)previewAction;
-(void)saveVCardContactAsNewContact:(id)contact withPreviewAction:(id)previewAction;
-(void)messageVCardContact:(id)contact withPreviewAction:(id)previewAction;
@end

@protocol WAPttPlayerDelegate <NSObject>
-(void)pttPlayerSuggestsReboot:(id)reboot;
@end

@protocol TextBlockDelegate <NSObject>
-(void)textBlockWillAddToContacts:(id)textBlock;
-(void)textBlockWillAddToExistingContact:(id)textBlock;
-(void)textBlock:(id)block willAddNewPerson:(void*)person;
-(void)textBlockWillCreateEvent:(id)textBlock;
-(void)textBlock:(id)block willCallPhoneURL:(id)url;
-(void)textBlock:(id)block willOpenURL:(id)url;
@end

@protocol WAMessageCellDelegate <NSObject>
-(void)messageCell:(id)cell willShowMoreOptionsForTextBlock:(id)textBlock completionHandler:(id)handler;
-(void)messageCell:(id)cell didSelectTextBlock:(id)block;
-(void)markAsStarredMessageInCell:(id)cell;
-(void)replyMessageSenderFromCell:(id)cell;
-(void)addMessageSenderInCell:(id)cell;
-(void)deleteMessagesInCell:(id)cell;
-(void)forwardMessagesInCell:(id)cell;
-(void)messageCell:(id)cell didRequestOpenPlaceURL:(id)url;
-(void)handleDoubleTapInCell:(id)cell;
-(void)handleSingleTapInCell:(id)cell;
-(void)invertSelectionForCell:(id)cell;
-(void)cancelMediaUploadOrDownloadInCell:(id)cell;
-(void)viewMediaInCell:(id)cell;
-(void)downloadMediaInCell:(id)cell;
-(void)alertButtonTappedInCell:(id)cell;
@optional
-(void)messageCell:(id)cell swipeGestureDidChange:(id)swipeGesture;
-(void)inviteVCardPersonFromCell:(id)cell;
-(void)messageVCardPersonFromCell:(id)cell;
-(void)saveVCardPersonFromCell:(id)cell;
-(void)detailsForMessageInCell:(id)cell;
@end

@protocol WAChatMessagesControllerDelegate <NSObject>
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didInsertIndexPaths:(id)paths;
-(void)controller:(id)controller didInsertSections:(id)sections;
-(void)controller:(id)controller didReloadIndexPaths:(id)paths;
-(void)controller:(id)controller didRemoveSections:(id)sections;
-(void)controller:(id)controller didRemoveIndexPaths:(id)paths;
-(void)controller:(id)controller didUpdateGroupingStateForMessageAtIndexPath:(id)indexPath;
-(void)controllerWillChangeContent:(id)controller;
@end

@protocol WATranslucentTableViewCellDelegate <NSObject>
-(id)translucentTableViewBlurredImage:(id)image;
-(id)translucentTableViewCellBackgroundImageView:(id)view;
@end

@protocol WAContactEditingHeaderViewDelegate <NSObject>
-(void)contactEditingHeaderValueChanged:(id)changed;
-(void)contactEditingHeaderEditPhotoTapped:(id)tapped;
-(BOOL)contactEditingHeaderViewShouldReturn:(id)contactEditingHeaderView;
@end

@protocol WAAddressBookLabelPickerDelegate <NSObject>
-(void)addressBookLabelPickerDidFinish:(id)addressBookLabelPicker;
-(void)addressBookLabelPickerDidCancel:(id)addressBookLabelPicker;
@end

@protocol WAAddressBookCountryPickerDelegate <NSObject>
-(void)addressBookCountryPicker:(id)picker didSelectCountryCode:(id)code;
-(void)addressBookCountryPickerDidCancel:(id)addressBookCountryPicker;
@end

@protocol WAAddressBookFieldPickerDelegate <NSObject>
-(void)addressBookFieldPickerDidCancel:(id)addressBookFieldPicker;
-(void)addressBookFieldPicker:(id)picker didFinishWithABPropertyID:(int)abpropertyID;
@end

@protocol WAContactPropertyEditingCellDelegate <NSObject>
@optional
-(void)contactPropertyEditingCellValueChanged:(id)changed;
-(BOOL)contactPropertyEditingCellShouldReturn:(id)contactPropertyEditingCell;
-(void)contactPropertyEditingCellDidEndEditing:(id)contactPropertyEditingCell;
-(BOOL)contactPropertyEditingCellShouldEndEditing:(id)contactPropertyEditingCell;
-(void)contactPropertyEditingCellDidBeginEditing:(id)contactPropertyEditingCell;
-(BOOL)contactPropertyEditingCellShouldBeginEditing:(id)contactPropertyEditingCell;
@end

@protocol WAContactMultiValueEditingCellDelegate <WAContactPropertyEditingCellDelegate>
-(void)handleLabelButtonActionInContactMultiValueEditingCell:(id)contactMultiValueEditingCell;
@end

@protocol WAContactAddressEditingCellDelegate <WAContactMultiValueEditingCellDelegate>
-(void)presentCountryPickerForAddressEditingCell:(id)addressEditingCell;
@end

@protocol __ARCLiteIndexedSubscripting__
-(void)setObject:(id)object atIndexedSubscript:(unsigned)indexedSubscript;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
@end

@protocol __ARCLiteKeyedSubscripting__
-(void)setObject:(id)object forKeyedSubscript:(id)keyedSubscript;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
@end

__attribute__((visibility("hidden")))
@interface WAE2eMessageV1 : WAE2eMessage {
}
-(void)setDecryptedData:(id)data;
-(id)dataToEncrypt;
-(int)version;
@end

__attribute__((visibility("hidden")))
@interface WABlockBasedActionSheet : UIActionSheet <UIActionSheetDelegate> {
	NSMutableDictionary* _actionMap;
	id _destructiveActionHandler;
	id _cancelHandler;
	id _completionHandler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id completionHandler;
@property(copy, nonatomic) id cancelHandler;
+(id)actionSheetWithTitle:(id)title;
-(void).cxx_destruct;
-(void)didPresentActionSheet:(id)sheet;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)addDestructiveButtonWithTitle:(id)title handler:(id)handler;
-(void)addButtonWithTitle:(id)title handler:(id)handler;
-(void)showInView:(id)view;
-(void)showFromRect:(CGRect)rect inView:(id)view animated:(BOOL)animated;
-(void)showFromBarButtonItem:(id)barButtonItem animated:(BOOL)animated;
-(void)showFromToolbar:(id)toolbar;
-(void)showFromTabBar:(id)tabBar;
-(void)addCancelButton;
-(void)applicationWillResetUserInterface:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WAVideoScrubberTrimmer : WAVideoScrubberPrecisionRangeSlider <UIGestureRecognizerDelegate> {
	UIImageView* _leftHandleView;
	UIImageView* _rightHandleView;
	UIImageView* _middleFillView;
	UIView* _coverContainerView;
	UIView* _leftCover;
	UIView* _rightCover;
	UIImageView* _scrubberThumb;
	float _thumbValueBeforeDragging;
	float _thumbValue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAVideoScrubberTrimmerDelegate> delegate;
@property(assign, nonatomic) float thumbValue;
@property(readonly, assign, nonatomic) CGRect frameForThumbnailBar;
+(float)preferredHeight;
-(void).cxx_destruct;
-(void)handleThumbPan:(id)pan;
-(void)didEndDragging;
-(void)didBeginDragging;
-(BOOL)shouldBeginDraggingWithTouch:(id)touch;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(id)rightHandleView;
-(id)leftHandleView;
-(void)didChangeRange;
-(float)minimumRangeWidth;
-(void)setThumbHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)layoutSubviews;
-(void)getFramesForLeftHandle:(CGRect*)leftHandle atPosition:(float)position rightHandle:(CGRect*)handle atPosition:(float)position4 leftMostVisiblePosition:(float)position5 rightMostVisiblePosition:(float)position6;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAProfilePictureThumbnailView : UIImageView {
	BOOL _round;
	NSString* _jid;
	UIColor* _placeholderColor;
}
@property(assign, nonatomic, getter=isRound) BOOL round;
@property(retain, nonatomic) UIColor* placeholderColor;
@property(copy, nonatomic) NSString* jid;
-(void).cxx_destruct;
-(void)profilePictureManagerDidUpdatePicture:(id)profilePictureManager;
-(void)reloadImage;
-(void)setImage:(id)image;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WATheme : NSObject {
	UIImage* _wallpaperImage;
	UIImage* _blurredWallpaperImage;
	NSMutableDictionary* _contactNameColors;
	int _groupedTableViewCellSeparatorStyle;
	float _genericTableRowHeight;
	UIFont* _genericTableCellFont;
	float _chatsTableRowHeight;
	UIColor* _tableViewTextFieldTextColor;
	int _tableViewCellDefaultTextAlignment;
	int _tableViewCellActionTextAlignment;
	UIColor* _tableViewCellTextColor;
	UIColor* _tableViewCellTextColorSelected;
	UIColor* _tableViewCellDestructiveTextColor;
	UIColor* _tableViewCellHighlightedBackgroundColor;
	UIColor* _tableViewCellSeparatorColor;
	UIFont* _tableViewFooterFont;
	UIColor* _tableViewFooterTextColor;
	UIColor* _tableViewFooterTextShadowColor;
	int _tableViewFooterTextAlignment;
	UIColor* _tintColor;
	UIColor* _accentColor;
	UIColor* _disabledTintColor;
	UIColor* _helperTextColor;
	UIColor* _helperTextBackgroundColor;
	float _contactsTableRowHeight;
	float _waContactTableRowHeight;
	float _favoritesTableRowHeight;
	float _forwardPickerTableRowHeight;
	UIFont* _contactNameFont;
	UIFont* _waContactNameFont;
	UIColor* _contactNameColor;
	UIColor* _contactNameColorHighlighted;
	UIFont* _contactStatusFont;
	UIFont* _contactStatusFontItalic;
	UIColor* _contactStatusColor;
	UIColor* _contactStatusColorHighlighted;
	UIFont* _contactDetailsFont;
	UIColor* _contactDetailsColor;
	UIColor* _contactDetailsColorHighlighted;
	UIFont* _chatNameFont;
	UIFont* _chatMessageFont;
	UIFont* _chatTimestampFont;
	UIFont* _bubbleContactNameFont;
	UIFont* _bubblePushNameFont;
	UIFont* _bubbleEventFont;
	UIFont* _bubbleDateFont;
	UIFont* _bubbleMessageFont;
	UIFont* _bubbleTimestampFont;
	UIFont* _bubbleVCardFont;
	UIColor* _messageTextColor;
	UIFont* _tooltipFont;
	UIColor* _chatTimestampColor;
	UIColor* _chatTimestampColorHighlighted;
	CGSize _tableViewFooterTextShadowOffset;
}
@property(readonly, assign, nonatomic) UIColor* chatTimestampColorHighlighted;
@property(readonly, assign, nonatomic) UIColor* chatTimestampColor;
@property(readonly, assign, nonatomic) UIFont* tooltipFont;
@property(readonly, assign, nonatomic) UIImage* blurredWallpaperImage;
@property(readonly, assign, nonatomic) UIImage* wallpaperImage;
@property(readonly, assign, nonatomic) UIColor* messageHighlightedUrlColor;
@property(readonly, assign, nonatomic) UIColor* messageUrlColor;
@property(readonly, assign, nonatomic) UIColor* messageTextColor;
@property(readonly, assign, nonatomic) UIFont* bubbleVCardFont;
@property(readonly, assign, nonatomic) UIFont* bubbleTimestampFont;
@property(readonly, assign, nonatomic) UIFont* bubbleMessageFont;
@property(readonly, assign, nonatomic) UIFont* bubbleDateFont;
@property(readonly, assign, nonatomic) UIFont* bubbleEventFont;
@property(readonly, assign, nonatomic) UIFont* bubblePushNameFont;
@property(readonly, assign, nonatomic) UIFont* bubbleContactNameFont;
@property(readonly, assign, nonatomic) UIFont* chatTimestampFont;
@property(readonly, assign, nonatomic) UIFont* chatMessageFont;
@property(readonly, assign, nonatomic) UIFont* chatNameFont;
@property(readonly, assign, nonatomic) UIColor* contactDetailsColorHighlighted;
@property(readonly, assign, nonatomic) UIColor* contactDetailsColor;
@property(readonly, assign, nonatomic) UIFont* contactDetailsFont;
@property(readonly, assign, nonatomic) UIColor* contactStatusColorHighlighted;
@property(readonly, assign, nonatomic) UIColor* contactStatusColor;
@property(readonly, assign, nonatomic) UIFont* contactStatusFontItalic;
@property(readonly, assign, nonatomic) UIFont* contactStatusFont;
@property(readonly, assign, nonatomic) UIColor* contactNameColorHighlighted;
@property(readonly, assign, nonatomic) UIColor* contactNameColor;
@property(readonly, assign, nonatomic) UIFont* waContactNameFont;
@property(readonly, assign, nonatomic) UIFont* contactNameFont;
@property(readonly, assign, nonatomic) float forwardPickerTableRowHeight;
@property(readonly, assign, nonatomic) float favoritesTableRowHeight;
@property(readonly, assign, nonatomic) float waContactTableRowHeight;
@property(readonly, assign, nonatomic) float contactsTableRowHeight;
@property(readonly, assign, nonatomic) UIColor* helperTextBackgroundColor;
@property(readonly, assign, nonatomic) UIColor* helperTextColor;
@property(readonly, assign, nonatomic) UIColor* disabledTintColor;
@property(readonly, assign, nonatomic) UIColor* accentColor;
@property(readonly, assign, nonatomic) UIColor* tintColor;
@property(readonly, assign, nonatomic) int tableViewFooterTextAlignment;
@property(readonly, assign, nonatomic) CGSize tableViewFooterTextShadowOffset;
@property(readonly, assign, nonatomic) UIColor* tableViewFooterTextShadowColor;
@property(readonly, assign, nonatomic) UIColor* tableViewFooterTextColor;
@property(readonly, assign, nonatomic) UIFont* tableViewFooterFont;
@property(readonly, assign, nonatomic) UIColor* tableViewCellSeparatorColor;
@property(readonly, assign, nonatomic) UIColor* tableViewCellHighlightedBackgroundColor;
@property(readonly, assign, nonatomic) UIColor* tableViewCellDestructiveTextColor;
@property(readonly, assign, nonatomic) UIColor* tableViewCellActionTextColor;
@property(readonly, assign, nonatomic) UIColor* tableViewCellTextColorSelected;
@property(readonly, assign, nonatomic) UIColor* tableViewCellTextColor;
@property(readonly, assign, nonatomic) int tableViewCellActionTextAlignment;
@property(readonly, assign, nonatomic) int tableViewCellDefaultTextAlignment;
@property(readonly, assign, nonatomic) UIColor* tableViewTextFieldTextColor;
@property(readonly, assign, nonatomic) float chatsTableRowHeight;
@property(readonly, assign, nonatomic) UIFont* genericTableCellFont;
@property(readonly, assign, nonatomic) float genericTableRowHeight;
@property(readonly, assign, nonatomic) int groupedTableViewCellSeparatorStyle;
+(id)colorPalette;
+(id)defaultTheme;
-(void).cxx_destruct;
-(id)highlightedTintColorForColor:(id)color;
-(void)reloadTintColorInWindow:(id)window;
-(void)resetContactNameColors;
-(id)contactNameColorForJID:(id)jid;
-(id)colorListFilePath;
-(void)setInWindow:(id)window;
-(void)generateBlurredWallpaper;
-(void)loadWallpaper;
-(void)setNeedsReloadWallpaper;
-(void)wallpaperDidChange:(id)wallpaper;
-(id)helperTextLabelWithFrame:(CGRect)frame;
-(void)reloadFonts;
-(void)contentSizeCategoryDidChange:(id)contentSizeCategory;
-(void)reloadDynamicTypeFontSize;
-(void)setFontSize:(float)size;
-(int)fontIndexForSize:(int)size;
-(int)fontSizeForIndex:(int)index;
-(id)fontNameForIndex:(int)index;
-(int)numberOfFonts;
-(int)defaultFontSize;
-(int)fontSize;
-(id)fontName;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequest : NSObject {
	int _retriesRemaining;
	unsigned _taskID;
	int _taskLock;
	XMPPIQStanza* _iq;
	unsigned _state;
	XMPPIQStanza* _response;
	id _completion;
	double _timeout;
}
@property(copy, nonatomic) id completion;
@property(readonly, assign, nonatomic) XMPPIQStanza* response;
@property(assign, nonatomic) unsigned state;
@property(readonly, assign, nonatomic) int retriesRemaining;
@property(readonly, assign, nonatomic) double timeout;
@property(retain, nonatomic) XMPPIQStanza* iq;
-(void).cxx_destruct;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(void)processResponse:(id)response;
-(BOOL)cancelAndPrepareForRetry:(BOOL)retry;
-(void)failOnNoConnection;
-(void)sendOnStream:(id)stream;
-(void)endBackgroundTaskIfNeeded;
-(id)initWithTimeout:(double)timeout;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WhatsAppAppDelegate : NSObject <UITabBarControllerDelegate, WAChatDatabaseMigrationViewControllerDelegate, WANotificationWindowDelegate, WARepairDatabaseViewControllerDelegate, RestoreBackupViewControllerDelegate, WAVoiceCallViewControllerDelegate, WADeleteAccountControllerDelegate, PKPushRegistryDelegate, VerificationControllerDelegate, UINavigationControllerDelegate, UIApplicationDelegate> {
	UINavigationController* _iPadNoticeController;
	UINavigationController* _noNetworkViewController;
	WATimelockViewController* _timelockViewController;
	BOOL _databaseMigrationInProgress;
	BOOL _databaseRepairInProgress;
	BOOL _suppressRootViewSetUpOnEnteringForeground;
	BOOL _applicationIsBecomingActive;
	BOOL _upgrade;
	BOOL _applicationUILoaded;
	BOOL _changNumberPending;
	BOOL _buildExpired;
	BOOL _contactsAccessRequestInProgress;
	NSString* _jidToCallOnConnect;
	NSString* _pendingApplicationShortcutAction;
	NSObject<OS_dispatch_group>* _rotationDispatchGroup;
	WAVoiceCallViewController* _activeVoiceCallViewController;
	BOOL _showMicPermissionErrorOnDismissCallScreen;
	BOOL _showNoCallingErrorOnDismissCallScreen;
	int _noCallingErrorCode;
	NSMutableArray* _presentedInAppNotificationAlerts;
	NSMutableArray* _deferredInAppNotificationAlerts;
	PKPushRegistry* _voipRegistry;
	BOOL _needsAPNSToken;
	BOOL _needsVOIPToken;
	int _lastSeenVOIPPushIndex;
	int _lastSeenAPNSPushIndex;
	unsigned _resumeCounter;
	id _backgroundFetchCompletionHandler;
	BOOL _hasAppFinishedLaunching;
	WAAutomationWindow* _automationWindow;
	NSObject<OS_dispatch_group>* _dataProtectionDispatchGroup;
	BOOL _missedCallAtLaunch;
	BOOL _presentCallScreenAgainAfterDismiss;
	int _savedCallState;
	BOOL _recentlyDidCompleteDeleteAccount;
	BOOL _shareTooltipShown;
	BOOL _groupInfoTooltipShown;
	BOOL _settingsTooltipShown;
	BOOL _groupChatTooltipShown;
	BOOL _disablePushProcessing;
	BOOL _keyboardFailedToShow;
	BOOL _chatDatabaseAccessible;
	UIWindow* _window;
	WATabBarController* _tabBarController;
	VerificationController* _verificationController;
	NSString* _chatJID;
	WACallWindow* _callWindow;
	unsigned _appWakeReason;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic, getter=isChatDatabaseAccessible) BOOL chatDatabaseAccessible;
@property(assign) unsigned appWakeReason;
@property(readonly, assign, nonatomic) BOOL isCallWindowVisible;
@property(readonly, assign, nonatomic) WACallWindow* callWindow;
@property(retain, nonatomic) NSString* chatJID;
@property(assign, nonatomic) BOOL keyboardFailedToShow;
@property(assign, nonatomic) BOOL disablePushProcessing;
@property(assign, nonatomic) BOOL groupChatTooltipShown;
@property(assign, nonatomic) BOOL settingsTooltipShown;
@property(assign, nonatomic) BOOL groupInfoTooltipShown;
@property(assign, nonatomic) BOOL shareTooltipShown;
@property(readonly, assign, nonatomic) BOOL recentlyDidCompleteDeleteAccount;
@property(readonly, assign, nonatomic) WAChatListViewController* chatListViewController;
@property(readonly, assign, nonatomic) VerificationController* verificationController;
@property(readonly, assign, nonatomic) WATabBarController* tabBarController;
@property(retain, nonatomic) UIWindow* window;
-(void).cxx_destruct;
-(void)application:(id)application handleWatchKitExtensionRequest:(id)request reply:(id)reply;
-(void)snapshotForAutomation;
-(void)openConnectionIfNeeded;
-(void)applicationReallyDidResume;
-(void)applicationDidResume;
-(void)applicationWillSuspendWithCompletionHandler:(id)application;
-(void)askToUnblockJIDBeforeCalling:(id)unblockJIDBeforeCalling;
-(void)performVOIPActivitiesOnConnectionStateChange;
-(void)makeOutgoingCallToJIDIfPossible:(id)jidifPossible;
-(void)switchToRecentsTab;
-(void)scheduleOutgoingCallToJIDOnConnect:(id)jidonConnect;
-(void)makeVoiceCallViewControllerActive;
-(id)voiceCallViewControllerNeedsUpdatedSnapshot:(id)snapshot;
-(void)voiceCallViewControllerWillResignActive:(id)voiceCallViewController;
-(void)voiceCallViewController:(id)controller didRequestToShowChatWithJID:(id)jid presentKeyboard:(BOOL)keyboard;
-(void)voiceCallViewControllerDidFinish:(id)voiceCallViewController;
-(void)voiceCallViewControllerWillFinish:(id)voiceCallViewController;
-(void)handleCallBusy;
-(void)handleCallTimeout;
-(void)handleCallFailureWithErrorCode:(int)errorCode;
-(void)showNoCallingError;
-(void)cancelOutgoingCall;
-(void)handleCallTerminationByPeer;
-(void)dismissCallScreen;
-(void)forcePortraitOrientation;
-(void)reallyPresentCallScreenWithInitialCallState:(int)initialCallState;
-(void)presentCallScreenWithInitialCallState:(int)initialCallState;
-(void)application:(id)application didChangeStatusBarOrientation:(int)orientation;
-(void)application:(id)application willChangeStatusBarOrientation:(int)orientation duration:(double)duration;
-(void)chatDatabaseMigrationViewController:(id)controller didCompleteSuccessfully:(BOOL)successfully;
-(void)restoreBackupViewControllerDidFinish:(id)restoreBackupViewController;
-(void)restoreFromBackupAfterFailedDatabaseRepairWithNavigationController:(id)navigationController;
-(void)showUnableToRecoverChatHistoryErrorAndTerminate;
-(void)proceedAfterRestoringOrRepairingDatabase;
-(void)repairDatabaseViewControllerDidFail:(id)repairDatabaseViewController;
-(void)showUnexpectedDatabaseStateAndTerminate;
-(void)repairDatabaseViewControllerDidSucceed:(id)repairDatabaseViewController;
-(void)performChatDatabaseRepair;
-(void)performPostRestoreChangesIfNecessary;
-(BOOL)isChatDatabaseReady;
-(void)registerForMigrationAndRepairNotifications;
-(void)switchToVerificationController:(id)verificationController;
-(void)detectMobileNetworkChange;
-(void)startChangeNumberIfPossible;
-(void)startChangeNumberSequence;
-(void)deleteAccountControllerDidCancel:(id)deleteAccountController;
-(void)deleteAccountControllerDidFinish:(id)deleteAccountController;
-(void)reallyDeleteAccount;
-(void)startDeleteAccountSequence;
-(void)verificationControllerDidCancel:(id)verificationController;
-(void)verificationControllerDidSucceed:(id)verificationController;
-(void)chatStorageDidReceiveMessage:(id)chatStorage;
-(void)chatManagerDidChangeTimelockState:(id)chatManager;
-(void)chatStorageDidDeleteDatabase:(id)chatStorage;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)tabBarController:(id)controller didSelectViewController:(id)controller2;
-(BOOL)tabBarController:(id)controller shouldSelectViewController:(id)controller2;
-(void)submitPushTokensIfReady;
-(void)pushRegistry:(id)registry didInvalidatePushTokenForType:(id)type;
-(void)pushRegistry:(id)registry didReceiveIncomingPushWithPayload:(id)payload forType:(id)type;
-(void)pushRegistry:(id)registry didUpdatePushCredentials:(id)credentials forType:(id)type;
-(void)application:(id)application didFailToRegisterForRemoteNotificationsWithError:(id)error;
-(void)application:(id)application didRegisterForRemoteNotificationsWithDeviceToken:(id)deviceToken;
-(void)registerForPushTokens;
-(void)registerForVOIPPushIfNeeded;
-(void)application:(id)application performActionForShortcutItem:(id)shortcutItem completionHandler:(id)handler;
-(void)processNewChatApplicationShortcut;
-(void)processSearchApplicationShortcut;
-(void)prepareUIForShortcutActionWithCompletion:(id)completion;
-(void)processApplicationShortcutAction:(id)action;
-(void)configureShortcutItemsForApplication:(id)application;
-(void)application:(id)application performFetchWithCompletionHandler:(id)completionHandler;
-(void)application:(id)application handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier withResponseInfo:(id)responseInfo completionHandler:(id)handler jid:(id)jid;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forRemoteNotification:(id)remoteNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification withResponseInfo:(id)responseInfo completionHandler:(id)handler;
-(void)application:(id)application handleActionWithIdentifier:(id)identifier forLocalNotification:(id)localNotification completionHandler:(id)handler;
-(void)applicationUserDidTakeScreenshot:(id)applicationUser;
-(unsigned)application:(id)application supportedInterfaceOrientationsForWindow:(id)window;
-(void)application:(id)application reallyDidReceiveRemoteNotification:(id)really fetchCompletionHandler:(id)handler;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification fetchCompletionHandler:(id)handler;
-(void)application:(id)application reallyDidReceiveRemoteNotification:(id)really;
-(void)application:(id)application didReceiveRemoteNotification:(id)notification;
-(void)application:(id)application reallyDidReceiveLocalNotification:(id)really;
-(void)application:(id)application didReceiveLocalNotification:(id)notification;
-(void)application:(id)application didRegisterUserNotificationSettings:(id)settings;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationReallyWillEnterForeground:(id)applicationReally;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)applicationReallyDidBecomeActive:(id)applicationReally;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillTerminate:(id)application;
-(BOOL)application:(id)application openURL:(id)url sourceApplication:(id)application3 annotation:(id)annotation;
-(BOOL)application:(id)application reallyDidFinishLaunchingWithOptions:(id)really andPreviousLaunchResult:(int)result;
-(BOOL)application:(id)application didFinishLaunchingWithOptions:(id)options;
-(void)reportPreviousCrashesWithPreviousLaunchResult:(int)previousLaunchResult;
-(void)checkForDiedWhileDisconnecting;
-(void)checkForFailedToLaunchWithPreviousResult:(int)previousResult;
-(void)stopWatchingForFailedToLaunch;
-(void)setFailedToLaunchReason:(int)launchReason;
-(void)checkForGeneralCrashes;
-(void)initializePreferences;
-(void)connectionStateDidChange:(id)connectionState;
-(void)updateApplicationBadgeCountAllowDecrements:(BOOL)decrements;
-(BOOL)isApplicationBadgeEnabled;
-(void)launchChatFromInAppAlert:(id)appAlert forJID:(id)jid;
-(void)showDeferredNotifications;
-(void)showInAppNotificationAlertForMessage:(id)message;
-(void)notificationWindowTapped:(id)tapped;
-(void)showInAppNotificationBannerForMessage:(id)message;
-(void)showInAppNotificationForMessage:(id)message;
-(void)requestAccessToContactsIfNecessary;
-(void)checkAddressBookPermissionsWithCompletionHandler:(id)completionHandler;
-(void)doHelperTasksAfterApplicationLaunch:(BOOL)launch;
-(void)showSettingsTooltipIfNeeded;
-(void)loadApplicationUI;
-(void)setupRootViewController;
-(void)setupRootViewControllerIfPossible;
-(void)configureTabBarController;
-(void)callabilityDidChange:(id)callability;
-(unsigned)indexOfRecentsTab;
-(id)callHistoryTabBarItem;
-(void)resetViewControllers;
-(void)presentStorageAlert;
-(void)openChatAnimated:(BOOL)animated presentKeyboard:(BOOL)keyboard;
-(void)jumpToAllChatsAnimated:(BOOL)allChatsAnimated;
-(void)showMicrophoneAccessReminderScreen;
-(void)presentHelperScreenIfNecessary;
-(void)performLegacyPushSettingsCheck;
-(void)presentAppReviewPromptIfNecessaryWithCompletion:(id)completion;
-(void)reauthenticate;
-(void)performBlockAfterFirstUnlock:(id)unlock;
-(void)protectedDataDidBecomeAvailable:(id)protectedData;
-(id)init;
-(id)jidFromLocalNotification:(id)localNotification;
-(id)jidFromUserInfo:(id)userInfo;
-(void)checkForUpdatedBetaBuildIfNeeded;
-(id)strippedRemoteNotification:(id)notification;
-(void)processLocalNotificationAtLaunch:(id)launch;
-(void)processPushInfo:(id)info;
-(void)generateMemoryWarning:(id)warning;
-(void)callBackJID:(id)jid;
-(void)declineCall;
-(void)notifyReplyFailedForJID:(id)jid contactName:(id)name;
-(void)replyWithMessage:(id)message toJID:(id)jid withCompletionHandler:(id)completionHandler markAsRead:(BOOL)read;
@end

__attribute__((visibility("hidden")))
@interface FavoritesViewController : WATableViewController <UINavigationControllerDelegate, ABPeoplePickerNavigationControllerDelegate, NSFetchedResultsControllerDelegate> {
	UIRefreshControl* _refreshControl;
	UIView* _bgView;
	UIBarButtonItem* _barButtonAdd;
	UIBarButtonItem* _barButtonDeleteAll;
	NSArray* _searchResults;
	unsigned _numberOfGeneratedFavoritesToNotifyUser;
	UITableViewCell* _inviteCell;
	UITableViewCell* _favoritesCountCell;
	NSFetchedResultsController* _fetchedResultsController;
	NSMutableArray* _insertedFavorites;
	BOOL _ignoreChangeNotifications;
	BOOL _animateChanges;
	BOOL _needsInitialLayout;
	BOOL _refreshingFavoritesInProgress;
	NSTimer* _progressBarTimer;
	double _estimatedLoadTime;
	long _addressBookContactCount;
	WADropDownAlertView* _retryLaterAlertView;
	UITableView* _tableViewFavorites;
	UITableView* _tableViewButtons;
	UIImageView* _imageNoFavorites;
	UIView* _viewNoFavorites;
	UIView* _progressViewContainer;
	UILabel* _progressViewLabel;
	UIProgressView* _progressView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned favoritesCount;
@property(assign, nonatomic) __weak UIProgressView* progressView;
@property(assign, nonatomic) __weak UILabel* progressViewLabel;
@property(retain, nonatomic) UIView* progressViewContainer;
@property(retain, nonatomic) UIView* viewNoFavorites;
@property(retain, nonatomic) UIImageView* imageNoFavorites;
@property(retain, nonatomic) UITableView* tableViewButtons;
@property(retain, nonatomic) UITableView* tableViewFavorites;
-(void).cxx_destruct;
-(void)wa_applicationDidEnterBackground;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(id)tableView:(id)view targetIndexPathForMoveFromRowAtIndexPath:(id)indexPath toProposedIndexPath:(id)proposedIndexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)configureCell:(id)cell withFavorite:(id)favorite;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controllerWillChangeContent:(id)controller;
-(void)faultInAllFavorites;
-(void)prefetchContactAndStatusRelationshipsForPhones:(id)phones;
-(void)loadInitialFavorites;
-(void)contactsStorageWillReloadAddressBook:(id)contactsStorage;
-(void)didReceiveMemoryWarning;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)continueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)syncManagerDidFinishSync:(id)syncManager;
-(void)updateProgressBar:(id)bar;
-(void)updateProgressBar;
-(void)stopUpdatingProgressBarIfNeeded;
-(void)startUpdatingProgressBarIfNeeded;
-(void)showProgressViewIfNeeded;
-(BOOL)isProgressViewHidden;
-(void)cleanUpAfterLoadingFavorites;
-(void)hideRefreshFailedError;
-(void)showRefreshFailedError;
-(void)contactsStorageDidFailToGenerateFavorites:(id)contactsStorage;
-(void)contactsStorageDidGenerateFavorites:(id)contactsStorage;
-(void)stopLoading;
-(void)refreshFavorites;
-(void)refreshControlAction:(id)action;
-(void)deleteAllAction:(id)action;
-(void)addNewFavoriteAction:(id)action;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)inviteContacts;
-(void)leaveSearchMode;
-(void)searchWithCriteria:(id)criteria;
-(void)reloadFavoriteCountLabel;
-(void)notifyUserAfterGeneratingFavorites:(int)favorites;
-(void)saveTableScrollPosition;
-(void)restoreTableScrollPosition;
-(void)relayoutEmptyTableView;
-(void)updateInterfaceAnimated:(BOOL)animated;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMediaCaptionView : UIView {
	WALabel* _textLabel;
	WALabel* _secondaryLabel;
	CGRect _secondaryImageRect;
	float _blendAmount;
	NSCache* _heightCache;
	UIImageView* _gradientView;
	UIView* _gradientViewContainer;
	UIView* _topBorder;
	UIView* _secondaryTopBorder;
	BOOL _isOcclusionLocked;
	CGRect _imageRect;
}
@property(readonly, copy, nonatomic) NSString* text;
@property(assign, nonatomic) CGRect imageRect;
@property(retain, nonatomic) UIFont* font;
-(void).cxx_destruct;
-(void)updateObstructedAppearanceBlendingOverlap:(float)overlap withOverlap:(float)overlap2;
-(void)updateOcclusionAppearance;
-(void)lockOcclusionAppearanceWithAnimation:(BOOL)animation;
-(void)unlockOcclusionAppearanceWithAnimation:(BOOL)animation;
-(float)overlapBetweenRect:(CGRect)rect andView:(id)view;
-(void)setText:(id)text onLabel:(id)label;
-(void)showText:(id)text imageRect:(CGRect)rect blendedWithText:(id)text3 imageRect:(CGRect)rect4 blendAmount:(float)amount;
-(void)setText:(id)text imageRect:(CGRect)rect;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(void)layoutSubviews;
-(void)resizeToFit;
-(CGSize)sizeThatFits:(CGSize)fits forLabel:(id)label;
-(CGSize)sizeThatFits:(CGSize)fits;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ContactsViewController : WAViewController <ABNewPersonViewControllerDelegate> {
	NSArray* _sections;
	NSArray* _searchResults;
	int _numberOfContacts;
	NSIndexPath* _selectedRowIndexPath;
	BOOL _dataAvailable;
	BOOL _initialLoadingCompleted;
	NSTimer* _dataAvailabilityTimer;
	int _lastKnownNumberOfContacts;
	int _centerRowIndexPortrait;
	int _centerRowIndexLandscape;
	int _groupID;
	UITableView* _tableView;
	UIView* _viewMyNumber;
	WAContactNameLabel* _labelMyNumber;
	UITableViewCell* _cellNoContacts;
	UILabel* _labelNoContacts;
	UITableViewCell* _cellContactsTotal;
	UILabel* _labelContactsTotal;
	UITableViewCell* _cellLoading;
	UIActivityIndicatorView* _aiLoading;
	UILabel* _labelLoading;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* labelLoading;
@property(retain, nonatomic) UIActivityIndicatorView* aiLoading;
@property(retain, nonatomic) UITableViewCell* cellLoading;
@property(retain, nonatomic) UILabel* labelContactsTotal;
@property(retain, nonatomic) UITableViewCell* cellContactsTotal;
@property(retain, nonatomic) UILabel* labelNoContacts;
@property(retain, nonatomic) UITableViewCell* cellNoContacts;
@property(retain, nonatomic) WAContactNameLabel* labelMyNumber;
@property(retain, nonatomic) UIView* viewMyNumber;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) int groupID;
-(void).cxx_destruct;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)contactsStorageDidUpdateContacts:(id)contactsStorage;
-(void)contactsStorageDidUpdateStatus:(id)contactsStorage;
-(void)chatManagerDidChangePhoneNumer:(id)chatManager;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(BOOL)isIndexPathLastRowInTable:(id)table;
-(id)contactInfoForTableIndexPath:(id)tableIndexPath;
-(id)contactsSectionForTableSection:(int)tableSection;
-(void)adjustSearchbarPositionAndTableviewInsets;
-(void)addContactAction:(id)action;
-(void)alignActivityIndicator;
-(void)saveTableScrollPosition;
-(BOOL)showIndexBar;
-(void)reloadContactsTable;
-(void)checkDataAvailability:(id)availability;
-(void)restoreTableScrollPosition;
-(void)setupDisplayList;
-(void)loadContactsInSection:(id)section;
-(void)leaveSearchMode;
-(void)searchWithCriteria:(id)criteria;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WASettingsProfileTableViewCell : UITableViewCell {
	UIImageView* _profilePicture;
	UILabel* _nameLabel;
	UILabel* _statusLabel;
	NSLayoutConstraint* _profilePictureLeftMargin;
	NSLayoutConstraint* _nameLabelLeftMargin;
}
@property(assign, nonatomic) __weak NSLayoutConstraint* nameLabelLeftMargin;
@property(assign, nonatomic) __weak NSLayoutConstraint* profilePictureLeftMargin;
@property(assign, nonatomic) __weak UILabel* statusLabel;
@property(assign, nonatomic) __weak UILabel* nameLabel;
@property(assign, nonatomic) __weak UIImageView* profilePicture;
-(void).cxx_destruct;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface WASettingsViewController : WAStaticTableViewController <UINavigationControllerDelegate, MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate, PeopleMultiPickerNavigationControllerDelegate, WAQRCodeScannerViewControllerDelegate> {
	NotificationsViewController* _notificationsController;
	WABadgedTableViewCell* _chatSettingsCell;
	WASettingsProfileTableViewCell* _profileCell;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)qrCodeScannerViewControllerDidCancel:(id)qrCodeScannerViewController;
-(void)qrCodeScannerViewController:(id)controller didFinishWithCode:(id)code;
-(BOOL)qrCodeScannerViewController:(id)controller shouldAcceptCode:(id)code;
-(void)scanQRCode;
-(void)showWebClientSettings;
-(void)chatManagerDidUpdateStatus:(id)chatManager;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)peopleMultiPickerNavigationControllerDidCancel:(id)peopleMultiPickerNavigationController;
-(void)peopleMultiPickerNavigationController:(id)controller didSelectContacts:(id)contacts;
-(void)setupTableView;
-(void)wa_fontSizeDidChange;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)showDataUsage;
-(void)showStarredMessages;
-(void)notificationsAction;
-(void)chatSettingsAction;
-(void)viewAccountAction;
-(void)viewProfileAction;
-(void)inviteAction;
-(void)aboutAction;
-(void)inviteViaSinaWeibo;
-(void)inviteViaFacebook;
-(void)inviteViaTwitter;
-(void)inviteViaEmail;
-(void)sendEmailInvitationTo:(id)to;
-(void)inviteViaSMS;
-(void)sendSMSInvitationTo:(id)to;
-(void)addIcon:(id)icon toTableViewCell:(id)tableViewCell;
-(void)reloadProfilePicture;
-(void)updateProfileInfo;
-(void)backupErrorBadgeUpdated:(id)updated;
-(void)updateChatSettingsBadge;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface _WAVideoScrubberThumbnailView : UIImageView {
	BOOL _placeholder;
	XXStruct_pwHToB _time;
}
@property(assign, nonatomic) XXStruct_pwHToB time;
@property(assign, nonatomic) BOOL placeholder;
@end

__attribute__((visibility("hidden")))
@interface WAVideoScrubberThumbnailBar : UIView {
	CGSize _thumbnailSize;
	CGSize _thumbnailImageSize;
	CGRect _previousBounds;
	NSMutableArray* _visibleThumbnailViews;
	NSMutableArray* _transitionThumbnailViews;
	XXStruct_yD8eWC _expandedTimeRange;
	int _pivotIndex;
	long _taskID;
	XXStruct_yD8eWC _preparedTimeRange;
	NSObject<OS_dispatch_group>* _animationDispatchGroup;
	BOOL _needsRegenerateThumbnails;
	BOOL _suppressThumbnailLayout;
	NSDictionary* _lastThumbnailCache;
	BOOL _thumbnailingEnabled;
	id<WAVideoScrubberThumbnailBarDataSource> _dataSource;
	NSMutableDictionary* _thumbnailCache;
	XXStruct_pwHToB _videoDuration;
}
@property(retain, nonatomic) NSMutableDictionary* thumbnailCache;
@property(assign, nonatomic, getter=isThumbnailingEnabled) BOOL thumbnailingEnabled;
@property(readonly, assign, nonatomic) XXStruct_pwHToB videoDuration;
@property(assign, nonatomic) __weak id<WAVideoScrubberThumbnailBarDataSource> dataSource;
-(void).cxx_destruct;
-(id)bestKeyForTime:(double)time inThumbnailCache:(id)thumbnailCache;
-(id)bestCachedImageAtTime:(XXStruct_pwHToB)time;
-(void)addImageToCache:(id)cache atTime:(XXStruct_pwHToB)time;
-(id)cachedImageAtTime:(XXStruct_pwHToB)time;
-(id)cacheKeyFromTime:(XXStruct_pwHToB)time;
-(void)revertTimeRangeWithAnimationDuration:(double)animationDuration;
-(void)expandToTimeRange:(XXStruct_yD8eWC)timeRange animationDuration:(double)duration aroundTime:(XXStruct_pwHToB)time;
-(void)prepareThumbnailsForTimeRange:(XXStruct_yD8eWC)timeRange;
-(void)generateThumbnailsInViews:(id)views timeRange:(XXStruct_yD8eWC)range useCache:(BOOL)cache;
-(void)populateUsingCacheThumbnailsInViews:(id)views timeRange:(XXStruct_yD8eWC)range;
-(void)layoutRegeneratingThumbnailsIfNeeded:(BOOL)needed;
-(void)setNeedsRegenerateThumbnails;
-(void)didMoveToWindow;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithVideoDuration:(XXStruct_pwHToB)videoDuration;
@end

__attribute__((visibility("hidden")))
@interface WADataUsageViewController : WAStaticTableViewController {
	WATableRow* _imagesRow;
	WATableRow* _audioRow;
	WATableRow* _videosRow;
	WATableRow* _resetRow;
	NSString* _autoDownloadImagesString;
	NSString* _autoDownloadAudioString;
	NSString* _autoDownloadVideosString;
	NSString* _autoDownloadNeverString;
	NSString* _autoDownloadWifiString;
	NSString* _autoDownloadCellularString;
}
-(void).cxx_destruct;
-(void)resetAutoDownloadSettings;
-(void)reloadAutoDownloadSettings;
-(void)showAutoDownloadSettingPickerForMediaType:(unsigned)mediaType;
-(void)viewNetworkUsageAction;
-(void)lowDataUsageSwitchAction:(id)action;
-(void)setupTableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)init;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface ContactTableViewCell : UITableViewCell {
	WAGroupMember* _groupMember;
	WAProfilePictureThumbnailView* _imageViewContact;
	BOOL _alwaysShowsPicture;
	BOOL _displaysWhatsAppContact;
	BOOL _useItalicsForStatusText;
	NSString* _jid;
	WAContactNameLabel* _nameLabel;
	UILabel* _statusLabel;
	UILabel* _detailLabel;
	UILabel* _pushNameLabel;
	float _accessoryViewInset;
}
@property(assign, nonatomic) float accessoryViewInset;
@property(assign, nonatomic) BOOL useItalicsForStatusText;
@property(assign, nonatomic) BOOL displaysWhatsAppContact;
@property(assign, nonatomic) BOOL alwaysShowsPicture;
@property(readonly, assign, nonatomic) UILabel* pushNameLabel;
@property(readonly, assign, nonatomic) UILabel* detailLabel;
@property(readonly, assign, nonatomic) UILabel* statusLabel;
@property(readonly, assign, nonatomic) WAContactNameLabel* nameLabel;
@property(readonly, assign, nonatomic) UIImageView* imageViewContact;
@property(copy, nonatomic) NSString* jid;
-(void).cxx_destruct;
-(void)configureWithContactInfo:(id)contactInfo;
-(void)configureWithWAFavorite:(id)wafavorite;
-(void)configureWithGroupMember:(id)groupMember;
-(void)reloadFonts;
-(id)accessibilityValue;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)didTransitionToState:(unsigned)state;
-(void)willTransitionToState:(unsigned)state;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMessageFooterView : UIView {
	UIImageView* _starIcon;
	UILabel* _timestampLabel;
	UIImageView* _statusImageView;
	int _animationState;
	BOOL _tinted;
	unsigned _status;
}
@property(assign, nonatomic, getter=isTinted) BOOL tinted;
@property(readonly, assign, nonatomic) unsigned status;
@property(copy, nonatomic) NSString* timestampText;
+(CGSize)preferredSizeForTimestampText:(id)timestampText status:(unsigned)status;
+(float)starIconSizeForTimestampFont:(id)timestampFont;
+(void)initialize;
-(void).cxx_destruct;
-(void)updateStatusImageAnimated:(BOOL)animated;
-(void)animateStatusImageChange;
-(id)statusImage;
-(void)setStarIconHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setStatus:(unsigned)status animated:(BOOL)animated;
-(void)updateTimestampLabelStyle;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestContactsSync : XMPPRequest {
}
@property(copy, nonatomic) id completion;
+(id)contactsSyncContextTypeToString:(unsigned)string;
+(id)contactsSyncModeTypeToString:(unsigned)string;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithContactsSyncContext:(id)contactsSyncContext completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAOffsetsFile : NSObject {
	NSFileHandle* _handle;
	unsigned long long* _offsets;
	unsigned _lastChangedBlock;
	unsigned _count;
}
@property(readonly, assign, nonatomic) unsigned count;
-(void).cxx_destruct;
-(void)dealloc;
-(unsigned)blockForIndex:(unsigned)index;
-(void)save;
-(void)invalidateFromIndex:(unsigned)index;
-(void)loadBlock:(unsigned)block;
-(void)setOffset:(unsigned long long)offset atIndex:(unsigned)index;
-(unsigned long long)offsetAtIndex:(unsigned)index;
-(void)initializeArray;
-(void)determineCountWithMaximum:(unsigned)maximum;
-(id)initWithPath:(id)path andCount:(unsigned)count;
@end

__attribute__((visibility("hidden")))
@interface WAWebBinaryCoder : XMPPBinaryCoder {
}
+(id)sharedWebBinaryCoder;
-(id)unserialize:(id)unserialize encKey:(const void*)key macKey:(const void*)key3 streamError:(out BOOL*)error;
-(id)serialize:(id)serialize encKey:(const void*)key macKey:(const void*)key3;
@end

__attribute__((visibility("hidden")))
@interface PeopleMultiPickerNavigationController : UINavigationController <GroupViewControllerDelegate, PeopleViewControllerDelegate> {
	GroupViewController* _groupController;
	NSMutableDictionary* _peopleViewControllers;
	unsigned _pickerMode;
	int _selectionLimit;
	int _tag;
	NSArray* _selectedContacts;
}
@property(assign, nonatomic) __weak id<UINavigationControllerDelegate, PeopleMultiPickerNavigationControllerDelegate> delegate;
@property(retain, nonatomic) NSArray* selectedContacts;
@property(assign, nonatomic) int tag;
@property(assign, nonatomic) int selectionLimit;
@property(assign, nonatomic) unsigned pickerMode;
-(void).cxx_destruct;
-(void)peopleViewControllerDidCancel:(id)peopleViewController;
-(void)peopleViewController:(id)controller didSelectContacts:(id)contacts;
-(void)groupViewControllerDidCancel:(id)groupViewController;
-(void)groupViewController:(id)controller didSelectGroupWithID:(id)anId;
-(void)viewDidLoad;
-(void)loadPeopleViewController:(int)controller;
-(void)loadGroupViewController;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface GroupViewController : WATableViewController {
	NSMutableArray* _groupList;
	BOOL _showCancelButton;
	id<GroupViewControllerDelegate> _delegate;
}
@property(assign, nonatomic) BOOL showCancelButton;
@property(assign, nonatomic) __weak id<GroupViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)viewDidLoad;
-(void)cancelAction:(id)action;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAQRCodeScannerViewController : WABasicCameraViewController <WAWebClientQRHelpViewDelegate> {
	NSString* _lastQRCode;
	UIView* _shutterView;
	WAShapeView* _maskView;
	UILabel* _titleLabel;
	UIView* _titleBackgroundView;
	WAWebClientQRHelpView* _helpView;
	UIButton* _dismissButton;
	UIActivityIndicatorView* _spinner;
	id<WAQRCodeScannerViewControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAQRCodeScannerViewControllerDelegate> delegate;
+(BOOL)statusBarHidden;
+(int)cameraMode;
-(void).cxx_destruct;
-(void)dismissHelpView:(id)view;
-(void)webClientQRHelpViewDidCompleteFirstIteration:(id)webClientQRHelpView;
-(void)cameraController:(id)controller didDetectQRCode:(id)code;
-(void)handleTapToFocus:(id)focus;
-(void)cameraControllerSessionDidBeginRunning:(id)cameraControllerSession;
-(void)didCreateCameraController;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)wa_applicationDidEnterBackground;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface PeopleViewController : WAViewController <WAContactsSearchControllerDelegate> {
	UIBarButtonItem* _buttonSelectAll;
	NSArray* _sections;
	WAContactsSearchController* _searchController;
	NSArray* _searchResults;
	NSSet* _blockedJIDs;
	int _numberOfContacts;
	int _selectedCount;
	BOOL _dataAvailable;
	int _centerRowIndexPortrait;
	int _centerRowIndexLandscape;
	int _groupID;
	unsigned _pickerMode;
	int _selectionLimit;
	NSArray* _selectedContacts;
	id<PeopleViewControllerDelegate> _delegate;
	UITableView* _tableViewContacts;
	UILabel* _labelLoading;
	UITableViewCell* _cellLoading;
	UIActivityIndicatorView* _aiLoading;
	UILabel* _labelContactsTotal;
	UITableViewCell* _cellContactsTotal;
	UILabel* _labelNoContacts;
	UITableViewCell* _cellNoContacts;
	UIToolbar* _toolbarBottom;
	UIBarButtonItem* _buttonSelectDone;
	UIBarButtonItem* _buttonCancel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIBarButtonItem* buttonCancel;
@property(retain, nonatomic) UIBarButtonItem* buttonSelectDone;
@property(retain, nonatomic) UIToolbar* toolbarBottom;
@property(retain, nonatomic) UITableViewCell* cellNoContacts;
@property(retain, nonatomic) UILabel* labelNoContacts;
@property(retain, nonatomic) UITableViewCell* cellContactsTotal;
@property(retain, nonatomic) UILabel* labelContactsTotal;
@property(retain, nonatomic) UIActivityIndicatorView* aiLoading;
@property(retain, nonatomic) UITableViewCell* cellLoading;
@property(retain, nonatomic) UILabel* labelLoading;
@property(retain, nonatomic) UITableView* tableViewContacts;
@property(assign, nonatomic) __weak id<PeopleViewControllerDelegate> delegate;
@property(retain, nonatomic) NSArray* selectedContacts;
@property(assign, nonatomic) int selectionLimit;
@property(assign, nonatomic) unsigned pickerMode;
@property(assign, nonatomic) int groupID;
-(void).cxx_destruct;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller willHideSearchResultsTableView:(id)view;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)selectAllAction:(id)action;
-(void)cancelAction:(id)action;
-(void)doneSelectingAction:(id)action;
-(void)contactsSearchControllerDelegateDidInvalidateSearchResults:(id)contactsSearchControllerDelegate;
-(void)searchWithCriteria:(id)criteria;
-(id)contactInfoForTableIndexPath:(id)tableIndexPath;
-(void)adjustSearchbarPositionAndTableviewInsets;
-(void)alignActivityIndicator;
-(void)checkDataAvailability:(id)availability;
-(void)setupDisplayList;
-(void)updateTableHeader;
-(BOOL)displaySearchBar;
-(void)formatButtonText;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface PersonTableViewCell : UITableViewCell {
	BOOL _personSelected;
	UIImageView* _imageViewCheckMark;
	WAContactNameLabel* _nameLabel;
	UILabel* _statusLabel;
	UILabel* _detailLabel;
}
@property(assign, nonatomic) BOOL personSelected;
@property(readonly, assign, nonatomic) UILabel* detailLabel;
@property(readonly, assign, nonatomic) UILabel* statusLabel;
@property(readonly, assign, nonatomic) WAContactNameLabel* nameLabel;
@property(readonly, assign, nonatomic) UIImageView* imageViewCheckMark;
-(void).cxx_destruct;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)updateBackgroundColor;
-(void)tintColorDidChange;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PersonViewController : WAContactInfoBaseViewController <MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate> {
	int _displayedContactID;
	NSMutableDictionary* _viewStarredMessages;
	NSMutableDictionary* _viewMediaInfo;
	NSDictionary* _muteContactAction;
	NSMutableArray* _personData;
	NSMutableArray* _phonesForFavs;
	NSMutableArray* _phonesForChat;
	NSMutableArray* _contactEmails;
	NSMutableString* _contactName;
	WAContact* _contact;
	unsigned _selectedPhoneIndex;
	BOOL _showTableFooter;
	BOOL _enableClearButton;
	UIView* _callHistoryHeaderView;
	NSMutableDictionary* _blockStatusRowInfo;
	BOOL _showMergedContact;
	BOOL _hasLinkedContacts;
	int _willDeleteMessagesCounter;
	BOOL _willDeleteWebURLMessages;
	UIView* _headerView;
	UIButton* _buttonProfilePhoto;
	UIView* _titlesView;
	UILabel* _textLabelFullName;
	UILabel* _textLabelPhonetic;
	UILabel* _textLabelNickname;
	UILabel* _textLabelJob;
	UILabel* _textLabelCompany;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* textLabelCompany;
@property(retain, nonatomic) UILabel* textLabelJob;
@property(retain, nonatomic) UILabel* textLabelNickname;
@property(retain, nonatomic) UILabel* textLabelPhonetic;
@property(retain, nonatomic) UILabel* textLabelFullName;
@property(retain, nonatomic) UIView* titlesView;
@property(retain, nonatomic) UIButton* buttonProfilePhoto;
@property(retain, nonatomic) UIView* headerView;
+(id)sharedTimePeriodFormatter;
-(void).cxx_destruct;
-(void)setAggregateCallEvent:(id)event;
-(void)wa_applicationDidEnterBackground;
-(void)chatStorageDidUpdateChatSession:(id)chatStorage;
-(void)mediaManagerDidChangeContent;
-(void)didDeleteMessages:(id)messages;
-(void)willDeleteMessages:(id)messages;
-(void)didAddMessages:(id)messages;
-(void)updateClearButtonsWithAnimation:(BOOL)animation;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)muteContactUntil:(id)until;
-(void)addToFavorites;
-(void)addPhoneToFavorites:(id)favorites;
-(void)chatWithContact;
-(void)startChatWithPhone:(id)phone contact:(id)contact;
-(void)updateStarredMessagesCount;
-(void)updateViewMediaInfoCount;
-(void)setUpMediaManager;
-(void)clearChatHistory;
-(void)emailChatHistory;
-(void)emailHistoryForChatSession:(id)chatSession;
-(void)reallyEmailHistoryForChatSession:(id)chatSession withMedia:(BOOL)media;
-(void)inviteContact;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)sendTextInvitationTo:(id)to;
-(void)sendEmailInvitationTo:(id)to;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)sendEmailTo:(id)to subject:(id)subject body:(id)body;
-(void)contactBlockedStatusDidChange;
-(void)updateBlockStatusRowInfo;
-(void)reloadBlockedStatusForCurrentContact;
-(void)setUpUnknownContactData;
-(void)setupPersonData;
-(void)setupPersonViewHeader;
-(id)contact;
-(void)prepareMergedContactIfNeeded;
-(void)reloadProfilePhoto;
-(void)reload;
-(void)reloadWithContact:(id)contact;
-(void)viewProfilePhoto:(id)photo;
-(id)initWithContact:(id)contact merged:(BOOL)merged whatsAppID:(id)anId detailText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface PropertyTableViewCell : UITableViewCell {
	UILabel* _labelLabel;
	UILabel* _labelValue;
	UILabel* _labelComment;
	UIImageView* _imageViewStar;
	BOOL _isFavorite;
	BOOL _valueHighlighted;
	BOOL _popupActive;
	NSTimer* _popupTimer;
}
@property(readonly, assign, nonatomic) BOOL popupActive;
@property(assign, nonatomic) BOOL valueHighlighted;
@property(assign, nonatomic) BOOL isFavorite;
@property(readonly, assign, nonatomic) UILabel* labelComment;
@property(readonly, assign, nonatomic) UILabel* labelValue;
@property(readonly, assign, nonatomic) UILabel* labelLabel;
+(float)heightForText:(id)text withFont:(id)font hasComment:(BOOL)comment hasStar:(BOOL)star cellWidth:(float)width;
+(id)commentFont;
+(id)valueFont;
+(id)labelFont;
+(id)commentTextColorSelected;
+(id)commentTextColorNormal;
+(id)valueTextColorHighlighted;
+(id)valueTextColorSelected;
+(id)valueTextColorNormal;
+(id)labelTextColorSelected;
+(id)labelTextColorNormal;
-(void).cxx_destruct;
-(void)didHideMenu;
-(void)showCopyPasteView:(id)view;
-(void)copy:(id)copy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _WANoCursorTextField : WAContactPropertyTextField <UITextFieldDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(id)selectedTextRange;
-(CGRect)caretRectForPosition:(id)position;
@end

__attribute__((visibility("hidden")))
@interface WAContactDateEditingCell : WAContactMultiValueEditingCell {
}
-(void)reconfigure;
-(void)updateContactPropertyWithDate:(id)date;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAPushSound : NSObject {
	BOOL _defaultSound;
	NSString* _name;
	NSString* _filename;
}
@property(assign, nonatomic, getter=isDefaultSound) BOOL defaultSound;
@property(readonly, assign, nonatomic) NSString* filename;
@property(readonly, assign, nonatomic) NSString* name;
+(id)pushSoundWithName:(id)name filename:(id)filename;
-(void).cxx_destruct;
-(int)compare:(id)compare;
-(id)initWithName:(id)name filename:(id)filename;
@end

__attribute__((visibility("hidden")))
@interface WAPushSoundSet : NSObject <NSCopying> {
	NSString* _name;
	NSArray* _sounds;
}
@property(retain, nonatomic) NSArray* sounds;
@property(copy, nonatomic) NSString* name;
+(id)findSoundByFilename:(id)filename inSoundSets:(id)soundSets returningSetIndex:(unsigned*)index returningSoundIndex:(unsigned*)index4;
+(id)setWithName:(id)name sounds:(id)sounds;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(unsigned)indexOfPushSoundWithFilename:(id)filename;
-(void)insertPushSound:(id)sound atIndex:(unsigned)index;
-(void)removePushSoundAtIndex:(unsigned)index;
-(id)pushSoundAtIndex:(unsigned)index;
-(id)initWithName:(id)name sounds:(id)sounds;
@end

__attribute__((visibility("hidden")))
@interface PhoneInputViewController : WATableViewController <WACountryPickerControllerDelegate, MFMailComposeViewControllerDelegate, WAPhoneNumberTextFieldDelegate> {
	CountryInfo* _selectedCountry;
	NSString* _phoneNumber;
	NSDictionary* _urlParameters;
	id _phoneConfirmAlert;
	WAOverlayView* _overlayView;
	BOOL _registrationUI;
	id<PhoneInputViewControllerDelegate> _delegate;
	UIView* _headerView;
	UILabel* _labelHeaderText;
	UIView* _footerView;
	UILabel* _labelFooterText;
	UIView* _viewInputFieldsContainer;
	UIView* _viewCCodeContainer;
	UILabel* _labelPlusSign;
	UILabel* _labelCCode;
	UITextField* _textFieldCode;
	UIImageView* _imageCodeBg;
	UIView* _viewPhoneNumberContainer;
	WAPhoneNumberTextField* _phoneNumberTextField;
	UIImageView* _imagePhoneBg;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIImageView* imagePhoneBg;
@property(retain, nonatomic) WAPhoneNumberTextField* phoneNumberTextField;
@property(retain, nonatomic) UIView* viewPhoneNumberContainer;
@property(retain, nonatomic) UIImageView* imageCodeBg;
@property(retain, nonatomic) UITextField* textFieldCode;
@property(retain, nonatomic) UILabel* labelCCode;
@property(retain, nonatomic) UILabel* labelPlusSign;
@property(retain, nonatomic) UIView* viewCCodeContainer;
@property(retain, nonatomic) UIView* viewInputFieldsContainer;
@property(retain, nonatomic) UILabel* labelFooterText;
@property(retain, nonatomic) UIView* footerView;
@property(retain, nonatomic) UILabel* labelHeaderText;
@property(retain, nonatomic) UIView* headerView;
@property(assign, nonatomic) BOOL registrationUI;
@property(assign, nonatomic) __weak id<PhoneInputViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)deviceCheckFailedWithError:(id)error;
-(void)deviceCheckFinishedWithResult:(id)result;
-(void)launchedFromUrl:(id)url;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)countryPicker:(id)picker didSelectCountry:(id)country;
-(BOOL)phoneNumberTextFieldShouldReturn:(id)phoneNumberTextField;
-(void)phoneNumberTextFieldDidChange:(id)phoneNumberTextField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(id)verificationCodeFromUrl;
-(void)resetPhoneNumber;
-(void)cancelAction:(id)action;
-(void)doneAction:(id)action;
-(void)codeChangedAction:(id)action;
-(void)wa_tintColorDidChange;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)adjustHeaderTextFontSizeToFit;
-(void)updateHeaderTextForRegistration;
-(void)wa_applicationWillEnterForeground;
-(void)confirmNewChat;
-(void)showIncorrectPhoneNumberLengthAlert:(BOOL)alert;
-(void)showAppStoreAlert:(id)alert;
-(void)showContactSupportAlert:(id)alert withContext:(id)context;
-(void)requestAuthCode;
-(void)performSameDeviceCheck;
-(void)resizeHelperTextLabels;
-(void)formatCodeField;
-(void)formatTitle;
-(void)validateUserInput;
-(void)showOverlay:(id)overlay;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface _WAContactUsTableViewCell : UITableViewCell {
}
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface AboutViewController : WAViewController <ABDisabledControllerDelegate> {
	WASupportEmailComposer* _emailComposer;
	UITableViewCell* _cellHelpFAQ;
	UITableViewCell* _cellContactUs;
	UITableView* _tableViewButtons;
	UIView* _viewDivider;
	UIView* _viewLogoContainer;
	UIImageView* _imageLogo;
	UIImageView* _imageWP;
	UILabel* _labelTitlePortrait;
	UILabel* _labelVersionPortrait;
	UIView* _viewTableHeader;
	UILabel* _labelTitleLandscape;
	UILabel* _labelVersionLandscape;
	UIView* _footerView;
	UILabel* _labelCopyright;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* labelCopyright;
@property(retain, nonatomic) UIView* footerView;
@property(retain, nonatomic) UILabel* labelVersionLandscape;
@property(retain, nonatomic) UILabel* labelTitleLandscape;
@property(retain, nonatomic) UIView* viewTableHeader;
@property(retain, nonatomic) UILabel* labelVersionPortrait;
@property(retain, nonatomic) UILabel* labelTitlePortrait;
@property(retain, nonatomic) UIImageView* imageWP;
@property(retain, nonatomic) UIImageView* imageLogo;
@property(retain, nonatomic) UIView* viewLogoContainer;
@property(retain, nonatomic) UIView* viewDivider;
@property(retain, nonatomic) UITableView* tableViewButtons;
-(void).cxx_destruct;
-(id)helperTextForABDisabledViewController:(id)abdisabledViewController;
-(id)helperTitleForABDisabledViewController:(id)abdisabledViewController;
-(void)abDisabledViewControllerDidCancel:(id)abDisabledViewController;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)openFAQAction;
-(void)contactUsAction;
-(void)setContactUsCellEnabled:(BOOL)enabled;
-(void)updateLayoutToOrientation:(int)orientation;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WebContentViewController : WAViewController {
	BOOL _scalesPageToFit;
	BOOL _showActionButton;
	BOOL _navigationRestricted;
	BOOL _shouldGoBack;
	NSString* _pageTitle;
	int _mode;
	NSURL* _baseURL;
	NSURL* _currentURL;
	NSString* _htmlString;
	UIView* _webView;
	UILabel* _noConnectionLabel;
	UIBarButtonItem* _bbItemReload;
	UIBarButtonItem* _bbItemClose;
	UIBarButtonItem* _bbItemAction;
	UIBarButtonItem* _bbItemActivityIndicator;
}
@property(retain, nonatomic) UIBarButtonItem* bbItemActivityIndicator;
@property(retain, nonatomic) UIBarButtonItem* bbItemAction;
@property(retain, nonatomic) UIBarButtonItem* bbItemClose;
@property(retain, nonatomic) UIBarButtonItem* bbItemReload;
@property(retain, nonatomic) UILabel* noConnectionLabel;
@property(retain, nonatomic) UIView* webView;
@property(copy, nonatomic) NSString* htmlString;
@property(retain, nonatomic) NSURL* currentURL;
@property(retain, nonatomic) NSURL* baseURL;
@property(assign, nonatomic) BOOL shouldGoBack;
@property(assign, nonatomic) int mode;
@property(assign, nonatomic) BOOL navigationRestricted;
@property(assign, nonatomic) BOOL showActionButton;
@property(assign, nonatomic) BOOL scalesPageToFit;
@property(copy, nonatomic) NSString* pageTitle;
+(id)controllerHTMLString:(id)string baseURL:(id)url;
+(id)controllerWithURL:(id)url;
-(void).cxx_destruct;
-(void)wa_applicationDidEnterBackground;
-(void)reload;
-(void)closeAction:(id)action;
-(void)action:(id)action;
-(void)reloadAction:(id)action;
-(void)hideActivityIndicatorWithError:(BOOL)error;
-(void)showActivityIndicator;
-(void)setTitleBarText:(id)text;
-(void)dismissControllerAnimated:(BOOL)animated;
-(void)goBackIfNecessary;
-(void)viewDidLayoutSubviews;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithURL:(id)url;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface _WebContentViewControllerModern : WebContentViewController <WKNavigationDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)webView:(id)view didFailProvisionalNavigation:(id)navigation withError:(id)error;
-(void)webView:(id)view decidePolicyForNavigationAction:(id)navigationAction decisionHandler:(id)handler;
-(void)webView:(id)view didFinishNavigation:(id)navigation;
-(void)webView:(id)view didStartProvisionalNavigation:(id)navigation;
-(void)dismissControllerAnimated:(BOOL)animated;
-(void)reload;
-(void)dealloc;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface _WebContentViewControllerLegacy : WebContentViewController <UIWebViewDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)dismissControllerAnimated:(BOOL)animated;
-(void)reload;
-(void)dealloc;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WAMediaGalleryCell : WAMediaCollectionViewCell {
	NSBlockOperation* _thumbnailLoadingOp;
	int _loadingID;
	NSManagedObjectID* _messageID;
	id<WAMediaGalleryCellMenuDelegate> _menuDelegate;
}
@property(assign, nonatomic) __weak id<WAMediaGalleryCellMenuDelegate> menuDelegate;
-(void).cxx_destruct;
-(id)baseAccessibilityValue;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)copyMessage:(id)message;
-(void)markMessageAsStarred:(id)starred;
-(void)loadThumbnailForMessage:(id)message loadingID:(int)anId inOperation:(id)operation;
-(void)cancelThumbnailLoading;
-(void)loadThumbnailForMessage:(id)message inQueue:(id)queue;
-(void)didMoveToWindow;
-(void)prepareForReuse;
-(void)setThumbnail:(id)thumbnail forMessage:(id)message;
@end

__attribute__((visibility("hidden")))
@interface ContactsNavigationController : WANavigationController <GroupViewControllerDelegate> {
	GroupViewController* _groupController;
	NSMutableDictionary* _contactViewControllers;
}
-(void).cxx_destruct;
-(void)groupViewController:(id)controller didSelectGroupWithID:(id)anId;
-(id)init;
-(void)popToMainViewControllerAnimated:(BOOL)mainViewControllerAnimated;
-(void)reloadViewControllers;
-(void)loadContactsViewController:(int)controller;
-(void)loadGroupViewController;
@end

__attribute__((visibility("hidden")))
@interface WACopyOperation : WABackupOperation {
	unsigned long long _bytesWritten;
	unsigned long long _bytesToWrite;
	BOOL _succeeded;
	BOOL _overwrite;
	BOOL _atomic;
	BOOL _remove;
	BOOL _optional;
	NSString* _source;
	NSString* _destination;
}
@property(retain) NSString* destination;
@property(retain) NSString* source;
@property(assign) BOOL optional;
@property(assign) BOOL remove;
@property(assign) BOOL atomic;
@property(assign) BOOL overwrite;
-(void).cxx_destruct;
-(unsigned)chunkedCopyFromHandle:(id)handle toHandle:(id)handle2;
-(unsigned)chunkedCopyFromPath:(id)path toPath:(id)path2;
-(unsigned)copyFile;
-(void)run;
-(float)progress;
-(BOOL)succeeded;
-(id)initWithSource:(id)source andDestination:(id)destination;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface TimePeriodFormatter : NSNumberFormatter {
}
+(id)formatWithAppropriateTimeUnit:(long)appropriateTimeUnit;
+(id)pluralYears:(int)years;
+(id)pluralMonths:(int)months;
+(id)pluralDays:(int)days;
+(id)pluralHours:(int)hours;
+(id)pluralMinutes:(int)minutes;
+(id)pluralSeconds:(int)seconds;
-(id)stringFromTimeInterval:(double)timeInterval;
@end

__attribute__((visibility("hidden")))
@interface _WACountryTableViewCell : UITableViewCell {
	NSLayoutConstraint* _countryCodeTrailingToSuperview;
	UILabel* _countryNameLabel;
	UILabel* _countryCodeLabel;
}
@property(readonly, assign, nonatomic) UILabel* countryCodeLabel;
@property(readonly, assign, nonatomic) UILabel* countryNameLabel;
-(void).cxx_destruct;
-(void)setAccessoryType:(int)type;
-(void)addAutoLayoutConstraints;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WACountryPickerController : WATableViewController <UISearchBarDelegate, UISearchDisplayDelegate, UITableViewDataSource, UITableViewDelegate> {
	NSArray* _preferredCountries;
	NSArray* _otherCountries;
	NSMutableArray* _searchResults;
	UISearchDisplayController* _searchController;
	CountryInfo* _selectedCountry;
	id<WACountryPickerControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WACountryPickerControllerDelegate> delegate;
@property(retain, nonatomic) CountryInfo* selectedCountry;
+(id)controllerWithDelegate:(id)delegate;
-(void).cxx_destruct;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)filterContentForSearchText:(id)searchText;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WARequireOperation : WABackupOperation {
	WAActionManager* _manager;
	unsigned _code;
	NSMutableArray* _actions;
}
@property(retain) NSMutableArray* actions;
-(void).cxx_destruct;
-(void)cancel;
-(void)run;
-(void)addAction:(id)action;
-(id)initWithActionManager:(id)actionManager andCode:(unsigned)code;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface FMResultSet : NSObject {
	FMDatabase* _parentDB;
	FMStatement* _statement;
	NSString* _query;
	NSMutableDictionary* _columnNameToIndexMap;
}
@property(retain) FMStatement* statement;
@property(readonly, assign) NSMutableDictionary* columnNameToIndexMap;
@property(retain) NSString* query;
+(id)resultSetWithStatement:(id)statement usingParentDatabase:(id)database;
-(void).cxx_destruct;
-(id)objectForKeyedSubscript:(id)keyedSubscript;
-(id)objectAtIndexedSubscript:(int)indexedSubscript;
-(void)setParentDB:(id)db;
-(id)columnNameForIndex:(int)index;
-(id)objectForColumnName:(id)columnName;
-(id)objectForColumnIndex:(int)columnIndex;
-(const char*)UTF8StringForColumnName:(id)columnName;
-(const char*)UTF8StringForColumnIndex:(int)columnIndex;
-(BOOL)columnIsNull:(id)null;
-(BOOL)columnIndexIsNull:(int)null;
-(id)dataNoCopyForColumnIndex:(int)columnIndex;
-(id)dataNoCopyForColumn:(id)column;
-(id)dataForColumnIndex:(int)columnIndex;
-(id)dataForColumn:(id)column;
-(id)dateForColumnIndex:(int)columnIndex;
-(id)dateForColumn:(id)column;
-(id)stringForColumn:(id)column;
-(id)stringForColumnIndex:(int)columnIndex;
-(double)doubleForColumnIndex:(int)columnIndex;
-(double)doubleForColumn:(id)column;
-(BOOL)boolForColumnIndex:(int)columnIndex;
-(BOOL)boolForColumn:(id)column;
-(unsigned long long)unsignedLongLongIntForColumnIndex:(int)columnIndex;
-(unsigned long long)unsignedLongLongIntForColumn:(id)column;
-(long long)longLongIntForColumnIndex:(int)columnIndex;
-(long long)longLongIntForColumn:(id)column;
-(long)longForColumnIndex:(int)columnIndex;
-(long)longForColumn:(id)column;
-(int)intForColumnIndex:(int)columnIndex;
-(int)intForColumn:(id)column;
-(int)columnIndexForName:(id)name;
-(BOOL)hasAnotherRow;
-(int)wa_nextWithResultCode;
-(BOOL)next;
-(id)resultDictionary;
-(id)resultDict;
-(void)kvcMagic:(id)magic;
-(int)columnCount;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

__attribute__((visibility("hidden")))
@interface WAVideoEditorController : WAVideoPreviewViewController <WAMediaPlayerDelegate, WAVideoScrubberDelegate, UIGestureRecognizerDelegate, WAImageToImageTransitioning> {
	WAMediaPlayer* _mediaPlayer;
	WAVideoScrubber* _videoScrubber;
	UIView* _videoScrubberContainerView;
	BOOL _videoScrubberHidden;
	AVMutableComposition* _composition;
	AVMutableVideoComposition* _videoComposition;
	AVMutableCompositionTrack* _videoCompositionTrack;
	AVURLAsset* _originalAsset;
	AVAssetTrack* _videoTrack;
	AVAssetTrack* _audioTrack;
	CGSize _videoPresentationSize;
	int _slowMotionFactor;
	BOOL _fullscreenMode;
	UIBarButtonItem* _playButtonItem;
	UIBarButtonItem* _pauseButtonItem;
	UIBarButtonItem* _spaceButtonItem;
	AVAssetImageGenerator* _lastImageGenerator;
	WABorderlessToolbar* _toolbar;
	XXStruct_pwHToB _sourceTimeToSeekOnPlayerLoad;
	XXStruct_yD8eWC _compositionSlowMotionTimeRange;
	BOOL _waitingToReprocessVideo;
	BOOL _initialTranscodeStarted;
	UIView* _postSeekSnapshot;
	BOOL _isHidingKeyboard;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(int)captionBarStyle;
-(void).cxx_destruct;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)mediaPlayerDidEndScrubbing:(id)mediaPlayer;
-(void)mediaPlayerDidBeginScrubbing:(id)mediaPlayer;
-(void)mediaPlayerDidFinishLoading:(id)mediaPlayer;
-(void)mediaPlayerDidPlayToEndTime:(id)mediaPlayer;
-(void)mediaPlayerDidChangeCurrentTime:(id)mediaPlayer;
-(void)mediaPlayerStatusDidChange:(id)mediaPlayerStatus;
-(void)mediaPlayerDidRequestPlaybackStart:(id)mediaPlayer;
-(CGSize)videoScrubberThumbnailAspectRatio:(id)ratio;
-(void)videoScrubber:(id)scrubber videoFramesAtTimes:(id)times size:(CGSize)size tolerance:(XXStruct_pwHToB)tolerance block:(id)block;
-(void)videoScrubberDidEndScrubbing:(id)videoScrubber;
-(void)videoScrubberDidChangeCurrentTime:(id)videoScrubber;
-(void)videoScrubberDidBeginScrubbing:(id)videoScrubber pausePlayback:(BOOL)playback;
-(void)videoScrubberDidChangeSlowMotionTimeRange:(id)videoScrubber;
-(void)videoScrubberDidChangeTrimmedTimeRange:(id)videoScrubber;
-(XXStruct_pwHToB)sourceTimeFromPlayerTime:(XXStruct_pwHToB)playerTime;
-(XXStruct_pwHToB)playerTimeFromSourceTime:(XXStruct_pwHToB)sourceTime;
-(void)pauseButtonTapped:(id)tapped;
-(void)playButtonTapped:(id)tapped;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)viewTapped:(id)tapped;
-(void)captionBarDidHideKeyboard:(id)captionBar;
-(void)captionBarWillHideKeyboard:(id)captionBar;
-(void)captionBarWillShowKeyboard:(id)captionBar;
-(void)setProgressViewHidden:(BOOL)hidden;
-(void)updateThumb;
-(void)updateSendButton;
-(void)sendVideo:(id)video;
-(id)videoCompositionForTranscode;
-(id)assetToTranscode;
-(XXStruct_yD8eWC)timeRangeToExport;
-(BOOL)internalRequiresTranscoding;
-(void)reprocessVideo;
-(void)cancelReprocessVideoAfterDelay;
-(void)reprocessVideoAfterDelay;
-(void)updateMediaPlayerPlaybackTimeRange;
-(void)rebuildCompositionSeekingToSourceTime:(XXStruct_pwHToB)sourceTime;
-(BOOL)isOriginalAssetValid;
-(void)setVideoScrubberHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)layoutInterface;
-(void)loadOriginalAssetWithCompletionHandler:(id)completionHandler;
-(void)setFullscreenMode:(BOOL)mode animated:(BOOL)animated;
-(void)setFullscreenMode:(BOOL)mode;
-(void)viewDidLayoutSubviews;
-(void)updateBottomToolbar;
-(id)rotatingFooterView;
-(id)shadowViewInView:(id)view;
-(void)setNavigationBarShadowHidden:(BOOL)hidden;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)configureVideoScrubber;
-(void)viewDidLoad;
-(void)wa_fontSizeDidChange;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WADataFormatters : NSObject {
}
+(id)backupSizeStringFromLongLong:(long long)longLong;
+(id)sizeStringFromLongLong:(long long)longLong;
+(id)localizedStringWithFormat:(id)format number:(id)number;
+(id)dayOfTheWeekFromDate:(id)date;
+(id)messageTimestampStringFromDate:(id)date;
+(id)messageDateStringFromDate:(id)date;
+(id)dateTimeStringFromDate:(id)date;
+(id)chatTimestampFromDate:(id)date;
+(id)lastActiveStringFromDate:(id)date;
+(id)lastSeenStringFromDate:(id)date;
+(id)fullWeekdayFormatter;
+(id)dateFormatterMediumStyleNoYear;
+(id)sharedCalendar;
+(id)shortWeekdayFormatter;
+(id)messageTimestampFormatter;
+(id)dateTimeFormatterLongStyleNoYear;
+(id)dateTimeFormatterLongStyle;
+(id)dateTimeFormatter;
+(id)timeFormatter;
+(id)dateFormatterMediumStyle;
+(id)dateFormatterShortStyle;
+(id)numberFormatter;
+(void)currentLocaleDidChange:(id)currentLocale;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface PassInputViewController : WAViewController {
	int _uiBlockState;
	UIImageView* _imageViewStop;
	UIImageView* _imageViewStop2;
	WAOverlayView* _overlayView;
	float _keyboardHeight;
	NSTimer* _blockTimer;
	NSTimer* _callButtonTimer;
	NSTimer* _editButtonTimer;
	BOOL _shouldShowActivityIndicator;
	BOOL _registerRequestInProgress;
	NSString* _learnMoreUrl;
	NSString* _verificationCodeFromUrl;
	BOOL _changePhoneNumberMode;
	id<PassInputViewControllerDelegate> _delegate;
	UIView* _viewContainer;
	UILabel* _labelHelperText1;
	UILabel* _labelHelperText2;
	UIView* _viewCodeInputFields;
	UITextField* _textFieldCode;
	UITextField* _textFieldCode2;
	UILabel* _labelCode;
	UILabel* _labelCode2;
	UIView* _viewRetryButtons;
	UIButton* _buttonResend;
	UIButton* _buttonCall;
	UIView* _viewUIBlocked;
	UILabel* _labelUIBlocked;
	UIProgressView* _progressViewBlock;
}
@property(retain, nonatomic) UIProgressView* progressViewBlock;
@property(retain, nonatomic) UILabel* labelUIBlocked;
@property(retain, nonatomic) UIView* viewUIBlocked;
@property(retain, nonatomic) UIButton* buttonCall;
@property(retain, nonatomic) UIButton* buttonResend;
@property(retain, nonatomic) UIView* viewRetryButtons;
@property(retain, nonatomic) UILabel* labelCode2;
@property(retain, nonatomic) UILabel* labelCode;
@property(retain, nonatomic) UITextField* textFieldCode2;
@property(retain, nonatomic) UITextField* textFieldCode;
@property(retain, nonatomic) UIView* viewCodeInputFields;
@property(retain, nonatomic) UILabel* labelHelperText2;
@property(retain, nonatomic) UILabel* labelHelperText1;
@property(retain, nonatomic) UIView* viewContainer;
@property(assign, nonatomic) BOOL changePhoneNumberMode;
@property(assign, nonatomic) __weak id<PassInputViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)codeValidationFailedWithError:(id)error;
-(void)codeValidatedWithResult:(id)result;
-(void)codeOrCallRequestFailedWithError:(id)error;
-(void)callRequestFinishedWithResult:(id)result;
-(void)codeRequestFinishedWithResult:(id)result;
-(void)setVerificationCodeFromUrl:(id)url;
-(void)launchedFromUrl:(id)url;
-(void)enterVerificationCodeFromUrl:(id)url;
-(void)cancelAction:(id)action;
-(void)callMeAction:(id)action;
-(void)resendCodeAction:(id)action;
-(void)codeEditedAction:(id)action;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(int)halfCodeLength;
-(void)wa_applicationDidBecomeActive;
-(void)wa_tintColorDidChange;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)touchCatcherButtonTapped;
-(void)viewDidLoad;
-(void)requestSMSWithCode;
-(void)keyboardWillShow:(id)keyboard;
-(void)activateCodeInputFieldIfPossible;
-(void)formatCodePresentation;
-(void)finishController;
-(void)setHeaderLabelText:(BOOL)text;
-(void)showAndReleaseLearnMoreAlert:(id)alert message:(id)message url:(id)url;
-(void)showAndReleaseAppStoreAlert:(id)alert;
-(void)showAndReleaseUnspecifiedErrorAlert;
-(void)showAndReleaseGenericAlert:(id)alert;
-(void)showAndReleaseContactSupportAlert:(id)alert withContext:(id)context;
-(void)showAndReleaseCodeEntryFailedAlertWithTitle:(id)title message:(id)message;
-(void)resetCodeInput;
-(void)checkEditAvailability:(id)availability;
-(void)updateBlockState:(id)state;
-(void)checkPasscodeAttempts;
-(void)adjustHelperTextFont;
-(void)retryWithSavedPasscodeIfNeeded;
-(void)setUIBlockState:(int)state;
-(BOOL)blockStateIsBlocked;
-(void)startBlockTimer;
-(void)resizeHelperTextLabels;
-(void)layoutAllViews;
-(void)layoutUIBlockedView;
-(void)layoutRetryButtonsAnimated:(BOOL)animated;
-(void)updateCallButtonTitle:(id)title;
-(void)enableCallButtonTimer:(BOOL)timer;
-(void)hideOverlayWithCompletion:(id)completion setViewTitle:(id)title;
-(void)showOverlay:(id)overlay;
-(id)authCode;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAAxolotlCryptoProvider : NSObject {
}
-(void)setCallbacks:(axolotl_crypto_provider*)callbacks;
@end

__attribute__((visibility("hidden")))
@interface StatusListViewController : WATableViewController <WAStatusListEditViewControllerDelegate, StatusEditControllerDelegate> {
	UIBarButtonItem* _editButton;
	UIView* _viewEmptyStatusList;
	UILabel* _labelEmptyStatusList;
	UIView* _viewTableFooter;
	UIButton* _buttonClearStatus;
}
@property(retain, nonatomic) UIButton* buttonClearStatus;
@property(retain, nonatomic) UIView* viewTableFooter;
@property(retain, nonatomic) UILabel* labelEmptyStatusList;
@property(retain, nonatomic) UIView* viewEmptyStatusList;
-(void).cxx_destruct;
-(void)statusEditController:(id)controller didSaveStatus:(id)status;
-(void)statusEditControllerDidCancel:(id)statusEditController;
-(void)statusListEditViewViewControllerDidFinish:(id)statusListEditViewViewController;
-(void)addSpinnerToTableViewCell:(id)tableViewCell;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)leaveEditMode;
-(void)editAction:(id)action;
-(void)clearStatusAction:(id)action;
-(void)addStatusAction:(id)action;
-(void)wa_fontSizeDidChange;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)chatManagerDidUpdateStatus:(id)chatManager;
-(void)setStatus:(id)status;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAWebClientUtils : NSObject {
}
+(BOOL)isQRCodeWellFormed:(id)formed;
+(void)showSignInErrorMessage;
+(void)showNoConnectionErrorMessage;
@end

__attribute__((visibility("hidden")))
@interface SoundEffect : NSObject {
	unsigned long _soundID;
}
+(id)soundEffectWithContentsOfFile:(id)file;
-(void)dealloc;
-(void)play;
-(id)initWithContentsOfFile:(id)file;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsRecord : NSObject {
	BOOL _written;
	int _type;
	int _uniqueId;
	unsigned _timestamp;
	NSString* _stringValue;
	double _numericValue;
}
@property(assign) BOOL written;
@property(assign) double numericValue;
@property(retain) NSString* stringValue;
@property(assign) unsigned timestamp;
@property(assign) int uniqueId;
@property(assign) int type;
+(id)typeToString:(int)string;
-(void).cxx_destruct;
-(id)description;
-(BOOL)isEqualToRecord:(id)record;
-(BOOL)isDimension;
-(id)initWithType:(int)type uniqueId:(int)anId timestamp:(unsigned)timestamp;
-(id)initWithType:(int)type uniqueId:(int)anId value:(double)value;
-(id)initWithType:(int)type uniqueId:(int)anId stringValue:(id)value;
@end

__attribute__((visibility("hidden")))
@interface WAEditableImageItemView : WAPageableItemView <WAEditableImagePreviewScrollViewEditingDelegate, WAEditableImageEditingViewDelegate> {
	WAEditableImagePreviewScrollView* _previewScrollView;
	WAEditableImageEditingView* _editingView;
	BOOL _isRenderedContentAvailable;
	BOOL _suppressEditingViewItemChanges;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(id)editableImageEditingViewContainingViewController:(id)controller;
-(void)editableImageEditingViewDidEndDeferringRendering:(id)editableImageEditingView;
-(void)editableImageEditingViewDidBeginDeferringRendering:(id)editableImageEditingView;
-(void)editableImageScrollViewDidEndUserScrolling:(id)editableImageScrollView;
-(void)editableImageScrollViewDidScroll:(id)editableImageScrollView;
-(void)editableImageScrollViewDidBeginUserScrolling:(id)editableImageScrollView;
-(void)editableImageScrollViewDidEndZooming:(id)editableImageScrollView withView:(id)view atScale:(float)scale;
-(void)editableImageScrollViewWillBeginZooming:(id)editableImageScrollView withView:(id)view;
-(void)editableImagePreviewScrollView:(id)view didAnimateRotationByAngle:(float)angle;
-(void)editableImagePreviewScrollView:(id)view willAnimateRotationByAngle:(float)angle;
-(void)editableImagePreviewScrollViewDidEndEditingAnimation:(id)editableImagePreviewScrollView;
-(void)editableImagePreviewScrollViewWillBeginEditingAnimation:(id)editableImagePreviewScrollView;
-(void)resetViewState;
-(void)setViewState:(id)state;
-(id)viewState;
-(void)rotateCounterClockwise;
-(void)setCropping:(BOOL)cropping;
-(void)prepareToCancelCropping;
-(void)configureWithItem:(id)item;
-(void)didSetContentInset;
-(void)setContentInsetForLayout:(UIEdgeInsets)layout;
-(id)contentView;
-(void)setNeedsLayout;
-(void)layoutSubviews;
-(CGRect)accessibilityFrame;
-(BOOL)isAccessibilityElement;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMultiShotCameraController : WANavigationController <WACameraViewControllerDelegate, WAMultiSendPreviewViewControllerDelegate, WAVideoPreviewViewControllerDelegate> {
	id<WAMultiShotCameraControllerDelegate> _cameraDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAMultiShotCameraControllerDelegate> cameraDelegate;
+(BOOL)isSupported;
-(void).cxx_destruct;
-(id)navigationController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)videoPreviewViewControllerDidCancel:(id)videoPreviewViewController;
-(void)videoPreviewViewController:(id)controller didFailWithError:(id)error;
-(void)videoPreviewViewControllerDidConfirmVideo:(id)videoPreviewViewController;
-(void)didSelectVideoFromPhotoLibrary:(id)photoLibrary cancelSelectionHandler:(id)handler;
-(void)presentMultiSendPreviewForMediaPickerAsset:(id)mediaPickerAsset identifier:(id)identifier media:(id)media;
-(void)didSelectMediaFromPhotoLibrary:(id)photoLibrary cancelSelectionHandler:(id)handler;
-(void)multiSendPreviewViewControllerDidRequestRetakePhoto:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewControllerDidCancel:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewController:(id)controller didConfirmItems:(id)items;
-(void)cameraViewController:(id)controller didSelectMediaPickerAsset:(id)asset cancelSelectionHandler:(id)handler;
-(void)cameraViewController:(id)controller didFinishWithMediaItems:(id)mediaItems;
-(void)cameraViewControllerDidCancel:(id)cameraViewController;
-(id)initWithRootViewController:(id)rootViewController;
-(id)initWithCameraRollPicker:(BOOL)cameraRollPicker;
@end

__attribute__((visibility("hidden")))
@interface _WASlideTransitionAnimationController : NSObject <UIViewControllerAnimatedTransitioning> {
	int _operation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int operation;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
@end

__attribute__((visibility("hidden")))
@interface WAStatusListEditViewController : WATableViewController <StatusEditControllerDelegate> {
	id<WAStatusListEditViewControllerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAStatusListEditViewControllerDelegate> delegate;
+(id)controllerWithDelegate:(id)delegate;
-(void).cxx_destruct;
-(void)statusEditController:(id)controller didSaveStatus:(id)status;
-(void)statusEditControllerDidCancel:(id)statusEditController;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view moveRowAtIndexPath:(id)indexPath toIndexPath:(id)indexPath3;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)viewDidLoad;
-(void)doneAction:(id)action;
-(void)deleteAllAction:(id)action;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WATranslucentTableViewCell : UITableViewCell <WAScrollTracking> {
	UIImageView* _blurMaskImageView;
	BOOL _blurEnabled;
	UIImageView* _blurOverlayImageView;
	id<WATranslucentTableViewCellDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL blurEnabled;
@property(assign, nonatomic) float translucency;
@property(assign, nonatomic) __weak id<WATranslucentTableViewCellDelegate> delegate;
@property(readonly, assign, nonatomic) UIImageView* blurOverlayImageView;
-(void).cxx_destruct;
-(void)didMoveToWindow;
-(void)setFrame:(CGRect)frame;
-(void)setDidScrollWithUserInteraction:(BOOL)scrollWithUserInteraction;
-(void)updateBlurredBackground;
-(void)tintColorDidChange;
-(id)blurMaskTrackingView;
-(id)blurImageMask;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WANoNetworkViewController : WAViewController {
	UILabel* _labelWarning;
}
@property(retain, nonatomic) UILabel* labelWarning;
-(void).cxx_destruct;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface StatusEditController : WATableViewController <UITextViewDelegate> {
	float _keyboardHeight;
	UITableViewCell* _textViewCell;
	UITextView* _textView;
	BOOL _editingMode;
	id<StatusEditControllerDelegate> _delegate;
	NSString* _preloadedStatusText;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL editingMode;
@property(retain, nonatomic) NSString* preloadedStatusText;
@property(assign, nonatomic) __weak id<StatusEditControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)keyboardWillShow:(id)keyboard;
-(void)viewDidLayoutSubviews;
-(void)fixContentOffset;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)saveAction:(id)action;
-(void)cancelAction:(id)action;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)updateNavigationBar;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestAckMedia : XMPPRequest {
}
-(id)initWithMediaURLString:(id)mediaURLString sourceIsSelf:(BOOL)aSelf completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestUploadURL : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithFileHash:(id)fileHash origHash:(id)hash fileSize:(unsigned long long)size mediaType:(unsigned)type mediaIndex:(int)index totalMediaCount:(int)count completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface _WAMapButton : UIButton {
}
+(id)button;
-(void)commonInit;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAStaticPinButton : _WAMapButton {
	BOOL _staticPinHidden;
}
@property(assign, nonatomic) BOOL staticPinHidden;
-(id)accessibilityLabel;
-(void)reloadButtonImage;
-(void)commonInit;
@end

__attribute__((visibility("hidden")))
@interface _WA3DMapButton : _WAMapButton {
	BOOL _map3DModeEnabled;
}
@property(assign, nonatomic) BOOL map3DModeEnabled;
-(id)accessibilityValue;
-(id)accessibilityLabel;
-(void)reloadTitleFont;
-(void)commonInit;
@end

__attribute__((visibility("hidden")))
@interface _WAUserTrackingButton : _WAMapButton {
	UIActivityIndicatorView* _activityIndicator;
	BOOL _trackingEnabled;
	BOOL _showsActivityIndicator;
}
@property(assign, nonatomic) BOOL showsActivityIndicator;
@property(assign, nonatomic) BOOL trackingEnabled;
-(void).cxx_destruct;
-(id)accessibilityHint;
-(id)accessibilityLabel;
-(void)setTrackingEnabled:(BOOL)enabled activity:(BOOL)activity;
-(void)reloadButtonImage;
-(void)commonInit;
@end

__attribute__((visibility("hidden")))
@interface WAMapView : UIView <MKMapViewDelegate, WAStaticPinControllerDelegate, UIGestureRecognizerDelegate> {
	MKMapView* _mapView;
	CLGeocoder* _geocoder;
	CLLocation* _geocodeLocation;
	CLPlacemark* _geocodePlacemark;
	WAStaticPinController* _staticPinController;
	BOOL _showPinOnAnnotationDeselect;
	BOOL _locationDataReceived;
	BOOL _mapViewCallbackReceived;
	BOOL _processingCustomMapGesture;
	BOOL _animatingMapToUserLocation;
	XXStruct_Yvvv9D _userLocationMapRect;
	XXStruct_Yvvv9D _savedMapRect;
	UIView* _viewMapButtons;
	_WAUserTrackingButton* _buttonUserTracking;
	_WAStaticPinButton* _buttonStaticPin;
	_WA3DMapButton* _button3DMap;
	UIPinchGestureRecognizer* _pinchGesture;
	UITapGestureRecognizer* _doubleTapGesture;
	UITapGestureRecognizer* _doubleFingerTapGesture;
	UIRotationGestureRecognizer* _rotationGesture;
	UIPanGestureRecognizer* _panGesture;
	CGPoint _lastPanTranslation;
	MKMapCamera* _initialMapCamera;
	NSTimer* _decelerationTimer;
	BOOL _map3DModeEnabled;
	BOOL _staticPinEnabled;
	BOOL _mapMovedByUser;
	BOOL _tracksUserLocation;
	id<MKMapViewDelegate, WAMapViewDelegate> _delegate;
	UIEdgeInsets _mapInset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned mapType;
@property(assign, nonatomic) BOOL showsPointsOfInterest;
@property(assign, nonatomic) BOOL showsUserLocation;
@property(copy, nonatomic) NSArray* selectedAnnotations;
@property(readonly, assign, nonatomic) XXStruct_Yvvv9D region;
@property(readonly, assign, nonatomic) MKUserLocation* userLocation;
@property(assign, nonatomic) BOOL tracksUserLocation;
@property(assign, nonatomic) __weak id<MKMapViewDelegate, WAMapViewDelegate> delegate;
@property(assign, nonatomic) UIEdgeInsets mapInset;
@property(assign, nonatomic) BOOL mapMovedByUser;
@property(assign, nonatomic, getter=isStaticPinHidden) BOOL staticPinHidden;
@property(assign, nonatomic, getter=isStaticPinEnabled) BOOL staticPinEnabled;
@property(assign, nonatomic, getter=isMap3DModeEnabled) BOOL map3DModeEnabled;
+(BOOL)advancedMapControlsSupported;
-(void).cxx_destruct;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(void)mapView:(id)view didDeselectAnnotationView:(id)view2;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)staticPinControllerCalloutTapped:(id)tapped;
-(void)staticPinControllerPinDropped:(id)dropped;
-(void)staticPinButtonAction:(id)action;
-(void)setStaticPinHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)adjustCalloutViewForAnnotationView:(id)annotationView;
-(void)startReverseGeocodingForCurrentLocation;
-(void)changeUserTrackingModeAction:(id)action;
-(void)updateUserTrackingState;
-(void)reloadStateOfUserTrackingButton;
-(void)sendCenterPinLocation;
-(void)setVisibleMapRect:(XXStruct_Yvvv9D)rect animated:(BOOL)animated;
-(XXStruct_Yvvv9D)mapRectThatFits:(XXStruct_Yvvv9D)fits edgePadding:(UIEdgeInsets)padding;
-(XXStruct_Yvvv9D)mapRectThatFits:(XXStruct_Yvvv9D)fits;
-(XXStruct_Yvvv9D)visibleMapRect;
-(void)removeAnnotations:(id)annotations;
-(void)removeAnnotation:(id)annotation;
-(void)selectAnnotation:(id)annotation animated:(BOOL)animated;
-(void)deselectAnnotation:(id)annotation animated:(BOOL)animated;
-(void)addAnnotations:(id)annotations;
-(void)addAnnotation:(id)annotation;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleDoubleFingerTapGesture:(id)gesture;
-(void)handleDoubleTapGesture:(id)gesture;
-(void)cancelDeceleration:(BOOL)deceleration;
-(BOOL)isDecelerating;
-(void)decelerationTimer:(id)timer;
-(void)decelerateMapWithVelocity:(CGPoint)velocity completion:(id)completion;
-(void)handlePanGesture:(id)gesture;
-(void)handleRotationGesture:(id)gesture;
-(void)handlePinchGesture:(id)gesture;
-(void)reloadGestureRecognizers;
-(void)reload3DMapButtonVisibilityAndState;
-(void)changeMap3DModeAction:(id)action;
-(void)setShows3DMap:(BOOL)map animated:(BOOL)animated;
-(BOOL)isShowing3DMap;
-(BOOL)canShow3DMap;
-(void)restoreMapRegionAnimated:(BOOL)animated zoomToAnnotations:(id)annotations;
-(void)saveMapRegion;
-(void)zoomToUserLocationAnimated:(BOOL)userLocationAnimated resetZoomLevel:(BOOL)level;
-(void)zoomToLocation:(id)location radius:(double)radius;
-(id)wa_userLocationView;
-(void)layoutSubviews;
-(void)configure;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAExpiredBuildNotificationViewController : WAViewController {
	UIImageView* _iconImageView;
	UILabel* _primaryLabel;
	UIButton* _appStoreButton;
	UILabel* _footerLabel;
}
@property(assign, nonatomic) __weak UILabel* footerLabel;
@property(assign, nonatomic) __weak UIButton* appStoreButton;
@property(assign, nonatomic) __weak UILabel* primaryLabel;
@property(assign, nonatomic) __weak UIImageView* iconImageView;
-(void).cxx_destruct;
-(void)openAppStore:(id)store;
-(unsigned)supportedInterfaceOrientations;
-(void)updateLayout;
-(void)viewDidLayoutSubviews;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface SinglePersonPicker : WAViewController <WAContactsSearchControllerDelegate> {
	int _actionsSectionIndex;
	WATableSection* _actionCellSection;
	WATableRow* _platformsDescriptionRow;
	NSArray* _sections;
	WAContactsSearchController* _searchController;
	NSArray* _searchResults;
	int _numberOfContacts;
	BOOL _dataAvailable;
	int _centerRowIndexPortrait;
	int _centerRowIndexLandscape;
	id<SinglePersonPickerDelegate> _delegate;
	unsigned _pickerMode;
	UITableView* _tableView;
	UILabel* _labelLoading;
	UITableViewCell* _cellLoading;
	UILabel* _labelNoContacts;
	UITableViewCell* _cellNoContacts;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UITableViewCell* cellNoContacts;
@property(retain, nonatomic) UILabel* labelNoContacts;
@property(retain, nonatomic) UITableViewCell* cellLoading;
@property(retain, nonatomic) UILabel* labelLoading;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) unsigned pickerMode;
@property(assign, nonatomic) __weak id<SinglePersonPickerDelegate> delegate;
-(void).cxx_destruct;
-(void)contactsStorageDidUpdateContacts:(id)contactsStorage;
-(void)contactsStorageDidUpdateStatus:(id)contactsStorage;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)contactsSearchControllerDelegateDidInvalidateSearchResults:(id)contactsSearchControllerDelegate;
-(void)searchWithCriteria:(id)criteria;
-(void)wa_fontSizeDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)cancelAction:(id)action;
-(void)adjustSearchbarPositionAndTableviewInsets;
-(void)checkDataAvailability:(id)availability;
-(void)setupDisplayList;
-(void)updateSupplementaryViews;
-(id)contactInfoForTableIndexPath:(id)tableIndexPath;
-(id)contactSectionInfoForTableSection:(unsigned)tableSection;
-(BOOL)displaySearchBar;
-(void)saveTableScrollPosition;
-(void)restoreTableScrollPosition;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WAGroupEventMessageHelper : WAMessageHelper {
}
+(id)stringRepresentationForChatForMessage:(id)message;
+(id)stringRepresentationForMessage:(id)message;
@end

__attribute__((visibility("hidden")))
@interface WATextToSpeechEngine : NSObject <AVSpeechSynthesizerDelegate> {
	AVSpeechSynthesizer* _synthesizer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isSpeechSelectionEnabled) BOOL speechSelectionEnabled;
+(id)sharedEngine;
-(void).cxx_destruct;
-(void)speechSynthesizer:(id)synthesizer didFinishSpeechUtterance:(id)utterance;
-(void)speechSynthesizer:(id)synthesizer didCancelSpeechUtterance:(id)utterance;
-(void)pause;
-(void)speakUtterance:(id)utterance;
-(void)stopSpeakingImmediately;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChatSettingsViewController : WAStaticTableViewController <PhoneConfirmationControllerDelegate> {
	UISwitch* _saveReceivedMediaSwitch;
	WATableRow* _blockedRow;
	WATableRow* _textSizeRow;
	WABadgedTableViewCell* _chatBackupCell;
	WATableRow* _archiveOrUnarchiveAllChatsRow;
	BOOL _isArchiveAllButtonShown;
	WATableRow* _clearAllChatsRow;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)phoneConfirmationControllerDidCancel:(id)phoneConfirmationController;
-(void)phoneConfirmationControllerDidFinish:(id)phoneConfirmationController;
-(void)showFontSizePicker;
-(void)switchSaveReceivedAction:(id)action;
-(void)archiveOrUnarchiveAllChatsAction;
-(void)clearChatHistoryAction;
-(void)backupErrorBadgeUpdated:(id)updated;
-(void)updateChatActionsSection;
-(void)updateChatBackupBadge;
-(void)setupTableView;
-(void)wa_fontSizeDidChange;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)init;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WallpaperSourceViewController : WATableViewController <UINavigationControllerDelegate, WAMediaPickerDataSource, WAWallpaperPreviewControllerDelegate> {
	BOOL _photoLibraryAvailable;
	WAMediaPickerLibraryController* _libraryController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)controller;
-(void).cxx_destruct;
-(void)clearSelection;
-(void)showMaximumSelectionCountExceededError;
-(void)toggleSelectionOfMediaPickerAsset:(id)mediaPickerAsset;
-(BOOL)canAddMoreMediaPickerAssets;
-(BOOL)canSelectMediaPickerAsset:(id)asset;
-(id)selectedAssetIdentifiers;
-(BOOL)allowsMultipleSelection;
-(id)libraryController;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)wallpaperPreviewControllerDidCancel:(id)wallpaperPreviewController;
-(void)wallpaperPreviewController:(id)controller didSelectCustomImage:(id)image;
-(void)wallpaperPreviewController:(id)controller didSelectLibraryImageAtIndex:(unsigned)index;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAWebURLMessageCell : WAMessageCell {
	UIImageView* _roundedCornersImageView;
	WAMessageTextView* _messageTextView;
	UIView* _infoView;
	UIImageView* _imageView;
	UILabel* _contentLabel;
	UILabel* _webURLLabel;
	UITapGestureRecognizer* _contentSingleTapGestureRecognizer;
	UITapGestureRecognizer* _contentDoubleTapGestureRecognizer;
	UILongPressGestureRecognizer* _contentLongPressGestureRecognizer;
}
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
+(UIEdgeInsets)textInsetsForCellData:(id)cellData;
+(UIEdgeInsets)contentInsetsForCellData:(id)cellData cellWidth:(float)width;
+(id)cellReuseIdentifier;
+(void)initialize;
-(void).cxx_destruct;
-(void)configureForAccessibility;
-(id)accessibilityHintText;
-(void)prepareFor3DTouchPreviewWithContext:(id)context;
-(id)dataForPreviewingContext:(id)previewingContext atLocation:(CGPoint)location;
-(id)registerSubviewsForPreviewingUsingViewController:(id)previewingUsingViewController previewingDelegate:(id)delegate;
-(void)setBubbleHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setDimmed:(BOOL)dimmed animated:(BOOL)animated;
-(void)setDimmed:(BOOL)dimmed;
-(void)performCopy;
-(BOOL)canPerformCopy;
-(void)handleContentLongPressGesture:(id)gesture;
-(void)handleContentDoubleTapGesture:(id)gesture;
-(void)handleContentTapGesture:(id)gesture;
-(void)handleTapOnBubbleWithLocation:(CGPoint)location;
-(void)updateStarIndicatorAnimated:(BOOL)animated;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAURLTaskStats : NSObject <NSSecureCoding, NSCopying> {
	int _mediaType;
	int _result;
	int _mediaSize;
	double _startTime;
	double _durationBeforeSuspend;
}
@property(assign, nonatomic) int mediaSize;
@property(assign, nonatomic) int result;
@property(assign, nonatomic) double durationBeforeSuspend;
@property(assign, nonatomic) double startTime;
@property(assign, nonatomic) int mediaType;
+(BOOL)supportsSecureCoding;
-(void)reset;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAWallpaperImageView : UIImageView {
	UIButton* _button;
	id<WAWallpaperImageViewDelegate> _delegate;
	unsigned _wallpaperLibraryImageIndex;
}
@property(readonly, assign, nonatomic) unsigned wallpaperLibraryImageIndex;
@property(assign, nonatomic) __weak id<WAWallpaperImageViewDelegate> delegate;
-(void).cxx_destruct;
-(void)loadThumbnailIfNeededAsynchronously;
-(void)imageTapped:(id)tapped;
-(void)layoutSubviews;
-(id)initWithWallpaperLibraryImageIndex:(unsigned)wallpaperLibraryImageIndex;
@end

__attribute__((visibility("hidden")))
@interface WAWallpaperPickerViewController : WAViewController <WAWallpaperImageViewDelegate> {
	UIScrollView* _scrollView;
	NSArray* _imageViews;
	UILabel* _footerLabel;
	UIImageView* _beforeRotationSnapshotImageView;
	UIImageView* _afterRotationSnapshotImageView;
	UIView* _whiteBackgroundView;
	CGPoint _contentOffsetAtStartOfRotation;
	BOOL _disableImageRelayout;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(id)snapshot;
-(void)selectImage:(id)image;
-(void)userDidSelectWallpaperImageView:(id)user;
-(void)loadAllImages;
-(void)layoutAllImages;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface _WAImageMessageContainerView : UIView {
	CGSize _lastSize;
	id<_WAImageMessageContainerViewDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<_WAImageMessageContainerViewDelegate> delegate;
-(void).cxx_destruct;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)layoutSubviews;
-(void)setNeedsLayout;
@end

__attribute__((visibility("hidden")))
@interface WAMediaDataPresentationController : NSObject <_WAImageMessageContainerViewDelegate> {
	NSMutableArray* _images;
	_WAImageMessageContainerView* _view;
	CGSize _lastViewSize;
	BOOL _transitionInProgress;
	unsigned _mediaLoadingID;
	unsigned _deferUpdatesCounter;
	BOOL _needsUpdate;
	id<WAMediaDataPresentationControllerDelegate> _delegate;
	unsigned _currentIndex;
	UILongPressGestureRecognizer* _longPressGestureRecognizer;
	WAChatCellData* _cellData;
	unsigned _transitionID;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) WAAutoCropImageView* currentImageView;
@property(readonly, assign, nonatomic) unsigned transitionID;
@property(readonly, assign, nonatomic) NSArray* images;
@property(readonly, assign, nonatomic) WAChatCellData* cellData;
@property(readonly, assign, nonatomic) UILongPressGestureRecognizer* longPressGestureRecognizer;
@property(assign, nonatomic) unsigned currentIndex;
@property(readonly, assign, nonatomic) UIView* view;
@property(assign, nonatomic) __weak id<WAMediaDataPresentationControllerDelegate> delegate;
+(void)endUpdates;
+(void)beginUpdates;
+(CGSize)aspectRatioForCellData:(id)cellData;
+(CGSize)preferredAspectRatioForCellData:(id)cellData;
+(Class)presentationControllerClassForCellData:(id)cellData;
+(id)presentationControllerWithParentCellData:(id)parentCellData;
-(void).cxx_destruct;
-(void)didScrollInWindowWithUserInteraction:(BOOL)userInteraction;
-(void)didUpdateImageAtIndex:(unsigned)index completed:(BOOL)completed;
-(void)loadAllMedia;
-(void)viewDidLayoutSubviews;
-(void)viewDidLayoutSubviews:(id)view;
-(void)handleLongPress:(id)press;
-(void)handleSingleTap:(id)tap;
-(unsigned)indexAtPointInView:(CGPoint)view;
-(void)performTransitionToCurrentIndexFromIndex:(unsigned)index;
-(void)setCurrentIndexToItemAtPointInView:(CGPoint)view;
-(void)setCurrentIndex:(unsigned)index animated:(BOOL)animated;
-(void)transitionFromIndex:(unsigned)index toCurrentIndexWithAnimation:(BOOL)animation completion:(id)completion;
-(void)cellDataMessagesDidChange;
-(void)reloadMediaFromCellData;
-(void)reloadFromCellData;
-(void)decrementDeferUpdatesCounter;
-(void)incrementDeferUpdatesCounter;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(void)clearCellData;
-(id)initWithChatCellData:(id)chatCellData;
@end

__attribute__((visibility("hidden")))
@interface ImageListScrollView : UIScrollView {
}
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface VerificationController : WAModalNavigationController <PhoneInputViewControllerDelegate, PassInputViewControllerDelegate, ProfileViewControllerDelegate, RestoreBackupViewControllerDelegate, ChangeConfirmationControllerDelegate, ChangeNumberInputControllerDelegate, PaymentEduControllerDelegate, WAVerificationAutoBackupViewControllerDelegate, WANetworkChangedControllerDelegate, WAVerificationCloudReminderViewControllerDelegate> {
	id<VerificationControllerDelegate> _verificationDelegate;
	unsigned _mode;
	WAVerificationAutoBackupViewController* _autoBackupViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WAVerificationAutoBackupViewController* autoBackupViewController;
@property(readonly, assign, nonatomic) unsigned mode;
@property(assign, nonatomic) __weak id<VerificationControllerDelegate> verificationDelegate;
+(void)cancelPhoneNumberChange;
+(void)updateDefaultsAndKeychain:(id)keychain password:(id)password;
+(BOOL)userProfileValid;
+(BOOL)shouldShowAutoBackupPrompt;
+(void)determineShouldShowAutoBackupPrompt;
+(BOOL)profilePhotoValid;
+(BOOL)pushNameValid;
+(void)validateProfileAndSettingsOnUpgrade;
-(void).cxx_destruct;
-(void)networkChangedController:(id)controller didFinishWithResult:(BOOL)result;
-(BOOL)verificationCloudReminderControllerShouldShowNextButton:(id)verificationCloudReminderController;
-(BOOL)verificationCloudReminderControllerShouldShowDoneButton:(id)verificationCloudReminderController;
-(void)verificationCloudReminderControllerDidFinish:(id)verificationCloudReminderController;
-(BOOL)verificationAutoBackupControllerShouldShowNextButton:(id)verificationAutoBackupController;
-(void)verificationAutoBackupControllerDidFinish:(id)verificationAutoBackupController;
-(void)cloudAccountChanged:(id)changed;
-(void)changeNumberInputControllerDidCancel:(id)changeNumberInputController;
-(void)changeNumberInputControllerDidEnterPhone:(id)changeNumberInputController;
-(void)changeNumberInputControllerDidFinish:(id)changeNumberInputController;
-(void)changeConfirmationControllerDidCancel:(id)changeConfirmationController;
-(void)changeConfirmationControllerDidFinish:(id)changeConfirmationController;
-(void)restoreBackupViewControllerDidFinish:(id)restoreBackupViewController;
-(void)paymentEduControllerDidFinish:(id)paymentEduController;
-(void)profileViewControllerDidFinish:(id)profileViewController;
-(void)passInputViewControllerDidCancel:(id)passInputViewController;
-(void)passInputViewControllerDidFinish:(id)passInputViewController;
-(void)phoneInputViewControllerDidFinish:(id)phoneInputViewController;
-(void)phoneInputViewControllerDidEnterPhone:(id)phoneInputViewController;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(void)cancelVerification;
-(void)finishVerification;
-(void)goToCloudReminderScreen;
-(void)goToPaymentEducationScreen;
-(void)goToProfileScreen;
-(void)verifiedAfterInstallGoToNextScreen;
-(id)createCloudReminderViewController;
-(id)paymentEduViewController;
-(id)restoreBackupViewController;
-(id)profileViewController;
-(id)passInputController;
-(id)init;
-(void)dealloc;
-(id)initWithMode:(unsigned)mode;
@end

__attribute__((visibility("hidden")))
@interface WASampleChatCellData : WAChatCellData {
	BOOL _incoming;
}
+(id)cellDataWithText:(id)text isIncoming:(BOOL)incoming;
-(id)nameColor;
-(id)shortName;
-(id)pushName;
-(id)fromName;
-(id)messageID;
-(BOOL)needToShowAlert;
-(BOOL)isSenderUnknown;
-(BOOL)isGroupMessage;
-(BOOL)isSending;
-(BOOL)isFromMe;
-(id)messageTimestampString;
-(BOOL)skipCellLayout;
-(unsigned)footerStatus;
-(unsigned)mediaOrigin;
-(unsigned)messageType;
-(id)message;
-(id)initWithText:(id)text isIncoming:(BOOL)incoming;
@end

__attribute__((visibility("hidden")))
@interface WAAllChatsArchivedView : UIView <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _tableView;
	UITableViewCell* _seeArchivedChatsCell;
	UITextView* _headerTextView;
	UIView* _topBorder;
	id<WAAllChatsArchivedViewDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAAllChatsArchivedViewDelegate> delegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)configureHeaderTextViewWithFontSize:(float)fontSize;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

@interface LabelPickerViewController : WATableViewController <CustomLabelInputViewContollerDelegate> {
	NSArray* _standardLabels;
	NSMutableArray* _customLabels;
	BOOL _useGenericLabels;
	id<LabelPickerViewControllerDelegate> _delegate;
	NSString* _selectedLabel;
}
@property(assign, nonatomic) BOOL useGenericLabels;
@property(copy, nonatomic) NSString* selectedLabel;
@property(assign, nonatomic) __weak id<LabelPickerViewControllerDelegate> delegate;
+(id)localizedLabel:(CFStringRef)label;
-(void).cxx_destruct;
-(void)labelInputViewControllerDidCancel:(id)labelInputViewController;
-(void)labelInputViewController:(id)controller didSaveLabel:(id)label;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)doneAction:(id)action;
-(void)cancelAction:(id)action;
-(id)standardLabels;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAPttRecorder : NSObject <AVAudioRecorderDelegate> {
	opusEncodingInfo _opusInfo;
	BOOL _pttRecordingIsActive;
	id _pttRecAudioActivity;
	double _pttRecordedTime;
	OpaqueAudioQueue* _audioQueueRef;
	AudioQueueBuffer* _audioQueueBufferRefs[3];
	AVAudioRecorder* _pttAudioRecorder;
	id<WAPttRecorderDelegate> _delegate;
	NSString* _pathToAudioRecording;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* pathToAudioRecording;
@property(assign, nonatomic) __weak id<WAPttRecorderDelegate> delegate;
-(void).cxx_destruct;
-(void)audioSessionInterrupted:(id)interrupted;
-(void)audioRecorderEncodeErrorDidOccur:(id)audioRecorderEncodeError error:(id)error;
-(void)handleAudioRecordingDidFinishRecordingSuccessfully:(BOOL)handleAudioRecording audioFilePath:(id)path;
-(void)audioRecorderDidFinishRecording:(id)audioRecorder successfully:(BOOL)successfully;
-(void)audioRecorderEndInterruption:(id)interruption;
-(void)audioRecorderBeginInterruption:(id)interruption;
-(void)handleAudtionSessionInterrupted;
-(void)pushToTalkStartRecording;
-(int)finalOpusCleanup;
-(int)cleanupOpusRecordState;
-(int)writeOggOpusFirstPages;
-(double)inProgressRecordTime;
-(void)handleRecordingFailed;
-(void)deactivateAudioSession;
-(BOOL)isActive;
-(void)cancelRecording;
-(void)stopRecording;
-(double)duration;
-(void)record;
-(void)dealloc;
-(id)init;
@end

@interface WAInfoInputViewController : WATableViewController <WAContactInfoEditCellDelegate, LabelPickerViewControllerDelegate> {
	WAContactInfoNameUnit* _contactNameUnit;
	WAContactInfoPhotoUnit* _contactPhotoUnit;
	WAContactInfoTableHeaderView* _tableHeader;
	WAContactInfoEditCell* _textFieldCell;
	id<WAInfoInputViewControllerDelegate> _delegate;
	void* _displayedPerson;
	int _propertyType;
	NSString* _propertyValue;
	NSString* _labelValue;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* labelValue;
@property(copy, nonatomic) NSString* propertyValue;
@property(assign, nonatomic) int propertyType;
@property(assign, nonatomic) void* displayedPerson;
@property(assign, nonatomic) __weak id<WAInfoInputViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)labelPickerViewController:(id)controller didSelectLabel:(id)label;
-(void)labelPickerViewControllerDidCancel:(id)labelPickerViewController;
-(void)labelButtonTappedInCell:(id)cell;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)presentLabelPicker;
-(void)textFieldValueChanged:(id)changed;
-(void)saveAction:(id)action;
-(void)cancelAction:(id)action;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)validateUserInput;
-(void)dealloc;
-(id)init;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WATriggeredOperation : WAWaitOperation {
	id _action;
}
@property(copy) id action;
-(void).cxx_destruct;
-(void)run;
-(id)initWithAction:(id)action waitCount:(int)count;
-(id)initWithAction:(id)action;
-(id)initWithCount:(int)count;
@end

__attribute__((visibility("hidden")))
@interface WAActivityLabel : UIView {
	UIActivityIndicatorView* _activityIndicator;
	UILabel* _label;
}
@property(retain, nonatomic) NSString* text;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithFrame:(CGRect)frame text:(id)text;
@end

__attribute__((visibility("hidden")))
@interface XMPPGroupNotification : NSObject {
	BOOL _offlineStorage;
	BOOL _receivedWithActiveWebClientSession;
	NSString* _groupJID;
	NSString* _participantJID;
	NSString* _participantName;
	NSDate* _timestamp;
	NSDictionary* _userInfo;
}
@property(readonly, assign, nonatomic, getter=isReceivedWithActiveWebClientSession) BOOL receivedWithActiveWebClientSession;
@property(retain, nonatomic) NSDictionary* userInfo;
@property(readonly, assign, nonatomic) BOOL offlineStorage;
@property(readonly, assign, nonatomic) NSDate* timestamp;
@property(readonly, copy, nonatomic) NSString* participantName;
@property(copy, nonatomic) NSString* participantJID;
@property(readonly, copy, nonatomic) NSString* groupJID;
-(void).cxx_destruct;
-(id)initWithGroupNotificationStanza:(id)groupNotificationStanza;
@end

__attribute__((visibility("hidden")))
@interface _WASearchResultSection : NSObject {
	int _priority;
	NSString* _title;
	NSArray* _items;
}
@property(copy, nonatomic) NSArray* items;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) int priority;
-(void).cxx_destruct;
-(void)removeItemsAtIndexes:(id)indexes;
-(id)indexesOfAllItemsContainingChatSessions:(id)allItemsContainingChatSessions;
-(BOOL)removeInvalidContent;
@end

__attribute__((visibility("hidden")))
@interface WASearchResultsController : NSObject <WAContactsSearchControllerDelegate> {
	WAChatStorage* _chatStorage;
	WAContactsSearchController* _contactsSearchController;
	NSString* _currentSearchTerm;
	NSArray* _sections;
	BOOL _useFTS;
	NSObject<OS_dispatch_group>* _searchDispatchGroup;
	BOOL _searchInProgress;
	NSString* _searchTerm;
	NSSet* _currentSearchTokens;
	id<WASearchResultsControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WASearchResultsControllerDelegate> delegate;
@property(readonly, assign, nonatomic, getter=isSearchInProgress) BOOL searchInProgress;
@property(readonly, assign, nonatomic) NSSet* currentSearchTokens;
@property(readonly, copy, nonatomic) NSString* searchTerm;
-(void).cxx_destruct;
-(void)contactsSearchControllerDelegateDidInvalidateSearchResults:(id)contactsSearchControllerDelegate;
-(id)titleForHeaderInSection:(int)section;
-(void)chatStorageDidDeleteChatSessions:(id)chatStorage;
-(void)chatStorageDidInsertChatSessions:(id)chatStorage;
-(id)indexPathsOfAllItemsWithChatSessions:(id)chatSessions;
-(BOOL)removeInvalidContent;
-(id)objectAtIndexPath:(id)indexPath;
-(int)numberOfSections;
-(Class)classOfObjectsInSection:(int)section;
-(int)numberOfRowsInSection:(int)section;
-(id)contactsSectionWithSearchTerm:(id)searchTerm chatsSection:(id)section;
-(id)sortedSectionsWithSections:(id)sections;
-(void)performSearch;
-(void)chatStorageDidReplaceChatSession:(id)chatStorage;
-(void)reset;
-(void)redoSearch;
-(void)updateSearchTerm:(id)term;
-(void)prepareToSearch;
-(void)dealloc;
-(id)initWithChatStorage:(id)chatStorage contactsStorage:(id)storage;
@end

__attribute__((visibility("hidden")))
@interface WASoundPicker : WATableViewController <AVAudioPlayerDelegate> {
	NSArray* _displayedSoundSets;
	UILabel* _navItemTitle;
	NSIndexPath* _indexPathForSelectedSound;
	NSMutableDictionary* _audioPlayers;
	AVAudioPlayer* _currentPlayer;
	id _audioActivity;
	MPVolumeView* _volumeView;
	BOOL _hasNoSoundOption;
	id _completion;
	NSString* _selectedSound;
	NSString* _defaultSound;
	NSArray* _soundSets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* soundSets;
@property(copy, nonatomic) NSString* defaultSound;
@property(copy, nonatomic) NSString* selectedSound;
@property(copy, nonatomic) id completion;
+(id)picker;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)didReceiveMemoryWarning;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)audioPlayerDecodeErrorDidOccur:(id)audioPlayerDecodeError error:(id)error;
-(void)adjustVolumeIfNeeded;
-(void)startAudioActivityIfNeeded;
-(void)fadeOut;
-(id)audioPlayerForFilename:(id)filename;
-(id)audioPlayers;
-(void)reloadDisplayedSoundSets;
-(void)reloadIndexPathForSelectedSound;
-(void)setTitle:(id)title;
-(void)cancelAction:(id)action;
-(void)saveAction:(id)action;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WAAsyncOperation : NSOperation {
	NSObject<OS_dispatch_semaphore>* _semaphore;
}
-(void).cxx_destruct;
-(void)main;
-(void)performTaskWithCompletionHandler:(id)completionHandler;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WATextDelegateProxy : NSObject <UITextViewDelegate> {
	NSObject<UITextViewDelegate>* _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak NSObject<UITextViewDelegate>* delegate;
-(void).cxx_destruct;
-(id)forwardingTargetForSelector:(SEL)selector;
-(BOOL)respondsToSelector:(SEL)selector;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface WATextView : UITextView <NSLayoutManagerDelegate> {
	WATextDelegateProxy* _textDelegateProxy;
	BOOL _forceVerticallyCentered;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL forceVerticallyCentered;
-(void).cxx_destruct;
-(void)paste:(id)paste;
-(void)copy:(id)copy;
-(void)cut:(id)cut;
-(id)originalAttributedText;
-(id)originalText;
-(void)setFont:(id)font;
-(void)setAttributedText:(id)text;
-(void)setText:(id)text;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAGroupsInCommonViewController : WAChatSessionsViewController {
	WAContact* _contact;
}
@property(readonly, assign, nonatomic) WAContact* contact;
+(id)predicateForFetchRequestWithContact:(id)contact;
+(unsigned)numberOfGroupsInCommonWithContact:(id)contact;
-(void).cxx_destruct;
-(void)configureCell:(id)cell forChatSession:(id)chatSession message:(id)message;
-(void)setUpNoContentView:(id)view;
-(id)predicateForFetchRequest;
-(void)commonInit;
-(id)initWithContact:(id)contact;
@end

__attribute__((visibility("hidden")))
@interface WAActivityViewController : UIActivityViewController {
}
-(id)_availableActivitiesForItems:(id)items applicationExtensionActivities:(id)activities;
@end

__attribute__((visibility("hidden")))
@interface WAContactURLEditingCell : WAContactMultiValueEditingCell {
}
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WALargeMediaMessageCell : WAMessageCell <WADownloadProgressViewDelegate, WAScrollTracking, WAMediaDataPresentationControllerDelegate> {
	UIImageView* _roundedCornersImageView;
	UIView* _blackView;
	UIView* _whiteView;
	float _parallaxScaleFactor;
	WADownloadProgressView* _progressView;
	BOOL _cellDataLoaded;
	WAMessageTextView* _messageTextView;
	BOOL _showFileSize;
	UIImageView* _broadcastImageView;
	UIImageView* _lowerRightShadowView;
	int _selectionState;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) int selectionState;
@property(assign, nonatomic) BOOL showFileSize;
@property(readonly, assign, nonatomic) UIImageView* lowerRightShadowView;
@property(readonly, assign, nonatomic) UIImageView* broadcastImageView;
@property(readonly, assign, nonatomic) WADownloadProgressView* progressView;
@property(readonly, assign, nonatomic) WAAutoCropImageView* currentImageView;
@property(readonly, assign, nonatomic) UIView* mediaContentView;
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
+(UIEdgeInsets)textInsetsForCellData:(id)cellData;
+(UIEdgeInsets)contentInsetsForCellData:(id)cellData cellWidth:(float)width;
+(float)maximumImageWidth;
+(void)initialize;
-(void).cxx_destruct;
-(void)configureForAccessibility;
-(id)accessibilityHintText;
-(id)voiceOverStringForMediaUploadOrDownloadStatus;
-(void)prepareFor3DTouchPreviewWithContext:(id)context;
-(id)dataForPreviewingContext:(id)previewingContext atLocation:(CGPoint)location;
-(id)registerSubviewsForPreviewingUsingViewController:(id)previewingUsingViewController previewingDelegate:(id)delegate;
-(void)didHidePopupMenu;
-(void)didShowPopupMenu;
-(id)referenceViewForPopupMenu;
-(CGRect)targetRectForPopupMenu;
-(void)updateStarIndicatorAnimated:(BOOL)animated;
-(void)setShowsProgressBar:(BOOL)bar animated:(BOOL)animated;
-(void)setProgress:(float)progress;
-(void)setProgressViewHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setProgressViewHidden:(BOOL)hidden;
-(void)setBubbleHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(BOOL)isContentsHighlighted;
-(void)setDimmed:(BOOL)dimmed animated:(BOOL)animated;
-(BOOL)isDimmed;
-(void)setDimmed:(BOOL)dimmed;
-(void)downloadProgressViewDidCancel:(id)downloadProgressView;
-(void)setDidScrollWithUserInteraction:(BOOL)scrollWithUserInteraction;
-(void)didMoveToWindow;
-(void)setFrame:(CGRect)frame;
-(void)handleLongPressOnBubbleWithLocation:(CGPoint)location;
-(void)handleDoubleTapOnBubbleWithLocation:(CGPoint)location;
-(void)mediaDataPresentationController:(id)controller didLongPressMediaAtIndex:(unsigned)index;
-(void)mediaDataPresentationController:(id)controller didTapMediaAtIndex:(unsigned)index;
-(void)mediaDataPresentationControllerDidLayoutView:(id)mediaDataPresentationController;
-(void)prepareForReuse;
-(void)updateBlurredImages;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)setCellData:(id)data delegate:(id)delegate;
-(void)updatePresentationFromPresentationControllerWithAnimation:(BOOL)animation;
-(void)mediaDataPresentationControllerContentsDidFinishLoadingMedia:(id)mediaDataPresentationControllerContents;
-(void)mediaDataPresentationController:(id)controller contentsDidChangeWithAnimation:(BOOL)contents;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAProgressHUD : UIView {
	BOOL useAnimation;
	SEL methodForExecution;
	id targetForExecution;
	id objectForExecution;
	UILabel* label;
	UILabel* detailsLabel;
	BOOL isFinished;
	CGAffineTransform rotationTransform;
	BOOL square;
	BOOL dimBackground;
	BOOL taskInProgress;
	BOOL removeFromSuperViewOnHide;
	unsigned animationType;
	id<WAProgressHUDDelegate> delegate;
	float opacity;
	UIColor* color;
	UIFont* labelFont;
	UIFont* detailsLabelFont;
	UIView* indicator;
	float xOffset;
	float yOffset;
	float margin;
	float graceTime;
	float minShowTime;
	NSTimer* graceTimer;
	NSTimer* minShowTimer;
	UIView* customView;
	unsigned mode;
	NSString* labelText;
	NSString* detailsLabelText;
	float progress;
	id completionBlock;
	CGSize minSize;
	CGSize size;
	double _showStartedTimestamp;
}
@property(assign) CGSize size;
@property(assign) double showStartedTimestamp;
@property(retain) NSTimer* minShowTimer;
@property(retain) NSTimer* graceTimer;
@property(retain) UIView* indicator;
@property(assign, getter=isSquare) BOOL square;
@property(assign) CGSize minSize;
@property(assign) float progress;
@property(retain) UIFont* detailsLabelFont;
@property(retain) UIFont* labelFont;
@property(assign) BOOL removeFromSuperViewOnHide;
@property(assign) BOOL taskInProgress;
@property(assign) float minShowTime;
@property(assign) float graceTime;
@property(assign) BOOL dimBackground;
@property(assign) float margin;
@property(assign) float yOffset;
@property(assign) float xOffset;
@property(retain) UIColor* color;
@property(assign) float opacity;
@property(copy) NSString* detailsLabelText;
@property(copy) NSString* labelText;
@property(assign) __weak id<WAProgressHUDDelegate> delegate;
@property(retain) UIView* customView;
@property(assign) unsigned animationType;
@property(assign) unsigned mode;
@property(copy) id completionBlock;
+(id)allHUDsForView:(id)view;
+(id)HUDForView:(id)view;
+(unsigned)hideAllHUDsForView:(id)view animated:(BOOL)animated;
+(BOOL)hideHUDForView:(id)view animated:(BOOL)animated;
+(id)showHUDAddedTo:(id)to animated:(BOOL)animated;
-(void).cxx_destruct;
-(void)setTransformForCurrentOrientation:(BOOL)currentOrientation;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)unregisterFromNotifications;
-(void)registerForNotifications;
-(void)updateUIForKeypath:(id)keypath;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(id)observableKeypaths;
-(void)unregisterFromKVO;
-(void)registerForKVO;
-(void)drawRect:(CGRect)rect;
-(void)layoutSubviews;
-(void)updateIndicators;
-(void)setupLabels;
-(void)cleanUp;
-(void)launchExecution;
-(void)showAnimated:(BOOL)animated whileExecutingBlock:(id)block onQueue:(id)queue completionBlock:(id)block4;
-(void)showAnimated:(BOOL)animated whileExecutingBlock:(id)block onQueue:(id)queue;
-(void)showAnimated:(BOOL)animated whileExecutingBlock:(id)block completionBlock:(id)block3;
-(void)showAnimated:(BOOL)animated whileExecutingBlock:(id)block;
-(void)showWhileExecuting:(SEL)executing onTarget:(id)target withObject:(id)object animated:(BOOL)animated;
-(void)done;
-(void)animationFinished:(id)finished finished:(BOOL)finished2 context:(void*)context;
-(void)hideUsingAnimation:(BOOL)animation;
-(void)showUsingAnimation:(BOOL)animation;
-(void)handleMinShowTimer:(id)timer;
-(void)handleGraceTimer:(id)timer;
-(void)hideDelayed:(id)delayed;
-(void)hide:(BOOL)hide afterDelay:(double)delay;
-(void)hide:(BOOL)hide;
-(void)show:(BOOL)show;
-(void)dealloc;
-(id)initWithWindow:(id)window;
-(id)initWithView:(id)view;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface MBRoundProgressView : UIView {
	float _progress;
	BOOL _annular;
}
@property(assign, nonatomic, getter=isAnnular) BOOL annular;
@property(assign, nonatomic) float progress;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAVCard : NSObject {
	NSString* _contactName;
	NSString* _vCardString;
}
@property(copy, nonatomic) NSString* vCardString;
@property(copy, nonatomic) NSString* contactName;
+(id)mergedContactFromVCardString:(id)vcardString;
+(id)labelFromFieldDescriptions:(id)fieldDescriptions;
+(BOOL)isFieldNameForIMServiceValid:(id)imserviceValid;
+(BOOL)canShareInstantMessagingService:(id)service;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAVCardViewController : WATableViewController <ABNewPersonViewControllerDelegate, WAContactInfoTableViewCellDelegate, ABPeoplePickerNavigationControllerDelegate, ABDisabledControllerDelegate> {
	void* _selectedContact;
	WAContactInfoTableHeaderView* _tableHeader;
	NSArray* _dataSections;
	BOOL _showActionButtons;
	id<WAVCardMessagePreviewActionDelegate> _vCardPreviewActionDelegate;
	WAMergedContact* _contact;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WAMergedContact* contact;
@property(retain, nonatomic) id<WAVCardMessagePreviewActionDelegate> vCardPreviewActionDelegate;
+(id)controllerWithMergedContact:(id)mergedContact;
-(void).cxx_destruct;
-(id)previewActionItems;
-(void)wa_applicationDidEnterBackground;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(int)actionButtonsSectionIndex;
-(void)wa_fontSizeDidChange;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(void*)person;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)presentABNewPersonViewControllerInNavigationController:(id)navigationController;
-(void)addToExistingContact;
-(void)createNewContact;
-(void)abDisabledViewControllerDidCancel:(id)abDisabledViewController;
-(void)presentDisabledAddressBookViewController;
-(void)callButtonTappedInContactInfoCell:(id)contactInfoCell;
-(void)messageButtonTappedInContactInfoCell:(id)contactInfoCell;
-(void)startChatWithJID:(id)jid;
-(id)infoUnitsForTableSection:(int)tableSection;
-(void)reloadContactData;
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface XMPPGroupRequest : XMPPRequest {
	NSString* _jid;
}
@property(readonly, copy, nonatomic) NSString* jid;
-(void).cxx_destruct;
-(id)initWithGroupJID:(id)groupJID;
@end

__attribute__((visibility("hidden")))
@interface XMPPGroupParticipantsRequest : XMPPGroupRequest {
	NSArray* _participantJIDs;
}
@property(readonly, assign, nonatomic) NSArray* participantJIDs;
-(void).cxx_destruct;
-(id)initWithGroupJID:(id)groupJID participantJIDs:(id)jids;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestCreateGroup : XMPPGroupRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithSubject:(id)subject participantJIDs:(id)jids key:(id)key locked:(BOOL)locked webClientRequestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestSetGroupSubject : XMPPGroupRequest {
}
-(id)initWithGroupJID:(id)groupJID subject:(id)subject webClientRequestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestRemoveParticipants : XMPPGroupParticipantsRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID participantJIDs:(id)jids webClientRequestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestAddParticipants : XMPPGroupParticipantsRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID participantJIDs:(id)jids webClientRequestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestPromoteParticipants : XMPPGroupParticipantsRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID participantJIDs:(id)jids webClientRequestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestDemoteParticipants : XMPPGroupParticipantsRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID participantJIDs:(id)jids completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestGroupInfo : XMPPGroupRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestLeaveGroup : XMPPGroupRequest {
}
@property(copy, nonatomic) id completion;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID webClientRequestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestDeleteGroup : XMPPGroupRequest {
}
@property(copy, nonatomic) id completion;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestParticipatingGroups : XMPPGroupRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WATabBarController : UITabBarController {
	UIView* _statusBarBackgroundView;
	UILabel* _inCallStatusBarLabel;
	NSTimer* _inCallStatusBarUpdateTimer;
	BOOL _callStatusBarHidden;
}
@property(readonly, assign, nonatomic) float inCallStatusBarHeight;
@property(assign, nonatomic) BOOL callStatusBarHidden;
+(void)initialize;
-(void).cxx_destruct;
-(id)wrapperView;
-(void)statusBarTapped:(id)tapped;
-(void)updateInCallStatusBarTimer:(id)callStatusBarTimer;
-(void)stopAnimatingCallStatusBar;
-(void)startAnimatingCallStatusBar;
-(void)setCallStatusBarSnapshotMode:(BOOL)mode;
-(int)preferredStatusBarStyle;
-(id)childViewControllerForStatusBarStyle;
-(void)adjustViewForCallStatusBar8;
-(void)adjustViewForCallStatusBar7;
-(void)viewDidLayoutSubviews;
-(void)viewWillLayoutSubviews;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)dismissViewControllerAnimated:(BOOL)animated completion:(id)completion;
-(void)applicationWillEnterForeground:(id)application;
-(void)dealloc;
-(void)updateSettingsCount:(id)count;
-(void)backupErrorBadgeUpdated:(id)updated;
-(void)setViewControllers:(id)controllers;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WATarHeader : NSObject {
	BOOL _isEOF;
	NSString* _name;
	NSDate* _mtime;
	unsigned long long _size;
}
@property(assign, nonatomic) BOOL isEOF;
@property(readonly, assign, nonatomic) unsigned long long jump;
@property(readonly, assign, nonatomic) NSDate* mtime;
@property(readonly, assign, nonatomic) unsigned long long size;
@property(readonly, assign, nonatomic) NSString* name;
-(void).cxx_destruct;
-(id)description;
-(void)writeToFileHandle:(id)fileHandle;
-(BOOL)trySetMtime:(id)mtime;
-(BOOL)trySetName:(id)name;
-(BOOL)trySetSize:(unsigned long long)size;
-(BOOL)readFromHandle:(id)handle;
-(id)initWithFileHandle:(id)fileHandle;
-(id)initForEOF;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAChatStorage : NSObject <CLLocationManagerDelegate, NSFetchedResultsControllerDelegate, WAMediaUploadOperationDelegate> {
	NSOperationQueue* _mediaUploadQueue;
	WATask* _indexMessagesTask;
	WATask* _deleteMessagesTask;
	NSManagedObjectModel* _managedObjectModel;
	NSPersistentStoreCoordinator* _persistentStoreCoordinator;
	NSManagedObjectContext* _parentMOC;
	NSManagedObjectContext* _managedObjectContext;
	unsigned _saveMOCCounter;
	BOOL _processingMessages;
	NSCondition* _processMessagesCondition;
	NSMutableArray* _insertedChats;
	NSMutableArray* _deletedChats;
	NSMutableArray* _updatedChats;
	NSFetchedResultsController* _allChatsResultsController;
	WASearchEngine* _searchEngine;
	NSObject<OS_dispatch_group>* _searchEngineDispatchGroup;
	NSString* _currentSearchText;
	NSObject<OS_dispatch_queue>* _backgroundFetchingQueue;
	BOOL _groupLocationRequested;
	id<WAChatStorageDelegate> _delegate;
	NSPersistentStore* _chatStore;
	WABlockedContactsList* _blockedContactsList;
	NSMutableArray* _mediaAutodownloadRetryArray;
	NSMutableArray* _URLSessionTasksToProcessOnCreateMOC;
	CLLocationManager* _locationManager;
	CLLocation* _bestLocation;
	NSMutableSet* _locationQueue;
	CLLocation* _lastReportedLocation;
	unsigned _locationSharingBackgroundTask;
}
@property(assign, nonatomic) unsigned locationSharingBackgroundTask;
@property(retain, nonatomic) CLLocation* lastReportedLocation;
@property(assign, nonatomic) BOOL groupLocationRequested;
@property(retain, nonatomic) NSMutableSet* locationQueue;
@property(retain, nonatomic) CLLocation* bestLocation;
@property(retain, nonatomic) CLLocationManager* locationManager;
@property(retain, nonatomic) NSMutableArray* URLSessionTasksToProcessOnCreateMOC;
@property(retain, nonatomic) NSMutableArray* mediaAutodownloadRetryArray;
@property(readonly, assign, nonatomic) NSOperationQueue* mediaUploadQueue;
@property(readonly, copy, nonatomic) NSString* currentSearchText;
@property(readonly, assign, nonatomic) WASearchEngine* searchEngine;
@property(readonly, assign, nonatomic) WABlockedContactsList* blockedContactsList;
@property(readonly, assign, nonatomic) NSPersistentStore* chatStore;
@property(retain, nonatomic) id<WAChatStorageDelegate> delegate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned archivedChatSessionsCount;
@property(readonly, assign, nonatomic) BOOL hasUnarchivedChatSessions;
@property(readonly, assign, nonatomic) BOOL hasArchivedChatSessions;
@property(readonly, assign, nonatomic) BOOL hasChatMessages;
+(BOOL)useAsyncSave;
+(id)errorWithDescription:(id)description failureReason:(id)reason;
-(void).cxx_destruct;
-(id)existingChatSessionForJID:(id)jid;
-(id)allMemberJIDsInBroadcastList:(id)broadcastList;
-(id)sortedBroadcastLists;
-(id)blockedJIDs;
-(unsigned)countAllImageMessages;
-(unsigned)countAllExistingDownloadedMediaMessagesOfType:(unsigned)type forJID:(id)jid;
-(unsigned)countAllDownloadedMediaMessagesOfType:(unsigned)type;
-(unsigned)countAllTextMessages;
-(unsigned)countAllMessagesOfType:(unsigned)type forJID:(id)jid;
-(unsigned)countAllMessagesOfType:(unsigned)type;
-(unsigned)countEntitiesOfType:(Class)type withPredicateFormat:(id)predicateFormat;
-(id)chatSessionForJID:(id)jid inContext:(id)context;
-(id)chatSessionForJID:(id)jid;
-(id)allGroupChatSessions;
-(id)allChatSessionsWithPrefetchedRelationships:(id)prefetchedRelationships includeBroadcastLists:(BOOL)lists;
-(id)newManagedObjectContext;
-(id)managedObjectContext;
-(void)performAfterTrampoliningThroughMOCQueues:(id)queues;
-(void)dropStoreWithCompletionHandler:(id)completionHandler;
-(void)sendChatStorageDidLoadDatabaseNotification;
-(BOOL)loadPersistentStore;
-(id)persistentStoreURL;
-(id)persistentStorePath;
-(void)dealloc;
-(id)init;
-(id)outgoingMessageWithSharedItem:(id)sharedItem;
-(id)outgoingMessagesInSharedItemOutbox:(id)sharedItemOutbox;
-(id)debug_filePathStrings;
-(id)debug_filePathsRowForType:(unsigned)type;
-(id)debug_averageStrings;
-(id)statisticsForExtension:(id)extension amongResources:(id)resources;
-(id)videoFilePathsShouldCancel:(id)videoFilePaths;
-(id)mediaFilePathsShouldCancel:(id)mediaFilePaths;
-(id)thumbnailFilePathsShouldCancel:(id)thumbnailFilePaths;
-(id)filePathsForProperties:(id)properties ofTypes:(id)types shouldCancel:(id)cancel;
-(id)estimatedVideoUploadSize;
-(void)calculatePotentialBackupSize:(XXStruct_krKngD*)size;
-(long long)calculateThumbnailTARExpectedSizeForSmallItemCount:(unsigned)smallItemCount largeItemCount:(unsigned)count;
-(long long)calculateVideoTARExpectedSizeWithItemCount:(unsigned)itemCount;
-(long long)calculateMediaTARExpectedSizeWithItemCount:(unsigned)itemCount;
-(long long)calculateStandardTarSizeForCount:(unsigned)count;
-(void)calculateDatabaseSizes:(XXStruct_IjzfkD*)sizes;
-(long long)sizeForMediaOfType:(unsigned)type forJID:(id)jid;
-(long long)sizeForMediaOfType:(unsigned)type;
-(void)finishProcessingRemainingMessages;
-(void)saveBlockedJIDs:(id)jids;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)useBestLocationResult:(id)result;
-(void)stopLocationManagerIfPossible;
-(void)startLocationManagerIfNecessary;
-(void)locationUpdatesRequestExpired;
-(void)stopGroupLocationSharing;
-(void)startGroupLocationSharingForDuration:(double)duration;
-(void)locationRequestFailedWithError:(id)error userInfo:(id)info;
-(void)locationRequestFinishedWithLocation:(id)location userInfo:(id)info;
-(void)requestLocationWithCallbackDictionary:(id)callbackDictionary;
-(void)requestLocationForMessage:(id)message;
-(void)resendPendingReceipts;
-(void)debug_deleteAllOrphanedMessagesNow;
-(id)replaceChatSessionWithEmptySession:(id)emptySession;
-(void)deleteMessages:(id)messages inChatSession:(id)chatSession;
-(void)deleteAllMessagesInSession:(id)session;
-(void)clearAllChatSessions;
-(void)deleteAllChatSessions;
-(void)deleteChatSession:(id)session fromWebClient:(BOOL)webClient;
-(void)deleteChatSession:(id)session;
-(id)receivedMessagesWithStanzaID:(id)stanzaID;
-(id)receivedVoiceMessagesWithStanzaID:(id)stanzaID;
-(void)reportFieldStatsForSentMessage:(id)sentMessage sentSuccess:(BOOL)success;
-(void)changeStatus:(unsigned)status forOutgoingMessages:(id)outgoingMessages fromJID:(id)jid participantJID:(id)jid4 userData:(id)data playSound:(out BOOL*)sound;
-(void)changeStatus:(unsigned)status forOutgoingMessagesWithStanzaIDs:(id)stanzaIDs fromJID:(id)jid participantJID:(id)jid4 userData:(id)data playSound:(out BOOL*)sound;
-(void)changeStatus:(unsigned)status forIncomingMessageWithStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid4;
-(void)storeModifiedMessage:(id)message notify:(BOOL)notify;
-(void)updateChatSessionWithMessage:(id)message;
-(void)sendVCard:(id)card inChatSession:(id)chatSession;
-(void)sendPlace:(id)place inChatSession:(id)chatSession completion:(id)completion;
-(void)sendMessageWithMedia:(id)media;
-(id)messageWithAudioFilePath:(id)audioFilePath inChatSession:(id)chatSession origin:(unsigned)origin durationSeconds:(int)seconds doNotUpload:(BOOL)upload streaming:(BOOL)streaming streamingHash:(id)hash error:(out id*)error;
-(void)sendAudioTrack:(id)track inChatSession:(id)chatSession completion:(id)completion;
-(void)sendVideoAtURL:(id)url caption:(id)caption collectionID:(id)anId index:(int)index count:(int)count inChatSession:(id)chatSession completion:(id)completion;
-(void)sendMessageWithImage:(id)image caption:(id)caption collectionID:(id)anId index:(int)index count:(int)count inChatSession:(id)chatSession completion:(id)completion;
-(void)sendMessageWithImage:(id)image caption:(id)caption inChatSession:(id)chatSession completion:(id)completion;
-(void)sendMessageWithText:(id)text metadata:(id)metadata inChatSession:(id)chatSession;
-(BOOL)isChatSessionForExistingUser:(id)existingUser;
-(void)forwardMessages:(id)messages toChatSession:(id)chatSession;
-(void)retrySendingMessage:(id)message;
-(void)sendMessage:(id)message notify:(BOOL)notify;
-(void)resendAllServerErrorReceiptsWithoutAck;
-(void)receivedServerErrorForStanzaIDs:(id)stanzaIDs fromJID:(id)jid participantJID:(id)jid3;
-(void)receivedServerErrorAckForStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid3;
-(id)sentMessagesWithStanzaIDs:(id)stanzaIDs jid:(id)jid;
-(id)sentMessagesWithStanzaID:(id)stanzaID jid:(id)jid;
-(void)receiveError:(id)error forMessage:(id)message;
-(id)groupMembersWithJIDs:(id)jids;
-(BOOL)findContactInContext:(id)context forChatSession:(id)chatSession;
-(void)updateChatSessionWithContactData:(id)contactData;
-(void)receiveChatMessages:(id)messages completion:(id)completion;
-(void)addMessage:(id)message toChatSession:(id)chatSession withGroupMember:(id)groupMember;
-(id)outgoingMessageTemplateForSession:(id)session withMedia:(BOOL)media;
-(id)messageWithMessageStanza:(id)messageStanza;
-(void)setChatSession:(id)session archived:(BOOL)archived notifyWebClient:(BOOL)client saveChanges:(BOOL)changes;
-(void)setChatSession:(id)session archived:(BOOL)archived;
-(void)setAllChatSessionsArchived:(BOOL)archived;
-(id)createChatSessionForContact:(id)contact JID:(id)jid eligibleForDeletionIfEmpty:(BOOL)deletionIfEmpty;
-(id)createChatSessionForContact:(id)contact JID:(id)jid;
-(id)createChatSessionForContact:(id)contact JID:(id)jid eligibleForDeletionIfEmpty:(BOOL)deletionIfEmpty hidden:(BOOL)hidden;
-(id)newChatSessionWithJID:(id)jid;
-(id)newOrExistingChatSessionForJID:(id)jid;
-(id)refetchAllMessages:(id)messages;
-(id)messageWithStanzaID:(id)stanzaID isFromMe:(BOOL)me inChatSession:(id)chatSession;
-(id)messageWithStanzaID:(id)stanzaID isFromMe:(BOOL)me inChatSessionWithJID:(id)jid;
-(id)messageWithID:(id)anId inContext:(id)context;
-(id)messageWithID:(id)anId;
-(id)receivedMessagesWithStanzaIDs:(id)stanzaIDs;
-(unsigned)countOfMessagesAfterMessage:(id)messagesAfterMessage;
-(id)unreadMessagesForSession:(id)session startOffset:(unsigned)offset;
-(id)messagesForSession:(id)session startOffset:(unsigned)offset limit:(unsigned)limit;
-(int)compareNumberOfMessagesInChatSession:(id)chatSession withNumber:(unsigned)number;
-(BOOL)chatSessionsWithJIDsContainMessages:(id)jidsContainMessages;
-(id)existingChatSessionsForJIDs:(id)jids prefetchingLastMessage:(BOOL)message;
-(id)existingChatSessionsForContact:(id)contact includeLinkedContacts:(BOOL)contacts;
-(id)chatSessionWithObjectID:(id)objectID;
-(id)chatSessionsForContactsUpdateInContext:(id)context;
-(void)xmppConnectionStateDidChange:(id)xmppConnectionState;
-(void)mediaDownloadPolicyDidChange:(id)mediaDownloadPolicy;
-(void)didReceiveMemoryWarning:(id)warning;
-(void)applicationWillEnterForeground:(id)application;
-(void)reportChatsFieldStatsIfNeeded;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controllerWillChangeContent:(id)controller;
-(void)setUpFetchedResultsControllers;
-(void)markAsCorrupted;
-(void)changeAfterRestore;
-(void)removeGroupPictureIDs;
-(void)setMetadata:(id)metadata forKey:(id)key;
-(id)metadataForKey:(id)key;
-(void)deleteStorage;
-(void)workerMOCDidSave:(id)workerMOC;
-(void)saveContextAndMergeChanges:(id)changes completion:(id)completion;
-(void)delayedSave;
-(void)checkMOCForObjectsWithTemporaryIDs:(id)temporaryIDs;
-(void)saveMainMOCOnly;
-(void)internalSaveWithCompletionHandler:(id)completionHandler;
-(void)saveWithCompletionHandler:(id)completionHandler;
-(void)saveAndWaitUntilDone:(BOOL)done;
-(void)save;
-(id)saveNonMainManagedObjectContext:(id)context;
-(BOOL)contextContainsUnindexedMessages:(id)messages;
-(void)setUpRecurringTasksIfNeeded;
-(void)performAfterMOCCreated;
-(void)performAfterStoreDrop;
-(void)performBeforeStoreDrop;
-(void)performAfterStoreAdd;
-(void)performBeforeStoreAdd;
-(void)performAfterInit;
-(void)reportSearchIndexStatsIfNeededWithLastIndexedMessagesCount:(int)lastIndexedMessagesCount completion:(id)completion;
-(void)removeSearchIndex;
-(BOOL)hasSufficientFreeDiskSpaceForSearchIndexing;
-(void)searchChatSessionsMatchingText:(id)text completion:(id)completion;
-(void)searchMessagesMatchingText:(id)text chatSessionJIDs:(id)jids starredOnly:(BOOL)only offset:(unsigned)offset limit:(unsigned)limit completion:(id)completion;
-(id)lastIncomingMessagesInChatSession:(id)chatSession;
-(unsigned)countOfWebURLMessagesInChatSessions:(id)chatSessions;
-(void)relayOutgoingMessageStanza:(id)stanza;
-(id)allOutgoingMessagesAndPTTInChatSessionIncludingAndAfterMessage:(id)chatSessionIncludingAndAfterMessage;
-(id)allRecentlyRelevantMessagesInChats;
-(id)allChatSessions;
-(id)messagesInChatSession:(id)chatSession afterMessage:(id)message count:(unsigned)count;
-(id)messagesInChatSession:(id)chatSession beforeStanzaID:(id)anId isFromMe:(BOOL)me participant:(id)participant count:(unsigned)count;
-(id)messagesWithMessageIDs:(id)messageIDs inChatSession:(id)chatSession;
-(id)messageWithStanzaID:(id)stanzaID participant:(id)participant isFromMe:(BOOL)me inChatSession:(id)chatSession;
-(id)messageWithStanzaID:(id)stanzaID participant:(id)participant isFromMe:(BOOL)me inChatSessionWithJID:(id)jid;
-(void)reportMigrationTimeFieldStatsWithDuration:(double)duration databaseSize:(long long)size;
-(void)migrateChatDatabaseWithCompletionHandler:(id)completionHandler;
-(BOOL)addMediaSectionIDToAllMessagesInContext:(id)context;
-(id)validMessageObjectIDsInMediaItems:(id)mediaItems context:(id)context;
-(void)migrateChatNotificationSettingsInContext:(id)context;
-(void)migrateGroupAdminAndCreatorInContext:(id)context;
-(void)migrateChatSessionPropertiesInContext:(id)context;
-(void)migrateGroupMemberPropertiesInContext:(id)context;
-(unsigned)databaseStatus;
-(void)deleteAllMedia;
-(void)mediaUploadOperation:(id)operation uploadProgressChanged:(float)changed;
-(void)mediaUploadOperation:(id)operation didFailWithError:(id)error;
-(void)mediaUploadOperationDidFinish:(id)mediaUploadOperation;
-(void)didFinishDownloadingMediaInMessage:(id)message toPath:(id)path usingLocalCopy:(BOOL)copy;
-(void)didFailToDownloadMediaInMessage:(id)message autodownload:(BOOL)autodownload error:(id)error;
-(void)URLSessionManagerDidFinishDownloadTask:(id)urlsessionManager;
-(void)URLSessionManagerDidUpdateTaskProgress:(id)urlsessionManager;
-(void)URLSessionManagerDidChangeState:(id)urlsessionManager;
-(void)handleCompletedURLSessionDownloadTask:(id)task;
-(id)messagesWithDownloadIdentifiers:(id)downloadIdentifiers;
-(id)messageWithDownloadIdentifier:(id)downloadIdentifier;
-(void)cancelAllDownloads;
-(void)cancelAllUploads;
-(void)cancelMediaDownloadForMessage:(id)message;
-(void)queueMediaDownloadForMessage:(id)message autodownload:(BOOL)autodownload;
-(void)retryMediaDownloadForMessage:(id)message;
-(void)processPendingAutodownloads;
-(void)checkMessagesForMediaAutodownload;
-(void)cancelFileUploadForMessage:(id)message;
-(void)startMediaUploadForMessage:(id)message;
-(void)reuploadMediaInMessage:(id)message completion:(id)completion;
-(id)streamingUploadingOperationForMediaAtPath:(id)path;
-(void)abortMediaUploadDownloadOperationForMessage:(id)message;
-(void)fetchLocationMessagesInChatSession:(id)chatSession afterDate:(id)date completion:(id)completion;
-(unsigned)countSentMedia;
-(id)libraryPathToMediaItemWithHash:(id)hash;
-(id)starredMessagesInChatSessionsWithJIDs:(id)jids startOffset:(unsigned)offset limit:(unsigned)limit;
-(void)markMessage:(id)message asStarred:(BOOL)starred;
-(void)addGroupPictureChangeEventToWAChatSession:(id)wachatSession authorJID:(id)jid timestamp:(id)timestamp;
-(void)addGroupPictureDeleteEventToWAChatSession:(id)wachatSession authorJID:(id)jid timestamp:(id)timestamp;
-(void)requestAndMergeAllListsFromServerWithCompletionHandler:(id)completionHandler;
-(id)insertListIfNeeded:(id)needed inContext:(id)context;
-(void)removeGroupMember:(id)member fromList:(id)list createGroupEvent:(BOOL)event;
-(BOOL)addGroupMemberWithInfo:(id)info toList:(id)list createGroupEvent:(BOOL)event;
-(void)requestListsIfNeeded;
-(void)addInitialGroupEventToNewList:(id)newList;
-(id)createMessageTemplateForGroupEventInList:(id)list;
-(id)createNewList;
-(id)assignNewBroadcastJID;
-(void)demoteParticipantsWithJIDs:(id)jids inChatSession:(id)chatSession notification:(id)notification;
-(void)promoteParticipantsWithJIDs:(id)jids inChatSession:(id)chatSession notification:(id)notification;
-(void)requestPromotionOfMemberWithJID:(id)jid inGroupWithJID:(id)jid2 webClientRequestID:(id)anId completion:(id)completion;
-(void)modifyParticipantInChatSession:(id)chatSession oldJID:(id)jid newJID:(id)jid3 timestamp:(id)timestamp;
-(void)removeWAGroupMember:(id)member fromChatSession:(id)chatSession syncDelete:(BOOL)aDelete groupNotification:(id)notification;
-(void)removeParticipantsWithJIDs:(id)jids fromChatSession:(id)chatSession groupNotification:(id)notification;
-(void)requestRemovalOfMemberJIDs:(id)memberJIDs fromGroupWithJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)requestAdditionOfMemberJIDs:(id)memberJIDs contacts:(id)contacts toGroupWithJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(id)addParticipantWithJID:(id)jid waContact:(id)contact toChatSession:(id)chatSession addMessage:(BOOL)message groupNotification:(id)notification;
-(id)lastPushNameForGroupMember:(id)groupMember inContext:(id)context;
-(void)requestParticipatingGroups:(BOOL)groups withCompletion:(id)completion;
-(void)requestInfoForGroupWithJID:(id)jid;
-(void)requestSubjectChangeForGroupWithJID:(id)jid to:(id)to webClientRequestID:(id)anId completion:(id)completion;
-(void)changeSubject:(id)subject forChatSession:(id)chatSession groupNotification:(id)notification;
-(void)endGroupWithWAChatSession:(id)wachatSession participantUnknown:(BOOL)unknown groupNotification:(id)notification;
-(void)setLockedState:(BOOL)state forChatSession:(id)chatSession groupNotification:(id)notification;
-(void)requestGroupEndForWAChatSession:(id)wachatSession;
-(void)requestToLeaveGroupWithJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)requestGroupCreateForChatSession:(id)chatSession webClientRequestID:(id)anId completion:(id)completion;
-(void)retryGroupCreateForChatSession:(id)chatSession;
-(id)createChatSessionForContacts:(id)contacts subject:(id)subject picture:(id)picture webClientRequestID:(id)anId completion:(id)completion;
-(id)createChatSessionForContactJIDs:(id)contactJIDs subject:(id)subject picture:(id)picture webClientRequestID:(id)anId completion:(id)completion;
-(id)createChatSessionWithSubject:(id)subject groupJID:(id)jid groupNotification:(id)notification;
-(void)createOrUpdateChatSession:(id)session withXMPPGroup:(id)xmppgroup groupNotification:(id)notification;
-(BOOL)isJID:(id)jid participantInGroupWithJID:(id)jid2;
-(BOOL)hasGroupChatSessions;
@end

__attribute__((visibility("hidden")))
@interface WACameraPreviewFaceView : UIView {
	UIImageView* _outlineImageView;
	WACameraFaceObject* _faceObject;
}
@property(readonly, assign, nonatomic) WACameraFaceObject* faceObject;
-(void).cxx_destruct;
-(void)updateFrame;
-(void)fadeOutAfterDelay:(double)delay;
-(id)initWithFaceObject:(id)faceObject;
@end

__attribute__((visibility("hidden")))
@interface UserLocationViewController : WAViewController <MKMapViewDelegate, CLLocationManagerDelegate> {
	WAMapTypeSegmentedControl* _segmentedControl;
	UIBarButtonItem* _barButtonSearch;
	UIBarButtonItem* _barButtonAction;
	UIBarButtonItem* _segmentedControlBarItem;
	UIImageView* _noMediaImage;
	UILabel* _noMediaLabelTitle;
	UILabel* _noMediaLabelText;
	WAConversationHeaderView* _headerView;
	int _lastKnownInterfaceOrientation;
	CLGeocoder* _geocoder;
	CLLocationManager* _locationManager;
	CLLocation* _currentLocation;
	NSMutableArray* _annotations;
	unsigned _regionType;
	int _locationIndex;
	double _zoomLevel;
	BOOL _showMyLocation;
	BOOL _singleLocation;
	BOOL _showMapTypeSelector;
	BOOL _locationAuthorized;
	MKMapView* _mapViewMain;
	UIToolbar* _toolbar;
	id<WALocationDataSource> _dataSource;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WALocationDataSource> dataSource;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) MKMapView* mapViewMain;
@property(assign, nonatomic) BOOL locationAuthorized;
@property(assign, nonatomic) BOOL showMapTypeSelector;
@property(assign, nonatomic) BOOL singleLocation;
@property(assign, nonatomic) BOOL showMyLocation;
-(void).cxx_destruct;
-(id)previewActionItems;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateToLocation:(id)location fromLocation:(id)location3;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)processLocationError:(id)error;
-(void)updateLocationDataWithCoordinate:(XXStruct_gLbvpC)coordinate withPlacemark:(id)placemark;
-(void)displayExpectedTravelTime:(double)time forAnnotation:(id)annotation;
-(void)calculateExpectedTravelTimeForAnnotation:(id)annotation;
-(void)mapView:(id)view regionDidChangeAnimated:(BOOL)region;
-(void)mapView:(id)view didAddAnnotationViews:(id)views;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(void)directionsToHere;
-(void)searchAction:(id)action;
-(void)mapAction:(id)action;
-(void)mapTypeChanged:(id)changed;
-(void)showPlaceInfoAction:(id)action;
-(void)updateAnnotationsWithCurrentLocation;
-(void)reloadAnnotations;
-(id)findFirstGroupingWithAnnotations:(id)annotations;
-(void)layoutNoLocationsView;
-(void)setupToolbar;
-(void)updateMapRegionAnimated:(BOOL)animated;
-(void)updateHeaderViewToCurrentInterfaceOrientation;
-(void)updateNavBar;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithLocationDataSource:(id)locationDataSource;
@end

__attribute__((visibility("hidden")))
@interface WAStaticPinController : NSObject {
	UIImageView* _imageViewPin;
	UIImageView* _imageViewPinHole;
	UIImageView* _imageViewPinFloating;
	UIImageView* _imageViewPinShadow;
	WAStaticPinCalloutView* _pinCallout;
	BOOL _droppingPinFromTop;
	BOOL _pinHidden;
	BOOL _pinFloating;
	BOOL _pinCalloutVisible;
	id<WAStaticPinControllerDelegate> _delegate;
	WAMapView* _mapView;
}
@property(retain, nonatomic) WAMapView* mapView;
@property(assign, nonatomic, getter=isPinCalloutVisible) BOOL pinCalloutVisible;
@property(assign, nonatomic, getter=isPinFloating) BOOL pinFloating;
@property(assign, nonatomic, getter=isPinHidden) BOOL pinHidden;
@property(retain, nonatomic) id<WAStaticPinControllerDelegate> delegate;
+(id)controllerAttachedToWAMapView:(id)wamapView;
-(void).cxx_destruct;
-(void)configurePinCalloutWithPlacemark:(id)placemark showActivity:(BOOL)activity animated:(BOOL)animated;
-(void)setPinCalloutVisible:(BOOL)visible animated:(BOOL)animated;
-(void)pinCalloutTapped;
-(void)reportDropCompletionToDelegate;
-(void)animateFloatingPinWithDuration:(double)duration completion:(id)completion;
-(void)animatePinWithCompletion:(id)completion;
-(void)dropPinFromTop;
-(void)preparePinToBeDropped;
-(void)setPinFloating:(BOOL)floating animated:(BOOL)animated completion:(id)completion;
-(void)dropPin;
-(void)liftPin;
-(void)setPinHidden:(BOOL)hidden animated:(BOOL)animated;
-(CGPoint)originForFloatingPinShadowWithHeight:(float)height;
-(CGPoint)originForFloatingPinShadowWhenFloating:(BOOL)floatingPinShadowWhenFloating;
-(CGPoint)originForFloatingPinWhenFloating:(BOOL)floatingPinWhenFloating;
-(CGRect)mapBounds;
-(void)layout;
-(void)contentSizeCategoryDidChange:(id)contentSizeCategory;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WASingleMediaManager : WAMediaManager {
	WAMessage* _message;
}
-(void).cxx_destruct;
-(void)deleteMessagesAtIndexPaths:(id)indexPaths;
-(BOOL)isForSingleItem;
-(id)indexPathOfMessage:(id)message;
-(id)messageAtIndexPath:(id)indexPath;
-(id)indexPathFromIndex:(unsigned)index;
-(unsigned)indexFromIndexPath:(id)indexPath;
-(unsigned)numberOfItems;
-(id)initWithMessage:(id)message;
@end

__attribute__((visibility("hidden")))
@interface WALocationInfoViewController : WATableViewController <ABPersonViewControllerDelegate> {
	NSString* _formattedAddress;
	WAContactInfoTableHeaderView* _tableHeader;
	WAContactInfoNameUnit* _contactNameUnit;
	WAContactInfoPhotoUnit* _contactPhotoUnit;
	UIView* _actionsSectionHeaderView;
	MKPlacemark* _placemark;
	NSString* _contactName;
	int _contactID;
	CLLocation* _currentLocation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) CLLocation* currentLocation;
@property(assign, nonatomic) int contactID;
@property(retain, nonatomic) NSString* contactName;
@property(retain, nonatomic) MKPlacemark* placemark;
+(id)controller;
-(void).cxx_destruct;
-(BOOL)personViewController:(id)controller shouldPerformDefaultActionForPerson:(void*)person property:(int)property identifier:(int)identifier;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)actionsSectionHeaderView;
-(void)reloadTableHeader;
-(void)directionsToHere;
-(void)addToContacts;
-(void)wa_fontSizeDidChange;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WATimelockViewController : WAViewController {
	NSTimer* _progressViewTimer;
	NSDate* _viewCreationDate;
	NSURL* _learnMoreURL;
	float _progress;
	UILabel* _progressLabel;
	UILabel* _labelNotice;
	UIButton* _buttonLearnMore;
	WACircularProgressView* _progressView;
	double _timeRemaining;
}
@property(retain, nonatomic) WACircularProgressView* progressView;
@property(retain, nonatomic) UIButton* buttonLearnMore;
@property(retain, nonatomic) UILabel* labelNotice;
@property(retain, nonatomic) UILabel* progressLabel;
@property(assign, nonatomic) double timeRemaining;
@property(assign, nonatomic) float progress;
+(id)controller;
-(void).cxx_destruct;
-(void)showLearnMorePage;
-(void)progressViewTimer:(id)timer;
-(void)reloadHelperText;
-(void)prepareToBeDismissed;
-(unsigned)supportedInterfaceOrientations;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface _WATimelockViewControllerModern : WATimelockViewController {
}
+(id)controller;
-(void)learnMoreAction:(id)action;
-(void)reloadHelperText;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

@interface _WATimelockViewControllerLegacy : WATimelockViewController {
}
+(id)controller;
-(void)learnMoreAction:(id)action;
-(void)reloadHelperText;
-(void)prepareToBeDismissed;
-(void)layoutSubviews;
-(void)viewDidLayoutSubviews;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendEditableVideo : WAMultiSendMediaItem <AVVideoCompositionValidationHandling> {
	BOOL _isVideoURLProbablyMP4;
	BOOL _isUsableInVideoComposition;
	NSURL* _mediaCacheURL;
	NSURL* _videoURL;
	long long _videoFileSize;
	AVPlayerItem* _playerItem;
	AVURLAsset* _originalAsset;
	AVAssetTrack* _videoTrack;
	AVAssetTrack* _audioTrack;
	int _slowMotionFactor;
	WAVideoTranscoder* _transcoder;
	NSTimer* _exportProgressTimer;
	id _exportProgressHandler;
	XXStruct_pwHToB _originalImageForPreviewTime;
	BOOL _isSourceVideoInspected;
	UIImage* _transformedPreviewImage;
	NSMutableDictionary* _thumbnailCache;
	XXStruct_pwHToB _currentTime;
	XXStruct_pwHToB _maximumExportDuration;
	XXStruct_yD8eWC _slowMotionTimeRange;
	XXStruct_yD8eWC _trimmedTimeRange;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSMutableDictionary* thumbnailCache;
@property(readonly, assign, nonatomic) CGSize aspectRatio;
@property(readonly, assign, nonatomic) XXStruct_pwHToB editedDuration;
@property(readonly, assign, nonatomic) XXStruct_pwHToB duration;
@property(readonly, assign, nonatomic) XXStruct_pwHToB maximumExportDuration;
@property(readonly, assign, nonatomic, getter=isSlowMotionSupported) BOOL slowMotionSupported;
@property(assign, nonatomic) XXStruct_yD8eWC trimmedTimeRange;
@property(assign, nonatomic) XXStruct_yD8eWC slowMotionTimeRange;
@property(assign, nonatomic) XXStruct_pwHToB currentTime;
+(void)mediaServicesWereReset:(id)reset;
+(void)mediaServicesWereLost:(id)lost;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)videoComposition:(id)composition shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:(id)instruction layerInstruction:(id)instruction3 asset:(id)asset;
-(BOOL)videoComposition:(id)composition shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:(id)instruction;
-(BOOL)videoComposition:(id)composition shouldContinueValidatingAfterFindingEmptyTimeRange:(XXStruct_yD8eWC)range;
-(BOOL)videoComposition:(id)composition shouldContinueValidatingAfterFindingInvalidValueForKey:(id)key;
-(void)inspectVideoAtURL:(id)url;
-(id)accessibilityLabel;
-(void)didReceiveMemoryWarning;
-(int)imageOrientationForRotationTransform:(CGAffineTransform)rotationTransform;
-(void)generateVideoFramesAtTimes:(id)times size:(CGSize)size tolerance:(XXStruct_pwHToB)tolerance block:(id)block;
-(XXStruct_pwHToB)sourceTimeFromPlayerTime:(XXStruct_pwHToB)playerTime;
-(XXStruct_pwHToB)playerTimeFromSourceTime:(XXStruct_pwHToB)sourceTime;
-(BOOL)needsFileSizeReduction;
-(BOOL)needsTranscoding;
-(BOOL)needsVideoComposition;
-(BOOL)isExportedVideoCopyOfOriginalVideo;
-(XXStruct_yD8eWC)timeRangeToExport;
-(void)updateExportProgress:(id)progress;
-(void)reallyExportWithProgressHandler:(id)progressHandler completion:(id)completion;
-(void)cancelCurrentExport;
-(id)renderedImage;
-(id)renderedContent;
-(CGAffineTransform)straightenTransform:(CGAffineTransform)transform;
-(void)renderWithCompletionHandler:(id)completionHandler;
-(void)prepareCompositionWithSlowMotion:(BOOL)slowMotion completion:(id)completion;
-(void)invalidateOriginalImageForPreview;
-(void)invalidateOriginalImageForPreviewIfNeededOnTimeChange;
-(id)generateOriginalImageForPreview;
-(id)originalImageForPreview;
-(BOOL)isEditable;
-(BOOL)isVideoTrackUsableInVideoComposition:(id)videoComposition;
-(void)prepareWithCompletionHandler:(id)completionHandler;
-(void)compareDurationOfVideoAtURL:(id)url withURL:(id)url2 completion:(id)completion;
-(void)copyAttributesFromItem:(id)item;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithVideoURL:(id)videoURL assetIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAContactNoteEditingCell : WAContactPropertyEditingCell <UITextViewDelegate> {
	UILabel* _labelNotes;
	UITextView* _textView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UITextView* textView;
@property(retain, nonatomic) UILabel* labelNotes;
@property(assign, nonatomic) __weak id<WAContactNoteEditingCellDelegate> delegate;
+(float)preferredCellHeightWithContactProperty:(id)contactProperty forWidth:(float)width;
-(void).cxx_destruct;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)isFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(void)textViewDidEndEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)textViewDidChange:(id)textView;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)reconfigure;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface StatViewController : WATableViewController {
	NSTimer* _dataUpdateTimer;
	BOOL _voipEnabled;
}
+(id)controller;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(BOOL)isButtonSectionIndex:(int)index;
-(BOOL)isTotalSectionIndex:(int)index;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)updateView:(id)view;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoTableViewCell : UITableViewCell <UIViewControllerPreviewingDelegate, WATableViewCellPreviewing> {
	NSTimer* _popupTimer;
	BOOL _containsPhoneNumber;
	BOOL _popupActive;
	id<WAContactInfoTableViewCellDelegate> _cellDelegate;
	UILabel* _titleLabel;
	UILabel* _valueLabel;
	UILabel* _detailLabel;
	UIButton* _leftButton;
	UIView* _bottomEdgeView;
	NSArray* _accessoryButtons;
	UIViewController<WATableViewCellPreviewingDelegate>* _previewingDelegate;
	id<UIViewControllerPreviewing> _previewingContext;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id<UIViewControllerPreviewing> previewingContext;
@property(assign, nonatomic) __weak UIViewController<WATableViewCellPreviewingDelegate>* previewingDelegate;
@property(retain, nonatomic) NSArray* accessoryButtons;
@property(readonly, assign, nonatomic) UIView* bottomEdgeView;
@property(retain, nonatomic) UIButton* leftButton;
@property(assign, nonatomic) BOOL popupActive;
@property(assign, nonatomic) BOOL bottomEdgeVisible;
@property(readonly, assign, nonatomic) UILabel* detailLabel;
@property(readonly, assign, nonatomic) UILabel* valueLabel;
@property(readonly, assign, nonatomic) UILabel* titleLabel;
@property(assign, nonatomic) __weak id<WAContactInfoTableViewCellDelegate> cellDelegate;
+(float)heightForContactInfoUnit:(id)contactInfoUnit displayWidth:(float)width;
+(float)heightForContactFieldValue:(id)contactFieldValue multiline:(BOOL)multiline displayWidth:(float)width;
+(float)bottomInsetForTitleFont:(id)titleFont;
+(float)topInsetForTitleFont:(id)titleFont;
+(id)cellWithReuseIdentifier:(id)reuseIdentifier;
-(void).cxx_destruct;
-(id)accessibilityLabel;
-(void)callButtonTapped:(id)tapped withEvent:(id)event;
-(void)messageButtonTapped:(id)tapped withEvent:(id)event;
-(void)profilePictureTapped:(id)tapped withEvent:(id)event;
-(void)configureWithContactInfoUnit:(id)contactInfoUnit;
-(void)previewingContext:(id)context commitViewController:(id)controller;
-(id)previewingContext:(id)context viewControllerForLocation:(CGPoint)location;
-(void)unregisterForPreviewing;
-(void)registerForPreviewingUsingViewController:(id)previewingUsingViewController;
-(void)tintColorDidChange;
-(void)didHideMenu;
-(void)showCopyMenu:(id)menu;
-(void)copy:(id)copy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMessageAlertsReminderViewController : WAViewController {
	UIView* _contentView;
	UIButton* _buttonClose;
	UILabel* _labelItem1;
	UILabel* _labelItem2;
	UILabel* _labelItem3;
	UILabel* _labelTitle;
	UILabel* _labelOpenSettings;
	UILabel* _labelTapNotifications;
	UILabel* _labelTurnOnMessageNotifications;
	UILabel* _labelMessageAlerts;
	UIView* _viewMessageAlerts;
}
@property(retain, nonatomic) UIView* viewMessageAlerts;
@property(retain, nonatomic) UILabel* labelMessageAlerts;
@property(retain, nonatomic) UILabel* labelTurnOnMessageNotifications;
@property(retain, nonatomic) UILabel* labelTapNotifications;
@property(retain, nonatomic) UILabel* labelOpenSettings;
@property(retain, nonatomic) UILabel* labelTitle;
@property(retain, nonatomic) UILabel* labelItem3;
@property(retain, nonatomic) UILabel* labelItem2;
@property(retain, nonatomic) UILabel* labelItem1;
@property(retain, nonatomic) UIButton* buttonClose;
@property(retain, nonatomic) UIView* contentView;
+(void)resetLastReminderDate;
+(BOOL)canPresentReminder;
+(id)controller;
-(void).cxx_destruct;
-(void)closeAction:(id)action;
-(void)dismiss;
-(void)presentModallyFromViewController:(id)viewController;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WALabel : UILabel {
}
-(id)originalAttributedText;
-(id)originalText;
-(void)setFont:(id)font;
-(void)setAttributedText:(id)text;
-(void)setText:(id)text;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface XMPPParticipant : NSObject {
	BOOL _admin;
	NSString* _jid;
	int _errorCode;
}
@property(assign, nonatomic) int errorCode;
@property(assign, nonatomic, getter=isAdmin) BOOL admin;
@property(copy, nonatomic) NSString* jid;
+(id)participantFromParticipantElement:(id)participantElement;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WASenderKey : NSManagedObject {
}
@property(assign, nonatomic) long long recipientId;
@property(retain, nonatomic) NSData* keyData;
@property(retain, nonatomic) NSString* groupId;
@end

__attribute__((visibility("hidden")))
@interface WAContactPropertyEditingCell : WAContactPropertyCell <WAContactPropertyTextFieldDelegate> {
	WAContactPropertyTextField* _textField;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WAContactPropertyTextField* textField;
@property(assign, nonatomic) __weak id<WAContactPropertyEditingCellDelegate> delegate;
-(void).cxx_destruct;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)isFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(void)contactPropertyTextFieldValueChanged:(id)changed;
-(BOOL)contactPropertyTextFieldShouldReturn:(id)contactPropertyTextField;
-(void)contactPropertyTextFieldDidEndEditing:(id)contactPropertyTextField;
-(BOOL)contactPropertyTextFieldShouldEndEditing:(id)contactPropertyTextField;
-(void)contactPropertyTextFieldDidBeginEditing:(id)contactPropertyTextField;
-(BOOL)contactPropertyTextFieldShouldBeginEditing:(id)contactPropertyTextField;
-(void)reconfigure;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface Stat : NSObject {
	int _messagesSent;
	int _messagesReceived;
	int _callsSent;
	int _callsReceived;
	NSDate* _lastReset;
	long long _mediaBytesSent;
	long long _mediaBytesReceived;
	long long _systemBytesSent;
	long long _systemBytesReceived;
	long long _callBytesSent;
	long long _callBytesReceived;
}
@property(readonly, assign, nonatomic) NSDate* lastReset;
@property(assign, nonatomic) long long callBytesReceived;
@property(assign, nonatomic) long long callBytesSent;
@property(assign, nonatomic) int callsReceived;
@property(assign, nonatomic) int callsSent;
@property(assign, nonatomic) int messagesReceived;
@property(assign, nonatomic) int messagesSent;
@property(assign, nonatomic) long long systemBytesReceived;
@property(assign, nonatomic) long long systemBytesSent;
@property(assign, nonatomic) long long mediaBytesReceived;
@property(assign, nonatomic) long long mediaBytesSent;
+(void)optionallyLoadInteger:(int*)integer fromObject:(id)object;
+(void)optionallyLoadLongLong:(long long*)aLong fromObject:(id)object;
+(id)keysForBackup;
+(id)sharedManager;
+(void)didLoadUserDefaults:(id)defaults;
+(void)willSaveUserDefaults:(id)defaults;
+(void)registerForBackup;
-(void).cxx_destruct;
-(void)restoreFromDictionaryRepresentation:(id)dictionaryRepresentation;
-(void)checkForUpgrade;
-(void)reset:(BOOL)reset;
-(void)save;
-(void)load;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAChatPushConfig : NSManagedObject {
}
@property(retain, nonatomic) NSDate* mutedUntil;
@property(retain, nonatomic) NSString* ringtone;
@property(retain, nonatomic) NSString* sound;
@property(assign, nonatomic) short alerts;
@property(retain, nonatomic) NSString* jid;
@end

__attribute__((visibility("hidden")))
@interface WAMessageMetadata : NSObject <NSSecureCoding> {
	unsigned _type;
	NSData* _imageData;
	NSString* _matchedText;
	NSString* _title;
	NSString* _snippet;
	NSURL* _originalURL;
	NSURL* _canonicalURL;
}
@property(copy, nonatomic) NSURL* canonicalURL;
@property(copy, nonatomic) NSURL* originalURL;
@property(copy, nonatomic) NSString* snippet;
@property(copy, nonatomic) NSString* title;
@property(copy, nonatomic) NSString* matchedText;
@property(retain, nonatomic) NSData* imageData;
@property(readonly, assign, nonatomic) unsigned type;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithWebPageMetadata:(id)webPageMetadata;
-(id)initWithType:(unsigned)type;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMessageID : NSObject {
	BOOL _isFromMe;
	NSString* _stanzaID;
	NSString* _participant;
}
@property(readonly, assign, nonatomic) BOOL isFromMe;
@property(readonly, copy, nonatomic) NSString* participant;
@property(readonly, copy, nonatomic) NSString* stanzaID;
-(void).cxx_destruct;
-(id)uniqueKeyWithChatJID:(id)chatJID;
-(BOOL)hasSameIdentityAsMessage:(id)message;
-(id)initWithStanzaID:(id)stanzaID participant:(id)participant isFromMe:(BOOL)me;
@end

__attribute__((visibility("hidden")))
@interface WAMessage : NSManagedObject <UIActivityItemSource, WAMediaUploadable> {
	NSObject<OS_dispatch_group>* _locationInfoDispatchGroup;
	NSString* _mediaThumbnailCacheKey;
	NSObject<OS_dispatch_group>* _thumbnailLoadingDispatchGroup;
	int _loadRequestsInProgress;
	UIImage* _loadedThumbnail;
	BOOL _messageSendInProgress;
	NSObject<OS_dispatch_group>* _sendDispatchGroup;
	BOOL _scheduledForRemovalFromSearchIndex;
	WAMessageHelper* _helper;
	BOOL _isMediaInspected;
	BOOL _networkActivity;
	BOOL _offlineStorage;
	BOOL _sending;
	BOOL _active;
	BOOL _needsLocalNotification;
	BOOL _sentFromWebClient;
	int _multiSendMediaIndex;
	int _multiSendMediaCount;
	WAMessage* _precedingMessage;
	int _retrySendCount;
	NSString* _transientParticipantJID;
	NSData* _xmppThumbnailData;
}
@property(readonly, copy, nonatomic) NSString* mediaCollectionName;
@property(readonly, assign, nonatomic) int httpRetryCount;
@property(readonly, assign, nonatomic) BOOL isPTT;
@property(readonly, assign, nonatomic) unsigned mediaType;
@property(readonly, assign, nonatomic) id<NSObject, NSCopying> uniqueID;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSString* xmppThumbnailPath;
@property(readonly, copy, nonatomic) NSString* mediaPath;
@property(retain, nonatomic) WAMessage* precedingMessage;
@property(retain, nonatomic) NSData* xmppThumbnailData;
@property(copy, nonatomic) NSString* transientParticipantJID;
@property(assign, nonatomic) BOOL networkActivity;
@property(assign, nonatomic, getter=isSending) BOOL sending;
@property(assign, nonatomic, getter=isSentFromWebClient) BOOL sentFromWebClient;
@property(readonly, copy, nonatomic) NSDictionary* changedKeyPaths;
@property(assign, nonatomic, getter=isActive) BOOL active;
@property(assign, nonatomic) int multiSendMediaCount;
@property(assign, nonatomic) int multiSendMediaIndex;
@property(assign, nonatomic) int retrySendCount;
@property(assign, nonatomic) BOOL needsLocalNotification;
@property(assign, nonatomic) BOOL offlineStorage;
@property(retain, nonatomic) NSString* mediaLocalPath;
@property(copy, nonatomic) NSString* fileHash;
@property(readonly, assign, nonatomic) NSString* placeDetails;
@property(retain, nonatomic) NSNumber* encRetryCount;
@property(retain, nonatomic) NSNumber* childMessagesPlayedCount;
@property(retain, nonatomic) NSNumber* childMessagesReadCount;
@property(retain, nonatomic) NSNumber* childMessagesDeliveredCount;
@property(retain, nonatomic) NSNumber* filteredRecipientCount;
@property(retain, nonatomic) NSSet* childMessages;
@property(retain, nonatomic) WAMessage* parentMessage;
@property(retain, nonatomic) WAMessageInfo* messageInfo;
@property(retain, nonatomic) WAGroupMember* groupMember;
@property(retain, nonatomic) WAMediaItem* mediaItem;
@property(retain, nonatomic) WAChatSession* chatSession;
@property(readonly, assign, nonatomic) BOOL containsUndownloadedMedia;
@property(readonly, assign, nonatomic) BOOL storesMediaExternally;
@property(readonly, copy, nonatomic) NSString* uniqueKey;
@property(readonly, copy, nonatomic) NSString* senderJID;
@property(readonly, copy, nonatomic) NSString* participantJID;
@property(assign, nonatomic) BOOL starred;
@property(retain, nonatomic) NSNumber* docID;
@property(retain, nonatomic) NSString* mediaSectionID;
@property(assign, nonatomic, getter=isBroadcast) BOOL broadcast;
@property(retain, nonatomic) NSNumber* flags;
@property(retain, nonatomic) NSString* pushName;
@property(retain, nonatomic) NSNumber* groupEventType;
@property(retain, nonatomic) NSNumber* sort;
@property(retain, nonatomic) NSNumber* isFromMe;
@property(retain, nonatomic) NSNumber* messageErrorStatus;
@property(retain, nonatomic) NSNumber* messageStatus;
@property(retain, nonatomic) NSNumber* messageType;
@property(retain, nonatomic) NSDate* sentDate;
@property(retain, nonatomic) NSDate* messageDate;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* stanzaID;
@property(retain, nonatomic) NSString* toJID;
@property(retain, nonatomic) NSString* fromJID;
@property(readonly, assign, nonatomic) WAMessageHelper* helper;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isSearchable) BOOL searchable;
@property(readonly, copy, nonatomic) NSString* textForSearchIndex;
@property(readonly, assign, nonatomic) float searchQualityScore;
@property(readonly, assign, nonatomic) NSString* chatThumbnailPath;
@property(readonly, assign, nonatomic) NSString* mediaBrowserThumbnailPath;
@property(readonly, copy, nonatomic) NSString* stringRepresentationForVoiceOver;
@property(readonly, copy, nonatomic) NSString* stringRepresentationForNotification;
@property(readonly, copy, nonatomic) NSString* stringRepresentationForChat;
@property(readonly, copy, nonatomic) NSString* stringRepresentation;
@property(retain) UIImage* imageRepresentation;
@property(readonly, assign) UIImage* blurredImage;
@property(readonly, assign) UIImage* xmppImage;
@property(readonly, assign, nonatomic) UIImage* chatThumbnail;
@property(readonly, copy, nonatomic) NSString* starIcon;
@property(readonly, assign, nonatomic, getter=isValid) BOOL valid;
@property(readonly, assign, nonatomic) BOOL needsResend;
@property(readonly, assign, nonatomic) BOOL canBeForwarded;
@property(readonly, assign, nonatomic, getter=isEligibleForUnreadMessages) BOOL eligibleForUnreadMessages;
@property(readonly, assign, nonatomic, getter=isEligibleToResortChats) BOOL eligibleToResortChats;
@property(readonly, assign, nonatomic, getter=isEligibleForNotification) BOOL eligibleForNotification;
+(id)relativeLibraryPathFromAbsolutePath:(id)absolutePath;
+(id)mediaDirectoryForFilename:(id)filename JID:(id)jid;
+(id)mediaSectionIDUpperBoundForLinkPreviews;
+(id)mediaSectionIDLowerBoundForLinkPreviews;
+(id)mediaSectionIDUpperBoundForMediaMessages;
+(id)mediaSectionIDPrefixForLinkPreviews;
+(id)mediaSectionIDForMessage:(id)message usingDateFormatter:(id)formatter;
+(id)dateFormatterForMediaSectionID;
+(id)chatThumbnailCache;
+(id)mediaBrowserThumbnailForUnknownMedia;
+(id)mediaThumbnailCache;
+(void)createNewOutgoingMessageWithPlace:(id)place inChatSession:(id)chatSession completion:(id)completion;
+(void)createNewOutgoingMessageWithVideoURL:(id)videoURL caption:(id)caption collectionID:(id)anId index:(int)index count:(int)count inChatSession:(id)chatSession completion:(id)completion;
+(void)createNewOutgoingMessageWithAudioTrack:(id)audioTrack inChatSession:(id)chatSession completion:(id)completion;
+(void)createNewOutgoingMessageWithImage:(id)image caption:(id)caption collectionID:(id)anId index:(int)index count:(int)count inChatSession:(id)chatSession completion:(id)completion;
+(void)createNewOutgoingMessageWithMedia:(id)media caption:(id)caption collectionID:(id)anId inChatSession:(id)chatSession imageRepresentation:(id)representation messageType:(unsigned)type mediaOrigin:(unsigned)origin completion:(id)completion;
+(unsigned)orphanedMessagesCount;
+(BOOL)areAllMessages:(id)messages ofType:(unsigned)type;
-(void).cxx_destruct;
-(void)replaceMediaWithMediaAtPath:(id)path;
-(void)inspectMediaIfNeeded;
-(void)updateMediaLocalPathWithAbsolutePath:(id)absolutePath;
-(void)internalSetNetworkActivity:(BOOL)activity;
-(void)performBlockAfterSendMessageAttempt:(id)attempt;
-(void)markSendAsCompletedIfNecessary;
-(void)markSendAsStartedIfNecessary;
-(void)unsetFlag:(unsigned)flag;
-(void)setFlag:(unsigned)flag;
-(BOOL)hasFlag:(unsigned)flag;
-(void)willSave;
-(void)generateMediaThumbnailCacheKey;
-(id)fromName;
-(void)updateMediaSectionID;
-(void)didTurnIntoFault;
-(void)awakeFromInsert;
-(void)awakeFromFetch;
-(id)activityViewController:(id)controller dataTypeIdentifierForActivityType:(id)activityType;
-(id)activityViewController:(id)controller subjectForActivityType:(id)activityType;
-(id)activityViewController:(id)controller itemForActivityType:(id)activityType;
-(id)activityViewControllerPlaceholderItem:(id)item;
-(void)fetchRequiredDataForWAPlace:(id)waplace withCompletion:(id)completion;
-(id)mediaPathForIncomingMediaWithFilename:(id)filename;
-(id)uniqueMediaPathWithPathExtension:(id)pathExtension;
-(void)repeatedlyFetchBetterThumbnailsWithBlock:(id)block;
-(CGSize)chatThumbnailSize;
-(id)cachedChatThumbnail;
-(void)generateMediaBrowserThumbnailWithCompletionHandler:(id)completionHandler;
-(void)fetchMediaBrowserThumbnailWithCompletionHandler:(id)completionHandler;
-(id)cachedMediaBrowserThumbnail;
-(void)sendServerErrorReceiptIfNeeded;
-(void)updateReceiptInfoFrom:(id)from status:(unsigned)status date:(id)date;
-(void)attachXMPPThumbnailData:(id)data;
-(void)attachIncomingMediaWithFilename:(id)filename data:(id)data completion:(id)completion;
-(void)attachMediaAtPath:(id)path completion:(id)completion;
-(id)incomingFilePathForFileType:(id)fileType;
-(void)populateChildMessage:(id)message;
-(id)addChildMessagesIfNeeded;
-(void)prepareThumbnails:(unsigned)thumbnails completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestPing : XMPPRequest {
	double _sentTime;
}
-(void)sendOnStream:(id)stream;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestCleanDirtyBits : XMPPRequest {
}
-(id)initWithBits:(id)bits completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestFieldStats : XMPPRequest {
}
-(id)initWithStatsData:(id)statsData completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestRecoveryToken : XMPPRequest {
}
-(id)initWithToken:(id)token completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestPushConfig : XMPPRequest {
}
-(id)initWithGlobalConfig:(id)globalConfig customSettings:(id)settings completion:(id)completion;
-(void)_setPlatformExtrasConfigOn:(id)on;
-(void)_setConfigOn:(id)on;
@end

__attribute__((visibility("hidden")))
@interface WAMessageDetailsTableDelegate : NSObject <UITableViewDelegate, UITableViewDataSource, WAMessageDetailsTableUpdateDelegate> {
	NSDictionary* _receiptInfo;
	NSDate* _receiptDate[3];
	int _receiptRow[3];
	BOOL _isMediaMessage;
	BOOL _isPttMessage;
	float _cellHeight;
	UIFont* _cellNameFont;
	UIFont* _dateTimeFont;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)tableView:(id)view messageUpdated:(id)updated;
-(void)reloadFonts;
-(void)stopOperations;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)initWithMessage:(id)message;
@end

__attribute__((visibility("hidden")))
@interface WABeatingHeartCell : WAMessageCell {
	UILabel* _label;
	BOOL _showListIcon;
	UIImageView* _listIconImageView;
	UIView* _listIconSeparatorView;
}
+(UIEdgeInsets)textInsetsForCellData:(id)cellData;
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
+(id)cellReuseIdentifier;
-(void).cxx_destruct;
-(void)animateHeart;
-(void)performCopy;
-(BOOL)canPerformCopy;
-(void)layoutSubviews;
-(id)listIconImageView;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)applicationWillEnterForeground:(id)application;
-(void)didMoveToWindow;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAChatSession : NSManagedObject {
	BOOL _hasMessages;
	BOOL _active;
	BOOL _supressCreationOfNextGroupPictureChangeEvent;
}
@property(readonly, assign, nonatomic, getter=isReadonlyGroup) BOOL readonlyGroup;
@property(assign, nonatomic) BOOL eligibleForDeletionIfEmpty;
@property(readonly, assign, nonatomic, getter=isContactBlocked) BOOL contactBlocked;
@property(assign, nonatomic) BOOL supressCreationOfNextGroupPictureChangeEvent;
@property(assign, nonatomic, getter=isActive) BOOL active;
@property(assign, nonatomic) BOOL hasMessages;
@property(retain, nonatomic) WAMessage* lastMessage;
@property(retain, nonatomic) WAGroupInfo* groupInfo;
@property(retain, nonatomic) NSSet* groupMembers;
@property(retain, nonatomic) NSString* eTag;
@property(retain, nonatomic) NSDate* locationSharingEndDate;
@property(retain, nonatomic) NSNumber* archived;
@property(retain, nonatomic) NSNumber* hidden;
@property(retain, nonatomic) NSNumber* removed;
@property(retain, nonatomic) NSNumber* sessionType;
@property(retain, nonatomic) NSNumber* flags;
@property(retain, nonatomic) NSNumber* messageCounter;
@property(retain, nonatomic) NSString* savedInput;
@property(retain, nonatomic) NSNumber* unreadCount;
@property(retain, nonatomic) NSString* lastMessageText;
@property(retain, nonatomic) NSDate* lastMessageDate;
@property(retain, nonatomic) NSString* partnerName;
@property(retain, nonatomic) NSString* contactJID;
@property(retain, nonatomic) NSNumber* contactABID;
@property(readonly, copy, nonatomic) NSString* nameForWebClient;
@property(readonly, assign, nonatomic, getter=isBroadcastListJIDValid) BOOL broadcastListJIDValid;
@property(readonly, assign, nonatomic, getter=isBroadcastList) BOOL broadcastList;
@property(readonly, assign, nonatomic, getter=isSuspicious) BOOL suspicious;
@property(readonly, assign, nonatomic, getter=isGroupChat) BOOL groupChat;
@property(readonly, assign, nonatomic, getter=isIndividualChat) BOOL individualChat;
+(short)sessionTypeFromJID:(id)jid;
+(unsigned)maximumListNameLength;
+(id)anyChatSessionWithOrphanedMessagesInContext:(id)context;
+(id)allDeletedChatSessionIDsInContext:(id)context objectIDsOnly:(BOOL)only;
+(void)resetGroupCreatorOrAdminKnownCache;
+(id)groupCreatorOrAdminKnownCache;
-(id)firstNamesOfActiveGroupMembers;
-(unsigned)numberOfActiveGroupMembers;
-(id)activeGroupMembers;
-(void)updateSortIndexOfMessage:(id)message;
-(void)prepareGroupInfo;
-(void)showEmptyChatHistoryAlertView;
-(void)generateNewWebModifyTag;
-(id)webModifyTag;
-(id)groupMemberWithJID:(id)jid;
-(id)sortedGroupMembersIncludingNonActive:(BOOL)active;
-(BOOL)isMuted;
-(id)mailComposeViewControllerForChatHistoryWithMedia:(BOOL)media;
-(void)promptUserToAttachMediaToChatHistoryFromViewController:(id)viewController completion:(id)completion;
-(void)deleteSession;
-(id)sessionWithAllMessagesDeleted;
-(void)scheduleDeleteProfilePictures;
-(void)bulkDeleteNotSharedMedia;
-(BOOL)chatFolderMayIncludeSharedMedia;
-(id)clearConversationConfirmationText;
-(id)deleteConfirmationText;
-(unsigned)countOfPendingMessages;
-(BOOL)currentUserCanEditGroup;
-(BOOL)currentUserIsAdmin;
-(BOOL)isChatReadable;
-(BOOL)isGroupCreatorOrAdminKnown;
-(unsigned)numberOfStarredMessages;
-(BOOL)containsDownloadedMedia;
-(BOOL)containsMessages;
-(BOOL)containsOutgoingMessages;
-(BOOL)containsUserMessages;
@end

__attribute__((visibility("hidden")))
@interface WACloudMediaDownloadRequest : NSObject {
	int _imageRequestID;
	NSURL* _cachedBaseFileURL;
	NSURL* _localFileURL;
	id _assetContent;
	NSURL* _fileURL;
	NSError* _error;
	float _progress;
	WACloudMediaDownloadManager* _manager;
	PHAsset* _phAsset;
	NSURLSessionDownloadTask* _downloadTask;
	NSURL* _remoteURL;
	NSData* _resumeData;
	id _progressHandler;
	id _completionHandler;
	unsigned _requestState;
}
@property(readonly, assign, nonatomic) BOOL isAssetCloudPlaceholder;
@property(assign, nonatomic) unsigned requestState;
@property(copy, nonatomic) id completionHandler;
@property(copy, nonatomic) id progressHandler;
@property(retain, nonatomic) NSData* resumeData;
@property(readonly, copy, nonatomic) NSURL* remoteURL;
@property(readonly, assign, nonatomic) NSURLSessionDownloadTask* downloadTask;
@property(readonly, assign, nonatomic) PHAsset* phAsset;
@property(readonly, copy, nonatomic) NSString* identifier;
@property(assign, nonatomic) __weak WACloudMediaDownloadManager* manager;
@property(readonly, assign, nonatomic) UIImage* image;
@property(readonly, assign, nonatomic, getter=isContentAvailable) BOOL contentAvailable;
@property(readonly, assign, nonatomic, getter=isCancelled) BOOL cancelled;
@property(readonly, assign, nonatomic, getter=isDownloading) BOOL downloading;
@property(assign, nonatomic) float progress;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, copy, nonatomic) NSURL* fileURL;
-(void).cxx_destruct;
-(void)didDownloadRemoteURLTo:(id)to preferredExtension:(id)extension;
-(void)didFinishDownloadWithError:(id)error;
-(void)didFinishRequest;
-(void)cancel;
-(void)resume;
-(int)reallyRequestAssetFromPhotosLibraryWithCompletionHandler:(id)completionHandler;
-(void)requestAssetFromPhotosLibraryWithCompletionHandler:(id)completionHandler;
-(void)unload;
-(void)resetState;
-(id)existingCachedFileURLWithBaseURL:(id)baseURL;
-(id)initWithPHAsset:(id)phasset;
@end

__attribute__((visibility("hidden")))
@interface WACloudMediaDownloadManager : NSObject <NSURLSessionDownloadDelegate> {
	NSURLSession* _session;
	NSMutableArray* _activeRequests;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(id)requestForTask:(id)task;
-(id)startDownloadTaskForRequest:(id)request;
-(id)requestForMediaInAsset:(id)asset progressHandler:(id)handler completion:(id)completion;
-(void)debug_purgePhotosCache;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WACloudImageDownloadRequest : WACloudMediaDownloadRequest {
}
-(int)reallyRequestAssetFromPhotosLibraryWithCompletionHandler:(id)completionHandler;
@end

__attribute__((visibility("hidden")))
@interface WACloudVideoDownloadRequest : WACloudMediaDownloadRequest {
}
-(int)reallyRequestAssetFromPhotosLibraryWithCompletionHandler:(id)completionHandler;
@end

__attribute__((visibility("hidden")))
@interface WAWallpaperPreviewController : WAViewController <UIScrollViewDelegate, UITableViewDelegate, UITableViewDataSource> {
	UIView* _bottomView;
	UIScrollView* _pagingScrollView;
	NSMutableArray* _scrollViewPages;
	UIScrollView* _scrollView;
	UIImageView* _imageView;
	UITableView* _tableViewMessages;
	UIButton* _buttonParallaxOnOff;
	UIMotionEffectGroup* _parallaxEffect;
	BOOL _parallaxEnabled;
	NSArray* _messagesLeft;
	NSArray* _messagesMiddle;
	NSArray* _messagesRight;
	NSArray* _messagesSinglePhoto;
	BOOL _libraryMode;
	id<WAWallpaperPreviewControllerDelegate> _delegate;
	int _libraryImageIndex;
	UIImage* _image;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) int libraryImageIndex;
@property(assign, nonatomic) BOOL libraryMode;
@property(assign, nonatomic) __weak id<WAWallpaperPreviewControllerDelegate> delegate;
+(id)controllerWithLibraryImageIndex:(unsigned)libraryImageIndex;
+(id)controllerWithImage:(id)image;
-(void).cxx_destruct;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowWithCellData:(id)cellData;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)sampleChatMessagesForTableView:(id)tableView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)updateScrollViewAfterEnablingMotion:(BOOL)motion;
-(void)checkIfMotionShouldBeDisabledUnintentionally;
-(void)updateBlurEffectsForParallaxButton:(id)parallaxButton;
-(void)updateParallaxOnOffButtonState;
-(void)setParallaxEffectEnabled:(BOOL)enabled;
-(void)parallaxOnOffAction:(id)action;
-(void)cancelAction:(id)action;
-(void)doneAction:(id)action;
-(void)bottomButtonAnyTouch:(id)touch;
-(id)imageForCurrentZoomRect;
-(void)reloadSingleImage;
-(void)tilePages;
-(void)setCurrentPageIndex:(unsigned)index;
-(void)scrollToPageAtIndex:(int)index animated:(BOOL)animated;
-(void)unloadScrollViewPageAtIndex:(int)index;
-(void)loadScrollViewPageAtIndex:(int)index asynchronously:(BOOL)asynchronously;
-(id)parallaxOnOffButton;
-(id)sampleConversationTable;
-(void)presentFromViewController:(id)viewController animated:(BOOL)animated;
-(unsigned)supportedInterfaceOrientations;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMediaItem : NSManagedObject {
	WAMediaItemMetadata* _decodedMetadata;
	BOOL _mediaSaved;
	NSString* _mediaHostIp;
	int _httpRetryCount;
}
@property(assign, nonatomic) int httpRetryCount;
@property(retain, nonatomic) NSString* mediaHostIp;
@property(assign, nonatomic) BOOL mediaSaved;
@property(readonly, assign, nonatomic) NSString* matchedText;
@property(readonly, assign, nonatomic) NSString* canonicalURL;
@property(readonly, assign, nonatomic) NSString* snippet;
@property(copy, nonatomic) WAMediaItemMetadata* decodedMetadata;
@property(retain, nonatomic) NSData* metadata;
@property(retain, nonatomic) NSString* collectionName;
@property(retain, nonatomic) NSString* authorName;
@property(retain, nonatomic) NSString* title;
@property(retain, nonatomic) NSNumber* mediaOrigin;
@property(retain, nonatomic) NSNumber* movieDuration;
@property(retain, nonatomic) NSString* xmppThumbPath;
@property(retain, nonatomic) NSString* thumbnailLocalPath;
@property(retain, nonatomic) NSDate* mediaUrlDate;
@property(retain, nonatomic) NSString* mediaURL;
@property(retain, nonatomic) NSNumber* fileSize;
@property(retain, nonatomic) NSNumber* latitude;
@property(retain, nonatomic) NSString* mediaLocalPath;
@property(retain, nonatomic) NSString* vCardName;
@property(retain, nonatomic) NSNumber* longitude;
@property(retain, nonatomic) NSString* vCardString;
@property(retain, nonatomic) WAMessage* message;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAMediaItemMetadata : NSObject <NSSecureCoding, NSCopying> {
	NSString* _matchedText;
	NSString* _canonicalURL;
	NSString* _snippet;
}
@property(readonly, assign, nonatomic, getter=isEmpty) BOOL empty;
@property(copy, nonatomic) NSString* snippet;
@property(copy, nonatomic) NSString* canonicalURL;
@property(copy, nonatomic) NSString* matchedText;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface _WAVideoScrubberStripedBar : UIView {
	CGPatternRef _pattern;
	float _spacing;
	UIColor* _stripeColor;
}
@property(retain, nonatomic) UIColor* stripeColor;
@property(assign, nonatomic) float spacing;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)rebuildPattern;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAVideoScrubberSloMoBar : WAVideoScrubberPrecisionRangeSlider {
	_WAVideoScrubberStripedBar* _leftBar;
	_WAVideoScrubberStripedBar* _centerBar;
	_WAVideoScrubberStripedBar* _rightBar;
	float _centerValue;
	UIImageView* _leftHandle;
	UIImageView* _rightHandle;
}
-(void).cxx_destruct;
-(void)getFramesForLeftHandle:(CGRect*)leftHandle atPosition:(float)position rightHandle:(CGRect*)handle atPosition:(float)position4 leftMostVisiblePosition:(float)position5 rightMostVisiblePosition:(float)position6;
-(id)rightHandleView;
-(id)leftHandleView;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAApplicationDebug : NSObject {
}
+(void)logCountOfBackgroundTasks;
@end

__attribute__((visibility("hidden")))
@interface _WAMediaPlayerPlayButtonView : UIView {
	UIView* _circleView;
	UIImageView* _playIconView;
	UIButton* _button;
}
@property(readonly, assign, nonatomic) UIButton* button;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAPlayerView : UIView {
}
+(Class)layerClass;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPlayer : UIView {
	AVPlayer* _player;
	_WAPlayerView* _playerView;
	id _timeObserver;
	float _playerRateBeforeScrubbing;
	XXStruct_pwHToB _desiredSeekTime;
	_WAMediaPlayerPlayButtonView* _playButtonView;
	CGRect _frameForPlayButtonSnapshot;
	BOOL _showPlayButtonOnReady;
	id _playbackActivity;
	BOOL _playButtonNormallyVisible;
	NSObject<OS_dispatch_group>* _seekDispatchGroup;
	BOOL _seekInProgress;
	BOOL _alwaysShowPlayButtonOnPause;
	BOOL _suppressPlayButton;
	BOOL _scrubbingInProgress;
	unsigned _status;
	id<WAMediaPlayerDelegate> _delegate;
	float _playbackRate;
	NSError* _error;
	WACropAwareImageView* _posterImageView;
	AVPlayerItem* _playerItem;
	XXStruct_pwHToB _playbackStartTime;
}
@property(readonly, assign, nonatomic) BOOL scrubbingInProgress;
@property(readonly, assign, nonatomic) XXStruct_pwHToB duration;
@property(readonly, assign, nonatomic) XXStruct_pwHToB currentTime;
@property(readonly, assign, nonatomic) CGSize presentationSize;
@property(assign, nonatomic) BOOL suppressPlayButton;
@property(assign, nonatomic) BOOL alwaysShowPlayButtonOnPause;
@property(assign, nonatomic) XXStruct_pwHToB playbackStartTime;
@property(retain, nonatomic) AVVideoComposition* playerItemVideoComposition;
@property(retain, nonatomic) AVPlayerItem* playerItem;
@property(readonly, assign, nonatomic) WACropAwareImageView* posterImageView;
@property(retain, nonatomic) UIImage* posterImage;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) BOOL seekInProgress;
@property(readonly, assign, nonatomic, getter=isReadyToPlay) BOOL readyToPlay;
@property(readonly, assign, nonatomic, getter=isPlaying) BOOL playing;
@property(assign, nonatomic) float playbackRate;
@property(assign, nonatomic) __weak id<WAMediaPlayerDelegate> delegate;
@property(assign, nonatomic) unsigned status;
-(void).cxx_destruct;
-(id)snapshotImage;
-(void)performBlockAfterSeeking:(id)seeking;
-(void)seekToTime:(XXStruct_pwHToB)time tolerance:(XXStruct_pwHToB)tolerance completionHandler:(id)handler;
-(void)internalSeekWithTolerance:(XXStruct_pwHToB)tolerance;
-(void)seekToTime:(XXStruct_pwHToB)time tolerance:(XXStruct_pwHToB)tolerance;
-(void)seekToTime:(XXStruct_pwHToB)time;
-(void)endScrubbing;
-(void)beginScrubbing;
-(void)rewind;
-(BOOL)playInitiatedByAutoPlay:(BOOL)play;
-(void)pause;
-(void)updatePlayButtonAlphaWithAnimation:(BOOL)animation;
-(BOOL)isPlayButtonHidden;
-(void)applicationWillResignActive:(id)application;
-(void)playerItemDidPlayToEndTime:(id)playerItem;
-(void)playerItemDidBecomeReadyToPlay;
-(void)playerDidChangeCurrentTime;
-(void)removeTimeObserverFromPlayer;
-(void)addTimeObserverToPlayer;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)playButtonTapped:(id)tapped;
-(void)setInitialPosterImage:(id)image;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)layoutSubviews;
-(void)didMoveToWindow;
-(void)setAccessibilityValue:(id)value;
-(void)setAccessibilityLabel:(id)label;
-(BOOL)isAccessibilityElement;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithContentURL:(id)contentURL;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAVerificationCloudReminderViewController : WAViewController {
	id<WAVerificationCloudReminderViewControllerDelegate> _delegate;
	WACloudBackupManager* _manager;
	NSArray* _listNumberLabels;
	UIView* _contentView;
	UILabel* _labelTitle;
	NSArray* _textLabels;
	NSArray* _icons;
	UILabel* _labelText1;
	UILabel* _labelText2;
	UILabel* _labelText3;
	UILabel* _labelText4;
	UIView* _viewWhatsApp;
	UILabel* _labelWhatsApp;
}
@property(assign, nonatomic) __weak UILabel* labelWhatsApp;
@property(assign, nonatomic) __weak UIView* viewWhatsApp;
@property(assign, nonatomic) __weak UILabel* labelText4;
@property(assign, nonatomic) __weak UILabel* labelText3;
@property(assign, nonatomic) __weak UILabel* labelText2;
@property(assign, nonatomic) __weak UILabel* labelText1;
@property(retain, nonatomic) NSArray* icons;
@property(retain, nonatomic) NSArray* textLabels;
@property(assign, nonatomic) __weak UILabel* labelTitle;
@property(assign, nonatomic) __weak UIView* contentView;
@property(retain, nonatomic) NSArray* listNumberLabels;
@property(retain, nonatomic) WACloudBackupManager* manager;
@property(assign, nonatomic) __weak id<WAVerificationCloudReminderViewControllerDelegate> delegate;
+(id)createFromStoryboard;
-(void).cxx_destruct;
-(void)nextAction:(id)action;
-(void)addNextButton;
-(void)viewWillLayoutSubviews;
-(void)viewDidLoad;
-(id)initWithCoder:(id)coder andManager:(id)manager;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMediaGalleryFlowLayout : UICollectionViewFlowLayout {
	NSDictionary* _layoutAttributesForDeletedItems;
	NSMutableArray* _deleteIndexPaths;
	NSMutableArray* _insertIndexPaths;
}
@property(retain) NSMutableArray* insertIndexPaths;
@property(retain) NSMutableArray* deleteIndexPaths;
@property(retain, nonatomic) NSDictionary* layoutAttributesForDeletedItems;
+(Class)layoutAttributesClass;
-(void).cxx_destruct;
-(BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)boundsChange;
-(id)initialLayoutAttributesForAppearingItemAtIndexPath:(id)indexPath;
-(id)finalLayoutAttributesForDisappearingItemAtIndexPath:(id)indexPath;
-(void)finalizeCollectionViewUpdates;
-(void)prepareForCollectionViewUpdates:(id)collectionViewUpdates;
-(id)layoutAttributesForElementsInRect:(CGRect)rect;
@end

@interface WAContactInfoEditCell : UITableViewCell {
	UIView* _verticalSeparator;
	UIView* _topEdge;
	UIView* _bottomEdge;
	UIButton* _buttonLabel;
	UIImageView* _chevronImage;
	id<WAContactInfoEditCellDelegate> _delegate;
	UITextField* _textField;
}
@property(assign, nonatomic) BOOL hideBottomEdge;
@property(assign, nonatomic) BOOL hideTopEdge;
@property(copy, nonatomic) NSString* label;
@property(readonly, assign, nonatomic) UITextField* textField;
@property(assign, nonatomic) __weak id<WAContactInfoEditCellDelegate> delegate;
-(void).cxx_destruct;
-(void)labelButtonTouchUp:(id)up;
-(void)labelButtonTouchCancel:(id)cancel;
-(void)labelButtonTouchDown:(id)down;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _XMPPConnectionCallback : NSObject {
	NSObject<OS_dispatch_queue>* _queue;
	id _callback;
}
-(void).cxx_destruct;
-(void)notifyWithDispatchGroup:(id)dispatchGroup;
-(id)initWithQueue:(id)queue block:(id)block;
@end

__attribute__((visibility("hidden")))
@interface _XMPPConnectionConditional : NSObject {
	NSObject<OS_dispatch_queue>* _queue;
	id _conditional;
	NSString* _lastResult;
}
@property(readonly, copy, nonatomic) NSString* lastResult;
-(void).cxx_destruct;
-(void)performCheckWithDispatchGroup:(id)dispatchGroup;
-(id)initWithQueue:(id)queue block:(id)block;
@end

__attribute__((visibility("hidden")))
@interface XMPPConnectionConfiguration : NSObject {
	BOOL _allowsAddressBookAccess;
	BOOL _passiveOnly;
}
@property(assign, nonatomic, getter=isPassiveOnly) BOOL passiveOnly;
@property(assign, nonatomic) BOOL allowsAddressBookAccess;
@end

__attribute__((visibility("hidden")))
@interface XMPPConnection : NSObject <XMPPStreamDelegate> {
	WATimer* _updatePresenceTimer;
	NSMutableSet* _deferredSubscribes;
	NSMutableDictionary* _clientData;
	unsigned _lastSentPresence;
	NSMutableDictionary* _timers;
	NSMutableDictionary* _unsentMessages;
	NSMutableDictionary* _unsentCallStanzas;
	NSMutableArray* _pendingRequests;
	BOOL _firstOfflineMessageReceived;
	NSMutableArray* _recentlySentAcks;
	NSMutableArray* _acks;
	NSMutableDictionary* _sentReadReceipts;
	NSMutableArray* _readReceiptsToProcess;
	NSObject<OS_dispatch_source>* _delayedProcessTimer;
	double _connectionAttemptStartTime;
	double _connectionStartTime;
	NSMutableArray* _incomingMessageStanzasToDispatch;
	BOOL _isDispatchingIncomingMessageStanzas;
	double _lastIncomingMessageStanzaDispatchTime;
	NSObject<OS_dispatch_source>* _checkConnectionTimer;
	NSObject<OS_dispatch_source>* _checkFieldStatsTimer;
	int _connectionHandlersLock;
	NSMutableArray* _connectionHandlers;
	int _stateLock;
	NSDictionary* _stateChangeCallbacks;
	unsigned _state;
	unsigned _networkStatus;
	int _networkStatusLock;
	NSString* _radioAccessTechnology;
	XMPPConnectionConfiguration* _config;
	BOOL _isHoldingConnectionLock;
	int _backgroundConnectionAttempts;
	int _foregroundConnectionAttempts;
	BOOL _voipNetworkDidChange;
	BOOL _checkConnectionScheduledOnStateChange;
	NSMutableArray* _connectionConditionals;
	BOOL _isConnectionCheckingInProgress;
	BOOL _isDisconnectRequested;
	int _suppressReconnectCounter;
	NSMutableArray* _internalDisconnectCallbacks;
	SCNetworkReachabilityRef _reachabilityRef;
	XXStruct_4pnlqD _reachabilityContext;
	BOOL _isCheckingInternetConnection;
	NSString* _lastConnectionErrorMessage;
	unsigned _xmppAuthNetworkStatus;
	BOOL _active;
	int _lastOfflineQueueCount;
	NSString* _serviceType;
	NSDate* _accountCreation;
	NSDate* _accountExpiration;
	NSString* _serverPropsVersion;
	id<XMPPConnectionDelegate> _delegate;
	XMPPStream* _stream;
	NSObject<OS_dispatch_queue>* _xmppQueue;
	double _voipPushDelayWithSkew;
	double _serverTimeShift;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned short currentPort;
@property(readonly, assign, nonatomic) NSString* currentHost;
@property(readonly, assign, nonatomic) NSString* currentIP;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* xmppQueue;
@property(readonly, assign, nonatomic) XMPPStream* stream;
@property(assign, nonatomic) __weak id<XMPPConnectionDelegate> delegate;
@property(retain) NSString* serverPropsVersion;
@property(assign) double serverTimeShift;
@property(retain) NSDate* accountExpiration;
@property(retain) NSDate* accountCreation;
@property(retain) NSString* serviceType;
@property(readonly, copy, nonatomic) NSString* genericNetworkErrorMessage;
@property(readonly, copy, nonatomic) NSString* networkStatusErrorMessage;
@property(assign) double voipPushDelayWithSkew;
@property(assign) int lastOfflineQueueCount;
@property(readonly, assign) unsigned serverConnectionStatus;
@property(readonly, assign) unsigned networkStatus;
@property(readonly, assign, getter=isConnected) BOOL connected;
@property(readonly, assign) unsigned state;
@property(assign, nonatomic, getter=isActive) BOOL active;
+(id)stateToString:(unsigned)string;
-(void).cxx_destruct;
-(id)createPresence:(unsigned)presence withNickname:(id)nickname;
-(id)convertOutgoingEmojiString:(id)string;
-(void)checkInternetConnection;
-(void)radioAccessTechnologyDidChange:(id)radioAccessTechnology;
-(void)reachabilityDidChangeWithFlags:(unsigned)reachability;
-(void)logReachabilityFlags:(unsigned)flags;
-(void)connectIfPossible;
-(void)checkConnection;
-(BOOL)isSocketHealthy;
-(void)forceLeaveFetchOfflineStateIfNeeded;
-(void)connect;
-(void)resetConnectionAttempts;
-(void)reallyConnect;
-(void)checkFieldStats;
-(void)uploadFieldStats;
-(void)closeStream;
-(BOOL)xmppStream:(id)stream didReceiveLoginResponseStanza:(id)stanza;
-(void)xmppStream:(id)stream initialConfigurationAsync:(id)async;
-(void)xmppStreamDidClose:(id)xmppStream;
-(void)xmppStream:(id)stream didReceiveCustomStanza:(id)stanza;
-(void)xmppStream:(id)stream didReceiveNotification:(id)notification;
-(void)xmppStream:(id)stream didReceiveChatState:(id)state;
-(void)xmppStream:(id)stream didReceiveAck:(id)ack;
-(void)xmppStream:(id)stream didReceiveReceipt:(id)receipt;
-(void)xmppStream:(id)stream didReceivePresence:(id)presence;
-(void)xmppStream:(id)stream didReceiveMessages:(id)messages;
-(void)xmppStream:(id)stream didReceiveIQ:(id)iq;
-(void)xmppStreamDidNotAuthenticate:(id)xmppStream lockDuration:(double)duration retryAfter:(double)after reasonCode:(int)code;
-(void)xmppStreamDidAuthenticate:(id)xmppStream attributes:(id)attributes serverTimeShift:(double)shift;
-(void)xmppStreamDidOpen:(id)xmppStream;
-(void)sendAckForNotification:(id)notification;
-(void)sendIQResponse:(id)response;
-(void)reloadPassword;
-(void)ackMediaForURLString:(id)urlstring sourceIsSelf:(BOOL)aSelf completion:(id)completion;
-(void)requestUploadUrlForFileHash:(id)fileHash origHash:(id)hash filetype:(unsigned)filetype filesize:(unsigned long long)filesize mediaIndex:(int)index totalMediaCount:(int)count completion:(id)completion;
-(void)internalRequestUploadUrlForFileHash:(id)fileHash origHash:(id)hash filetype:(unsigned)filetype filesize:(unsigned long long)filesize mediaIndex:(int)index totalMediaCount:(int)count completion:(id)completion;
-(void)ping;
-(void)sendSharedItem:(id)item;
-(void)sendMessageStanza:(id)stanza;
-(void)endMessageTimeout:(id)timeout;
-(void)startMessageTimeout:(id)timeout;
-(void)markMessagesAsUnsent;
-(void)setNetworkStatus:(unsigned)status;
-(void)handleRemotePushWithPayload:(id)payload;
-(void)drop;
-(void)disconnectIfStuckInConnecting;
-(void)disconnect;
-(void)performBlock:(id)block onQueue:(id)queue onConnectionState:(unsigned)state;
-(void)setState:(unsigned)state;
-(void)logConnectionAttemptErrorMessageIfNeeded:(id)needed;
-(void)checkIfConnectionIsAllowedWithCompletionHandler:(id)completionHandler;
-(void)registerConnectionConditional:(id)conditional onQueue:(id)queue;
-(void)setXmppUser:(id)user;
-(void)cancelAllRequests;
-(void)resendAllPendingRequests;
-(void)enqueueRequest:(id)request;
-(BOOL)isRequestPending:(id)pending;
-(void)notifyConnectionHandlersOfOfflineMarker;
-(void)removeConnectionHandler:(id)handler;
-(void)addConnectionHandler:(id)handler;
-(void)systemTimeChanged:(id)changed;
-(void)performBlockOnXMPPQueue:(id)queue;
-(void)dealloc;
-(id)initWithConfiguration:(id)configuration;
-(void)processIncomingCustomStanza:(id)stanza;
-(void)delayedReceiptsUpdate;
-(void)processIncomingAck:(id)ack;
-(void)processIncomingNotification:(id)notification;
-(void)processIncomingChatState:(id)state;
-(void)processIncomingPresence:(id)presence;
-(void)dispatchStanzasToMainThreadWithLastCount:(int)lastCount attempts:(int)attempts;
-(void)dispatchStanzasToMainThread:(id)mainThread;
-(void)processIncomingMessages:(id)messages;
-(BOOL)isMessageStanzaRecentlyAcked:(id)acked;
-(void)processIncomingIQ:(id)iq;
-(void)performOnStreamOpen;
-(void)sendCallReceiptOrAck:(id)ack;
-(void)sendCallStanza:(id)stanza;
-(void)endCallStanzaTimeout:(id)timeout;
-(void)startCallStanzaTimeout:(id)timeout;
-(void)removeCallWatchdogs;
-(void)sendServerErrorReceiptForMessage:(id)message;
-(void)sendRetryReceiptForMessageId:(id)messageId toJID:(id)jid participant:(id)participant retryCount:(int)count timeAttribute:(id)attribute;
-(void)sendRetryReceiptForMessage:(id)message retryCount:(int)count;
-(void)sendUnknownTagsReceiptForMessage:(id)message tags:(id)tags;
-(void)sendErrorNoEncryptionReceiptForMessage:(id)message withType:(id)type;
-(void)sendReadReceiptsForChatMessages:(id)chatMessages;
-(void)sendPlayedReceiptForMessage:(id)message;
-(void)sendDeliveryReceiptsForMessageStanzas:(id)messageStanzas;
-(void)sendDeliveryReceiptsForChatMessages:(id)chatMessages;
-(id)processIncomingMessageStanzas:(id)stanzas;
-(int)fieldStatsMeticForAxolotlError:(int)axolotlError;
-(void)sendMessage:(id)message forParticipant:(id)participant;
-(void)resendUnsentCallStanzas;
-(void)resendUnsentMessages;
-(void)respondToServerErrorReceiptByResendingMessage:(id)serverErrorReceiptByResendingMessage toParticipant:(id)participant;
-(BOOL)hasPendingRequestsForGroupWithJID:(id)jid participantJID:(id)jid2;
-(void)changeStatus:(unsigned)status forIncomingMessageWithStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid4;
-(void)cleanDirtyBits:(id)bits completion:(id)completion;
-(void)reportVoipPushDelay:(double)delay;
-(void)sendGlobalPushConfig:(id)config customSettings:(id)settings completion:(id)completion;
-(void)requestCapabilityForJIDs:(id)jids completion:(id)completion;
-(void)resetPresenceStateOnStreamClose;
-(void)updatePresence;
-(void)sendPushName:(id)name;
-(void)sendPresenceWithNickname:(id)nickname;
-(void)resetCachedLastSeen;
-(id)lastSeenTimestampForJID:(id)jid;
-(unsigned)latestChatStateForGroupWithJID:(id)jid returningParticipantJID:(out id*)jid2;
-(unsigned)chatStateForContactWithJID:(id)jid;
-(void)checkIncomingChatStateForJID:(id)jid participantJID:(id)jid2;
-(void)setIncomingChatState:(unsigned)state forJID:(id)jid participantJID:(id)jid3;
-(void)updateLastSentChatState:(unsigned)state forJID:(id)jid;
-(void)reportChatState:(unsigned)state forJID:(id)jid;
-(void)presenceSubscribeToJIDIfNecessary:(id)jidifNecessary;
-(void)resetAllChatStatesAndClearSubscriptions:(BOOL)subscriptions;
-(void)removeClientDataForJID:(id)jid;
-(id)addClientDataForJID:(id)jid;
-(id)clientDataForJID:(id)jid;
-(BOOL)isOnline:(id)online;
-(void)sendRecoveryToken:(id)token completion:(id)completion;
-(void)queryServerPropertiesWithCompletion:(id)completion;
-(void)requestBroadcastListsWithCompletion:(id)completion;
-(void)deleteBroadcastListFromServer:(id)server completion:(id)completion;
-(void)syncPhoneNumbers:(id)numbers deletedJIDs:(id)jids mode:(unsigned)mode context:(unsigned)context timeout:(double)timeout completion:(id)completion;
-(void)requestSyncWithContext:(id)context;
-(void)stopLocationSharingForGroupWithJID:(id)jid;
-(void)requestLocationSharingForGroupWithJID:(id)jid reportParticipants:(BOOL)participants completion:(id)completion;
-(void)setLocationSharingEndTime:(id)time forGroupWithJID:(id)jid completion:(id)completion;
-(void)reportLocation:(id)location;
-(void)requestParticipatingGroupsWithCompletion:(id)completion;
-(void)deleteGroupWithJID:(id)jid completion:(id)completion;
-(void)leaveGroupWithJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)requestInfoForGroupWithJID:(id)jid completion:(id)completion;
-(void)demoteParticipants:(id)participants inGroupWithJID:(id)jid completion:(id)completion;
-(void)promoteParticipants:(id)participants inGroupWithJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)addParticipants:(id)participants toGroupWithJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)removeParticipants:(id)participants fromGroupWithJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)setSubject:(id)subject forGroupWithJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)createGroupWithSubject:(id)subject participantJIDs:(id)jids key:(id)key locked:(BOOL)locked webClientRequestID:(id)anId completion:(id)completion;
-(void)getProfilePictureForJID:(id)jid type:(unsigned)type identifier:(id)identifier completion:(id)completion;
-(void)setProfilePictureForJID:(id)jid pictureData:(id)data previewData:(id)data3 webClientRequestID:(id)anId completion:(id)completion;
-(void)getStatusForJIDs:(id)jids completion:(id)completion;
-(void)setStatus:(id)status fromWebClientRequestID:(id)webClientRequestID completion:(id)completion;
-(void)setPrivacySettings:(id)settings completion:(id)completion;
-(void)queryPrivacySettingsWithCompletion:(id)completion;
-(void)submitPaymentReceipt:(id)receipt completion:(id)completion;
-(void)changeNumberWithUsername:(id)username password:(id)password completion:(id)completion;
-(void)normalizePhoneNumber:(id)number countryCode:(id)code completion:(id)completion;
-(void)deleteAccountWithFeedback:(id)feedback completion:(id)completion;
-(void)reportSpamMessagesInChatSession:(id)chatSession;
-(void)sendBlockedContactsList:(id)list webClientRequestID:(id)anId completion:(id)completion;
-(void)getBlockedContactsListWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAMediaCollectionViewCell : UICollectionViewCell {
	UIImageView* _imageView;
	UIView* _checkmarkBackgroundView;
	UIImageView* _checkmarkImageView;
	UIView* _dimmingView;
	WAMediaPickerVideoAssetOverlayView* _durationOverlay;
	unsigned _cellState;
}
@property(assign, nonatomic) unsigned cellState;
@property(readonly, assign, nonatomic) UIImageView* imageView;
-(void).cxx_destruct;
-(id)accessibilityValue;
-(id)baseAccessibilityValue;
-(BOOL)isAccessibilityElement;
-(void)didMoveToWindow;
-(void)cancelThumbnailLoading;
-(void)prepareForReuse;
-(void)setMediaDuration:(int)duration mediaIconType:(unsigned)type;
-(BOOL)isParticipatingInInteractiveTransition;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface XMPPIQStanza : XMPPStanza {
}
@property(readonly, assign, nonatomic) NSData* password;
@property(readonly, assign, nonatomic) NSDate* lastActivity;
@property(retain, nonatomic) NSString* xmlns;
@property(assign, nonatomic) unsigned type;
+(unsigned)typeForString:(id)string;
+(id)stringForType:(unsigned)type;
+(id)stringsForTypes;
-(id)log;
-(BOOL)matchXMLNS:(id)xmlns;
-(BOOL)isLocation;
-(BOOL)hasPassword;
-(BOOL)hasPing;
-(id)initWithFromJID:(id)jid toJID:(id)jid2 type:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface WADebugMediaSettingsViewController : WAStaticTableViewController {
}
-(void)controlChanged:(id)changed;
-(void)setupTableView;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEvent : NSObject {
}
-(void)submit;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventAddressbookSync : WAFieldStatsEvent {
	double _addressbook_sync_is_reg;
	double _addressbook_sync_error_code;
	double _addressbook_sync_result_type;
	double _addressbook_sync_t;
}
@property(assign, nonatomic) double addressbook_sync_t;
@property(assign, nonatomic) double addressbook_sync_result_type;
@property(assign, nonatomic) double addressbook_sync_error_code;
@property(assign, nonatomic) double addressbook_sync_is_reg;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventAndroidPerfEvent : WAFieldStatsEvent {
	NSString* _android_perf_name;
	NSString* _android_perf_tag_item_type;
	double _android_perf_tag_first_init;
	double _android_perf_tag_from_saved_state;
	double _android_perf_tag_app_init_in_background;
	double _android_perf_tag_requires_inflate;
	double _android_perf_tag_position;
	double _android_perf_tag_count;
	double _android_perf_tag_count_2;
	double _android_perf_tag_count_3;
	double _android_perf_duration;
	double _android_perf_pre_create;
	double _android_perf_on_create;
	double _android_perf_on_start;
	double _android_perf_on_resume;
	double _android_perf_on_create_view;
	double _android_perf_on_activity_created;
	double _android_perf_on_layout;
	double _android_perf_inflate;
	double _android_perf_fill;
	double _android_perf_refresh;
	double _weight;
}
@property(assign, nonatomic) double weight;
@property(assign, nonatomic) double android_perf_refresh;
@property(assign, nonatomic) double android_perf_fill;
@property(assign, nonatomic) double android_perf_inflate;
@property(assign, nonatomic) double android_perf_on_layout;
@property(assign, nonatomic) double android_perf_on_activity_created;
@property(assign, nonatomic) double android_perf_on_create_view;
@property(assign, nonatomic) double android_perf_on_resume;
@property(assign, nonatomic) double android_perf_on_start;
@property(assign, nonatomic) double android_perf_on_create;
@property(assign, nonatomic) double android_perf_pre_create;
@property(assign, nonatomic) double android_perf_duration;
@property(assign, nonatomic) double android_perf_tag_count_3;
@property(assign, nonatomic) double android_perf_tag_count_2;
@property(assign, nonatomic) double android_perf_tag_count;
@property(assign, nonatomic) double android_perf_tag_position;
@property(retain, nonatomic) NSString* android_perf_tag_item_type;
@property(assign, nonatomic) double android_perf_tag_requires_inflate;
@property(assign, nonatomic) double android_perf_tag_app_init_in_background;
@property(assign, nonatomic) double android_perf_tag_from_saved_state;
@property(assign, nonatomic) double android_perf_tag_first_init;
@property(retain, nonatomic) NSString* android_perf_name;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventBackup : WAFieldStatsEvent {
	double _backup_restore_result;
	double _backup_restore_is_full;
	double _backup_restore_is_wifi;
	double _backup_restore_retry_count;
	double _backup_restore_include_videos;
	double _backup_restore_t;
	double _backup_restore_total_size;
	double _backup_restore_chatdb_size;
	double _backup_restore_media_size;
	double _backup_restore_transfer_size;
	double _backup_restore_transfer_failed_size;
	double _backup_restore_media_file_count;
	double _backup_restore_network_request_count;
}
@property(assign, nonatomic) double backup_restore_network_request_count;
@property(assign, nonatomic) double backup_restore_media_file_count;
@property(assign, nonatomic) double backup_restore_transfer_failed_size;
@property(assign, nonatomic) double backup_restore_transfer_size;
@property(assign, nonatomic) double backup_restore_media_size;
@property(assign, nonatomic) double backup_restore_chatdb_size;
@property(assign, nonatomic) double backup_restore_total_size;
@property(assign, nonatomic) double backup_restore_t;
@property(assign, nonatomic) double backup_restore_include_videos;
@property(assign, nonatomic) double backup_restore_retry_count;
@property(assign, nonatomic) double backup_restore_is_wifi;
@property(assign, nonatomic) double backup_restore_is_full;
@property(assign, nonatomic) double backup_restore_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventBan : WAFieldStatsEvent {
	NSString* _app_version;
	NSString* _ban_origin;
	NSString* _ban_reason;
	NSString* _watch_reason;
	NSString* _ip;
	double _platform;
	double _bounce_count;
	double _groups_created;
	double _groups_participating;
	double _ban_flag_fake_s40;
	double _ban_flag_pinger;
	double _ban_flag_modded;
	double _ban_flag_was_modded;
	double _ban_flag_needs_legit;
	double _asn;
	double _account_create_ts;
	double _ban_is_compliant;
	double _ban_gen;
	double _temp_ban_gen;
}
@property(assign, nonatomic) double temp_ban_gen;
@property(assign, nonatomic) double ban_gen;
@property(assign, nonatomic) double ban_is_compliant;
@property(assign, nonatomic) double account_create_ts;
@property(retain, nonatomic) NSString* ip;
@property(assign, nonatomic) double asn;
@property(assign, nonatomic) double ban_flag_needs_legit;
@property(assign, nonatomic) double ban_flag_was_modded;
@property(assign, nonatomic) double ban_flag_modded;
@property(assign, nonatomic) double ban_flag_pinger;
@property(assign, nonatomic) double ban_flag_fake_s40;
@property(retain, nonatomic) NSString* watch_reason;
@property(retain, nonatomic) NSString* ban_reason;
@property(retain, nonatomic) NSString* ban_origin;
@property(assign, nonatomic) double groups_participating;
@property(assign, nonatomic) double groups_created;
@property(assign, nonatomic) double bounce_count;
@property(retain, nonatomic) NSString* app_version;
@property(assign, nonatomic) double platform;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventBbOpusDecode : WAFieldStatsEvent {
	double _bb_opus_decode_reason;
	double _bb_opus_decode_successful;
	double _bb_opus_decode_rate;
	double _bb_opus_decode_rate_too_slow;
}
@property(assign, nonatomic) double bb_opus_decode_rate_too_slow;
@property(assign, nonatomic) double bb_opus_decode_rate;
@property(assign, nonatomic) double bb_opus_decode_successful;
@property(assign, nonatomic) double bb_opus_decode_reason;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventBbxBbidCall : WAFieldStatsEvent {
	double _bbx_bbid_request;
	double _bbx_bbid_result;
	double _bbx_bbid_failure_reason;
}
@property(assign, nonatomic) double bbx_bbid_failure_reason;
@property(assign, nonatomic) double bbx_bbid_result;
@property(assign, nonatomic) double bbx_bbid_request;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventBbxHubUpdateInbox : WAFieldStatsEvent {
	double _bbx_hub_result;
	double _bbx_hub_update_inbox_attempts;
}
@property(assign, nonatomic) double bbx_hub_update_inbox_attempts;
@property(assign, nonatomic) double bbx_hub_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventBroadcastFanout : WAFieldStatsEvent {
	double _broadcast_sent_recipient_count;
	double _broadcast_fanout_t;
}
@property(assign, nonatomic) double broadcast_fanout_t;
@property(assign, nonatomic) double broadcast_sent_recipient_count;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventCall : WAFieldStatsEvent {
	NSString* _call_peer_platform;
	NSString* _call_peer_app_version;
	NSString* _call_relay_server;
	NSString* _call_test_bucket;
	NSString* _native_sampling_rate;
	NSString* _native_samples_per_frame;
	NSString* _builtin_aec_implementor;
	NSString* _builtin_aec_uuid;
	NSString* _user_description;
	double _call_side;
	double _call_from_ui;
	double _xmpp_status;
	double _peer_xmpp_status;
	double _small_call_button;
	double _call_self_ipv4;
	double _call_peer_ipv4;
	double _call_self_asn;
	double _call_peer_asn;
	double _call_relay_bind_status;
	double _call_p2p_disabled;
	double _call_user_rate;
	double _long_connect;
	double _call_interrupted;
	double _call_record_callback_stopped;
	double _call_playback_callback_stopped;
	double _call_record_silence_ratio;
	double _number_of_processors;
	double _call_record_frames_ps;
	double _call_sampling_rate;
	double _builtin_aec_available;
	double _builtin_agc_available;
	double _builtin_ns_available;
	double _builtin_aec_enabled;
	double _call_aec_mode;
	double _call_sw_aec_type;
	double _call_sw_aec_mode;
	double _call_aec_offset;
	double _call_aec_tail_length;
	double _call_echo_likelihood;
	double _call_tones_detected_in_ringback;
	double _call_tones_detected_in_record;
	double _call_calculated_ec_offset;
	double _call_calculated_ec_offset_stddev;
	double _call_agc_mode;
	double _call_ns_mode;
	double _call_audio_engine_type;
	double _call_android_audio_mode;
	double _call_android_record_audio_source;
	double _call_android_record_audio_preset;
	double _call_record_buffer_size;
	double _call_playback_buffer_size;
	double _peer_user_id;
	double _peer_loc;
	double _call_result;
	double _wp_notify_call_failed;
	double _wp_software_ec_matches;
	double _peer_call_result;
	double _caller_hungup_before_connected;
	double _call_server_nack_error_code;
	double _call_term_reason;
	double _call_end_reconnecting;
	double _call_setup_error_type;
	double _call_transport;
	double _call_network;
	double _call_network_subtype;
	double _call_transition_count;
	double _call_transport_relay_to_relay_fallback_count;
	double _call_transport_p2p_to_relay_fallback_count;
	double _encoder_comp_stepdowns;
	double _audio_put_frame_overflow_ps;
	double _audio_get_frame_underflow_ps;
	double _record_circular_buffer_frame_count;
	double _user_rating;
	double _present_end_call_confirmation;
	double _end_call_after_confirmation;
	double _is_ipv6_capable;
	double _call_wakeup_source;
	double _call_recent_record_frames_ps;
	double _call_hist_echo_likelihood;
	double _call_echo_likelihood_before_ec;
	double _call_t;
	double _call_playback_frames_ps;
	double _call_recent_playback_frames_ps;
	double _call_playback_silence_ratio;
	double _call_audio_restart_count;
	double _call_audio_restart_reason;
	double _call_record_max_energy_ratio;
	double _call_ec_restart_count;
	double _call_rx_stopped_t;
	double _call_setup_t;
	double _call_offer_elapsed_t;
	double _call_ringing_t;
	double _call_relay_create_t;
	double _call_min_rtt;
	double _call_max_rtt;
	double _call_avg_rtt;
	double _call_last_rtt;
	double _call_initial_rtt;
	double _call_tx_pkt_loss_pct;
	double _call_tx_avg_bitrate;
	double _call_tx_avg_bwe;
	double _call_tx_min_jitter;
	double _call_tx_max_jitter;
	double _call_tx_avg_jitter;
	double _call_tx_min_loss_period;
	double _call_tx_max_loss_period;
	double _call_tx_avg_loss_period;
	double _call_rx_pkt_loss_pct;
	double _call_rx_avg_bitrate;
	double _call_rx_avg_bwe;
	double _call_rx_min_jitter;
	double _call_rx_max_jitter;
	double _call_rx_avg_jitter;
	double _call_rx_min_loss_period;
	double _call_rx_max_loss_period;
	double _call_rx_avg_loss_period;
	double _call_start_func_t;
	double _call_end_func_t;
	double _call_reject_func_t;
	double _call_accept_func_t;
	double _call_sound_port_func_t;
	double _call_offer_receipt_delay;
	double _avg_encode_t;
	double _avg_decode_t;
	double _avg_play_cb_t;
	double _avg_record_cb_t;
	double _avg_clock_cb_t;
	double _avg_record_get_frame_t;
	double _avg_target_bitrate;
	double _tx_total_bytes;
	double _rx_total_bytes;
	double _tx_total_bitrate;
	double _rx_total_bitrate;
	double _jb_avg_delay;
	double _jb_min_delay;
	double _jb_max_delay;
	double _jb_last_delay;
	double _jb_discards;
	double _jb_empties;
	double _jb_gets;
	double _jb_puts;
	double _rc_minrtt;
	double _rc_maxrtt;
	double _low_data_usage_bitrate;
	double _push_to_call_offer_delay;
	double _call_offer_ack_timout;
	double _pings_sent;
	double _pongs_received;
	double _reflective_ports_diff;
}
@property(assign, nonatomic) double reflective_ports_diff;
@property(assign, nonatomic) double pongs_received;
@property(assign, nonatomic) double pings_sent;
@property(assign, nonatomic) double call_offer_ack_timout;
@property(assign, nonatomic) double push_to_call_offer_delay;
@property(assign, nonatomic) double low_data_usage_bitrate;
@property(assign, nonatomic) double rc_maxrtt;
@property(assign, nonatomic) double rc_minrtt;
@property(assign, nonatomic) double jb_puts;
@property(assign, nonatomic) double jb_gets;
@property(assign, nonatomic) double jb_empties;
@property(assign, nonatomic) double jb_discards;
@property(assign, nonatomic) double jb_last_delay;
@property(assign, nonatomic) double jb_max_delay;
@property(assign, nonatomic) double jb_min_delay;
@property(assign, nonatomic) double jb_avg_delay;
@property(assign, nonatomic) double rx_total_bitrate;
@property(assign, nonatomic) double tx_total_bitrate;
@property(assign, nonatomic) double rx_total_bytes;
@property(assign, nonatomic) double tx_total_bytes;
@property(assign, nonatomic) double avg_target_bitrate;
@property(assign, nonatomic) double avg_record_get_frame_t;
@property(assign, nonatomic) double avg_clock_cb_t;
@property(assign, nonatomic) double avg_record_cb_t;
@property(assign, nonatomic) double avg_play_cb_t;
@property(assign, nonatomic) double avg_decode_t;
@property(assign, nonatomic) double avg_encode_t;
@property(assign, nonatomic) double call_offer_receipt_delay;
@property(assign, nonatomic) double call_sound_port_func_t;
@property(assign, nonatomic) double call_accept_func_t;
@property(assign, nonatomic) double call_reject_func_t;
@property(assign, nonatomic) double call_end_func_t;
@property(assign, nonatomic) double call_start_func_t;
@property(assign, nonatomic) double call_rx_avg_loss_period;
@property(assign, nonatomic) double call_rx_max_loss_period;
@property(assign, nonatomic) double call_rx_min_loss_period;
@property(assign, nonatomic) double call_rx_avg_jitter;
@property(assign, nonatomic) double call_rx_max_jitter;
@property(assign, nonatomic) double call_rx_min_jitter;
@property(assign, nonatomic) double call_rx_avg_bwe;
@property(assign, nonatomic) double call_rx_avg_bitrate;
@property(assign, nonatomic) double call_rx_pkt_loss_pct;
@property(assign, nonatomic) double call_tx_avg_loss_period;
@property(assign, nonatomic) double call_tx_max_loss_period;
@property(assign, nonatomic) double call_tx_min_loss_period;
@property(assign, nonatomic) double call_tx_avg_jitter;
@property(assign, nonatomic) double call_tx_max_jitter;
@property(assign, nonatomic) double call_tx_min_jitter;
@property(assign, nonatomic) double call_tx_avg_bwe;
@property(assign, nonatomic) double call_tx_avg_bitrate;
@property(assign, nonatomic) double call_tx_pkt_loss_pct;
@property(assign, nonatomic) double call_initial_rtt;
@property(assign, nonatomic) double call_last_rtt;
@property(assign, nonatomic) double call_avg_rtt;
@property(assign, nonatomic) double call_max_rtt;
@property(assign, nonatomic) double call_min_rtt;
@property(assign, nonatomic) double call_relay_create_t;
@property(assign, nonatomic) double call_ringing_t;
@property(assign, nonatomic) double call_offer_elapsed_t;
@property(assign, nonatomic) double call_setup_t;
@property(assign, nonatomic) double call_rx_stopped_t;
@property(assign, nonatomic) double call_ec_restart_count;
@property(assign, nonatomic) double call_record_max_energy_ratio;
@property(assign, nonatomic) double call_audio_restart_reason;
@property(assign, nonatomic) double call_audio_restart_count;
@property(assign, nonatomic) double call_playback_silence_ratio;
@property(assign, nonatomic) double call_recent_playback_frames_ps;
@property(assign, nonatomic) double call_playback_frames_ps;
@property(assign, nonatomic) double call_t;
@property(assign, nonatomic) double call_echo_likelihood_before_ec;
@property(assign, nonatomic) double call_hist_echo_likelihood;
@property(assign, nonatomic) double call_recent_record_frames_ps;
@property(assign, nonatomic) double call_wakeup_source;
@property(assign, nonatomic) double is_ipv6_capable;
@property(assign, nonatomic) double end_call_after_confirmation;
@property(assign, nonatomic) double present_end_call_confirmation;
@property(retain, nonatomic) NSString* user_description;
@property(assign, nonatomic) double user_rating;
@property(assign, nonatomic) double record_circular_buffer_frame_count;
@property(assign, nonatomic) double audio_get_frame_underflow_ps;
@property(assign, nonatomic) double audio_put_frame_overflow_ps;
@property(assign, nonatomic) double encoder_comp_stepdowns;
@property(assign, nonatomic) double call_transport_p2p_to_relay_fallback_count;
@property(assign, nonatomic) double call_transport_relay_to_relay_fallback_count;
@property(assign, nonatomic) double call_transition_count;
@property(assign, nonatomic) double call_network_subtype;
@property(assign, nonatomic) double call_network;
@property(assign, nonatomic) double call_transport;
@property(assign, nonatomic) double call_setup_error_type;
@property(assign, nonatomic) double call_end_reconnecting;
@property(assign, nonatomic) double call_term_reason;
@property(assign, nonatomic) double call_server_nack_error_code;
@property(assign, nonatomic) double caller_hungup_before_connected;
@property(assign, nonatomic) double peer_call_result;
@property(assign, nonatomic) double wp_software_ec_matches;
@property(assign, nonatomic) double wp_notify_call_failed;
@property(assign, nonatomic) double call_result;
@property(assign, nonatomic) double peer_loc;
@property(assign, nonatomic) double peer_user_id;
@property(assign, nonatomic) double call_playback_buffer_size;
@property(assign, nonatomic) double call_record_buffer_size;
@property(assign, nonatomic) double call_android_record_audio_preset;
@property(assign, nonatomic) double call_android_record_audio_source;
@property(assign, nonatomic) double call_android_audio_mode;
@property(assign, nonatomic) double call_audio_engine_type;
@property(assign, nonatomic) double call_ns_mode;
@property(assign, nonatomic) double call_agc_mode;
@property(assign, nonatomic) double call_calculated_ec_offset_stddev;
@property(assign, nonatomic) double call_calculated_ec_offset;
@property(assign, nonatomic) double call_tones_detected_in_record;
@property(assign, nonatomic) double call_tones_detected_in_ringback;
@property(assign, nonatomic) double call_echo_likelihood;
@property(assign, nonatomic) double call_aec_tail_length;
@property(assign, nonatomic) double call_aec_offset;
@property(assign, nonatomic) double call_sw_aec_mode;
@property(assign, nonatomic) double call_sw_aec_type;
@property(assign, nonatomic) double call_aec_mode;
@property(assign, nonatomic) double builtin_aec_enabled;
@property(retain, nonatomic) NSString* builtin_aec_uuid;
@property(retain, nonatomic) NSString* builtin_aec_implementor;
@property(assign, nonatomic) double builtin_ns_available;
@property(assign, nonatomic) double builtin_agc_available;
@property(assign, nonatomic) double builtin_aec_available;
@property(retain, nonatomic) NSString* native_samples_per_frame;
@property(retain, nonatomic) NSString* native_sampling_rate;
@property(assign, nonatomic) double call_sampling_rate;
@property(assign, nonatomic) double call_record_frames_ps;
@property(assign, nonatomic) double number_of_processors;
@property(assign, nonatomic) double call_record_silence_ratio;
@property(assign, nonatomic) double call_playback_callback_stopped;
@property(assign, nonatomic) double call_record_callback_stopped;
@property(assign, nonatomic) double call_interrupted;
@property(assign, nonatomic) double long_connect;
@property(assign, nonatomic) double call_user_rate;
@property(retain, nonatomic) NSString* call_test_bucket;
@property(assign, nonatomic) double call_p2p_disabled;
@property(retain, nonatomic) NSString* call_relay_server;
@property(assign, nonatomic) double call_relay_bind_status;
@property(retain, nonatomic) NSString* call_peer_app_version;
@property(assign, nonatomic) double call_peer_asn;
@property(assign, nonatomic) double call_self_asn;
@property(assign, nonatomic) double call_peer_ipv4;
@property(assign, nonatomic) double call_self_ipv4;
@property(assign, nonatomic) double small_call_button;
@property(retain, nonatomic) NSString* call_peer_platform;
@property(assign, nonatomic) double peer_xmpp_status;
@property(assign, nonatomic) double xmpp_status;
@property(assign, nonatomic) double call_from_ui;
@property(assign, nonatomic) double call_side;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventCdbGet : WAFieldStatsEvent {
	NSString* _s40_cdb_name;
	double _s40_cdb_journal_get_t;
	double _s40_cdb_get_t;
	double _s40_cdb_index_get_t;
	double _s40_cdb_index_hit;
	double _s40_cdb_index_miss;
}
@property(assign, nonatomic) double s40_cdb_index_miss;
@property(assign, nonatomic) double s40_cdb_index_hit;
@property(assign, nonatomic) double s40_cdb_index_get_t;
@property(assign, nonatomic) double s40_cdb_get_t;
@property(assign, nonatomic) double s40_cdb_journal_get_t;
@property(retain, nonatomic) NSString* s40_cdb_name;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventCdbRegeneration : WAFieldStatsEvent {
	NSString* _s40_cdb_name;
	double _s40_cdb_file_size;
	double _s40_cdb_journal_file_size;
	double _s40_cdb_regenerate_t;
}
@property(assign, nonatomic) double s40_cdb_regenerate_t;
@property(assign, nonatomic) double s40_cdb_journal_file_size;
@property(assign, nonatomic) double s40_cdb_file_size;
@property(retain, nonatomic) NSString* s40_cdb_name;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventChatConnection : WAFieldStatsEvent {
	double _chat_port;
	double _chat_state;
	double _chat_socket_connect_t;
	double _chat_login_t;
	double _chat_post_login_t;
	double _chat_connected_t;
}
@property(assign, nonatomic) double chat_connected_t;
@property(assign, nonatomic) double chat_post_login_t;
@property(assign, nonatomic) double chat_login_t;
@property(assign, nonatomic) double chat_socket_connect_t;
@property(assign, nonatomic) double chat_state;
@property(assign, nonatomic) double chat_port;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventChatdAckedRetries : WAFieldStatsEvent {
	double _test_bucket;
	double _chatd_acked_retry_count;
	double _chatd_acked_time;
}
@property(assign, nonatomic) double chatd_acked_time;
@property(assign, nonatomic) double chatd_acked_retry_count;
@property(assign, nonatomic) double test_bucket;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventChatdDroppedRetries : WAFieldStatsEvent {
	double _test_bucket;
	double _chatd_dropped_retry_count;
	double _chatd_dropped_time;
}
@property(assign, nonatomic) double chatd_dropped_time;
@property(assign, nonatomic) double chatd_dropped_retry_count;
@property(assign, nonatomic) double test_bucket;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventChatdLastSeen : WAFieldStatsEvent {
	NSString* _device_manufacturer;
	NSString* _device_model;
	NSString* _os_version;
	NSString* _os_build_number;
	double _mcc;
	double _mnc;
}
@property(retain, nonatomic) NSString* os_build_number;
@property(retain, nonatomic) NSString* os_version;
@property(retain, nonatomic) NSString* device_model;
@property(retain, nonatomic) NSString* device_manufacturer;
@property(assign, nonatomic) double mnc;
@property(assign, nonatomic) double mcc;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventChatdOfflineFetch : WAFieldStatsEvent {
	double _chatd_offline_count;
	double _chatd_offline_decode_t;
}
@property(assign, nonatomic) double chatd_offline_decode_t;
@property(assign, nonatomic) double chatd_offline_count;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventContactUsSession : WAFieldStatsEvent {
	NSString* _contact_us_problem_description;
	double _contact_us_exit_state;
	double _contact_us_faq;
	double _contact_us_automatic_email;
	double _contact_us_logs;
	double _contact_us_outage;
	double _contact_us_outage_email;
	double _search_faq_results_best_id;
	double _contact_us_t;
	double _contact_us_menu_faq_t;
	double _search_faq_results_generated_c;
	double _search_faq_results_read_c;
	double _search_faq_results_best_read_t;
	double _search_faq_results_read_t;
	double _contact_us_screenshot_c;
}
@property(assign, nonatomic) double contact_us_screenshot_c;
@property(assign, nonatomic) double search_faq_results_read_t;
@property(assign, nonatomic) double search_faq_results_best_read_t;
@property(assign, nonatomic) double search_faq_results_read_c;
@property(assign, nonatomic) double search_faq_results_generated_c;
@property(assign, nonatomic) double contact_us_menu_faq_t;
@property(assign, nonatomic) double contact_us_t;
@property(assign, nonatomic) double search_faq_results_best_id;
@property(retain, nonatomic) NSString* contact_us_problem_description;
@property(assign, nonatomic) double contact_us_outage_email;
@property(assign, nonatomic) double contact_us_outage;
@property(assign, nonatomic) double contact_us_logs;
@property(assign, nonatomic) double contact_us_automatic_email;
@property(assign, nonatomic) double contact_us_faq;
@property(assign, nonatomic) double contact_us_exit_state;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventCrashLog : WAFieldStatsEvent {
	NSString* _crash_exception;
	NSString* _crash_reason;
}
@property(retain, nonatomic) NSString* crash_reason;
@property(retain, nonatomic) NSString* crash_exception;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventDatabaseError : WAFieldStatsEvent {
	NSString* _database_method;
	double _database_type;
	double _database_error_code;
}
@property(assign, nonatomic) double database_error_code;
@property(retain, nonatomic) NSString* database_method;
@property(assign, nonatomic) double database_type;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventE2eMessageRecv : WAFieldStatsEvent {
	double _e2e_successful;
	double _e2e_failure_reason;
	double _retry_count;
	double _e2e_destination;
	double _e2e_ciphertext_type;
	double _e2e_ciphertext_version;
	double _message_media_type;
}
@property(assign, nonatomic) double message_media_type;
@property(assign, nonatomic) double e2e_ciphertext_version;
@property(assign, nonatomic) double e2e_ciphertext_type;
@property(assign, nonatomic) double e2e_destination;
@property(assign, nonatomic) double retry_count;
@property(assign, nonatomic) double e2e_failure_reason;
@property(assign, nonatomic) double e2e_successful;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventE2eMessageSend : WAFieldStatsEvent {
	double _e2e_successful;
	double _e2e_failure_reason;
	double _retry_count;
	double _e2e_destination;
	double _e2e_ciphertext_type;
	double _e2e_ciphertext_version;
	double _message_media_type;
}
@property(assign, nonatomic) double message_media_type;
@property(assign, nonatomic) double e2e_ciphertext_version;
@property(assign, nonatomic) double e2e_ciphertext_type;
@property(assign, nonatomic) double e2e_destination;
@property(assign, nonatomic) double retry_count;
@property(assign, nonatomic) double e2e_failure_reason;
@property(assign, nonatomic) double e2e_successful;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventFsBuffer : WAFieldStatsEvent {
	double _fs_buffer_error;
	double _client_ts;
	double _fs_buffer_size;
	double _fs_num_metrics;
	double _fs_num_dimensions;
	double _fs_buffer_age;
	double _fs_client_time_skew;
	double _fs_time_shift;
}
@property(assign, nonatomic) double fs_time_shift;
@property(assign, nonatomic) double fs_client_time_skew;
@property(assign, nonatomic) double fs_buffer_age;
@property(assign, nonatomic) double fs_num_dimensions;
@property(assign, nonatomic) double fs_num_metrics;
@property(assign, nonatomic) double fs_buffer_size;
@property(assign, nonatomic) double client_ts;
@property(assign, nonatomic) double fs_buffer_error;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventGroupCreate : WAFieldStatsEvent {
	double _group_create_entry_point;
}
@property(assign, nonatomic) double group_create_entry_point;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventGroupMute : WAFieldStatsEvent {
	double _group_size;
	double _group_mute_t;
}
@property(assign, nonatomic) double group_mute_t;
@property(assign, nonatomic) double group_size;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventICloudAutoBackupError : WAFieldStatsEvent {
	double _icloud_backup_error;
	double _icloud_backup_interval;
}
@property(assign, nonatomic) double icloud_backup_interval;
@property(assign, nonatomic) double icloud_backup_error;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventICloudBackup : WAFieldStatsEvent {
	double _icloud_backup_result;
	double _icloud_backup_age;
	double _icloud_backup_include_videos;
	double _icloud_t;
	double _icloud_chatdb_size;
	double _icloud_searchdb_size;
	double _icloud_calllog_size;
	double _icloud_media_tar_size;
	double _icloud_media_tar_t;
	double _icloud_thumb_tar_size;
	double _icloud_thumb_tar_t;
	double _icloud_media_tar_estimate;
	double _icloud_thumb_tar_estimate;
	double _icloud_video_tar_size;
	double _icloud_video_tar_estimate;
	double _icloud_video_tar_t;
}
@property(assign, nonatomic) double icloud_video_tar_t;
@property(assign, nonatomic) double icloud_video_tar_estimate;
@property(assign, nonatomic) double icloud_video_tar_size;
@property(assign, nonatomic) double icloud_thumb_tar_estimate;
@property(assign, nonatomic) double icloud_media_tar_estimate;
@property(assign, nonatomic) double icloud_thumb_tar_t;
@property(assign, nonatomic) double icloud_thumb_tar_size;
@property(assign, nonatomic) double icloud_media_tar_t;
@property(assign, nonatomic) double icloud_media_tar_size;
@property(assign, nonatomic) double icloud_calllog_size;
@property(assign, nonatomic) double icloud_searchdb_size;
@property(assign, nonatomic) double icloud_chatdb_size;
@property(assign, nonatomic) double icloud_t;
@property(assign, nonatomic) double icloud_backup_include_videos;
@property(assign, nonatomic) double icloud_backup_age;
@property(assign, nonatomic) double icloud_backup_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventICloudRestore : WAFieldStatsEvent {
	double _icloud_restore_result;
	double _icloud_restore_start_reason;
	double _icloud_restore_integrity_check_result;
	double _icloud_download_t;
	double _icloud_extract_t;
	double _icloud_size;
}
@property(assign, nonatomic) double icloud_size;
@property(assign, nonatomic) double icloud_extract_t;
@property(assign, nonatomic) double icloud_download_t;
@property(assign, nonatomic) double icloud_restore_integrity_check_result;
@property(assign, nonatomic) double icloud_restore_start_reason;
@property(assign, nonatomic) double icloud_restore_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventIphoneBackgroundFetch : WAFieldStatsEvent {
	double _iphone_background_fetch_result;
}
@property(assign, nonatomic) double iphone_background_fetch_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventIphoneFailedToLaunch : WAFieldStatsEvent {
	double _iphone_launch;
}
@property(assign, nonatomic) double iphone_launch;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventLocationPicker : WAFieldStatsEvent {
	NSString* _location_picker_failure_description;
	NSString* _location_picker_query_string;
	double _location_picker_places_source;
	double _location_picker_places_source_default;
	double _location_picker_result_type;
	double _location_picker_places_response;
	double _location_picker_full_screen;
	double _location_picker_requests_count;
	double _location_picker_places_count;
	double _location_picker_selected_place_index;
	double _location_picker_spend_t;
}
@property(assign, nonatomic) double location_picker_spend_t;
@property(assign, nonatomic) double location_picker_selected_place_index;
@property(assign, nonatomic) double location_picker_places_count;
@property(assign, nonatomic) double location_picker_requests_count;
@property(retain, nonatomic) NSString* location_picker_query_string;
@property(assign, nonatomic) double location_picker_full_screen;
@property(retain, nonatomic) NSString* location_picker_failure_description;
@property(assign, nonatomic) double location_picker_places_response;
@property(assign, nonatomic) double location_picker_result_type;
@property(assign, nonatomic) double location_picker_places_source_default;
@property(assign, nonatomic) double location_picker_places_source;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventLogin : WAFieldStatsEvent {
	double _login_result;
	double _retry_count;
	double _login_t;
}
@property(assign, nonatomic) double login_t;
@property(assign, nonatomic) double retry_count;
@property(assign, nonatomic) double login_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventMediaDownload : WAFieldStatsEvent {
	double _media_type;
	double _media_download_result;
	double _retry_count;
	double _media_used_cdn;
	double _e2e_media_encryption;
	double _media_download_t;
	double _media_size;
}
@property(assign, nonatomic) double media_size;
@property(assign, nonatomic) double media_download_t;
@property(assign, nonatomic) double e2e_media_encryption;
@property(assign, nonatomic) double media_used_cdn;
@property(assign, nonatomic) double retry_count;
@property(assign, nonatomic) double media_download_result;
@property(assign, nonatomic) double media_type;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventMediaUpload : WAFieldStatsEvent {
	double _media_type;
	double _media_upload_result;
	double _message_is_forward;
	double _retry_count;
	double _e2e_media_encryption;
	double _media_upload_t;
	double _media_size;
}
@property(assign, nonatomic) double media_size;
@property(assign, nonatomic) double media_upload_t;
@property(assign, nonatomic) double e2e_media_encryption;
@property(assign, nonatomic) double retry_count;
@property(assign, nonatomic) double message_is_forward;
@property(assign, nonatomic) double media_upload_result;
@property(assign, nonatomic) double media_type;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventMessageReceive : WAFieldStatsEvent {
	double _message_type;
	double _message_media_type;
	double _num_of_web_urls_in_text_message;
	double _message_is_international;
	double _message_is_offline;
	double _message_receive_t0;
	double _message_receive_t1;
}
@property(assign, nonatomic) double message_receive_t1;
@property(assign, nonatomic) double message_receive_t0;
@property(assign, nonatomic) double message_is_offline;
@property(assign, nonatomic) double message_is_international;
@property(assign, nonatomic) double num_of_web_urls_in_text_message;
@property(assign, nonatomic) double message_media_type;
@property(assign, nonatomic) double message_type;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventMessageSend : WAFieldStatsEvent {
	double _message_send_result;
	double _message_type;
	double _message_media_type;
	double _message_is_forward;
	double _message_is_fanout;
	double _retry_count;
	double _message_is_international;
	double _media_caption_present;
	double _e2e_ciphertext_version;
	double _e2e_ciphertext_type;
	double _message_send_t;
}
@property(assign, nonatomic) double message_send_t;
@property(assign, nonatomic) double e2e_ciphertext_type;
@property(assign, nonatomic) double e2e_ciphertext_version;
@property(assign, nonatomic) double media_caption_present;
@property(assign, nonatomic) double message_is_international;
@property(assign, nonatomic) double retry_count;
@property(assign, nonatomic) double message_is_fanout;
@property(assign, nonatomic) double message_is_forward;
@property(assign, nonatomic) double message_media_type;
@property(assign, nonatomic) double message_type;
@property(assign, nonatomic) double message_send_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventMmdEverstoreApiCall : WAFieldStatsEvent {
	NSString* _mmd_everstore_operation;
	NSString* _mmd_everstore_handle;
	NSString* _server_name;
	NSString* _server_location;
	NSString* _mmd_everstore_origin_host;
	NSString* _mmd_everstore_origin_hit;
	NSString* _mmd_everstore_edge_host;
	NSString* _mmd_everstore_edge_hit;
	NSString* _mmd_everstore_fb_debug;
	double _mmd_everstore_operation_is_successful;
	double _retry_count;
	double _mmd_everstore_curl_exit_code;
	double _http_status_code;
	double _mmd_everstore_api_call_t;
	double _mmd_everstore_object_size;
}
@property(assign, nonatomic) double mmd_everstore_object_size;
@property(assign, nonatomic) double mmd_everstore_api_call_t;
@property(retain, nonatomic) NSString* mmd_everstore_fb_debug;
@property(retain, nonatomic) NSString* mmd_everstore_edge_hit;
@property(retain, nonatomic) NSString* mmd_everstore_edge_host;
@property(retain, nonatomic) NSString* mmd_everstore_origin_hit;
@property(retain, nonatomic) NSString* mmd_everstore_origin_host;
@property(retain, nonatomic) NSString* server_location;
@property(retain, nonatomic) NSString* server_name;
@property(assign, nonatomic) double http_status_code;
@property(assign, nonatomic) double mmd_everstore_curl_exit_code;
@property(retain, nonatomic) NSString* mmd_everstore_handle;
@property(assign, nonatomic) double retry_count;
@property(assign, nonatomic) double mmd_everstore_operation_is_successful;
@property(retain, nonatomic) NSString* mmd_everstore_operation;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventMmdEverstoreEdgePath : WAFieldStatsEvent {
	NSString* _server_name;
	NSString* _server_location;
	NSString* _target_host_name;
	NSString* _target_host_ip;
	NSString* _edge_path_failure_reason;
	double _rtt;
}
@property(assign, nonatomic) double rtt;
@property(retain, nonatomic) NSString* edge_path_failure_reason;
@property(retain, nonatomic) NSString* target_host_ip;
@property(retain, nonatomic) NSString* target_host_name;
@property(retain, nonatomic) NSString* server_location;
@property(retain, nonatomic) NSString* server_name;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventNetworkChange : WAFieldStatsEvent {
	double _network_radio_type;
	double _network_is_wifi;
	double _network_is_roaming;
}
@property(assign, nonatomic) double network_is_roaming;
@property(assign, nonatomic) double network_is_wifi;
@property(assign, nonatomic) double network_radio_type;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventOfflineMessages : WAFieldStatsEvent {
	double _offline_message_c;
	double _offline_notification_c;
	double _offline_messages_receive_t;
	double _offline_messages_oldest_msg_login_delta_t;
}
@property(assign, nonatomic) double offline_messages_oldest_msg_login_delta_t;
@property(assign, nonatomic) double offline_messages_receive_t;
@property(assign, nonatomic) double offline_notification_c;
@property(assign, nonatomic) double offline_message_c;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventOomMemoryHeapUpload : WAFieldStatsEvent {
	double _memory_heap_upload_result;
}
@property(assign, nonatomic) double memory_heap_upload_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventPayChurn : WAFieldStatsEvent {
	double _pay_exp_ts;
	double _pay_exp_delta_days;
	double _pay_autoext_threshold;
}
@property(assign, nonatomic) double pay_autoext_threshold;
@property(assign, nonatomic) double pay_exp_delta_days;
@property(assign, nonatomic) double pay_exp_ts;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventPayFreeExtension : WAFieldStatsEvent {
	double _pay_exp_ts;
	double _pay_exp_delta_days;
	double _pay_ext_days;
	double _pay_is_autoext;
	double _pay_autoext_threshold;
}
@property(assign, nonatomic) double pay_autoext_threshold;
@property(assign, nonatomic) double pay_is_autoext;
@property(assign, nonatomic) double pay_ext_days;
@property(assign, nonatomic) double pay_exp_delta_days;
@property(assign, nonatomic) double pay_exp_ts;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventPayPayment : WAFieldStatsEvent {
	double _pay_exp_ts;
	double _pay_exp_delta_days;
	double _pay_ext_days;
	double _pay_autoext_threshold;
	double _pay_amount;
}
@property(assign, nonatomic) double pay_amount;
@property(assign, nonatomic) double pay_autoext_threshold;
@property(assign, nonatomic) double pay_ext_days;
@property(assign, nonatomic) double pay_exp_delta_days;
@property(assign, nonatomic) double pay_exp_ts;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventPlacesApiQuery : WAFieldStatsEvent {
	NSString* _places_api_failure_description;
	NSString* _places_api_query_string;
	double _places_api_source;
	double _places_api_source_default;
	double _places_api_response;
	double _places_api_request_index;
	double _places_api_cached;
	double _places_api_places_count;
	double _places_api_response_t;
}
@property(assign, nonatomic) double places_api_response_t;
@property(assign, nonatomic) double places_api_places_count;
@property(retain, nonatomic) NSString* places_api_query_string;
@property(assign, nonatomic) double places_api_cached;
@property(assign, nonatomic) double places_api_request_index;
@property(retain, nonatomic) NSString* places_api_failure_description;
@property(assign, nonatomic) double places_api_response;
@property(assign, nonatomic) double places_api_source_default;
@property(assign, nonatomic) double places_api_source;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventProfilePicDownload : WAFieldStatsEvent {
	double _profile_pic_download_result;
	double _profile_pic_type;
	double _profile_pic_download_t;
	double _profile_pic_download_size;
}
@property(assign, nonatomic) double profile_pic_download_size;
@property(assign, nonatomic) double profile_pic_download_t;
@property(assign, nonatomic) double profile_pic_type;
@property(assign, nonatomic) double profile_pic_download_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventProfilePicUpload : WAFieldStatsEvent {
	double _profile_pic_upload_result;
	double _retry_count;
	double _profile_pic_upload_t;
	double _profile_pic_size;
}
@property(assign, nonatomic) double profile_pic_size;
@property(assign, nonatomic) double profile_pic_upload_t;
@property(assign, nonatomic) double retry_count;
@property(assign, nonatomic) double profile_pic_upload_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventPseudoHttpSession : WAFieldStatsEvent {
	double _pseudo_http_total_bytes_sent;
	double _pseudo_http_total_bytes_received;
	double _pseudo_http_header_bytes_sent;
	double _pseudo_http_header_bytes_received;
	double _pseudo_http_send_overhead_t;
	double _pseudo_http_receive_overhead_t;
}
@property(assign, nonatomic) double pseudo_http_receive_overhead_t;
@property(assign, nonatomic) double pseudo_http_send_overhead_t;
@property(assign, nonatomic) double pseudo_http_header_bytes_received;
@property(assign, nonatomic) double pseudo_http_header_bytes_sent;
@property(assign, nonatomic) double pseudo_http_total_bytes_received;
@property(assign, nonatomic) double pseudo_http_total_bytes_sent;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventPtt : WAFieldStatsEvent {
	double _ptt_result;
	double _ptt_size;
}
@property(assign, nonatomic) double ptt_size;
@property(assign, nonatomic) double ptt_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventPushReceive : WAFieldStatsEvent {
	double _push_receive_while_offline;
	double _push_receive_delay_t;
	double _network_change_delay_t;
}
@property(assign, nonatomic) double network_change_delay_t;
@property(assign, nonatomic) double push_receive_delay_t;
@property(assign, nonatomic) double push_receive_while_offline;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventReceiptsRecv : WAFieldStatsEvent {
	double _receipts_type;
	double _message_type;
	double _receipts_proc_t;
}
@property(assign, nonatomic) double receipts_proc_t;
@property(assign, nonatomic) double message_type;
@property(assign, nonatomic) double receipts_type;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventReceiptsSend : WAFieldStatsEvent {
	double _receipts_type;
	double _message_type;
	double _receipts_proc_t;
}
@property(assign, nonatomic) double receipts_proc_t;
@property(assign, nonatomic) double message_type;
@property(assign, nonatomic) double receipts_type;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventRegCode : WAFieldStatsEvent {
	NSString* _app_version;
	NSString* _device_name;
	NSString* _os_version;
	NSString* _location_code;
	NSString* _language_code;
	double _platform;
	double _mcc;
	double _mnc;
	double _network_radio_type;
	double _reg_asn;
	double _reg_provider;
	double _reg_provider_type;
	double _reg_status;
	double _reg_is_new;
	double _reg_bucket;
	double _reg_entered;
	double _reg_simnum;
	double _reg_copiedrc;
	double _reg_hasinrc;
	double _reg_rcmatch;
	double _reg_sms_count;
	double _reg_self_count;
	double _reg_voice_count;
	double _reg_mistyped;
	double _reg_cost;
}
@property(assign, nonatomic) double reg_cost;
@property(assign, nonatomic) double reg_mistyped;
@property(assign, nonatomic) double reg_voice_count;
@property(assign, nonatomic) double reg_self_count;
@property(assign, nonatomic) double reg_sms_count;
@property(assign, nonatomic) double reg_rcmatch;
@property(assign, nonatomic) double reg_hasinrc;
@property(assign, nonatomic) double reg_copiedrc;
@property(assign, nonatomic) double reg_simnum;
@property(assign, nonatomic) double reg_entered;
@property(assign, nonatomic) double reg_bucket;
@property(assign, nonatomic) double reg_is_new;
@property(assign, nonatomic) double reg_status;
@property(assign, nonatomic) double reg_provider_type;
@property(assign, nonatomic) double reg_provider;
@property(retain, nonatomic) NSString* language_code;
@property(retain, nonatomic) NSString* location_code;
@property(assign, nonatomic) double reg_asn;
@property(assign, nonatomic) double network_radio_type;
@property(assign, nonatomic) double mnc;
@property(assign, nonatomic) double mcc;
@property(retain, nonatomic) NSString* os_version;
@property(retain, nonatomic) NSString* device_name;
@property(retain, nonatomic) NSString* app_version;
@property(assign, nonatomic) double platform;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventRegCostEvent : WAFieldStatsEvent {
	NSString* _app_version;
	NSString* _device_name;
	NSString* _os_version;
	double _platform;
	double _mcc;
	double _mnc;
	double _reg_provider;
	double _reg_provider_type;
	double _reg_bucket;
	double _reg_sms_count;
	double _reg_self_count;
	double _reg_voice_count;
	double _reg_cost;
}
@property(assign, nonatomic) double reg_cost;
@property(assign, nonatomic) double reg_voice_count;
@property(assign, nonatomic) double reg_self_count;
@property(assign, nonatomic) double reg_sms_count;
@property(assign, nonatomic) double reg_bucket;
@property(assign, nonatomic) double reg_provider_type;
@property(assign, nonatomic) double reg_provider;
@property(assign, nonatomic) double mnc;
@property(assign, nonatomic) double mcc;
@property(retain, nonatomic) NSString* os_version;
@property(retain, nonatomic) NSString* device_name;
@property(retain, nonatomic) NSString* app_version;
@property(assign, nonatomic) double platform;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventRegExist : WAFieldStatsEvent {
	NSString* _app_version;
	NSString* _device_name;
	NSString* _os_version;
	NSString* _location_code;
	NSString* _language_code;
	double _platform;
	double _mcc;
	double _mnc;
	double _network_radio_type;
	double _reg_asn;
	double _reg_status;
	double _reg_is_new;
	double _reg_bucket;
	double _reg_entered;
	double _reg_simnum;
	double _reg_copiedrc;
	double _reg_hasinrc;
	double _reg_rcmatch;
	double _reg_sms_count;
	double _reg_self_count;
	double _reg_voice_count;
	double _reg_mistyped;
}
@property(assign, nonatomic) double reg_mistyped;
@property(assign, nonatomic) double reg_voice_count;
@property(assign, nonatomic) double reg_self_count;
@property(assign, nonatomic) double reg_sms_count;
@property(assign, nonatomic) double reg_rcmatch;
@property(assign, nonatomic) double reg_hasinrc;
@property(assign, nonatomic) double reg_copiedrc;
@property(assign, nonatomic) double reg_simnum;
@property(assign, nonatomic) double reg_entered;
@property(assign, nonatomic) double reg_bucket;
@property(assign, nonatomic) double reg_is_new;
@property(assign, nonatomic) double reg_status;
@property(retain, nonatomic) NSString* language_code;
@property(retain, nonatomic) NSString* location_code;
@property(assign, nonatomic) double reg_asn;
@property(assign, nonatomic) double network_radio_type;
@property(assign, nonatomic) double mnc;
@property(assign, nonatomic) double mcc;
@property(retain, nonatomic) NSString* os_version;
@property(retain, nonatomic) NSString* device_name;
@property(retain, nonatomic) NSString* app_version;
@property(assign, nonatomic) double platform;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventRegRegister : WAFieldStatsEvent {
	NSString* _app_version;
	NSString* _device_name;
	NSString* _os_version;
	NSString* _location_code;
	NSString* _language_code;
	NSString* _reg_last_app_version;
	double _platform;
	double _mcc;
	double _mnc;
	double _network_radio_type;
	double _reg_asn;
	double _reg_register_type;
	double _reg_provider;
	double _reg_provider_type;
	double _reg_status;
	double _reg_is_new;
	double _reg_bucket;
	double _reg_entered;
	double _reg_simnum;
	double _reg_copiedrc;
	double _reg_hasinrc;
	double _reg_rcmatch;
	double _reg_sms_count;
	double _reg_self_count;
	double _reg_voice_count;
	double _reg_mistyped;
	double _reg_last_platform;
	double _reg_wait;
	double _reg_activity;
}
@property(assign, nonatomic) double reg_activity;
@property(assign, nonatomic) double reg_wait;
@property(assign, nonatomic) double reg_last_platform;
@property(retain, nonatomic) NSString* reg_last_app_version;
@property(assign, nonatomic) double reg_mistyped;
@property(assign, nonatomic) double reg_voice_count;
@property(assign, nonatomic) double reg_self_count;
@property(assign, nonatomic) double reg_sms_count;
@property(assign, nonatomic) double reg_rcmatch;
@property(assign, nonatomic) double reg_hasinrc;
@property(assign, nonatomic) double reg_copiedrc;
@property(assign, nonatomic) double reg_simnum;
@property(assign, nonatomic) double reg_entered;
@property(assign, nonatomic) double reg_bucket;
@property(assign, nonatomic) double reg_is_new;
@property(assign, nonatomic) double reg_status;
@property(assign, nonatomic) double reg_provider_type;
@property(assign, nonatomic) double reg_provider;
@property(assign, nonatomic) double reg_register_type;
@property(retain, nonatomic) NSString* language_code;
@property(retain, nonatomic) NSString* location_code;
@property(assign, nonatomic) double reg_asn;
@property(assign, nonatomic) double network_radio_type;
@property(assign, nonatomic) double mnc;
@property(assign, nonatomic) double mcc;
@property(retain, nonatomic) NSString* os_version;
@property(retain, nonatomic) NSString* device_name;
@property(retain, nonatomic) NSString* app_version;
@property(assign, nonatomic) double platform;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventRestore : WAFieldStatsEvent {
	double _backup_restore_result;
	double _backup_restore_is_full;
	double _backup_restore_is_wifi;
	double _backup_restore_retry_count;
	double _backup_restore_include_videos;
	double _backup_restore_t;
	double _backup_restore_total_size;
	double _backup_restore_chatdb_size;
	double _backup_restore_media_size;
	double _backup_restore_transfer_size;
	double _backup_restore_transfer_failed_size;
	double _backup_restore_media_file_count;
	double _backup_restore_network_request_count;
}
@property(assign, nonatomic) double backup_restore_network_request_count;
@property(assign, nonatomic) double backup_restore_media_file_count;
@property(assign, nonatomic) double backup_restore_transfer_failed_size;
@property(assign, nonatomic) double backup_restore_transfer_size;
@property(assign, nonatomic) double backup_restore_media_size;
@property(assign, nonatomic) double backup_restore_chatdb_size;
@property(assign, nonatomic) double backup_restore_total_size;
@property(assign, nonatomic) double backup_restore_t;
@property(assign, nonatomic) double backup_restore_include_videos;
@property(assign, nonatomic) double backup_restore_retry_count;
@property(assign, nonatomic) double backup_restore_is_wifi;
@property(assign, nonatomic) double backup_restore_is_full;
@property(assign, nonatomic) double backup_restore_result;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventReviewedBan : WAFieldStatsEvent {
	NSString* _app_version;
	NSString* _ban_origin;
	NSString* _unban_origin;
	NSString* _reviewed_origin;
	NSString* _ban_reason;
	NSString* _watch_reason;
	NSString* _ip;
	double _platform;
	double _bounce_count;
	double _groups_created;
	double _groups_participating;
	double _ban_flag_fake_s40;
	double _ban_flag_pinger;
	double _ban_flag_modded;
	double _ban_flag_was_modded;
	double _ban_flag_needs_legit;
	double _asn;
	double _account_create_ts;
	double _ban_is_compliant;
	double _ban_gen;
	double _temp_ban_gen;
	double _is_unban_on_email;
}
@property(assign, nonatomic) double is_unban_on_email;
@property(assign, nonatomic) double temp_ban_gen;
@property(assign, nonatomic) double ban_gen;
@property(assign, nonatomic) double ban_is_compliant;
@property(assign, nonatomic) double account_create_ts;
@property(retain, nonatomic) NSString* ip;
@property(assign, nonatomic) double asn;
@property(assign, nonatomic) double ban_flag_needs_legit;
@property(assign, nonatomic) double ban_flag_was_modded;
@property(assign, nonatomic) double ban_flag_modded;
@property(assign, nonatomic) double ban_flag_pinger;
@property(assign, nonatomic) double ban_flag_fake_s40;
@property(retain, nonatomic) NSString* watch_reason;
@property(retain, nonatomic) NSString* ban_reason;
@property(retain, nonatomic) NSString* reviewed_origin;
@property(retain, nonatomic) NSString* unban_origin;
@property(retain, nonatomic) NSString* ban_origin;
@property(assign, nonatomic) double groups_participating;
@property(assign, nonatomic) double groups_created;
@property(assign, nonatomic) double bounce_count;
@property(retain, nonatomic) NSString* app_version;
@property(assign, nonatomic) double platform;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventSupportEmail : WAFieldStatsEvent {
	NSString* _app_version;
	NSString* _os_version;
	NSString* _device_name;
	NSString* _language_code;
	NSString* _network_radio_type_s;
	double _user_id;
	double _platform;
	double _mcc;
	double _mnc;
}
@property(retain, nonatomic) NSString* network_radio_type_s;
@property(assign, nonatomic) double mnc;
@property(assign, nonatomic) double mcc;
@property(retain, nonatomic) NSString* language_code;
@property(retain, nonatomic) NSString* device_name;
@property(retain, nonatomic) NSString* os_version;
@property(retain, nonatomic) NSString* app_version;
@property(assign, nonatomic) double platform;
@property(assign, nonatomic) double user_id;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventTest : WAFieldStatsEvent {
	NSString* _language_code;
	NSString* _location_code;
	NSString* _device_name;
	NSString* _os_version;
	NSString* _app_version;
	double _mcc;
	double _mnc;
	double _platform;
	double _test_gauge;
	double _test_timer;
}
@property(assign, nonatomic) double test_timer;
@property(assign, nonatomic) double test_gauge;
@property(retain, nonatomic) NSString* app_version;
@property(retain, nonatomic) NSString* os_version;
@property(retain, nonatomic) NSString* device_name;
@property(retain, nonatomic) NSString* location_code;
@property(retain, nonatomic) NSString* language_code;
@property(assign, nonatomic) double platform;
@property(assign, nonatomic) double mnc;
@property(assign, nonatomic) double mcc;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventUiAction : WAFieldStatsEvent {
	double _ui_action_type;
	double _ui_action_preloaded;
	double _ui_action_t;
}
@property(assign, nonatomic) double ui_action_t;
@property(assign, nonatomic) double ui_action_preloaded;
@property(assign, nonatomic) double ui_action_type;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventUiUsage : WAFieldStatsEvent {
	double _ui_usage_type;
	double _entry_point;
}
@property(assign, nonatomic) double entry_point;
@property(assign, nonatomic) double ui_usage_type;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventUnban : WAFieldStatsEvent {
	NSString* _app_version;
	NSString* _ban_origin;
	NSString* _unban_origin;
	NSString* _reviewed_origin;
	NSString* _ban_reason;
	NSString* _watch_reason;
	NSString* _ip;
	double _platform;
	double _bounce_count;
	double _groups_created;
	double _groups_participating;
	double _ban_flag_fake_s40;
	double _ban_flag_pinger;
	double _ban_flag_modded;
	double _ban_flag_was_modded;
	double _ban_flag_needs_legit;
	double _asn;
	double _account_create_ts;
	double _ban_is_compliant;
	double _ban_gen;
	double _temp_ban_gen;
	double _is_unban_on_email;
	double _is_pardon;
}
@property(assign, nonatomic) double is_pardon;
@property(assign, nonatomic) double is_unban_on_email;
@property(assign, nonatomic) double temp_ban_gen;
@property(assign, nonatomic) double ban_gen;
@property(assign, nonatomic) double ban_is_compliant;
@property(assign, nonatomic) double account_create_ts;
@property(retain, nonatomic) NSString* ip;
@property(assign, nonatomic) double asn;
@property(assign, nonatomic) double ban_flag_needs_legit;
@property(assign, nonatomic) double ban_flag_was_modded;
@property(assign, nonatomic) double ban_flag_modded;
@property(assign, nonatomic) double ban_flag_pinger;
@property(assign, nonatomic) double ban_flag_fake_s40;
@property(retain, nonatomic) NSString* watch_reason;
@property(retain, nonatomic) NSString* ban_reason;
@property(retain, nonatomic) NSString* reviewed_origin;
@property(retain, nonatomic) NSString* unban_origin;
@property(retain, nonatomic) NSString* ban_origin;
@property(assign, nonatomic) double groups_participating;
@property(assign, nonatomic) double groups_created;
@property(assign, nonatomic) double bounce_count;
@property(retain, nonatomic) NSString* app_version;
@property(assign, nonatomic) double platform;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcAvailableChange : WAFieldStatsEvent {
	double _webc_available;
	double _webc_available_duration;
}
@property(assign, nonatomic) double webc_available_duration;
@property(assign, nonatomic) double webc_available;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcChatOpen : WAFieldStatsEvent {
	double _webc_unread_count;
	double _webc_chat_open_t;
}
@property(assign, nonatomic) double webc_chat_open_t;
@property(assign, nonatomic) double webc_unread_count;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcIdbOpen : WAFieldStatsEvent {
	double _webc_idb_open_success;
	double _webc_idb_open_t;
}
@property(assign, nonatomic) double webc_idb_open_t;
@property(assign, nonatomic) double webc_idb_open_success;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcNotificationSet : WAFieldStatsEvent {
	double _webc_notification_on;
}
@property(assign, nonatomic) double webc_notification_on;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcPageLoad : WAFieldStatsEvent {
	double _webc_appcache_status;
	double _webc_cached;
	double _webc_qr_code;
	double _webc_navigation;
	double _webc_unload_event_start;
	double _webc_unload_event_end;
	double _webc_redirect_start;
	double _webc_redirect_end;
	double _webc_fetch_start;
	double _webc_domain_lookup_start;
	double _webc_domain_lookup_end;
	double _webc_connect_start;
	double _webc_connect_end;
	double _webc_secure_connection_start;
	double _webc_request_start;
	double _webc_response_start;
	double _webc_response_end;
	double _webc_dom_loading;
	double _webc_dom_interactive;
	double _webc_dom_content_loaded_event_start;
	double _webc_dom_content_loaded_event_end;
	double _webc_dom_complete;
	double _webc_load_event_start;
	double _webc_load_event_end;
	double _webc_exe_start;
	double _webc_exe_done;
	double _webc_ws_opening;
	double _webc_ws_pairing;
	double _webc_ws_syncing;
	double _webc_ws_normal;
	double _webc_ws_attempts;
	double _webc_redirect_count;
	double _webc_page_load_t;
}
@property(assign, nonatomic) double webc_page_load_t;
@property(assign, nonatomic) double webc_redirect_count;
@property(assign, nonatomic) double webc_ws_attempts;
@property(assign, nonatomic) double webc_ws_normal;
@property(assign, nonatomic) double webc_ws_syncing;
@property(assign, nonatomic) double webc_ws_pairing;
@property(assign, nonatomic) double webc_ws_opening;
@property(assign, nonatomic) double webc_exe_done;
@property(assign, nonatomic) double webc_exe_start;
@property(assign, nonatomic) double webc_load_event_end;
@property(assign, nonatomic) double webc_load_event_start;
@property(assign, nonatomic) double webc_dom_complete;
@property(assign, nonatomic) double webc_dom_content_loaded_event_end;
@property(assign, nonatomic) double webc_dom_content_loaded_event_start;
@property(assign, nonatomic) double webc_dom_interactive;
@property(assign, nonatomic) double webc_dom_loading;
@property(assign, nonatomic) double webc_response_end;
@property(assign, nonatomic) double webc_response_start;
@property(assign, nonatomic) double webc_request_start;
@property(assign, nonatomic) double webc_secure_connection_start;
@property(assign, nonatomic) double webc_connect_end;
@property(assign, nonatomic) double webc_connect_start;
@property(assign, nonatomic) double webc_domain_lookup_end;
@property(assign, nonatomic) double webc_domain_lookup_start;
@property(assign, nonatomic) double webc_fetch_start;
@property(assign, nonatomic) double webc_redirect_end;
@property(assign, nonatomic) double webc_redirect_start;
@property(assign, nonatomic) double webc_unload_event_end;
@property(assign, nonatomic) double webc_unload_event_start;
@property(assign, nonatomic) double webc_navigation;
@property(assign, nonatomic) double webc_qr_code;
@property(assign, nonatomic) double webc_cached;
@property(assign, nonatomic) double webc_appcache_status;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcPageResume : WAFieldStatsEvent {
	double _webc_resume_count;
}
@property(assign, nonatomic) double webc_resume_count;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcPhoneDisconnected : WAFieldStatsEvent {
	double _webc_phone_disconnected_t;
	double _webc_phone_bbar_shown_t;
}
@property(assign, nonatomic) double webc_phone_bbar_shown_t;
@property(assign, nonatomic) double webc_phone_disconnected_t;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcResourceLoad : WAFieldStatsEvent {
	NSString* _webc_resource_name;
	double _webc_resource_cached;
	double _webc_resource_duration;
}
@property(assign, nonatomic) double webc_resource_duration;
@property(assign, nonatomic) double webc_resource_cached;
@property(retain, nonatomic) NSString* webc_resource_name;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcStreamInfoChange : WAFieldStatsEvent {
	double _webc_stream_info;
	double _webc_stream_info_duration;
}
@property(assign, nonatomic) double webc_stream_info_duration;
@property(assign, nonatomic) double webc_stream_info;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcStreamModeChange : WAFieldStatsEvent {
	double _webc_stream_mode;
}
@property(assign, nonatomic) double webc_stream_mode;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcWsOpen : WAFieldStatsEvent {
	double _webc_ws_open_t;
}
@property(assign, nonatomic) double webc_ws_open_t;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebcWsTimeout : WAFieldStatsEvent {
	double _webc_ws_timeout_t;
}
@property(assign, nonatomic) double webc_ws_timeout_t;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebdPageLoad : WAFieldStatsEvent {
	NSString* _webclient_version;
	double _webd_page_fresh;
	double _webd_page_load_t;
}
@property(assign, nonatomic) double webd_page_load_t;
@property(retain, nonatomic) NSString* webclient_version;
@property(assign, nonatomic) double webd_page_fresh;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebdPageRequest : WAFieldStatsEvent {
	NSString* _webd_useragent;
	NSString* _webd_lang;
	NSString* _webd_locale;
	double _webd_useragent_supported;
	double _webd_lang_supported;
	double _webd_lang_explicit;
}
@property(assign, nonatomic) double webd_lang_explicit;
@property(assign, nonatomic) double webd_lang_supported;
@property(retain, nonatomic) NSString* webd_locale;
@property(retain, nonatomic) NSString* webd_lang;
@property(assign, nonatomic) double webd_useragent_supported;
@property(retain, nonatomic) NSString* webd_useragent;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebdTerminate : WAFieldStatsEvent {
	NSString* _browser_version;
	NSString* _webclient_os_version;
	double _webd_terminate_reason;
	double _webd_session_t;
}
@property(assign, nonatomic) double webd_session_t;
@property(assign, nonatomic) double webd_terminate_reason;
@property(retain, nonatomic) NSString* webclient_os_version;
@property(retain, nonatomic) NSString* browser_version;
-(void).cxx_destruct;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStatsEventWebdUnnamedPageLoad : WAFieldStatsEvent {
	double _webd_page_fresh;
	double _webd_page_load_t;
}
@property(assign, nonatomic) double webd_page_load_t;
@property(assign, nonatomic) double webd_page_fresh;
-(void)submit;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAEditableImageRotationProtractorView : UIView {
}
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAEditableImageRotationTool : UIView {
	_WAEditableImageRotationProtractorView* _protractor;
	WAShapeView* _triangle;
	float _angle;
	float _minAngle;
	float _maxAngle;
	float _midAngle;
	CGPoint _initialTouchPosition;
	float _initialAngle;
	BOOL _isDragging;
	id<WAEditableImageRotationToolDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAEditableImageRotationToolDelegate> delegate;
@property(assign, nonatomic) float angle;
-(void).cxx_destruct;
-(void)accessibilityDecrement;
-(void)accessibilityIncrement;
-(id)accessibilityValue;
-(void)changeAngleUsingVoiceOverByDegrees:(float)degrees;
-(void)endDragging;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)internalSetAngle:(float)angle;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WACallEventsHeaderView : UIView {
	UIView* _topLine;
	UIView* _topLineShadow;
	UIView* _bottomLine;
	UIView* _bottomLineShadow;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(float)appendEvents:(id)events startingAtOffset:(float)offset includeDate:(BOOL)date;
-(id)initWithAggregateCallEvent:(id)aggregateCallEvent;
@end

__attribute__((visibility("hidden")))
@interface XMPPMessageStanza : XMPPStanza {
	NSDate* _timeOfArrival;
}
@property(readonly, copy, nonatomic) NSString* uniqueKey;
@property(retain, nonatomic) NSDate* timeOfArrival;
@property(readonly, assign, nonatomic) BOOL containsValidWebPageMessage;
@property(copy, nonatomic) NSString* mediaCanonicalURL;
@property(copy, nonatomic) NSString* mediaDescription;
@property(copy, nonatomic) NSString* mediaMatchedText;
@property(copy, nonatomic) NSString* mediaText;
@property(copy, nonatomic) NSString* mediaReason;
@property(copy, nonatomic) NSString* mediaCaption;
@property(copy, nonatomic) NSString* mediaAuthorName;
@property(copy, nonatomic) NSString* mediaCollectionName;
@property(copy, nonatomic) NSString* mediaTitle;
@property(retain, nonatomic) NSString* locationName;
@property(retain, nonatomic) NSString* locationLongitude;
@property(retain, nonatomic) NSString* locationLatitude;
@property(retain, nonatomic) NSString* vCardContactName;
@property(retain, nonatomic) NSString* vCardStringValue;
@property(retain, nonatomic) NSString* fileHash;
@property(assign, nonatomic) int fileSize;
@property(retain, nonatomic) NSData* thumbnailData;
@property(assign, nonatomic) unsigned mediaOrigin;
@property(assign, nonatomic) int mediaDuration;
@property(retain, nonatomic) NSString* mediaName;
@property(readonly, assign, nonatomic) NSString* mediaHostIp;
@property(retain, nonatomic) NSString* mediaURL;
@property(assign, nonatomic) unsigned mediaType;
@property(readonly, assign, nonatomic) NSString* nickname;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) unsigned type;
@property(readonly, assign, nonatomic) BOOL broadcast;
+(id)createMessageTo:(id)to;
+(unsigned)typeForString:(id)string;
+(id)stringForType:(unsigned)type;
+(id)stringsForTypes;
+(unsigned)messageTypeFromXMPPMediaType:(unsigned)xmppmediaType;
+(unsigned)xmppMediaTypeFromMessageType:(unsigned)messageType;
-(void).cxx_destruct;
-(id)log;
-(id)stringForMediaType:(unsigned)mediaType;
-(unsigned)mediaTypeForString:(id)string;
-(id)vcard;
-(id)body;
-(id)media;
-(void)addBroadcastListInfoWithName:(id)name recipientJIDs:(id)jids;
-(void)copyMessageDataFromSharedItem:(id)sharedItem;
-(BOOL)copyMessageDataFrom:(id)from forParticipant:(id)participant encryptIfNeeded:(BOOL)needed;
-(id)initWithFromJID:(id)jid toJID:(id)jid2 type:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface WAToolbar : UIToolbar {
	UILabel* _titleLabel;
	NSString* _title;
	WANavigationController* _parentNavigationController;
}
@property(assign, nonatomic) __weak WANavigationController* parentNavigationController;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
@end

__attribute__((visibility("hidden")))
@interface _WANoBlurNavigationBar : UINavigationBar {
	UIView* _grayBackgroundView;
	int _lastStateDuringLayout;
}
-(void).cxx_destruct;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)layoutSubviews;
-(void)setCenter:(CGPoint)center;
-(void)commonInit;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WANavigationController : UINavigationController <UINavigationControllerDelegate, UIGestureRecognizerDelegate> {
	id<UINavigationControllerDelegate> _originalDelegate;
	int _lastAnimationControllerOperation;
	UIScreenEdgePanGestureRecognizer* _customPopGestureRecognizer;
	id<WAPercentDrivenInteractiveTransitioning> _interactionController;
	NSObject<OS_dispatch_group>* _interactiveTransitionDispatchGroup;
	BOOL _interactiveTransitionInProgress;
	BOOL _customInteractivePopInProgress;
	id<UIViewControllerAnimatedTransitioning> _transitionController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL customInteractivePopInProgress;
@property(readonly, assign, nonatomic) id<UIViewControllerAnimatedTransitioning> transitionController;
+(id)defaultInteractionController;
+(BOOL)useNavigationBarWithBlur;
+(void)initialize;
-(void).cxx_destruct;
-(id)childViewControllerForStatusBarHidden;
-(BOOL)shouldAutorotate;
-(void)popToMainViewControllerAnimated:(BOOL)mainViewControllerAnimated;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(id)navigationController:(id)controller interactionControllerForAnimationController:(id)animationController;
-(id)navigationController:(id)controller animationControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController4;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated canUseCustomTransition:(BOOL)transition;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(void)performBlockAfterAnimationBegins:(id)begins;
-(BOOL)shouldBeginCustomInteractivePopAnimationWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(id)interactiveScreenEdgePopTransition;
-(void)didCompleteCustomInteractiveTransition;
-(void)didCancelCustomInteractiveTransition;
-(void)handleInteractiveTransitionGesture:(id)gesture;
-(void)prepareForInteractivePushWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)beginCustomInteractivePopWithGestureRecognizer:(id)gestureRecognizer performBeforePop:(id)pop;
-(void)handlePopAnimationScreenEdgePanGestureRecognizer:(id)recognizer;
-(void)viewDidLoad;
-(id)initWithRootViewController:(id)rootViewController;
-(id)init;
-(id)initWithNavigationBarClass:(Class)navigationBarClass toolbarClass:(Class)aClass;
@end

__attribute__((visibility("hidden")))
@interface WAAddressBookLabelPicker : WATableViewController <UITextFieldDelegate, UIScrollViewDelegate> {
	NSArray* _predefinedLabels;
	UITableViewCell* _textFieldCell;
	UITextField* _textField;
	WAContactProperty* _contactProperty;
	id<WAAddressBookLabelPickerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAAddressBookLabelPickerDelegate> delegate;
@property(retain, nonatomic) WAContactProperty* contactProperty;
+(id)pickerWithDelegate:(id)delegate;
-(void).cxx_destruct;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)textFieldDidBeginEditing:(id)textField;
-(void)doneAction:(id)action;
-(void)cancelAction:(id)action;
-(void)wa_fontSizeDidChange;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface XMPPNotificationStanza : XMPPStanza {
}
@property(readonly, assign, nonatomic) NSString* nickname;
@property(readonly, assign, nonatomic) NSString* text;
@property(assign, nonatomic) unsigned type;
+(unsigned)typeForString:(id)string;
+(id)stringForType:(unsigned)type;
+(id)stringsForTypes;
-(id)log;
-(id)initWithType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface WAWallpaperLibrary : NSObject {
	NSArray* _imagePaths;
	NSCache* _fullsizeImages;
	NSCache* _thumbnails;
}
+(void)migrateWallpaper;
+(void)upgradeWallpaperSettingsOnNewInstall:(BOOL)install;
+(void)setCustomWallpaperImage:(id)image;
+(void)setStockWallpaperWithFilename:(id)filename;
+(void)restoreDefaultWallpaper;
+(void)deleteCustomChatBackgroundImage;
+(id)chatWallpaperImage;
+(id)stockWallpaperWithFilename:(id)filename;
+(id)fullPathToCustomWallpaperImage;
+(CGSize)thumbnailSizeLandscape;
+(CGSize)thumbnailSizePortrait;
+(float)thumbnailSpacing;
+(float)thumbnailSideMargin;
+(id)sharedLibrary;
-(void).cxx_destruct;
-(void)fetchFullsizeImageAtIndex:(unsigned)index completion:(id)completion;
-(void)fetchThumbnailForImageAtIndex:(unsigned)index completion:(id)completion;
-(id)imageAtIndex:(unsigned)index;
-(id)filenameForImageAtIndex:(unsigned)index;
-(unsigned)numberOfItems;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPPresenceStanza : XMPPStanza {
}
@property(retain, nonatomic) NSString* nickname;
@property(assign, nonatomic) unsigned type;
+(unsigned)typeForString:(id)string;
+(id)stringForType:(unsigned)type;
+(id)stringsForTypes;
+(id)stanzaWithPresence:(unsigned)presence nickname:(id)nickname;
-(id)log;
-(id)initWithFromJID:(id)jid toJID:(id)jid2 type:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface XMPPStanza : XMPPStanzaElement {
	NSDictionary* _connectionInfo;
}
@property(readonly, assign, nonatomic, getter=isReceivedWithActiveWebClientSession) BOOL receivedWithActiveWebClientSession;
@property(retain, nonatomic) NSDictionary* connectionInfo;
@property(readonly, assign, nonatomic) int offlineCount;
@property(readonly, assign, nonatomic) BOOL offline;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) NSString* errorCode;
@property(readonly, assign, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) NSString* participant;
@property(retain, nonatomic) NSString* toJID;
@property(retain, nonatomic) NSString* fromJID;
@property(retain, nonatomic) NSString* uniqueIdentifier;
+(id)generateSID;
+(id)generateUniqueIdentifier;
+(id)generateUniqueMessageIdentifier;
+(id)stanzaFromMessage:(id)message;
-(void).cxx_destruct;
-(id)initWithName:(id)name fromJID:(id)jid toJID:(id)jid3;
-(id)initWithStanzaElement:(id)stanzaElement;
@end

__attribute__((visibility("hidden")))
@interface WAContactPropertyCell : UITableViewCell {
	BOOL _isActionButton;
	UIView* _topSeparator;
	UIView* _bottomSeparator;
	id _delegate;
	WAContactProperty* _contactProperty;
}
@property(retain, nonatomic) WAContactProperty* contactProperty;
@property(assign, nonatomic) __weak id delegate;
+(float)rowHeight;
+(float)rowHeightForContactProperty:(id)contactProperty;
+(id)cellForWAContactProperty:(id)wacontactProperty withReuseIdentifier:(id)reuseIdentifier;
+(Class)cellClassForWAContactProperty:(id)wacontactProperty;
-(void).cxx_destruct;
-(void)configureAsDeleteContactRow;
-(void)configureAsAddValueRowForABProperty:(int)abproperty;
-(void)reconfigure;
-(void)refreshTextColor;
-(void)tintColorDidChange;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface XMPPContactCapability : NSObject {
	NSString* _jid;
	int _urlCapable;
	int _encV1Capable;
	int _encV2Capable;
	int _encGroupCapable;
	int _voipCapable;
	int _encContactCapable;
	int _encImageCapable;
	int _encLocationCapable;
	int _encAudioCapable;
	int _encBlistCapable;
	int _docXCapable;
	int _docPdfCapable;
}
@property(assign, nonatomic) int docPdfCapable;
@property(assign, nonatomic) int docXCapable;
@property(assign, nonatomic) int encBlistCapable;
@property(assign, nonatomic) int encAudioCapable;
@property(assign, nonatomic) int encLocationCapable;
@property(assign, nonatomic) int encImageCapable;
@property(assign, nonatomic) int encContactCapable;
@property(assign, nonatomic) int voipCapable;
@property(assign, nonatomic) int encGroupCapable;
@property(assign, nonatomic) int encV2Capable;
@property(assign, nonatomic) int encV1Capable;
@property(assign, nonatomic) int urlCapable;
@property(retain, nonatomic) NSString* jid;
+(int)stringToType:(id)type;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface WAPulsingCircleView : WAShapeView {
	WAShapeView* _innerCircle;
	float _innerCircleRadius;
}
@property(copy, nonatomic) CAAnimation* pulseAnimation;
@property(assign, nonatomic) float innerCircleRadius;
-(void).cxx_destruct;
-(void)tintColorDidChange;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface XMPPStream : NSObject <XMPPSocketDelegate> {
	XMPPBinaryCoder* _binaryCoder;
	NSMutableData* _incomingBuffer;
	XMPPSocket* _socket;
	ExecutionTimeProfiler* _profiler;
	NSMutableData* _nextToken;
	double _lastSocketReadTime;
	double _systemUptimeAtLastSocketRead;
	NSMutableArray* _messages;
	BOOL _firstPresenceReceived;
	NSDictionary* _connectionInfo;
	unsigned _busySocketTask;
	BOOL _isDisconnecting;
	BOOL _isAckKick;
	WATimer* _socketIdleTimer;
	BOOL _contactsAccessAllowed;
	BOOL _xmppPassiveMode;
	BOOL _opened;
	id<XMPPStreamDelegate> _delegate;
	NSString* _xmppUser;
	NSData* _xmppPassword;
	double _lastOfflineStanzaTime;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isSocketAlive) BOOL socketAlive;
@property(copy, nonatomic) NSString* hintIPAdress;
@property(readonly, assign, nonatomic) unsigned short currentPort;
@property(readonly, copy, nonatomic) NSString* currentHost;
@property(readonly, copy, nonatomic) NSString* currentIPAddress;
@property(assign, nonatomic) BOOL bindsToCellularNetwork;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(readonly, assign, nonatomic, getter=isOpened) BOOL opened;
@property(readonly, assign, nonatomic) double lastOfflineStanzaTime;
@property(readonly, assign, nonatomic) double elapsedTimeSinceLastReadData;
@property(assign, nonatomic) BOOL xmppPassiveMode;
@property(retain, nonatomic) NSData* xmppPassword;
@property(retain, nonatomic) NSString* xmppUser;
@property(assign, nonatomic, getter=isContactsAccessAllowed) BOOL contactsAccessAllowed;
@property(assign, nonatomic) __weak id<XMPPStreamDelegate> delegate;
-(void).cxx_destruct;
-(void)xmppSocketDidDisconnect:(id)xmppSocket;
-(void)invalidateBusySocketTimer;
-(void)reportIdleSocketAfterDelay;
-(void)xmppSocketDidWriteData:(id)xmppSocket;
-(void)xmppSocket:(id)socket didReadData:(id)data;
-(void)startStreamWithLoginStanzaElements:(id)loginStanzaElements connectionInfo:(id)info;
-(void)xmppSocket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)xmppSocket:(id)socket willConnectToHost:(id)host;
-(void)processElements:(id)elements;
-(void)processStanza:(id)stanza;
-(void)processMessages;
-(void)outputProfilingResults;
-(unsigned)sendElements:(id)elements;
-(unsigned)sendElements:(id)elements timeout:(double)timeout;
-(unsigned)sendElement:(id)element;
-(unsigned)sendElement:(id)element timeout:(double)timeout;
-(unsigned)internalSendElements:(id)elements timeout:(double)timeout encrypted:(BOOL)encrypted;
-(void)sendStreamEndAndDisconnect;
-(void)disconnectImmediately;
-(void)connect;
-(void)dealloc;
-(id)initWithQueue:(id)queue;
@end

__attribute__((visibility("hidden")))
@interface WACloudInteractionOperation : WAWaitOperation {
}
-(id)pathForRemoteFile:(id)remoteFile;
@end

__attribute__((visibility("hidden")))
@interface WABlockedContactsList : NSObject {
	NSMutableSet* _allContacts;
	NSMutableSet* _pendingContacts;
	WAChatStorage* _storage;
	NSObject<OS_dispatch_queue>* _saveQueue;
	BOOL _synchronizationInProgress;
	BOOL _needsUpstreamSync;
	NSString* _upstreamSyncWebClientRequestID;
	id _upstreamSyncWebClientCompletionHandler;
	BOOL _needsDownstreamSync;
}
@property(readonly, assign, nonatomic) NSSet* jids;
@property(readonly, assign, nonatomic) unsigned size;
-(void).cxx_destruct;
-(void)setNeedsDownstreamSync;
-(void)setNeedsUpstreamSync;
-(void)unblockJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)blockJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)xmppConnectionStateDidChange:(id)xmppConnectionState;
-(void)savePendingContacts;
-(void)saveBlockedContactsToChatStorage:(id)chatStorage;
-(void)requestListFromServer;
-(void)sendListToServer;
-(void)synchronize;
-(void)processBlockedContactsFromServer:(id)server;
-(BOOL)isJIDBlocked:(id)blocked;
-(void)loadContactsIfNecessary;
-(id)initWithChatStorage:(id)chatStorage;
@end

__attribute__((visibility("hidden")))
@interface WAShapeView : UIView {
}
@property(retain, nonatomic) UIBezierPath* path;
@property(copy, nonatomic) NSString* lineCap;
@property(assign, nonatomic) float lineWidth;
@property(retain, nonatomic) UIColor* strokeColor;
@property(retain, nonatomic) UIColor* fillColor;
+(Class)layerClass;
@end

__attribute__((visibility("hidden")))
@interface WACircleView : WAShapeView {
}
-(void)setBounds:(CGRect)bounds;
@end

__attribute__((visibility("hidden")))
@interface WAWebPageMetadata : NSObject <NSCopying> {
	BOOL _active;
	UIImage* _image;
	NSString* _snippet;
	NSURL* _originalURL;
	NSURL* _canonicalURL;
	NSURL* _imageURL;
	NSString* _pageTitle;
	NSString* _metaTitle;
	CGSize _preferredImageSize;
}
@property(assign, nonatomic) CGSize preferredImageSize;
@property(copy, nonatomic) NSString* metaTitle;
@property(copy, nonatomic) NSString* pageTitle;
@property(readonly, assign, nonatomic, getter=isSendable) BOOL sendable;
@property(assign, nonatomic, getter=isActive) BOOL active;
@property(copy, nonatomic) NSURL* imageURL;
@property(copy, nonatomic) NSURL* canonicalURL;
@property(copy, nonatomic) NSURL* originalURL;
@property(copy, nonatomic) NSString* snippet;
@property(readonly, copy, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* image;
+(id)placeholderImage;
+(void)initialize;
-(void).cxx_destruct;
-(id)description;
-(BOOL)containsSameDataAsMetadata:(id)metadata;
-(id)copyWithZone:(NSZone*)zone;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAWebPageReader : NSObject {
	id _handler;
	double _startTime;
	NSURLSessionDataTask* _currentDataTask;
	BOOL _invalidated;
	int _handlerInvocationCount;
	int _imageFetchRetryCount;
	NSURL* _webURL;
	double _htmlFetchTimeout;
	double _imageFetchTimeout;
	CGSize _preferredImageSize;
}
@property(assign, nonatomic) CGSize preferredImageSize;
@property(readonly, assign, nonatomic) NSURL* webURL;
@property(assign, nonatomic) double imageFetchTimeout;
@property(assign, nonatomic) double htmlFetchTimeout;
+(void)initialize;
-(void).cxx_destruct;
-(void)cleanUp;
-(void)failWithError:(id)error;
-(void)cancel;
-(void)fetchImageInMetadata:(id)metadata;
-(void)completeReadingWithMetadata:(id)metadata;
-(void)parseHTML:(id)html fromURL:(id)url rawData:(id)data assumedEncoding:(unsigned)encoding reinterpretDataIfNeeded:(BOOL)needed;
-(unsigned)stringEncodingFromCharset:(id)charset;
-(void)loadMetadataWithResultHandler:(id)resultHandler;
-(id)URLRequestWithURL:(id)url timeout:(double)timeout;
-(id)initWithURL:(id)url;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAMPAVRoute : NSObject {
}
-(id)avRouteDescription;
@end

__attribute__((visibility("hidden")))
@interface WAAudioRouteActionSheet : UIActionSheet {
	UIImage* _selectedButtonGlyphImage;
}
@property(retain, nonatomic) UIImage* selectedButtonGlyphImage;
+(id)iconImageViewInButton:(id)button;
+(id)showInViewIfPossible:(id)viewIfPossible;
-(void).cxx_destruct;
-(id)_availableRoutes;
-(id)buttonAtIndex:(int)index;
-(id)initWithType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface _WAChatSessionCellSideButtonContentView : UIView {
	UIImageView* _image;
	UILabel* _titleLabel;
}
-(void).cxx_destruct;
-(void)reloadTitleLabelFont;
-(void)setTitle:(id)title;
-(void)setImage:(id)image;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAChatSessionCellSideButtonsView : UIView {
	NSMutableArray* _buttons;
	NSMutableArray* _normalBackgrounds;
	NSMutableArray* _highlightedBackgrounds;
	BOOL _expanded;
}
@property(assign, nonatomic) BOOL expanded;
+(id)darkerColorFromColor:(id)color;
+(id)buttonWithTitle:(id)title image:(id)image;
-(void).cxx_destruct;
-(void)reloadFonts;
-(float)preferredWidth;
-(void)triggerActionForButtonAtIndex:(unsigned)index;
-(void)setImage:(id)image forButtonAtIndex:(unsigned)index;
-(void)setTitle:(id)title forButtonAtIndex:(unsigned)index;
-(id)addButtonWithTitle:(id)title backgroundColor:(id)color image:(id)image;
-(void)buttonTouchUp:(id)up;
-(void)buttonTouchDown:(id)down;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAChatSessionCellLeftSideButtonsView : _WAChatSessionCellSideButtonsView {
}
-(void)layoutSubviews;
-(id)addButtonWithTitle:(id)title backgroundColor:(id)color image:(id)image;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAChatSessionCellIndicatorsView : UIView {
	UIImageView* _muteIndicator;
	UILabel* _unreadLabel;
	WAShapeView* _unreadLabelBackground;
	UILabel* _archivedLabel;
	WAShapeView* _archivedLabelBackground;
	CGSize _archivedLabelSize;
	BOOL _highlighted;
	BOOL _showMuteIcon;
	BOOL _showArchivedLabel;
	int _unreadCount;
}
@property(assign, nonatomic) int unreadCount;
@property(assign, nonatomic) BOOL showArchivedLabel;
@property(assign, nonatomic) BOOL showMuteIcon;
@property(assign, nonatomic) BOOL highlighted;
+(id)muteIndicatorImageHighlighted;
+(id)muteIndicatorImage;
-(void).cxx_destruct;
-(void)reloadFonts;
-(CGSize)sizeThatFits:(CGSize)fits;
-(CGSize)intrinsicContentSize;
-(void)layoutSubviews;
-(void)tintColorDidChange;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAChatSessionCell : UITableViewCell {
	float _currentFontSize;
	BOOL _muted;
	BOOL _archived;
	BOOL _showGroupParticipants;
	BOOL _unknownContact;
	BOOL _showLocationIcon;
	BOOL _showCameraIcon;
	BOOL _showCamcorderIcon;
	BOOL _showContactIcon;
	NSString* _jid;
	int _unreadCount;
	id<WAChatSessionCellDelegate> _delegate;
	UIView* _containerView;
	WALabel* _nameLabel;
	UILabel* _senderLabel;
	UILabel* _timeLabel;
	_WAChatSessionCellIndicatorsView* _indicatorsView;
	UIView* _lastMessageContainer;
	WALabel* _messageLabel;
	UILabel* _activityLabel;
	WAProfilePictureThumbnailView* _imageViewContactPicture;
	NSString* _messageText;
	unsigned _pushToTalkIconType;
	NSString* _chatActivityText;
}
@property(copy, nonatomic) NSString* chatActivityText;
@property(assign, nonatomic) unsigned pushToTalkIconType;
@property(assign, nonatomic) BOOL showContactIcon;
@property(assign, nonatomic) BOOL showCamcorderIcon;
@property(assign, nonatomic) BOOL showCameraIcon;
@property(assign, nonatomic) BOOL showLocationIcon;
@property(copy, nonatomic) NSString* messageText;
@property(assign, nonatomic) BOOL unknownContact;
@property(retain, nonatomic) WAProfilePictureThumbnailView* imageViewContactPicture;
@property(retain, nonatomic) UILabel* activityLabel;
@property(retain, nonatomic) WALabel* messageLabel;
@property(retain, nonatomic) UIView* lastMessageContainer;
@property(retain, nonatomic) _WAChatSessionCellIndicatorsView* indicatorsView;
@property(retain, nonatomic) UILabel* timeLabel;
@property(retain, nonatomic) UILabel* senderLabel;
@property(retain, nonatomic) WALabel* nameLabel;
@property(retain, nonatomic) UIView* containerView;
@property(assign, nonatomic) __weak id<WAChatSessionCellDelegate> delegate;
@property(readonly, assign, nonatomic, getter=isResizingSideButtons) BOOL resizingSideButtons;
@property(assign, nonatomic) int unreadCount;
@property(assign, nonatomic) BOOL showGroupParticipants;
@property(assign, nonatomic) BOOL archived;
@property(assign, nonatomic) BOOL muted;
@property(copy, nonatomic) NSString* jid;
+(BOOL)moreOptionsMenuSupported;
+(id)contactIconImageHighlighted;
+(id)contactIconImage;
+(id)camcorderIconImageHighlighted;
+(id)camcorderIconImage;
+(id)cameraIconImageHighlighted;
+(id)cameraIconImage;
+(id)locationIconImageHighlighted;
+(id)locationIconImage;
+(id)microphoneImageHighlighted;
+(id)microphoneImageForPTTIconType:(unsigned)ptticonType;
+(id)cellWithReuseIdentifier:(id)reuseIdentifier;
-(void).cxx_destruct;
-(void)xmppConnectionChatStateDidChange:(id)xmppConnectionChatState;
-(void)waMessageUpdated:(id)updated;
-(void)hideSideButtonsAnimated:(BOOL)animated completion:(id)completion;
-(void)cancelResizingSideButtons;
-(void)reloadFonts;
-(void)reconfigureWithMessage:(id)message;
-(void)configureWithChatSession:(id)chatSession message:(id)message;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)setChatActivityText:(id)text animated:(BOOL)animated;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _WAChatSessionCellModern : WAChatSessionCell {
	NSLayoutConstraint* _containerViewRightToContentViewConstraint;
	NSLayoutConstraint* _messageContainerToNameLabelConstraint;
	NSLayoutConstraint* _messageContainerToSenderLabelConstraint;
	_WAChatSessionCellSideButtonsView* _rightSideButtonsView;
	_WAChatSessionCellSideButtonsView* _leftSideButtonsView;
	unsigned _archiveButtonIndex;
	unsigned _markUnreadButtonIndex;
	UIPanGestureRecognizer* _cellSwipeGesture;
	int _cellSwipeState;
	float _sideButtonsViewBaseWidth;
	float _currentSideButtonsViewWidthChange;
	float _initialGestureTranslation;
	BOOL _isRTLLayout;
}
+(id)buttonInView:(id)view;
+(BOOL)moreOptionsMenuSupported;
+(void)initialize;
-(void).cxx_destruct;
-(id)accessibilityCustomActions;
-(void)markUnreadAction:(id)action;
-(void)archiveAction:(id)action;
-(void)showMoreOptions:(id)options;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)hideSideButtonsAnimated:(BOOL)animated completion:(id)completion;
-(void)cancelResizingSideButtons;
-(void)endLeftSwipeWithGestureRecognizerState:(int)gestureRecognizerState;
-(void)endRightSwipeWithGestureRecognizerState:(int)gestureRecognizerState;
-(void)expandOrCollapseRightSideButtonsIfNecessary;
-(void)expandOrCollapseLeftSideButtonsIfNecessary;
-(void)handleCellSideSwipe:(id)swipe;
-(void)endedChangingSideButtons;
-(void)beganChangingSideButtons;
-(void)updateContentViewHorizontalPosition;
-(void)reloadTitleOfMarkUnreadButton;
-(id)accessoryButton;
-(BOOL)isResizingSideButtons;
-(void)setUnreadCount:(int)count;
-(void)reloadMessageText;
-(void)addAutolayoutConstraints;
-(void)reloadFonts;
-(void)reconfigureWithMessage:(id)message;
-(void)configureWithChatSession:(id)chatSession message:(id)message;
-(void)prepareForReuse;
-(void)willTransitionToState:(unsigned)state;
-(void)tintColorDidChange;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface _WAChatSessionCellLegacy : WAChatSessionCell {
	UIImageView* _locationIcon;
	UIImageView* _pushToTalkIcon;
	UIImageView* _cameraIcon;
	UIImageView* _camcorderIcon;
	UIImageView* _contactIcon;
}
@property(retain, nonatomic) UIImageView* contactIcon;
@property(retain, nonatomic) UIImageView* camcorderIcon;
@property(retain, nonatomic) UIImageView* cameraIcon;
@property(retain, nonatomic) UIImageView* pushToTalkIcon;
@property(retain, nonatomic) UIImageView* locationIcon;
-(void).cxx_destruct;
-(void)setPushToTalkIconType:(unsigned)talkIconType;
-(void)setShowContactIcon:(BOOL)icon;
-(void)setShowCamcorderIcon:(BOOL)icon;
-(void)setShowCameraIcon:(BOOL)icon;
-(void)setShowLocationIcon:(BOOL)icon;
-(void)setMessageText:(id)text;
-(void)configureWithChatSession:(id)chatSession message:(id)message;
-(void)didTransitionToState:(unsigned)state;
-(void)willTransitionToState:(unsigned)state;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMediaGallerySectionHeaderView : UICollectionReusableView {
	UIView* _backgroundView;
	UILabel* _titleLabel;
	BOOL _translucent;
	BOOL _blurDisabled;
}
@property(assign, nonatomic) BOOL blurDisabled;
@property(assign, nonatomic) BOOL translucent;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(void)applyLayoutAttributes:(id)attributes;
-(void)prepareForReuse;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface XMPPClient : NSObject {
	unsigned _lastSentChatState;
	NSLock* _outgoingChatStateLock;
	unsigned _lastReceivedChatState;
	NSLock* _incomingChatStateLock;
	unsigned _presence;
	NSDate* _outgoingChatStateTimestamp;
	NSDate* _incomingChatStateTimestamp;
	NSString* _groupJIDForChatState;
	NSDate* _lastSeenTimestamp;
	NSString* _jid;
}
@property(retain) NSString* jid;
@property(retain) NSDate* lastSeenTimestamp;
@property(retain) NSString* groupJIDForChatState;
@property(retain) NSDate* incomingChatStateTimestamp;
@property(assign) unsigned lastReceivedChatState;
@property(retain) NSDate* outgoingChatStateTimestamp;
@property(assign) unsigned lastSentChatState;
@property(assign) unsigned presence;
-(void).cxx_destruct;
-(void)reset;
-(id)initWithJID:(id)jid;
@end

__attribute__((visibility("hidden")))
@interface WAWebPageFromTextLoader : NSObject {
	NSString* _textForWebURLDetection;
	BOOL _isDetectingWebURL;
	WAWebPageReader* _pendingReader;
	NSString* _matchedText;
	NSURL* _webURL;
	BOOL _isCancelled;
	id<WAWebPageFromTextLoaderDelegate> _delegate;
	WAWebPageMetadata* _metadata;
	NSString* _text;
}
@property(copy, nonatomic) NSString* text;
@property(readonly, copy, nonatomic) NSString* matchedText;
@property(readonly, assign, nonatomic) WAWebPageMetadata* metadata;
@property(assign, nonatomic) __weak id<WAWebPageFromTextLoaderDelegate> delegate;
+(void)initialize;
-(void).cxx_destruct;
-(void)reallyLoadWebURL:(id)url resultHandler:(id)handler;
-(void)loadWebURL:(id)url matchedText:(id)text;
-(void)detectWebURL;
-(void)cancel;
@end

__attribute__((visibility("hidden")))
@interface XMPPChatStateStanza : XMPPStanza {
}
@property(assign, nonatomic) unsigned state;
+(id)stringForChatState:(unsigned)chatState;
+(id)chatStateStrings;
-(id)log;
-(id)initWithState:(unsigned)state;
@end

__attribute__((visibility("hidden")))
@interface WACallHistoryTableViewCell : UITableViewCell {
	WAAggregateCallEvent* _aggregateCallEvent;
	NSLayoutConstraint* _dateLabelRightEdgeConstraint;
	unsigned _lastCellState;
	UIImageView* _outgoingCallIconView;
	UILabel* _dateLabel;
	UILabel* _eventCountLabel;
	UILabel* _displayNameLabel;
	UILabel* _detailLabel;
}
@property(retain, nonatomic) UILabel* detailLabel;
@property(retain, nonatomic) UILabel* displayNameLabel;
@property(readonly, assign, nonatomic) UILabel* eventCountLabel;
@property(readonly, assign, nonatomic) UILabel* dateLabel;
@property(readonly, assign, nonatomic) UIImageView* outgoingCallIconView;
+(UIEdgeInsets)preferredSeparatorInset;
+(float)preferredRowHeight;
+(void)initialize;
-(void).cxx_destruct;
-(id)infoIconImageView;
-(void)willTransitionToState:(unsigned)state;
-(void)prepareForReuse;
-(void)applyFonts;
-(void)layoutSubviews;
-(id)accessibilityLabel;
-(void)configureWithAggregateCallEvent:(id)aggregateCallEvent;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface FMDatabasePool : NSObject {
	NSString* _path;
	NSObject<OS_dispatch_queue>* _lockQueue;
	NSMutableArray* _databaseInPool;
	NSMutableArray* _databaseOutPool;
	id _delegate;
	unsigned _maximumNumberOfDatabasesToCreate;
	int _openFlags;
}
@property(readonly, assign) int openFlags;
@property(assign) unsigned maximumNumberOfDatabasesToCreate;
@property(assign) id delegate;
@property(retain) NSString* path;
+(id)databasePoolWithPath:(id)path flags:(int)flags;
+(id)databasePoolWithPath:(id)path;
-(void).cxx_destruct;
-(id)inSavePoint:(id)savePoint;
-(void)inTransaction:(id)transaction;
-(void)inDeferredTransaction:(id)deferredTransaction;
-(void)beginTransaction:(BOOL)transaction withBlock:(id)block;
-(void)inDatabase:(id)database;
-(void)releaseAllDatabases;
-(unsigned)countOfOpenDatabases;
-(unsigned)countOfCheckedOutDatabases;
-(unsigned)countOfCheckedInDatabases;
-(id)db;
-(void)pushDatabaseBackInPool:(id)pool;
-(void)executeLocked:(id)locked;
-(void)dealloc;
-(id)init;
-(id)initWithPath:(id)path;
-(id)initWithPath:(id)path flags:(int)flags;
@end

__attribute__((visibility("hidden")))
@interface WAChatsTableView : UITableView {
	BOOL _disableScroll;
}
@property(assign, nonatomic) BOOL disableScroll;
-(void)setContentOffset:(CGPoint)offset;
@end

__attribute__((visibility("hidden")))
@interface WAForwardPickerViewController : WATableViewController <WAForwardPickerDataSourceDelegate, UISearchDisplayDelegate> {
	UISegmentedControl* _segmentedControl;
	NSArray* _dataSources;
	WAForwardPickerSearchDataSource* _searchDataSource;
	int _currentSourceType;
	NSMutableDictionary* _savedContentOffsets;
	BOOL _needsAdjustContentOffset;
	_WAForwardPickerEmptyListView* _emptyListView;
	UIToolbar* _toolbar;
	BOOL _requiresConfirmation;
	id _completionHandler;
	id<WAForwardPickerViewControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAForwardPickerViewControllerDelegate> delegate;
@property(copy, nonatomic) id completionHandler;
@property(assign, nonatomic) BOOL requiresConfirmation;
+(id)controller;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)forwardPickerSearchDataSourceDidChangeContent:(id)forwardPickerSearchDataSource;
-(BOOL)isSearchBarShownForForwardPickerDataSource:(id)forwardPickerDataSource;
-(BOOL)shouldShowSearchBar;
-(void)searchWithCriteria:(id)criteria;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(id)confirmationTextForContactInfo:(id)contactInfo;
-(id)currentDataSource;
-(void)updateViewForCurrentSource;
-(void)setDataSourceType:(int)type;
-(void)segmentedControlDidChange:(id)segmentedControl;
-(void)cancel:(id)cancel;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)wa_fontSizeDidChange;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLayoutSubviews;
-(void)viewDidLoad;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface _WAForwardPickerEmptyListView : UIView {
	UIImageView* _imageView;
	UILabel* _label;
}
@property(copy, nonatomic) NSString* text;
@property(retain, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface NetworkInfo : NSObject {
}
+(id)interfaceForWWAN;
+(id)macAddressForInterface:(id)interface;
+(id)ipAddressFromStruct:(sockaddr*)aStruct family:(int)family buffer:(char*)buffer length:(unsigned)length;
+(id)interfaces;
+(id)flagsToString:(unsigned)string;
+(id)familyToString:(unsigned char)string;
@end

__attribute__((visibility("hidden")))
@interface WAWebLinksBrowserTableHeaderView : UITableViewHeaderFooterView {
	UILabel* _titleLabel;
}
@property(copy, nonatomic) NSString* text;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface WAWebLinksBrowserViewController : WASavedContentBrowserChildTableViewController <NSFetchedResultsControllerDelegate> {
	NSCalendar* _calendar;
	int _currentMonth;
	int _currentYear;
	BOOL _needsReset;
	NSFetchedResultsController* _resultsController;
	NSFetchedResultsController* _emptyResultsController;
	NSDateFormatter* _fullDateFormatter;
	NSDateFormatter* _monthOnlyDateFormatter;
	BOOL _isDatabaseLoaded;
	BOOL _isUpdatingTable;
	BOOL _didBeginUpdates;
	BOOL _needsScrollToBottom;
	UIView* _emptyListView;
	UILabel* _linkCountLabel;
	BOOL _needsUpdateFooter;
	NSArray* _chatSessions;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* chatSessions;
-(void).cxx_destruct;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controllerWillChangeContent:(id)controller;
-(void)beginUpdatesIfNeeded;
-(void)loadIfNeeded;
-(void)reset;
-(void)setNeedsReset;
-(void)updateDateFormatters;
-(void)updateFooter;
-(void)updateInterfaceWithAnimation:(BOOL)animation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(void)chatStorageDidReplaceChatSession:(id)chatStorage;
-(void)currentLocaleDidChange:(id)currentLocale;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAItemCaptionPreviewControl : UIControl {
	UILabel* _captionLabel;
	UILabel* _blendingLabel;
	BOOL _isPlaceholder;
	UIColor* _placeholderCaptionColor;
	UIColor* _captionColor;
	int _style;
}
@property(assign, nonatomic) int style;
@property(copy, nonatomic) NSString* text;
+(CGSize)preferredSizeForText:(id)text maximumWidth:(float)width;
+(id)captionLabel;
+(void)initialize;
-(void).cxx_destruct;
-(id)accessibilityHint;
-(id)accessibilityLabel;
-(void)showText:(id)text blendedWithText:(id)text2 blendAmount:(float)amount;
-(void)configureLabel:(id)label forText:(id)text;
-(void)setHighlighted:(BOOL)highlighted;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestGetContactCapability : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithJIDs:(id)jids completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface iPadNoticeViewController : WAViewController {
}
+(id)controller;
-(void)loadView;
@end

__attribute__((visibility("hidden")))
@interface WAAlertStyleTableViewCell : UITableViewCell {
	NSMutableArray* _optionViews;
	BOOL _disabled;
	unsigned _selectedAlertStyle;
	id _handler;
}
@property(copy, nonatomic) id handler;
@property(assign, nonatomic) BOOL disabled;
@property(assign, nonatomic) unsigned selectedAlertStyle;
+(int)sizeOption;
-(void).cxx_destruct;
-(void)tintColorDidChange;
-(float)rowHeight;
-(void)optionViewTapped:(id)tapped;
-(void)layoutSubviews;
-(void)updateSelectionState;
-(void)configure;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WABlackListItem : NSManagedObject {
}
@property(retain, nonatomic) NSString* jid;
@end

__attribute__((visibility("hidden")))
@interface WAPrivacyPolicy : NSObject {
	unsigned _privacySetting[3];
	int _pendingRequestId[3];
	BOOL _needRefetch;
}
+(id)stringForSetting:(unsigned)setting;
+(void)resetPolicy;
+(id)sharedPolicy;
-(void)setPrivacy:(unsigned)privacy forCategory:(unsigned)category;
-(unsigned)settingForCategory:(unsigned)category;
-(void)loadPrivacySettingsIfNeeded;
-(void)ignoreResultsOfPendingRequests;
-(void)resetValues;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAOverlayImageView : UIImageView {
	UIView* _overlayView;
}
@property(retain, nonatomic) UIColor* overlayColor;
@property(retain, nonatomic) UIImage* originalImage;
-(void).cxx_destruct;
-(void)setImage:(id)image;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WALargeVideoMessageCell : WALargeMediaMessageCell {
	UIView* _playButtonView;
	WAAutoCropImageView* _blurBackgroundView;
	CALayer* _blurMaskLayer;
	UIImageView* _circleImageView;
}
+(id)cellReuseIdentifier;
+(float)maximumImageWidth;
-(void).cxx_destruct;
-(id)accessibilityValue;
-(unsigned long long)accessibilityTraits;
-(void)performCopy;
-(BOOL)canPerformCopy;
-(void)updateBlurredImages;
-(void)setProgressViewHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAFavorite : NSManagedObject {
}
@property(retain, nonatomic) WAPhone* phone;
@property(retain, nonatomic) NSNumber* sort;
-(void)setDirty;
@end

__attribute__((visibility("hidden")))
@interface WAStatus : NSManagedObject {
}
@property(retain, nonatomic) NSNumber* encryptionV2Capable;
@property(retain, nonatomic) NSNumber* encryptionCapable;
@property(retain, nonatomic) NSNumber* callability;
@property(retain, nonatomic) WAPhone* phone;
@property(retain, nonatomic) NSDate* pictureDate;
@property(retain, nonatomic) NSString* picturePath;
@property(retain, nonatomic) NSString* pictureID;
@property(retain, nonatomic) NSString* whatsAppID;
@property(retain, nonatomic) NSString* text;
@property(retain, nonatomic) NSDate* date;
@end

__attribute__((visibility("hidden")))
@interface ChatManager : NSObject <WAWebClientDelegate, WASyncManagerDelegate, WAChatStorageDelegate, WAContactsStorageDelegate, XMPPConnectionDelegate> {
	NSMutableDictionary* _lastNotificationTimeForChat;
	WABlockBasedAlertView* _networkUnavailableAlertView;
	NSMutableDictionary* _outgoingChatStates;
	NSObject<OS_dispatch_queue>* _addressBookQueue;
	BOOL _needsReloadAddressBook;
	BOOL _needsRefreshChats;
	BOOL _isContactsSyncScheduled;
	BOOL _changeNumberIQRequired;
	BOOL _changeNumberIQInProgress;
	BOOL _usingSilentPush;
	WAWebClient* _webClient;
	NSLock* _timelockParametesLock;
	NSMutableOrderedSet* _outgoingMessagesToMerge;
	NSMutableSet* _pendingOfflineContactUpdates;
	BOOL _verificationInProgress;
	BOOL _popupMenuVisible;
	BOOL _timelocked;
	BOOL _addressBookReloadingInProgress;
	void* _sharedAddressBook;
	NSString* _registrationURL;
	NSString* _codeRequestURL;
	NSString* _sameDeviceCheckURL;
	NSString* _phoneNumber;
	NSString* _countryCode;
	NSString* _currentStatus;
	WAChatDatabaseStatsManager* _statsManager;
	WASyncManager* _syncManager;
	NSMutableArray* _statusList;
	NSMutableSet* _navigationBarHintHistory;
	NSMutableSet* _placeCache;
	NSDate* _gOverQueryLimitDate;
	CLLocation* _lastKnownLocation;
	NSDate* _timelockStartDate;
	NSDate* _timelockedUntil;
	NSDate* _timelockRetryDate;
	int _timelockReasonCode;
	NSDate* _connectionDisconnectDate;
	NSString* _statusPendingUpdate;
	double _addressBookReloadingStartTime;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) NSString* sameDeviceCheckURL;
@property(readonly, assign, nonatomic) NSString* codeRequestURL;
@property(readonly, assign, nonatomic) NSString* registrationURL;
@property(readonly, copy, nonatomic) NSString* statusPendingUpdate;
@property(readonly, assign, nonatomic) NSLock* addressBookMutationLock;
@property(readonly, assign, nonatomic) double addressBookReloadingStartTime;
@property(readonly, assign, nonatomic) BOOL addressBookReloadingInProgress;
@property(assign, nonatomic) BOOL usingSilentPush;
@property(readonly, assign, nonatomic) NSDate* connectionDisconnectDate;
@property(assign, nonatomic) int timelockReasonCode;
@property(retain, nonatomic) NSDate* timelockRetryDate;
@property(retain, nonatomic) NSDate* timelockedUntil;
@property(retain, nonatomic) NSDate* timelockStartDate;
@property(assign, nonatomic, getter=isTimelocked) BOOL timelocked;
@property(retain, nonatomic) CLLocation* lastKnownLocation;
@property(retain, nonatomic) NSDate* gOverQueryLimitDate;
@property(readonly, assign, nonatomic) NSMutableSet* placeCache;
@property(assign, nonatomic) BOOL popupMenuVisible;
@property(assign, nonatomic) BOOL verificationInProgress;
@property(readonly, assign, nonatomic) NSMutableSet* navigationBarHintHistory;
@property(readonly, assign, nonatomic) NSMutableArray* statusList;
@property(readonly, assign, nonatomic) void* sharedAddressBook;
@property(readonly, assign, nonatomic) WASyncManager* syncManager;
@property(readonly, assign, nonatomic) WAChatDatabaseStatsManager* statsManager;
@property(copy, nonatomic) NSString* currentStatus;
@property(readonly, copy, nonatomic) NSString* countryCode;
@property(readonly, copy, nonatomic) NSString* phoneNumber;
+(id)sharedManager;
-(void).cxx_destruct;
-(id)allWhatsAppablePhonesInWebClient:(id)webClient;
-(id)allBroadcastListsInWebClient:(id)webClient;
-(id)allGroupChatsInWebClient:(id)webClient;
-(id)allChatSessionsInWebClient:(id)webClient;
-(void)webClient:(id)client didSetBlockedState:(BOOL)state ofUserWithJID:(id)jid reason:(id)reason requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didRequestResendMessage:(id)message;
-(void)webClient:(id)client didCreateGroupWithSubject:(id)subject participants:(id)participants requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didChangeSubjectOfGroupWithJID:(id)jid to:(id)to requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didLeaveGroupWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didPromoteParticipantWithJID:(id)jid inChatWithJID:(id)jid3 requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didAddParticipants:(id)participants inChatWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didRemoveParticipants:(id)participants inChatWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didRequestMediaUploadForMessageID:(id)messageID inChatWithJID:(id)jid requestID:(id)anId;
-(void)webClient:(id)client didDeletePictureForChatWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(void)webClient:(id)client didSetPicture:(id)picture thumbnail:(id)thumbnail forChatWithJID:(id)jid requestInfo:(id)info completion:(id)completion;
-(unsigned)webClient:(id)client didSetMuteDate:(id)date fromMuteDate:(id)muteDate ofChatWithJID:(id)jid;
-(unsigned)webClient:(id)client didSetArchivedState:(BOOL)state ofChatWithJID:(id)jid messageID:(id)anId;
-(unsigned)webClient:(id)client didDeleteMessageIDs:(id)ids inChatWithJID:(id)jid;
-(unsigned)webClient:(id)client didClearChatWithJID:(id)jid messageID:(id)anId;
-(unsigned)webClient:(id)client didDeleteChatWithJID:(id)jid messageID:(id)anId;
-(void)webClient:(id)client didPlayIncomingMessageWithStanzaID:(id)stanzaID participant:(id)participant inChatWithJID:(id)jid;
-(void)webClient:(id)client didUpdateStatus:(id)status requestInfo:(id)info completion:(id)completion;
-(unsigned)webClient:(id)client didReadUntilMessageID:(id)anId inChatWithJID:(id)jid readCount:(int)count;
-(void)webClient:(id)client didRelayMessageStanza:(id)stanza;
-(id)webClient:(id)client chatSessionForJID:(id)jid;
-(id)webClient:(id)client existingOutgoingMessageWithStanzaID:(id)stanzaID inJID:(id)jid;
-(void)webClient:(id)client didChangeOutgoingChatStateToJID:(id)jid;
-(void)webClient:(id)client didSubscribeToJID:(id)jid;
-(id)webClient:(id)client outgoingMessagesAndPTTWithOrAfterMessageID:(id)orAfterMessageID inChatSession:(id)chatSession;
-(id)recentlyRelevantMessagesInChatsForWebClient:(id)webClient;
-(id)webClient:(id)client memberJIDsInBroadcastList:(id)broadcastList;
-(id)webClient:(id)client messagesInChatSession:(id)chatSession afterMessageID:(id)anId count:(unsigned)count countExceeded:(out BOOL*)exceeded;
-(id)webClient:(id)client JIDToChatSessionMapWithJIDs:(id)jids;
-(id)webClient:(id)client messagesInJID:(id)jid beforeMessageID:(id)anId count:(unsigned)count;
-(void)removeWebClientSessionWithData:(id)data;
-(void)beginNewWebClientSessionWithQRCode:(id)qrcode completion:(id)completion;
-(id)allSavedWebClientSessionDataObjects;
-(BOOL)hasActiveWebClientSession;
-(BOOL)isWebClientAvailable;
-(BOOL)isWebClientSupported;
-(void)callWillEnd:(id)call;
-(void)callDidBecomeActive:(id)call;
-(void)updateStatus:(id)status webClientRequestID:(id)anId completion:(id)completion;
-(void)updateStatus:(id)status;
-(void)reconnectAndLoadChatDatabaseWithCompletionHandler:(id)completionHandler;
-(void)disconnectAndUnloadChatDatabaseWithCompletionHandler:(id)completionHandler;
-(id)addContactFromABRecord:(void*)abrecord addressBook:(void*)book whatsAppID:(id)anId;
-(id)reloadDataFromABRecord:(void*)abrecord whatsAppID:(id)anId;
-(void)reloadUnknownChatsWithWAContact:(id)wacontact;
-(void)menuControllerDidHideMenu:(id)menuController;
-(void)menuControllerDidShowMenu:(id)menuController;
-(void)sendLocalNotificationForMessage:(id)message fromUser:(id)user numberOfAttempts:(int)attempts;
-(void)sendLocalNotificationForMessage:(id)message fromUser:(id)user;
-(BOOL)messageShouldBeMuted:(id)message;
-(void)saveNotificationTimeForMessage:(id)message;
-(void)changeNumberFailedWithError:(id)error;
-(void)changeNumberFinishedWithAccountInfo:(id)accountInfo;
-(void)requestChangeNumberIfNecessary;
-(void)xmppConnection:(id)connection didReceiveCallOfferReceipt:(id)receipt;
-(void)xmppConnectionDidChangeNetworkStateDuringCall:(id)xmppConnection;
-(void)xmppConnection:(id)connection didReceiveCallAck:(id)ack;
-(void)xmppConnection:(id)connection didReceiveIncomingCallStanza:(id)stanza;
-(void)xmppConnectionDidReceiveOfflineMarker:(id)xmppConnection;
-(void)xmppConnection:(id)connection callStanzaDidTimeOut:(id)callStanza;
-(void)xmppConnection:(id)connection receivedUpdatedContactCapabilities:(id)capabilities;
-(void)xmppConnection:(id)connection didReceiveMessages:(id)messages completion:(id)completion;
-(void)xmppConnection:(id)connection didReceiveOfflineReceiptWithStanzaIDs:(id)stanzaIDs fromJID:(id)jid participantJID:(id)jid4;
-(void)xmppConnection:(id)connection didReceiveServerRejectRetryForReceipt:(id)receipt registrationId:(int)anId fromJID:(id)jid participanr:(id)participanr;
-(void)xmppConnection:(id)connection didReceiveErrorReceiptForStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid4 type:(id)type;
-(void)xmppConnection:(id)connection didReceiveRetryReceiptForStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid4 registrationId:(int)anId retryCount:(int)count;
-(void)xmppConnection:(id)connection didRequestDownloadOfMediaInMessage:(id)message;
-(void)xmppConnection:(id)connection didReceiveServerErrorForOutgoingMessagesWithStanzaIDs:(id)stanzaIDs fromJID:(id)jid participantJID:(id)jid4;
-(void)xmppConnection:(id)connection didReceiveServerErrorAckForIncomingMessageWithStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid4;
-(void)xmppConnection:(id)connection accountChangedWithAccountInfo:(id)accountInfo receitInfo:(id)info offlineStorage:(BOOL)storage;
-(void)xmppConnection:(id)connection serverTimeShiftChanged:(double)changed;
-(void)xmppConnection:(id)connection contactsSyncRequest:(id)request timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection contactUpdated:(id)updated offlineStorage:(BOOL)storage;
-(void)xmppConnection:(id)connection contactRemoved:(id)removed;
-(void)xmppConnection:(id)connection contactAddedWithHash:(id)hash;
-(void)xmppConnection:(id)connection statusChanged:(id)changed;
-(void)xmppConnectionStopGroupLocationSharing:(id)sharing;
-(BOOL)xmppConnection:(id)connection startLocationSharingForGroup:(id)group duration:(int)duration;
-(void)xmppConnection:(id)connection dirtyFlagsReceived:(id)received timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection profilePictureUploadRequestFor:(id)aFor timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection profilePictureChangedFor:(id)aFor identifier:(id)identifier author:(id)author name:(id)name timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection groupSubjectChanged:(id)changed notification:(id)notification;
-(void)xmppConnection:(id)connection groupLockStateChanged:(BOOL)changed notification:(id)notification;
-(void)xmppConnection:(id)connection groupDeletedNotification:(id)notification;
-(void)xmppConnection:(id)connection participantsDemoted:(id)demoted notification:(id)notification;
-(void)xmppConnection:(id)connection participantsPromoted:(id)promoted notification:(id)notification;
-(void)xmppConnection:(id)connection userModified:(id)modified toJID:(id)jid inGroupWithJID:(id)jid4 timestamp:(id)timestamp;
-(void)xmppConnection:(id)connection groupCreated:(id)created notification:(id)notification;
-(void)xmppConnection:(id)connection participantsRemoved:(id)removed groupSubject:(id)subject notification:(id)notification;
-(void)xmppConnection:(id)connection participantsAdded:(id)added notification:(id)notification;
-(void)xmppConnection:(id)connection statusChanged:(unsigned)changed forIncomingMessageWithStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid5;
-(void)xmppConnection:(id)connection statusChanged:(unsigned)changed forOutgoingMessagesWithStanzaIDs:(id)stanzaIDs fromJID:(id)jid participantJID:(id)jid5 userData:(id)data;
-(void)xmppConnection:(id)connection chatStateChanged:(unsigned)changed forJID:(id)jid participantJID:(id)jid4;
-(void)xmppConnection:(id)connection presenceChanged:(unsigned)changed forJID:(id)jid;
-(void)xmppConnection:(id)connection presenceChanged:(unsigned)changed;
-(void)xmppConnectionDidDisconnect:(id)xmppConnection;
-(void)xmppConnectionDidNotAuthenticate:(id)xmppConnection lockDuration:(double)duration retryAfter:(double)after reasonCode:(int)code;
-(void)xmppConnectionDidAuthenticate:(id)xmppConnection;
-(void)xmppConnectionDidConnect:(id)xmppConnection;
-(void)xmppConnection:(id)connection stateChanged:(unsigned)changed;
-(void)xmppConnection:(id)connection networkStatusChanged:(unsigned)changed;
-(void)networkStatusChanged:(unsigned)changed;
-(void)showNetworkUnavailableAlert;
-(void)syncManager:(id)manager didFinishSyncWithResult:(int)result failureReason:(int)reason;
-(void)contactsStorage:(id)storage didAddOrUpdateContacts:(id)contacts didRemoveJIDs:(id)jids removeMissingJIDs:(BOOL)jids4;
-(void)contactsStorageDidFailToGenerateFavorites:(id)contactsStorage;
-(void)contactsStorageDidGenerateFavorites:(id)contactsStorage;
-(void)contactsStorageDidUpdateFavorites:(id)contactsStorage;
-(void)contactsStorageDidUpdateStatus:(id)contactsStorage;
-(void)contactsStorageDidUpdateContacts:(id)contactsStorage;
-(void)chatStorage:(id)storage didSetAllChatSessionsArchived:(BOOL)archived notifyWebClient:(BOOL)client;
-(void)chatStorage:(id)storage didUpdateArchiveStateOfChatSession:(id)chatSession notifyWebClient:(BOOL)client;
-(void)chatStorage:(id)storage didGenerateNotificationMessage:(id)message fromParticipant:(id)participant;
-(void)chatStorage:(id)storage didUpdateParticipantsOfChatSession:(id)chatSession;
-(void)chatStorageDidDeleteAllChatSessions:(id)chatStorage;
-(void)chatStorageDidClearAllChatSessions:(id)chatStorage;
-(void)chatStorage:(id)storage didDeleteMessages:(id)messages inChatSession:(id)chatSession;
-(void)chatStorage:(id)storage willDeleteMessages:(id)messages inChatSession:(id)chatSession;
-(void)chatStorage:(id)storage didDeleteAllMessagesInChatSession:(id)chatSession;
-(void)chatStorage:(id)storage willDeleteChatSession:(id)session fromWebClient:(BOOL)webClient;
-(void)chatStorage:(id)storage didUpdateChatSessions:(id)sessions;
-(void)chatStorage:(id)storage didDeleteChatSessions:(id)sessions;
-(void)chatStorage:(id)storage didInsertChatSessions:(id)sessions;
-(void)chatStorage:(id)storage mediaDownloadDidFailForMessage:(id)mediaDownload withError:(id)error autodownload:(BOOL)autodownload;
-(void)chatStorage:(id)storage mediaUploadDidFailForMessage:(id)mediaUpload;
-(void)chatStorage:(id)storage mediaUploadDidFinishForMessage:(id)mediaUpload;
-(void)didUpdateMessage:(id)message;
-(void)chatStorage:(id)storage didUpdateMessage:(id)message changedKeyPaths:(id)paths;
-(void)chatStorage:(id)storage didUpdateStatusOfMessage:(id)message from:(unsigned)from;
-(void)chatStorage:(id)storage didReceiveMessage:(id)message;
-(void)chatStorage:(id)storage didAddMessages:(id)messages notifyWebClient:(BOOL)client;
-(void)chatStorage:(id)storage didFailWithError:(id)error;
-(id)outgoingMessagesInSharedItemOutboxes;
-(void)resetTimelockRetryDate;
-(void)checkTimelockExpiration;
-(void)loadTimelockParameters;
-(void)saveTimelockParameters;
-(void)setTimelockedUntil:(id)until retryDate:(id)date withReasonCode:(int)reasonCode;
-(void)resetTimelock;
-(id)localizedChatActivityStringForJID:(id)jid;
-(id)localizedChatActivityStringForContactWithJID:(id)jid;
-(id)localizedChatActivityStringForGroupWithJID:(id)jid;
-(void)updateChatStateIfNeededForJID:(id)jid;
-(void)changeOutgoingChatState:(unsigned)state forJID:(id)jid;
-(unsigned)outgoingChatStateForJID:(id)jid;
-(void)setJID:(id)jid mutedUntil:(id)until notifyWebClient:(BOOL)client;
-(void)setJID:(id)jid mutedUntil:(id)until notifyWebClient:(BOOL)client updateAllContactPhones:(BOOL)phones;
-(void)changeNameOfList:(id)list to:(id)to;
-(void)sendReadReceiptsForUnreadMessagesFromIndex:(unsigned)index inChatSession:(id)chatSession;
-(void)markMessagesAsReadFromIndex:(unsigned)index readCount:(int)count inChatSession:(id)chatSession onWebClient:(BOOL)client allowBadgeCountDecrements:(BOOL)decrements;
-(void)markChatSession:(id)session read:(BOOL)read onWebClient:(BOOL)client allowBadgeCountDecrements:(BOOL)decrements;
-(void)prepareWAChatSession:(id)session subscribeToGroups:(BOOL)groups;
-(void)failedUploadNotifyForMessage:(id)message;
-(void)requestFreshServerProps;
-(void)saveStatusList;
-(void)deleteAllStatusMessages;
-(void)resetStatusMessages;
-(void)loadStatusMessages;
-(id)statusListFilePath;
-(id)getOrGenerateRecoveryToken:(id)token;
-(void)postPhoneNumberChangedNotification;
-(void)registerUsingAuthCode:(id)code withCompletion:(id)completion;
-(void)requestAuthCodeUsingMethod:(id)method withCompletion:(id)completion;
-(void)getNewPasswordFailedWithError:(id)error;
-(void)getNewPasswordFinishedWithResult:(id)result;
-(void)performSameDeviceCheckForPhone:(id)phone countryCode:(id)code withCompletion:(id)completion;
-(void)performSameDeviceCheckForPhone:(id)phone countryCode:(id)code rcToken:(id)token withCompletion:(id)completion;
-(void)processVerificationServerResponse:(id)response error:(id)error completion:(id)completion;
-(void)resetAuthInfo;
-(void)initializeChat;
-(void)refreshChats;
-(id)refreshChatSessionsForUnknownContacts:(id)unknownContacts;
-(id)allWhatsAppIDsInChatSessions:(id)chatSessions;
-(id)refreshChatSessionsForKnownContacts:(id)knownContacts;
-(id)refreshChatSessionsAfterAddressBookReloadWithContext:(id)context;
-(id)allABIDsInChatSessions:(id)chatSessions;
-(BOOL)findContactInContext:(id)context forChatSession:(id)chatSession;
-(void)reset;
-(void)reloadFavorites;
-(void)enableContactsSync;
-(void)reloadAddressBook;
-(void)reloadAddressBookIfNeeded;
-(void)setNeedsReloadAddressBook;
-(id)storage;
-(id)connection;
-(void)setUserInteractionEnabled;
-(id)mapsURLsForAddress:(id)address;
-(id)mapsURLsForCoordinate:(XXStruct_gLbvpC)coordinate placeName:(id)name;
-(id)routeURLsForSourceLocation:(id)sourceLocation destLocation:(id)location;
-(BOOL)allowServicePurchase;
-(id)localizedServicePrice;
-(id)serviceExpirationDate;
-(unsigned)accountType;
-(unsigned)serviceType;
-(id)fullPhoneNumber:(BOOL)number;
-(id)fullPhoneNumber;
-(void)setCountryCode:(id)code phoneNumber:(id)number;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WANotificationWindow : UIWindow {
	UIView* _backgroundView;
	UIVisualEffectView* _backgroundBlurView;
	BOOL _useStaticBlurBackground;
	BOOL _useLiveBlurBackground;
	UITapGestureRecognizer* _tapGestureRecognizer;
	BOOL _forcedToHide;
	BOOL _active;
	id<WANotificationWindowDelegate> _notificationDelegate;
	NSString* _contactJID;
	NSString* _stanzaID;
	NSMutableArray* _messageQueue;
}
@property(retain, nonatomic) NSMutableArray* messageQueue;
@property(assign, getter=isActive) BOOL active;
@property(assign, nonatomic) BOOL forcedToHide;
@property(assign, nonatomic) __weak id<WANotificationWindowDelegate> delegate;
@property(copy, nonatomic) NSString* stanzaID;
@property(copy, nonatomic) NSString* contactJID;
+(id)sharedWindow;
-(void).cxx_destruct;
-(BOOL)_canAffectStatusBarAppearance;
-(void)applicationWillResignActive:(id)application;
-(void)contentViewAnyTouch:(id)touch;
-(void)contentViewTouchUp:(id)up;
-(void)handleTapGesture:(id)gesture;
-(void)closeAction:(id)action;
-(void)resizeToCurrentStatusBarBounds;
-(void)rotateToStatusBarOrientation;
-(void)didChangeStatusBarFrame:(id)frame;
-(void)show;
-(void)hideTemporarily;
-(void)hideAnimated:(BOOL)animated;
-(void)hideIfEmpty;
-(void)removeContentViewsBelowView:(id)view;
-(void)removeContentView:(id)view withAnimationDuration:(double)animationDuration;
-(void)removeContentView:(id)view;
-(void)showNextMessage;
-(void)postWAMessage:(id)message duration:(double)duration animated:(BOOL)animated;
-(void)postWAMessage:(id)message duration:(double)duration;
-(void)configureLegacyContentView:(id)view withChatName:(id)chatName senderName:(id)name messageText:(id)text profilePicture:(id)picture;
-(void)configureContentView:(id)view withChatName:(id)chatName senderName:(id)name messageText:(id)text profilePicture:(id)picture;
-(id)addCloseButtonToContentView:(id)contentView;
-(id)addContentViewForWAMessage:(id)wamessage profilePicture:(id)picture;
-(id)blurredBackgroundImage;
-(id)rootViewController;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface CustomLabelInputViewContoller : WATableViewController <UITextFieldDelegate> {
	UITextField* _textField;
	UITableViewCell* _textFieldCell;
	id<CustomLabelInputViewContollerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<CustomLabelInputViewContollerDelegate> delegate;
-(void).cxx_destruct;
-(void)textFieldValueChanged:(id)changed;
-(void)saveAction:(id)action;
-(void)cancelAction:(id)action;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)validateUserInput;
-(id)init;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WAWarningViewController : WAVisibilityTrackingViewController {
	UITableView* _tableView;
	UIColor* _warningTextColor;
	UIColor* _warningBackgroundColor;
	WAWarningView* _warningView;
}
@property(readonly, assign, nonatomic) float topLayoutGuideLengthIfAvailable;
@property(retain, nonatomic) WAWarningView* warningView;
@property(retain, nonatomic) UIColor* warningBackgroundColor;
@property(retain, nonatomic) UIColor* warningTextColor;
@property(readonly, assign, nonatomic) NSString* warningText;
@property(retain, nonatomic) UITableView* tableView;
-(void).cxx_destruct;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)refreshWarningViewLayout;
-(void)viewDidLayoutSubviews;
-(BOOL)prepareTableViewForFrame:(CGRect)frame;
-(CGRect)frameForWarningView:(id)warningView visible:(BOOL)visible;
-(void)animate:(BOOL)animate actions:(id)actions completion:(id)completion;
-(void)hideWarningView;
-(void)showWarningViewAnimated:(BOOL)animated;
-(void)removeWarningView;
-(void)addWarningView;
-(void)setWarningText:(id)text withAction:(id)action;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WAPttPlayer : NSObject <AVAudioPlayerDelegate> {
	WAChatCellData* _currentInstanceVoiceCellData;
	AVAudioPlayer* _pttAudioPlayer;
	NSTimer* _pttAudioPlayerUpdateTimer;
	unsigned _pttAudioPlayerUpdateTimerNumberOfTimersFired;
	double _pttStartTime;
	UIView* _lowVolumeHintView;
	BOOL _lowVolumeHintViewAnimating;
	BOOL _proximityMonitoringRequested;
	id _pttAudioActivity;
	NSDate* _allowAutorotateTime;
	OpaqueAudioQueue* _audioQueueRef;
	AudioQueueBuffer* _audioQueueBufferRefs[3];
	BOOL _playerIsAboutToPlay;
	double _pttDuration;
	opusInfo _opusInfo;
	id<WAPttPlayerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAPttPlayerDelegate> delegate;
-(void).cxx_destruct;
-(void)audioSessionRouteChanged:(id)changed;
-(void)audioSessionVolumeChanged:(id)changed;
-(void)audioPlayerEndInterruption:(id)interruption;
-(void)audioPlayerBeginInterruption:(id)interruption;
-(void)audioPlayerDecodeErrorDidOccur:(id)audioPlayerDecodeError error:(id)error;
-(void)audioPlayerDidFinishPlaying:(id)audioPlayer successfully:(BOOL)successfully;
-(void)handleAudtionSessionInterrupted;
-(void)audioSessionInterrupted:(id)interrupted;
-(void)proximityStateChanged:(id)changed;
-(void)routeAudioPlaybackAccordingProximitySensor;
-(double)currentTime;
-(void)delayDeactivateAudioSession;
-(void)checkUpdateProximityMonitoringState;
-(void)updateLayoutForCurrentOrientation;
-(void)showLowVolumeHint;
-(void)positionLowVolumeHint;
-(void)dismissLowVolumeView:(BOOL)view;
-(void)updatePushToTalkPlayProgress;
-(BOOL)playCellData:(id)data;
-(void)finish;
-(void)pausePTTPlayer;
-(void)handlePlayerDidFinishPlaying;
-(void)cleanupOpusState;
-(void)stopPlayback;
-(BOOL)rotationNotDesired;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPReceiptStanza : XMPPStanza {
}
@property(assign, nonatomic) unsigned type;
+(unsigned)typeForString:(id)string;
+(id)stringForType:(unsigned)type;
+(id)stringsForTypes;
-(id)log;
-(id)initWithType:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface WAChatButton : UIButton {
	UIActivityIndicatorView* _spinner;
	BOOL _backgroundHidden;
}
@property(assign, nonatomic, getter=isSpinnerHidden) BOOL spinnerHidden;
@property(assign, nonatomic) BOOL backgroundHidden;
+(void)initialize;
+(id)button;
-(void).cxx_destruct;
-(void)tintColorDidChange;
-(void)configureForLegacyOS;
-(void)configure;
-(void)commonInit;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMediaDataGridPresentationController : WAMediaDataPresentationController {
	NSMutableArray* _imageViews;
}
-(void).cxx_destruct;
-(CGRect)frameForIndex:(unsigned)index count:(unsigned)count inRect:(CGRect)rect;
-(unsigned)indexAtPointInView:(CGPoint)view;
-(void)transitionFromIndex:(unsigned)index toCurrentIndexWithAnimation:(BOOL)animation completion:(id)completion;
-(void)viewDidLayoutSubviews;
-(void)didUpdateImageAtIndex:(unsigned)index completed:(BOOL)completed;
-(void)cellDataMessagesDidChange;
-(id)currentImageView;
-(id)initWithChatCellData:(id)chatCellData;
@end

__attribute__((visibility("hidden")))
@interface WAVideoScrubber : UIView <WAVideoScrubberTrimmerDelegate, WAVideoScrubberThumbnailBarDataSource, UIToolbarDelegate> {
	WAVideoScrubberTrimmer* _trimmer;
	UIToolbar* _blurView;
	WAGradientView* _bottomShadowView;
	WAVideoScrubberThumbnailBar* _thumbnailBar;
	WAVideoScrubberSloMoBar* _sloMoBar;
	BOOL _slowMotionEnabled;
	BOOL _trimmingEnabled;
	BOOL _isTrimmingVideo;
	BOOL _isAdjustingSlowMotion;
	BOOL _thumbnailingEnabled;
	id<WAVideoScrubberDelegate> _delegate;
	XXStruct_pwHToB _maximumDuration;
	XXStruct_pwHToB _assetDuration;
	XXStruct_pwHToB _currentTime;
	XXStruct_yD8eWC _trimmedTimeRange;
	XXStruct_yD8eWC _slowMotionTimeRange;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSMutableDictionary* thumbnailCache;
@property(assign, nonatomic, getter=isThumbnailingEnabled) BOOL thumbnailingEnabled;
@property(assign, nonatomic, getter=isBottomShadowHidden) BOOL bottomShadowHidden;
@property(readonly, assign, nonatomic) float effectiveHeight;
@property(assign, nonatomic, getter=isContentHidden) BOOL contentHidden;
@property(readonly, assign, nonatomic) BOOL isAdjustingSlowMotion;
@property(readonly, assign, nonatomic) BOOL isTrimmingVideo;
@property(assign, nonatomic) XXStruct_pwHToB currentTime;
@property(assign, nonatomic) XXStruct_yD8eWC slowMotionTimeRange;
@property(assign, nonatomic) XXStruct_yD8eWC trimmedTimeRange;
@property(assign, nonatomic) BOOL trimmingEnabled;
@property(assign, nonatomic) BOOL slowMotionEnabled;
@property(readonly, assign, nonatomic) XXStruct_pwHToB assetDuration;
@property(readonly, assign, nonatomic) XXStruct_pwHToB maximumDuration;
@property(assign, nonatomic) __weak id<WAVideoScrubberDelegate> delegate;
+(float)preferredHeight;
-(void).cxx_destruct;
-(void)videoScrubberTrimmerDidEndDraggingThumb:(id)videoScrubberTrimmer;
-(void)videoScrubberTrimmerDidChangeThumbValue:(id)videoScrubberTrimmer;
-(void)videoScrubberTrimmerDidBeginDraggingThumb:(id)videoScrubberTrimmer;
-(void)videoScrubberPrecisionRangeSlider:(id)slider mayPresentRangeFrom:(float)from to:(float)to;
-(void)videoScrubberPrecisionRangeSlider:(id)slider willPresentRangeFrom:(float)from to:(float)to around:(float)around animationDuration:(double)duration;
-(void)videoScrubberPrecisionRangeSliderDidEndDraggingHandle:(id)videoScrubberPrecisionRangeSlider;
-(void)videoScrubberPrecisionRangeSliderDidDragHandle:(id)videoScrubberPrecisionRangeSlider;
-(void)videoScrubberPrecisionRangeSliderDidBeginDraggingHandle:(id)videoScrubberPrecisionRangeSlider;
-(CGSize)videoScrubberThumbnailBarThumbnailAspectRatio:(id)ratio;
-(void)videoScrubberThumbnailBar:(id)bar videoFramesAtTimes:(id)times size:(CGSize)size tolerance:(XXStruct_pwHToB)tolerance block:(id)block;
-(void)setTimeRange:(XXStruct_yD8eWC)range ofSlider:(id)slider;
-(void)configureWithAssetDuration:(XXStruct_pwHToB)assetDuration maximumDuration:(XXStruct_pwHToB)duration;
-(void)setThumbHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setNeedsRegenerateThumbnails;
-(void)layoutSubviews;
-(int)positionForBar:(id)bar;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAPendingMessageInfo : NSObject {
	NSString* _stanzaId;
	NSString* _chatJid;
	NSString* _participant;
}
@property(retain, nonatomic) NSString* participant;
@property(retain, nonatomic) NSString* chatJid;
@property(retain, nonatomic) NSString* stanzaId;
+(id)outgoingMessageForStanzaId:(id)stanzaId chatJid:(id)jid participant:(id)participant;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAEndToEndEncryptionManager : NSObject <WAAxolotlStoreDelegate> {
	WAAxolotlCryptoProvider* _cryptoProvider;
	axolotl_store_context* store_context;
	ratchet_identity_key_pair* _identityKeyPair;
	NSObject<OS_dispatch_group>* _registrationDispatchGroup;
	BOOL _needServerRegistration;
	BOOL _digestCheckPending;
	NSMutableSet* _pendingKeyRequestJids;
	NSMutableDictionary* _pendingJidsPerStanza;
	NSMutableDictionary* _pendingStanzasPerJid;
	WAAxolotlStore* _axolotlStore;
	unsigned _registrationId;
	axolotl_context* _globalContext;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign) axolotl_context* globalContext;
@property(assign) unsigned registrationId;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)axolotlFailedWithError:(id)error;
-(BOOL)createIdentity;
-(BOOL)loadIdentity;
-(void)regenerateIdentity;
-(void)clearIdentity;
-(id)keychainIdentityQuery;
-(void)xmppConnectionStateDidChange:(id)xmppConnectionState;
-(void)serverRejectRetryForReceipt:(id)receipt registrationId:(int)anId fromJID:(id)jid participanr:(id)participanr;
-(void)requestNewKeyForJid:(id)jid;
-(void)checkPreKeysCount;
-(void)sendMorePreKeys;
-(void)clearSessionForGroup:(id)group;
-(void)checkServerDigest;
-(void)registerWithServerWithCompletion:(id)completion;
-(void)endProcessingIncomingMessages;
-(void)beginProcessingIncomingMessages;
-(void)didReceiveRetryReceiptForStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid3 registrationId:(int)anId retryCount:(int)count;
-(void)retrySendMessageWithStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid3 retryCount:(int)count;
-(void)checkSessionForJID:(id)jid participant:(id)participant registrationId:(int)anId;
-(id)e2eMessageForMessage:(id)message;
-(void)sendE2eMessage:(id)message forParticipant:(id)participant;
-(id)pendingMessagesForJid:(id)jid;
-(void)addPendingMessage:(id)message forParticipant:(id)participant toResendQueueForJid:(id)jid;
-(BOOL)shouldEncryptMessage:(id)message;
-(unsigned)sessionStatusForJid:(id)jid;
-(id)e2eMessageForMessage:(id)message forParticipant:(id)participant errorReason:(int*)reason;
-(id)decryptedE2eMessageForVersion:(int)version jid:(id)jid participant:(id)participant stanzaId:(id)anId cypherType:(id)type encryptedData:(id)data retryCount:(int)count errorReason:(int*)reason;
-(id)hashForParticipants:(id)participants;
-(void)generatePreKeys;
-(long long)recepientIdForJid:(id)jid;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAContactPropertyTextField : UITextField <UITextFieldDelegate> {
	WAGradientView* _verticalSeparator;
	UIView* _bottomBorder;
	BOOL _showLeftBorder;
	BOOL _showBottomBorder;
	NSString* _value;
	id<WAContactPropertyTextFieldDelegate> _textFieldDelegate;
	UIEdgeInsets _textInset;
	UIEdgeInsets _bottomSeparatorInset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAContactPropertyTextFieldDelegate> textFieldDelegate;
@property(assign, nonatomic) UIEdgeInsets bottomSeparatorInset;
@property(assign, nonatomic) BOOL showBottomBorder;
@property(assign, nonatomic) BOOL showLeftBorder;
@property(assign, nonatomic) UIEdgeInsets textInset;
@property(copy, nonatomic) NSString* value;
-(void).cxx_destruct;
-(void)textFieldValueChanged:(id)changed;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)setPlaceholder:(id)placeholder;
-(void)layoutSubviews;
-(CGRect)rightViewRectForBounds:(CGRect)bounds;
-(CGRect)clearButtonRectForBounds:(CGRect)bounds;
-(CGRect)editingRectForBounds:(CGRect)bounds;
-(CGRect)textRectForBounds:(CGRect)bounds;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAContactPhoneNumberTextField : WAContactPropertyTextField {
}
+(BOOL)isStringADecimalNumber:(id)number;
+(id)stringByKeepingOnlyDecimalDigits:(id)digits;
+(void)initialize;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(NSRange)expandRange:(NSRange)range inTextFieldToIncludeNumber:(id)includeNumber;
-(unsigned)endPositionOfPrefix:(id)prefix inFormattedString:(id)formattedString;
-(void)setText:(id)text;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAContactNameLabel : UILabel {
	NSString* _originalText;
	NSAttributedString* _normalText;
	NSAttributedString* _highlightedText;
	BOOL _reverseNameSearch;
	NSString* _highlightedPart;
	UIFont* _nameFont;
}
@property(assign, nonatomic) BOOL reverseNameSearch;
@property(retain, nonatomic) UIFont* nameFont;
@property(copy, nonatomic) NSString* highlightedPart;
@property(copy, nonatomic) NSString* text;
-(void).cxx_destruct;
-(void)recreateAttrubutedString;
-(void)setText:(id)text highlightedPart:(id)part;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setHighlightedTextColor:(id)color;
-(void)setTextColor:(id)color;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAURLTaskData : NSObject <NSSecureCoding, NSCopying> {
	BOOL _suppressNotifications;
	BOOL _needsBackgroundTaskAssertion;
	NSString* _identifier;
	int _retryCount;
	WAURLRequestConfig* _requestConfig;
	WAURLTaskStats* _stats;
	unsigned _backgroundTaskID;
}
@property(assign, nonatomic) unsigned backgroundTaskID;
@property(assign, nonatomic) BOOL needsBackgroundTaskAssertion;
@property(assign, nonatomic) BOOL suppressNotifications;
@property(retain, nonatomic) WAURLTaskStats* stats;
@property(retain, nonatomic) WAURLRequestConfig* requestConfig;
@property(assign, nonatomic) int retryCount;
@property(readonly, copy, nonatomic) NSString* shortIdentifier;
@property(copy, nonatomic) NSString* identifier;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(id)request;
-(id)modifyRequestConfigForRetry:(id)retry bytesReceived:(long long)received error:(id)error;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAURLDownloadTaskData : WAURLTaskData {
	NSURL* _fileURL;
	NSData* _resumeData;
}
@property(retain, nonatomic) NSData* resumeData;
@property(copy, nonatomic) NSURL* fileURL;
-(void).cxx_destruct;
-(void)transformDownloadedFileAtURLIfNeeded:(id)urlifNeeded completion:(id)completion;
-(void)validateDownloadedFileAtURL:(id)url forTask:(id)task completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAMMSDownloadTaskData : WAURLDownloadTaskData {
	NSString* _originalHost;
	NSURL* _transformedURL;
	BOOL _autodownload;
	NSURL* _fallbackRemoteURL;
}
@property(readonly, assign, nonatomic, getter=isAutodownload) BOOL autodownload;
@property(readonly, copy, nonatomic) NSURL* fallbackRemoteURL;
-(void).cxx_destruct;
-(void)calculateHashOfFileAtPath:(id)path completion:(id)completion;
-(void)transformDownloadedFileAtURLIfNeeded:(id)urlifNeeded completion:(id)completion;
-(void)validateDownloadedFileAtURL:(id)url forTask:(id)task completion:(id)completion;
-(id)modifyRequestConfigForRetry:(id)retry bytesReceived:(long long)received error:(id)error;
-(void)dealloc;
-(id)initWithMessage:(id)message autodownload:(BOOL)autodownload;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAAnimatedCancelLabel : UIView {
	UILabel* _label;
	UIImageView* _slideArrow;
	BOOL _animating;
	CALayer* _maskLayer;
	BOOL _flipped;
}
@property(copy, nonatomic) NSString* text;
+(id)labelFontOfSize:(float)size;
+(float)defaultFontSize;
-(void).cxx_destruct;
-(void)stopAnimating;
-(void)startAnimating;
-(BOOL)isAnimating;
-(void)layoutSubviews;
-(id)initWithHorizontallyFlipped:(BOOL)horizontallyFlipped;
@end

__attribute__((visibility("hidden")))
@interface WARestartDeviceHelperViewController : UIViewController {
	NSString* _explanation;
	UIView* _contentView;
	UIView* _phoneImageContainer;
	UIImageView* _imageViewPhone;
	UIImageView* _imageViewRestartArrow;
	NSLayoutConstraint* _topMarginConstraint;
	UILabel* _labelTitle;
	UILabel* _labelDescription;
	UILabel* _labelActionDescription;
	UIButton* _buttonClose;
}
@property(retain, nonatomic) UIButton* buttonClose;
@property(retain, nonatomic) UILabel* labelActionDescription;
@property(retain, nonatomic) UILabel* labelDescription;
@property(retain, nonatomic) UILabel* labelTitle;
@property(retain, nonatomic) NSLayoutConstraint* topMarginConstraint;
@property(retain, nonatomic) UIImageView* imageViewRestartArrow;
@property(retain, nonatomic) UIImageView* imageViewPhone;
@property(retain, nonatomic) UIView* phoneImageContainer;
@property(retain, nonatomic) UIView* contentView;
@property(copy, nonatomic) NSString* explanation;
+(id)controllerWithTitle:(id)title explanation:(id)explanation;
-(void).cxx_destruct;
-(void)configureRestartImages;
-(void)closeAction:(id)action;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestDeleteAccount : XMPPRequest {
}
-(id)initWithWithFeedback:(id)feedback completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestNormalizeNumber : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithPhoneNumber:(id)phoneNumber countryCode:(id)code completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestChangeNumber : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithUsername:(id)username password:(id)password completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestServicePayment : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithReceipt:(id)receipt completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAContactSocialEditingCell : WAContactMultiValueEditingCell {
}
-(void)contactPropertyTextFieldValueChanged:(id)changed;
-(void)reconfigure;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAAutoscrollingLabel : UILabel {
	BOOL _scrollEnabled;
	BOOL _needsToScroll;
	BOOL _isIniting;
	id<WAAutoScrollingLabelDelegate> _delegate;
	float _pointsPerSecond;
	UILabel* _scrollableLabel;
	float _scrollableLabelTextWidth;
	NSTimer* _noScrollTimer;
}
@property(assign, nonatomic) __weak NSTimer* noScrollTimer;
@property(assign, nonatomic) BOOL isIniting;
@property(assign, nonatomic) BOOL needsToScroll;
@property(assign, nonatomic) float scrollableLabelTextWidth;
@property(retain, nonatomic) UILabel* scrollableLabel;
@property(assign, nonatomic) float pointsPerSecond;
@property(assign, nonatomic, getter=isScrollEnabled) BOOL scrollEnabled;
@property(readonly, assign, nonatomic) double scrollDuration;
@property(readonly, assign, nonatomic) BOOL textRequiresScrolling;
@property(assign, nonatomic) __weak id<WAAutoScrollingLabelDelegate> delegate;
-(void).cxx_destruct;
-(void)resizeScrollableLabelAndStartScrolling;
-(void)resizeScrollableLabel;
-(BOOL)startScrollingIfNecessary;
-(float)scrollableLabelWidth;
-(float)wa_baselineOffsetFromBottom;
-(int)textAlignment;
-(void)setTextAlignment:(int)alignment;
-(BOOL)isHighlighted;
-(void)setHighlighted:(BOOL)highlighted;
-(id)highlightedTextColor;
-(void)setHighlightedTextColor:(id)color;
-(int)baselineAdjustment;
-(void)setBaselineAdjustment:(int)adjustment;
-(CGSize)shadowOffset;
-(void)setShadowOffset:(CGSize)offset;
-(id)shadowColor;
-(void)setShadowColor:(id)color;
-(id)textColor;
-(void)setTextColor:(id)color;
-(int)lineBreakMode;
-(void)setLineBreakMode:(int)mode;
-(id)backgroundColor;
-(void)setBackgroundColor:(id)color;
-(id)font;
-(void)setFont:(id)font;
-(int)numberOfLines;
-(void)setNumberOfLines:(int)lines;
-(id)attributedText;
-(void)setAttributedText:(id)text;
-(id)text;
-(void)setText:(id)text;
-(void)didMoveToWindow;
-(void)setBounds:(CGRect)bounds;
-(void)setFrame:(CGRect)frame;
-(CGSize)intrinsicContentSize;
-(void)noNeedToScroll;
-(id)copyWithZone:(NSZone*)zone;
-(void)setup;
-(id)initWithCoder:(id)coder;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithAutoscrollingLabel:(id)autoscrollingLabel;
@end

__attribute__((visibility("hidden")))
@interface WAWordStemmer : NSObject {
	sb_stemmer* _stemmer;
}
+(id)stemmerForText:(id)text;
+(id)stemmerForLanguage:(id)language;
+(id)stemmerForCurrentLanguage;
+(void)initialize;
-(id)stemForWord:(id)word;
-(void)dealloc;
-(id)initWithStemmer:(sb_stemmer*)stemmer;
@end

__attribute__((visibility("hidden")))
@interface Logger : NSObject {
	unsigned _counter;
	NSDateFormatter* _dateFormatter;
	NSFileHandle* _fileHandle;
	NSDate* _creationDate;
	NSString* _activeLogFilePath;
	NSString* _previousLogFilePath;
	NSObject<OS_dispatch_io>* _stdErrChannel;
	NSPipe* _stdErrPipe;
	int _level;
	NSObject<OS_dispatch_queue>* _logQueue;
}
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* logQueue;
@property(assign, nonatomic) int level;
+(id)colorFormatStringForLevel:(int)level;
+(id)logLevelToString:(int)string;
+(id)header;
+(id)logFilePrefix;
+(id)sharedLogsDirectory;
+(id)mainLogsDirectory;
+(id)currentLogsDirectory;
+(id)sharedLogger;
-(void).cxx_destruct;
-(void)logRawString:(id)string;
-(void)logToConsole:(id)console;
-(void)waitUntilDone;
-(void)fetchCompressedDataFromActiveLog:(BOOL)activeLog footnote:(id)footnote queue:(id)queue completion:(id)completion;
-(void)archiveLogsWithCompletionHandler:(id)completionHandler;
-(void)removeExpiredLogsInDirectory:(id)directory;
-(void)removeExpiredLogsAsync;
-(void)prepareOutputFileHandleStartingNewFileIfNeeded:(BOOL)needed;
-(void)write:(int)write format:(id)format;
-(void)writeLogFromStdErr:(id)stdErr;
-(id)logLineWithLevel:(int)level text:(id)text inColor:(BOOL)color;
-(id)logLineWithLevel:(int)level inColor:(BOOL)color format:(id)format;
-(id)searchLogsAtPath:(id)path fileManager:(id)manager;
-(id)format:(id)format level:(int)level applicationState:(id)state queueName:(id)name threadID:(int)anId inColor:(BOOL)color;
-(void)createLogFile;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface DebugViewController : WATableViewController <HostSelectorDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)checkDatabaseIntegrity;
-(void)dismissDatabaseStatsViewController;
-(void)hostSelectorDidCancel:(id)hostSelector;
-(void)hostSelector:(id)selector didEnterHostname:(id)hostname;
-(void)xmppConnectionStateDidChange:(id)xmppConnectionState;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)selectPlaceSource;
-(void)rotateFieldStats;
-(void)unmigrateData;
-(void)askForCallRecordingDelete;
-(void)viewArchivedChats;
-(void)showDebugFullTextSearch;
-(void)simulateExpiredBuild;
-(void)simulateUpgrade;
-(void)requestAllListsFromServer;
-(void)debugMedia;
-(void)deleteOrphanedMessages;
-(void)resetBackupBadgeDate;
-(void)resetBackupDate;
-(void)deleteiCloudBackup;
-(void)debugRestore;
-(void)backupStatistics;
-(void)logiCloudFiles;
-(void)evictiCloudFiles;
-(void)askForURL;
-(void)debugCrash;
-(void)removeRecoveryTokenFile;
-(void)resetRecoveryToken;
-(void)showLowStorage;
-(void)resetIdentity;
-(void)resetPassword;
-(void)resetContacts;
-(void)showFileBrowserInCloud;
-(void)showFileBrowserInAppGroup;
-(void)showFileBrowserInMainContainer;
-(void)showHostPicker;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPCallStanza : XMPPStanza {
	unsigned _type;
}
@property(assign, nonatomic) unsigned type;
+(unsigned)typeForString:(id)string;
+(id)stringForType:(unsigned)type;
+(id)stringsForTypes;
-(id)initWithFromJID:(id)jid toJID:(id)jid2 type:(unsigned)type;
@end

__attribute__((visibility("hidden")))
@interface _WAContainerScrollViewHelper : NSObject <UIScrollViewDelegate> {
	id<_WAContainerScrollViewDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<_WAContainerScrollViewDelegate> delegate;
-(void).cxx_destruct;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewDidScroll:(id)scrollView;
@end

__attribute__((visibility("hidden")))
@interface WAMessageDetailsViewController : WAChatBaseViewController <UIGestureRecognizerDelegate, WADetailsTableSizeObzerver, _WAContainerScrollViewDelegate, WANavigationControllerPopFromAnimating> {
	UITableView* _tableViewDetails;
	UIView* _messagesTableBorder;
	WAConversationHeaderView* _headerView;
	id<UITableViewDataSource, UITableViewDelegate, WAMessageDetailsTableUpdateDelegate> _detailsTableDelegate;
	UIScrollView* _containerScrollView;
	_WAContainerScrollViewHelper* _containerScrollViewHelper;
	BOOL _needToSetInitialPosition;
	WAMessage* _message;
	BOOL _detailsTableUpdateScheduled;
	NSString* _dateString;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)openMediaViewerFromMessageCell:(id)messageCell;
-(void)chatStorageDidDeleteMessages:(id)chatStorage;
-(void)messageUpdated:(id)updated;
-(void)containerScrollViewDidEndDecelerating:(id)containerScrollView;
-(void)containerScrollViewDidEndDragging:(id)containerScrollView willDecelerate:(BOOL)decelerate;
-(void)containerScrollViewDidScroll:(id)containerScrollView;
-(void)updateViewPositions;
-(void)setNeedsSizeUpdate;
-(id)messageDateStringFromDate:(id)date;
-(void)updateDetailsTable;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)wa_fontSizeDidChange;
-(void)updateLayoutForCurrentOrientation;
-(BOOL)shouldAutorotate;
-(BOOL)usesScreenEdgePanGestureRecognizerForCustomPopTransition;
-(id)popFromAnimationIdentifier;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithMessage:(id)message;
@end

__attribute__((visibility("hidden")))
@interface WAFieldStats : NSObject {
	sFILE* _file;
	long _fileOffset;
	int _recordCount;
	unsigned _timestamp;
	int _missedUpdateCount;
	BOOL _rotatedExists;
	BOOL _isInsideEvent;
	BOOL _isNew;
	NSMutableArray* _cachedRecords;
	NSObject<OS_dispatch_queue>* _queue;
}
+(id)sharedManager;
-(void).cxx_destruct;
-(void)preCacheKnownDimensions;
-(BOOL)addRecordToCache:(id)cache;
-(id)findCachedRecord:(int)record uniqueId:(unsigned)anId;
-(BOOL)rotateFile;
-(void)appendRecord:(id)record;
-(void)postWrite;
-(BOOL)preWrite:(id)write;
-(int)writeRecord:(id)record;
-(int)writeRecord:(id)record offset:(long)offset;
-(void)closeFieldStatsFile;
-(BOOL)openFieldStatsFile;
-(BOOL)createFile;
-(BOOL)openFile;
-(int)readRecordFromFile:(sFILE*)file record:(out id*)record;
-(id)rotatedFileName;
-(id)fileName;
-(id)fieldStatsDirectory;
-(BOOL)isFileExists:(id)exists;
-(unsigned)unixTimestamp;
-(void)numericRecord:(unsigned)record type:(int)type value:(double)value;
-(void)stringRecord:(unsigned)record stringValue:(id)value;
-(double)qNaN;
-(void)event:(int)event records:(id)records;
-(void)metric:(int)metric timer:(double)timer;
-(void)metric:(int)metric gauge:(double)gauge;
-(void)metric:(int)metric increment:(int)increment;
-(void)clearNumericDimension:(int)dimension;
-(void)clearStringDimension:(int)dimension;
-(void)dimension:(int)dimension numericValue:(double)value;
-(void)dimension:(int)dimension stringValue:(id)value;
-(void)clearStatsData;
-(id)statsData;
-(void)rotateFieldstatsFileAndUpload;
-(BOOL)isReadyToSend;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAPrekey : NSManagedObject {
}
@property(assign, nonatomic) int keyId;
@property(retain, nonatomic) NSData* keyData;
@end

__attribute__((visibility("hidden")))
@interface WAAutoCropImageView : UIImageView {
	float _cropInset;
	CGPoint _focusPoint;
}
@property(readonly, assign, nonatomic) CGRect contentsRect;
@property(assign, nonatomic) float cropInset;
@property(assign, nonatomic) CGPoint focusPoint;
-(void)updateContentsRect;
-(id)actionForLayer:(id)layer forKey:(id)key;
-(void)setFrame:(CGRect)frame;
-(void)setBounds:(CGRect)bounds;
-(void)setImage:(id)image;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAGroupMember : NSManagedObject {
	BOOL _blocked;
	NSString* _statusMessage;
}
@property(assign, nonatomic) BOOL blocked;
@property(retain, nonatomic) NSString* statusMessage;
@property(retain, nonatomic) NSNumber* senderKeySent;
@property(retain, nonatomic) NSNumber* isAdmin;
@property(retain, nonatomic) WAChatSession* chatSession;
@property(retain, nonatomic) NSNumber* isActive;
@property(retain, nonatomic) NSString* firstName;
@property(retain, nonatomic) NSString* contactName;
@property(retain, nonatomic) NSNumber* contactABID;
@property(retain, nonatomic) NSString* memberJID;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WADropDownAlertView : UIView {
	UIView* _contentView;
	UILabel* _messageLabel;
	UIButton* _dismissButton;
	BOOL _dismissed;
	BOOL _active;
	BOOL _tucked;
	unsigned _alertStyle;
	id<WADropDownAlertViewDelegate> _delegate;
	unsigned _index;
	int _presentationID;
	double _dismissAfter;
}
@property(assign, nonatomic) int presentationID;
@property(assign, nonatomic) unsigned index;
@property(assign, nonatomic) BOOL tucked;
@property(assign, nonatomic) BOOL active;
@property(assign, nonatomic) BOOL dismissed;
@property(assign, nonatomic) __weak id<WADropDownAlertViewDelegate> delegate;
@property(assign, nonatomic) double dismissAfter;
@property(assign, nonatomic) unsigned alertStyle;
@property(copy, nonatomic) NSString* text;
-(void).cxx_destruct;
-(void)dismiss:(id)dismiss;
-(CGSize)preferredSizeForWidth:(float)width;
-(void)layoutSubviews;
-(void)updateAppearance;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAUploadedBackup : WABackupInformation {
	unsigned _loadingCount;
	BOOL _cloudLoading;
	NSString* _path;
	NSObject<OS_dispatch_queue>* _captureQueue;
}
@property(assign, nonatomic, getter=isCloudLoading) BOOL cloudLoading;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* captureQueue;
@property(retain) NSString* path;
@property(readonly, assign, nonatomic, getter=isLoading) BOOL loading;
-(void).cxx_destruct;
-(void)resetCapturedUploadWithCompletion:(id)completion;
-(void)captureUploadWithPath:(id)path sizeHint:(id)hint;
-(void)applyHintIfNeeded:(id)needed;
-(void)captureUploadWithPath:(id)path;
-(void)updateUploadWithPath:(id)path sizeHint:(unsigned long long)hint;
-(void)copyFromURL:(id)url;
-(void)updateCloudLoadedFromManager:(id)manager;
-(void)cloudAccountLoadOverrideExpired:(id)expired;
-(void)cloudAccountChanged:(id)changed;
-(void)stopLoading;
-(void)startLoading;
-(void)load;
-(void)dealloc;
-(id)initWithManager:(id)manager path:(id)path;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithContentsOfFile:(id)file;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfo : NSObject {
	NSMutableDictionary* _userInfo;
	BOOL _enabled;
	BOOL _selected;
	int _addressBookID;
	NSString* _fullName;
	NSString* _firstName;
	NSString* _jid;
	NSString* _highlightedName;
	NSString* _statusText;
	NSString* _detailText;
	NSArray* _tokens;
	NSManagedObjectID* _waContactObjectID;
}
@property(retain, nonatomic) NSManagedObjectID* waContactObjectID;
@property(copy, nonatomic) NSDictionary* userInfo;
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(retain, nonatomic) NSArray* tokens;
@property(copy, nonatomic) NSString* detailText;
@property(copy, nonatomic) NSString* statusText;
@property(copy, nonatomic) NSString* highlightedName;
@property(copy, nonatomic) NSString* jid;
@property(copy, nonatomic) NSString* firstName;
@property(copy, nonatomic) NSString* fullName;
@property(assign, nonatomic) int addressBookID;
-(void).cxx_destruct;
-(void)setUserInfoObject:(id)object forKey:(id)key;
-(id)parentContact;
-(id)initWithChatSession:(id)chatSession;
-(id)initWithContact:(id)contact;
-(id)initWithWAContactObjectID:(id)wacontactObjectID;
@end

__attribute__((visibility("hidden")))
@interface WAEmailInfo : NSObject {
	NSManagedObjectID* _waContactID;
	NSString* _email;
	NSString* _label;
}
@property(copy, nonatomic) NSString* label;
@property(copy, nonatomic) NSString* email;
@property(retain, nonatomic) NSManagedObjectID* waContactID;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAContactsSectionInfo : NSObject {
	NSString* _title;
	NSManagedObjectID* _waSectionObjectID;
	int _contactsCount;
	NSArray* _contacts;
}
@property(retain, nonatomic) NSArray* contacts;
@property(assign, nonatomic) int contactsCount;
@property(retain, nonatomic) NSManagedObjectID* waSectionObjectID;
@property(copy, nonatomic) NSString* title;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface GroupInfoViewController : WAWarningViewController <WASinglePhotoPickerControllerDelegate, SinglePersonPickerDelegate, WAGroupInfoHeaderViewDelegate, WAImageToImageTransitioning, WANavigationControllerPopToAnimating, UINavigationControllerDelegate, WAGroupSubjectEditControllerDelegate, ABNewPersonViewControllerDelegate, ABPeoplePickerNavigationControllerDelegate, WAInfoInputViewControllerDelegate, WALocationDataSource, MFMailComposeViewControllerDelegate, WebImagePickerDelegate, UITableViewDataSource, UITableViewDelegate> {
	WAChatSession* _chatSession;
	NSMutableArray* _groupMembers;
	NSMutableArray* _tempMembers;
	WAGroupMember* _currentGroupMember;
	NSDictionary* _pushNames;
	NSMutableDictionary* _statusMessages;
	int _pendingRequestCounter;
	BOOL _groupLeaveInProgress;
	BOOL _locationShareSettingChangeInProgress;
	BOOL _ignoreNextProfilePictureUpdateNotification;
	int _numberOfStarredMessages;
	int _numberOfWebURLs;
	BOOL _willDeleteWebURLMessages;
	NSArray* _locationData;
	NSObject<OS_dispatch_group>* _locationDataLoadingGroup;
	BOOL _locationDataLoadingInProgress;
	BOOL _needsLocationDataReload;
	WebImagePicker* _webImagePicker;
	GroupIconViewController* _groupIconViewController;
	BOOL _chatActionsEnabled;
	int _mediaSettingsSectionIndex;
	int _participantsSectionIndex;
	int _chatActionsSectionIndex;
	int _deleteGroupSectionIndex;
	int _locationSharingSectionIndex;
	int _mediaCellIndex;
	int _starredMessagesCellIndex;
	int _notificationSettingsCellIndex;
	int _muteCellIndex;
	int _previousLocationsIndex;
	int _youParticipantCellIndex;
	int _addParticipantCellIndex;
	int _clearConversationCellIndex;
	int _deleteExitGroupCellIndex;
	int _locationsOnIndex;
	int _showLocationsIndex;
	BOOL _readonlyGroupWarningVisible;
	BOOL _canShowReadonlyGroupWarning;
	BOOL _groupReadonly;
	BOOL _groupAdmin;
	BOOL _groupParticipant;
	NSString* _jid;
	WAMediaManager* _mediaManager;
	WAActivityLabel* _activityLabel;
	WAGroupInfoHeaderView* _groupHeaderView;
	UIView* _viewGroupSummary;
	UILabel* _labelGroupSummary;
	UIButton* _buttonDeleteExitGroup;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int numberOfWebURLs;
@property(assign, nonatomic, getter=isGroupParticipant) BOOL groupParticipant;
@property(assign, nonatomic, getter=isGroupAdmin) BOOL groupAdmin;
@property(assign, nonatomic, getter=isGroupReadonly) BOOL groupReadonly;
@property(retain, nonatomic) UIButton* buttonDeleteExitGroup;
@property(retain, nonatomic) UILabel* labelGroupSummary;
@property(retain, nonatomic) UIView* viewGroupSummary;
@property(assign, nonatomic) BOOL canShowReadonlyGroupWarning;
@property(assign, nonatomic) BOOL readonlyGroupWarningVisible;
@property(retain, nonatomic) WAGroupInfoHeaderView* groupHeaderView;
@property(retain, nonatomic) WAActivityLabel* activityLabel;
@property(retain, nonatomic) WAMediaManager* mediaManager;
@property(readonly, copy, nonatomic) NSString* jid;
+(id)sortNameForParticipant:(id)participant;
+(id)controllerForJID:(id)jid;
-(void).cxx_destruct;
-(void)groupInfoHeaderViewEditSubjectTapped:(id)tapped;
-(void)groupInfoHeaderViewEditPhotoTapped:(id)tapped;
-(void)invalidateNumberOfWebURLs;
-(void)invalidateNumberOfStarredMessages;
-(int)numberOfStarredMessages;
-(void)mediaManagerDidChangeContent:(id)mediaManager;
-(void)wa_applicationDidEnterBackground;
-(void)webImagePickerDidCancel:(id)webImagePicker;
-(void)webImagePicker:(id)picker didSelectImage:(id)image;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(id)mapTitle;
-(id)locationsWithCoordinate:(XXStruct_gLbvpC)coordinate;
-(id)locationDataAtIndex:(int)index;
-(unsigned)numberOfLocations;
-(void)singlePhotoPickerControllerDidCancel:(id)singlePhotoPickerController;
-(void)singlePhotoPickerController:(id)controller didFinishWithImage:(id)image;
-(void)infoInputViewControllerDidCancel:(id)infoInputViewController;
-(void)infoInputViewControllerDidFinish:(id)infoInputViewController;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(void*)person;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)continueEditingPerson:(void*)person onNavigationController:(id)controller;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)contactsStorageDidUpdateStatus:(id)contactsStorage;
-(void)profilePictureUpdated:(id)updated;
-(void)profilePictureUpdateRequestDidComplete:(id)profilePictureUpdateRequest;
-(void)chatStorageDidDeleteMessagesInChatSession:(id)chatStorage;
-(void)chatStorageWillDeleteMessagesInChatSession:(id)chatStorage;
-(void)chatStorageDidAddMessages:(id)chatStorage;
-(void)chatStorageDidUpdateParticipantsOfChatSession:(id)chatStorage;
-(void)chatStorageDidUpdateChatSession:(id)chatStorage;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(void)subjectEditViewControllerDidCancel:(id)subjectEditViewController;
-(void)subjectEditViewController:(id)controller didFinishWithText:(id)text;
-(id)excludedJIDsForSinglePersonPicker:(id)singlePersonPicker;
-(id)singlePersonPicker:(id)picker confirmationButtonTitleForContactInfo:(id)contactInfo;
-(id)singlePersonPicker:(id)picker confirmationTextForContactInfo:(id)contactInfo;
-(void)singlePersonPickerDidCancel:(id)singlePersonPicker;
-(void)singlePersonPicker:(id)picker didSelectContactInfo:(id)info;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)participantDataObjectForTableRowAtIndex:(unsigned)index;
-(BOOL)hasPendingActivity;
-(void)wa_fontSizeDidChange;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)reloadMediaAndLocationInfo;
-(void)chatStorageDidReplaceChatSession:(id)chatStorage;
-(void)clearChatHistory;
-(void)emailChatHistory;
-(void)locationSharingOnOffAction;
-(void)setLocationSharingEndDate:(id)date;
-(void)viewLiveLocations;
-(void)viewLocations;
-(void)viewStarredMessages;
-(void)viewAllMedia;
-(void)addNumberToContactForGroupMember:(id)groupMember;
-(void)createNewContactForGroupMember:(id)groupMember;
-(void)presentUnknownContactScreenForGroupMember:(id)groupMember;
-(void)callGroupMember:(id)member;
-(void)messageGroupMember:(id)member;
-(void)presentSubjectEditController;
-(void)showNewParticipantPicker;
-(void)viewInfoForGroupMember:(id)groupMember;
-(void)deleteOrExitGroupAction:(id)action;
-(BOOL)shouldBeginCustomPopAnimationForAnimationIdentifier:(id)animationIdentifier;
-(id)popAnimationControllerFromViewController:(id)viewController;
-(id)popAnimationInteractionControllerFromViewController:(id)viewController;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)startGroupPictureSetRequestWithImage:(id)image;
-(void)showImageSearchController;
-(void)reallyShowImagePickerForSourceType:(int)sourceType;
-(void)showImagePickerForSourceType:(int)sourceType;
-(void)viewOrAddGroupPicture;
-(void)openCustomNotificationSettingsScreen;
-(void)updateMuteTimeoutWithDate:(id)date;
-(void)promptToMuteOrUnmuteGroup;
-(void)showOrHideReadonlyGroupWarningAsNeeded;
-(id)visibleParticipantCellForJID:(id)jid;
-(void)configureParticipantCell:(id)cell withCellState:(int)cellState;
-(void)promoteGroupParticipant:(id)participant;
-(void)removeGroupParticipant:(id)participant;
-(void)requestAddGroupParticipantForContactInfo:(id)contactInfo;
-(void)emailChatHistoryWithMedia:(BOOL)media;
-(void)loadLocationDataWithCompletionHandler:(id)completionHandler;
-(void)addTempParticipant:(id)participant;
-(void)loadPushNamesWithCompletion:(id)completion;
-(void)loadStatusMessagesWithCompletion:(id)completion;
-(id)reloadStatusMessageForJID:(id)jid;
-(void)reloadStatusMessagesForAllParticipants;
-(void)reloadGroupInfoAndParticipantsAnimated:(BOOL)animated;
-(void)reloadGroupSummaryFooter;
-(void)hideActivity;
-(void)showActivity:(id)activity;
-(void)showDropdownAlertMessage:(id)message;
-(id)chatSession;
-(id)formattedGroupCreationInfoString;
-(void)dealloc;
-(id)initWithJID:(id)jid;
@end

__attribute__((visibility("hidden")))
@interface WAGroupSubjectEditController : WATableViewController <UITextFieldDelegate> {
	UITextField* _textField;
	UITableViewCell* _textFieldCell;
	UIView* _tableFooter;
	UILabel* _labelCharCount;
	NSString* _preloadedSubjectText;
	id<WAGroupSubjectEditControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAGroupSubjectEditControllerDelegate> delegate;
@property(retain, nonatomic) NSString* preloadedSubjectText;
-(void).cxx_destruct;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)textFieldValueChanged:(id)changed;
-(void)saveAction:(id)action;
-(void)cancelAction:(id)action;
-(void)updateCharCount;
-(void)wa_fontSizeDidChange;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface XMPPContactsSyncResponse : NSObject {
	NSArray* _contacts;
	NSString* _version;
	int _wait;
	NSError* _error;
	int _backoff;
}
@property(assign, nonatomic) int backoff;
@property(retain, nonatomic) NSError* error;
@property(assign, nonatomic) int wait;
@property(copy, nonatomic) NSString* version;
@property(retain, nonatomic) NSArray* contacts;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAVCardMessageCell : WAMessageCell {
	UIImageView* _broadcastImageView;
	UIView* _vCardContentView;
	UIImageView* _contactImageView;
	UIImageView* _chevronImageView;
	UILabel* _contactNameLabel;
	UIView* _horizontalSeparator;
	UIView* _verticalSeparator;
	UIButton* _buttonMessage;
	UIButton* _buttonAdd;
	UIButton* _buttonInvite;
	BOOL _contentsHighlighted;
	CGPoint _initialHighlightTouchLocation;
	UILongPressGestureRecognizer* _highlightTrackingGesture;
	UITapGestureRecognizer* _contentSingleTapGestureRecognizer;
	UITapGestureRecognizer* _contentDoubleTapGestureRecognizer;
	UILongPressGestureRecognizer* _contentLongPressGestureRecognizer;
}
+(id)cellReuseIdentifier;
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
+(float)maximumBubbleWidthForCellWidth:(float)cellWidth;
+(UIEdgeInsets)contentInsetsForCellData:(id)cellData cellWidth:(float)width;
+(id)anyContactJIDForCellData:(id)cellData;
+(BOOL)shouldShowActionButtonsForCellData:(id)cellData;
+(void)initialize;
-(void).cxx_destruct;
-(id)accessibilityHintText;
-(id)accessibilityValueText;
-(void)configureForAccessibility;
-(void)setContentsHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setDimmed:(BOOL)dimmed;
-(void)prepareFor3DTouchPreviewWithContext:(id)context;
-(id)dataForPreviewingContext:(id)previewingContext atLocation:(CGPoint)location;
-(id)registerSubviewsForPreviewingUsingViewController:(id)previewingUsingViewController previewingDelegate:(id)delegate;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleContentLongPressGesture:(id)gesture;
-(void)handleContentDoubleTapGesture:(id)gesture;
-(void)handleContentTapGesture:(id)gesture;
-(void)handleHighlightTrackingGesture:(id)gesture;
-(void)handleLongPressOnBubbleWithLocation:(CGPoint)location;
-(void)handleDoubleTapOnBubbleWithLocation:(CGPoint)location;
-(void)handleTapOnBubbleWithLocation:(CGPoint)location;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)profilePictureManagerDidUpdatePicture:(id)profilePictureManager;
-(void)layoutSubviews;
-(void)inviteContactAction:(id)action;
-(void)addContactAction:(id)action;
-(void)messageAction:(id)action;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAChatDatabaseMigrationViewController : WAViewController {
	NSTimer* _progressTimer;
	double _estimatedMigrationTime;
	unsigned long long _databaseSize;
	double _migrationStartTime;
	WAChatStorage* _chatStorage;
	id<WAChatDatabaseMigrationViewControllerDelegate> _delegate;
	UIView* _viewMigrationProgress;
	UILabel* _labelMigrationProgress;
	UIProgressView* _progressView;
	WACircularProgressView* _circularProgressView;
	UILabel* _labelProgress;
	UIView* _viewNoSpace;
	UILabel* _labelNoSpace;
	UIButton* _buttonTryAgain;
}
@property(retain, nonatomic) UIButton* buttonTryAgain;
@property(retain, nonatomic) UILabel* labelNoSpace;
@property(retain, nonatomic) UIView* viewNoSpace;
@property(retain, nonatomic) UILabel* labelProgress;
@property(retain, nonatomic) WACircularProgressView* circularProgressView;
@property(retain, nonatomic) UIProgressView* progressView;
@property(retain, nonatomic) UILabel* labelMigrationProgress;
@property(retain, nonatomic) UIView* viewMigrationProgress;
@property(assign, nonatomic) __weak id<WAChatDatabaseMigrationViewControllerDelegate> delegate;
@property(retain, nonatomic) WAChatStorage* chatStorage;
+(void)showInWindow:(id)window withDelegate:(id)delegate;
+(id)controller;
-(void).cxx_destruct;
-(void)tryAgain:(id)again;
-(void)updateProgress:(id)progress;
-(void)reallyPerformMigration;
-(void)performMigration;
-(BOOL)hasSufficientDiskSpaceForMigration;
-(long long)requiredDiskSpace;
-(int)preferredStatusBarStyle;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLayoutSubviews;
-(void)layoutSubviews;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAFriendsLocationViewController : UIViewController {
	WAMapTypeSegmentedControl* _segmentedControl;
	UIBarButtonItem* _barButtonSearch;
	UIBarButtonItem* _segmentedControlBarItem;
	NSString* _groupJID;
	WAChatSession* _chatSession;
	NSMutableDictionary* _participantsLocations;
	BOOL _autoScale;
	BOOL _sharingIsActive;
	NSTimer* _annotationsUpdateTimer;
	MKMapView* _mapViewMain;
	UIToolbar* _toolbar;
}
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) MKMapView* mapViewMain;
-(void).cxx_destruct;
-(id)mapView:(id)view viewForAnnotation:(id)annotation;
-(void)mapView:(id)view didSelectAnnotationView:(id)view2;
-(void)mapView:(id)view regionWillChangeAnimated:(BOOL)region;
-(id)chatSession;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)xmppConnectionLocationSharingChangedNotification:(id)notification;
-(void)xmppConnectionLocationNotification:(id)notification;
-(void)requestLocationsWithParticipants:(BOOL)participants;
-(void)resubscribeForLocations;
-(void)onAnnotationsUpdateTimer;
-(void)setLocation:(id)location forJid:(id)jid;
-(void)autosetMapRegion;
-(void)nextFriend;
-(void)mapTypeChanged:(id)changed;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithTitle:(id)title groupJID:(id)jid;
@end

__attribute__((visibility("hidden")))
@interface XMPPGroup : NSObject {
	BOOL _locked;
	NSString* _jid;
	NSString* _subject;
	NSString* _creatorJID;
	NSDate* _creationDate;
	NSDate* _subjectTimestamp;
	NSString* _subjectOwnerJID;
	NSDate* _locationSharingEndDate;
	NSArray* _participants;
}
@property(retain, nonatomic) NSArray* participants;
@property(assign, nonatomic) BOOL locked;
@property(retain, nonatomic) NSDate* locationSharingEndDate;
@property(copy, nonatomic) NSString* subjectOwnerJID;
@property(retain, nonatomic) NSDate* subjectTimestamp;
@property(retain, nonatomic) NSDate* creationDate;
@property(copy, nonatomic) NSString* creatorJID;
@property(copy, nonatomic) NSString* subject;
@property(copy, nonatomic) NSString* jid;
+(id)groupFromGroupElement:(id)groupElement;
-(void).cxx_destruct;
-(void)addParticipantsFromGroupElement:(id)groupElement;
@end

__attribute__((visibility("hidden")))
@interface WABackupStatisticsViewController : WAStaticTableViewController {
	WASharedMetadataQuery* _query;
	WACloudStatus* _cloudStatus;
	id _listenerObject;
}
@property(retain, nonatomic) id listenerObject;
@property(retain, nonatomic) WACloudStatus* cloudStatus;
@property(retain, nonatomic) WASharedMetadataQuery* query;
-(void).cxx_destruct;
-(void)addMediaRestoreSection;
-(void)addOptionsSection;
-(void)addRecentSection;
-(void)addMetadataSection;
-(void)dealloc;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WACallEventsTableViewCell : UITableViewCell {
	UIView* _topEdge;
	NSMutableArray* _customConstraints;
	UILabel* _dateLabel;
	NSMutableArray* _timeLabels;
	NSMutableArray* _eventLabels;
	NSMutableArray* _durationLabels;
}
-(void).cxx_destruct;
-(void)updateConstraints;
-(void)addCustomConstraints:(id)constraints;
-(void)configureWithAggregateCallEvent:(id)aggregateCallEvent;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
-(id)accessibilityElementAtIndex:(int)index;
-(int)accessibilityElementCount;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAPrivacySettingsPicker : WAStaticTableViewController {
	WATableRow* _nooneRow;
	WATableRow* _contactsRow;
	WATableRow* _allUsersRow;
	WAActivityLabel* _activityLabel;
	NSDate* _activityStartTime;
	unsigned _privacyCategory;
	NSString* _titleString;
	WAPrivacyPolicy* _privacyPolicy;
}
@property(retain) WAPrivacyPolicy* privacyPolicy;
-(void).cxx_destruct;
-(void)privacyPolicyDidChange:(id)privacyPolicy;
-(void)hideActivity;
-(void)showActivity;
-(void)selectValue:(unsigned)value;
-(void)updateCheckMarks;
-(void)setupTableView;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initForCategory:(unsigned)category title:(id)title;
@end

__attribute__((visibility("hidden")))
@interface _WADeferredTaskOperation : NSObject {
	BOOL _isAddOperation;
	WAURLSessionTask* _task;
}
@property(retain, nonatomic) WAURLSessionTask* task;
@property(assign, nonatomic) BOOL isAddOperation;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAURLSession : NSObject {
	NSMutableArray* _tasks;
	BOOL _isLoaded;
	NSMutableArray* _deferredOperations;
	NSObject<OS_dispatch_queue>* _ioQueue;
	BOOL _ignoreSaveTasks;
	NSURLSession* _URLSession;
	NSString* _identifier;
	id _completionHandler;
	WAURLSessionManager* _sessionManager;
}
@property(readonly, assign, nonatomic) BOOL hasPendingInProcessRequests;
@property(assign, nonatomic) __weak WAURLSessionManager* sessionManager;
@property(readonly, assign, nonatomic) NSArray* allTaskIdentifiers;
@property(copy, nonatomic) id completionHandler;
@property(readonly, copy, nonatomic) NSString* identifier;
@property(readonly, assign, nonatomic) NSURLSession* URLSession;
-(void).cxx_destruct;
-(void)restoreTasksWithCompletionHandler:(id)completionHandler;
-(id)savedTasksFilePath;
-(void)saveTasks;
-(void)cancelAll;
-(void)resumeAll;
-(void)suspendAll;
-(id)addDownloadTaskWithTaskData:(id)taskData;
-(id)taskWithIdentifier:(id)identifier;
-(void)removeTask:(id)task;
-(void)addTask:(id)task;
-(void)flushDeferredTaskOperations;
-(BOOL)isBackgroundSession;
-(id)initWithURLSession:(id)urlsession identifier:(id)identifier;
-(id)initWithIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAURLSessionManager : NSObject <WAURLSessionDownloadTaskHandlerOS6Delegate, NSURLSessionDownloadDelegate> {
	NSMutableDictionary* _sessions;
	NSMutableDictionary* _resumableDownloads;
	int _suspensionCounter;
	unsigned _state;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned state;
@property(readonly, assign, nonatomic) BOOL hasPendingInProcessRequests;
@property(readonly, assign, nonatomic) NSArray* allTaskIdentifiers;
+(id)credentialForServerTrustChallenge:(id)serverTrustChallenge;
+(BOOL)usesURLSession;
-(void).cxx_destruct;
-(void)downloadTaskOS6:(id)a6 didCompleteWithError:(id)error;
-(void)downloadTaskOS6:(id)a6 didFinishDownloadingToURL:(id)url;
-(void)downloadTaskOS6:(id)a6 didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session task:(id)task didCompleteWithError:(id)error;
-(void)URLSession:(id)session downloadTask:(id)task didResumeAtOffset:(long long)offset expectedTotalBytes:(long long)bytes;
-(void)URLSession:(id)session downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(void)URLSession:(id)session downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)URLSession:(id)session didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)URLSessionDidFinishEventsForBackgroundURLSession:(id)urlsession;
-(void)downloadTask:(id)task didCompleteWithError:(id)error;
-(void)downloadTask:(id)task didFinishDownloadingToURL:(id)url;
-(void)downloadTask:(id)task didWriteData:(long long)data totalBytesWritten:(long long)written totalBytesExpectedToWrite:(long long)write;
-(id)downloadTaskDataWithMessage:(id)message autodownload:(BOOL)autodownload;
-(void)endSuspendingTasks;
-(void)beginSuspendingTasks;
-(void)cancelAll;
-(void)resumeAll;
-(void)suspendAll;
-(void)cancelTask:(id)task suppressingNotifications:(BOOL)notifications;
-(BOOL)cancelTaskWithIdentifier:(id)identifier;
-(float)progressOfTaskWithIdentifier:(id)identifier;
-(BOOL)shouldShowNetworkActivityForTaskWithIdentifier:(id)identifier;
-(int)stateOfTaskWithIdentifier:(id)identifier;
-(void)enqueueTaskWithTaskData:(id)taskData;
-(id)dequeueResumableDownloadTaskDataWithIdentifier:(id)identifier;
-(void)removeTask:(id)task;
-(id)existingTaskWithIdentifier:(id)identifier;
-(void)handleEventsForBackgroundURLSession:(id)backgroundURLSession completionHandler:(id)handler;
-(id)addSessionWithIdentifierIfNeeded:(id)identifierIfNeeded;
-(id)mainAppBackgroundSession;
-(id)foregroundSession;
-(id)mainAppBackgroundSessionIdentifier;
-(id)foregroundSessionIdentifier;
-(void)installCategoryMethodsIfNeeded;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAEditableImageScrollView : UIScrollView <UIScrollViewDelegate> {
	float _fillToBoundsScale;
	BOOL _needsAdjustZoomScale;
	BOOL _needsSetZoomScale;
	BOOL _isScrollingInteractively;
	BOOL _receivesTouchesBeyondBounds;
	BOOL _expandsToBounds;
	BOOL _resetsZoomScaleOnBoundsChange;
	id<WAEditableImageScrollViewEditingDelegate> _editingDelegate;
	UIImageView* _imageView;
	float _targetZoomScale;
	UIEdgeInsets _contentInsetForZoomScaleCalculation;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) UIEdgeInsets contentInsetForZoomScaleCalculation;
@property(assign, nonatomic) BOOL resetsZoomScaleOnBoundsChange;
@property(assign, nonatomic) BOOL expandsToBounds;
@property(assign, nonatomic) BOOL receivesTouchesBeyondBounds;
@property(assign, nonatomic) float targetZoomScale;
@property(retain, nonatomic) UIImage* image;
@property(readonly, assign, nonatomic) UIImageView* imageView;
@property(assign, nonatomic) __weak id<WAEditableImageScrollViewEditingDelegate> editingDelegate;
-(void).cxx_destruct;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)handleDoubleTap:(id)tap;
-(void)configureZooming;
-(void)calculateFillToBoundsScale:(out float*)boundsScale minimumZoomScale:(out float*)scale maximumZoomScale:(out float*)scale3 forImageSize:(CGSize)imageSize;
-(CGRect)zoomRectForScale:(float)scale withCenter:(CGPoint)center;
-(void)relayoutAlongsideLayerAnimation;
-(void)toggleZoomInOutAtPoint:(CGPoint)point;
-(void)layoutSubviews;
-(void)setNeedsAdjustZoomScale;
-(void)setFrame:(CGRect)frame;
-(void)setBounds:(CGRect)bounds;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface XMPPWebClientLoginInfo : NSObject {
	BOOL _temporary;
	NSString* _operatingSystem;
	NSString* _browser;
}
@property(assign, nonatomic, getter=isTemporary) BOOL temporary;
@property(copy, nonatomic) NSString* browser;
@property(copy, nonatomic) NSString* operatingSystem;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientChatSessionState : NSObject {
	BOOL _archived;
	BOOL _needsClear;
	BOOL _readOnly;
	BOOL _active;
	BOOL _readAhead;
	NSString* _jid;
	WAChatSession* _chatSession;
	NSArray* _recentMessages;
	int _unreadCount;
	long long _muteTime;
}
@property(assign, nonatomic) BOOL readAhead;
@property(assign, nonatomic, getter=isActive) BOOL active;
@property(assign, nonatomic) int unreadCount;
@property(assign, nonatomic, getter=isReadOnly) BOOL readOnly;
@property(assign, nonatomic) long long muteTime;
@property(retain, nonatomic) NSArray* recentMessages;
@property(assign, nonatomic) BOOL needsClear;
@property(assign, nonatomic, getter=isArchived) BOOL archived;
@property(retain, nonatomic) WAChatSession* chatSession;
@property(copy, nonatomic) NSString* jid;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientReceipt : NSObject {
	NSString* _jid;
	NSArray* _messages;
	double _lastTimestamp;
}
@property(assign, nonatomic) double lastTimestamp;
@property(copy, nonatomic) NSArray* messages;
@property(copy, nonatomic) NSString* jid;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface _XMPPWebClientRequest : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _XMPPRequestWebClientLogin : _XMPPWebClientRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)syncElementWithWebReference:(id)webReference;
-(id)initWithWebReference:(id)webReference clientToken:(id)token password:(id)password completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientInitiateRendezvous : _XMPPRequestWebClientLogin {
}
-(id)initWithWebReference:(id)webReference clientToken:(id)token password:(id)password completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientAcceptPersistentLogin : _XMPPRequestWebClientLogin {
	BOOL _isResume;
}
-(id)syncElementWithWebReference:(id)webReference;
-(id)initWithWebReference:(id)webReference clientToken:(id)token isResume:(BOOL)resume completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientAcknowledgeResync : _XMPPWebClientRequest {
}
-(id)initWithCompletionHandler:(id)completionHandler;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientChallengeServer : _XMPPWebClientRequest {
}
-(id)initWithWebReference:(id)webReference challenge:(id)challenge completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSyncQueryResponse : _XMPPWebClientRequest {
}
-(id)initWithWebReference:(id)webReference accept:(BOOL)accept requestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientActionQueryResponse : _XMPPWebClientRequest {
}
-(id)initWithWebSession:(id)webSession requestID:(id)anId items:(id)items replaced:(BOOL)replaced completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientRejectLogin : _XMPPWebClientRequest {
}
-(id)initWithWebReference:(id)webReference reason:(unsigned)reason completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientTerminate : _XMPPWebClientRequest {
}
-(id)initWithReason:(unsigned)reason completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientAcceptTerminate : _XMPPWebClientRequest {
}
-(id)initWithCompletionHandler:(id)completionHandler;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendChatSessions : _XMPPWebClientRequest {
}
-(id)initWithChatSessions:(id)chatSessions requestID:(id)anId isDuplicate:(BOOL)duplicate isPreemptive:(BOOL)preemptive forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendContactsGroupsLists : _XMPPWebClientRequest {
}
-(id)initWithPhones:(id)phones groups:(id)groups lists:(id)lists requestID:(id)anId isDuplicate:(BOOL)duplicate isPreemptive:(BOOL)preemptive forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendMessages : _XMPPWebClientRequest {
}
-(id)initWithMessages:(id)messages requestID:(id)anId forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientForwardMessagesInChat : _XMPPWebClientRequest {
}
-(id)initWithMessages:(id)messages onResume:(BOOL)resume forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientForwardLastMessageInAllChats : _XMPPWebClientRequest {
}
-(id)initWithMessages:(id)messages forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientMediaResponse : _XMPPWebClientRequest {
}
-(id)initWithMediaResponseCode:(int)mediaResponseCode mediaURL:(id)url requestID:(id)anId forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientForwardSingleMessage : _XMPPWebClientRequest {
}
-(id)initWithMessage:(id)message invisible:(BOOL)invisible update:(BOOL)update forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientNotifyMessageStatusChange : _XMPPWebClientRequest {
}
-(id)initWithMessage:(id)message forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientUpdateBatteryState : _XMPPWebClientRequest {
}
-(id)initForWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientMarkChatAsRead : _XMPPWebClientRequest {
}
-(id)initWithChatJID:(id)chatJID readStatus:(BOOL)status forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendContactUpdates : _XMPPWebClientRequest {
}
-(id)initWithContacts:(id)contacts removedJIDs:(id)jids removeMissingJIDs:(BOOL)jids3 forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendBroadcastListParticipants : _XMPPWebClientRequest {
}
-(id)initWithBroadcastListJID:(id)broadcastListJID participantJIDs:(id)jids forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientUpdateChatPropertyArchived : _XMPPWebClientRequest {
}
-(id)initWithChatJID:(id)chatJID archived:(BOOL)archived forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientUpdateChatPropertyMuteDate : _XMPPWebClientRequest {
}
-(id)initWithChatJID:(id)chatJID muteDate:(id)date forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientUpdateChatPropertyNeedsDelete : _XMPPWebClientRequest {
}
-(id)initWithChatJID:(id)chatJID forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientUpdateChatPropertyNeedsClear : _XMPPWebClientRequest {
}
-(id)initWithChatJID:(id)chatJID messages:(id)messages forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendResumeResponse : _XMPPWebClientRequest {
}
-(id)initWithChatSessionStates:(id)chatSessionStates requestID:(id)anId forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendReceiptUpdates : _XMPPWebClientRequest {
}
-(id)initWithReceipts:(id)receipts requestID:(id)anId forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendThumbnailPreview : _XMPPWebClientRequest {
}
-(id)initForPictureId:(id)pictureId picture:(id)picture requestID:(id)anId forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendGroupInfo : _XMPPWebClientRequest {
}
-(id)initForChatSession:(id)chatSession requestID:(id)anId forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendMessageInfo : _XMPPWebClientRequest {
}
-(id)initWithMessage:(id)message requestID:(id)anId forWebSession:(id)webSession completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestWebClientSendGenericErrorResponse : _XMPPWebClientRequest {
}
-(id)initWithRequestID:(id)requestID code:(int)code completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPE2ERequestRegister : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithRegistrationId:(int)registrationId identity:(ec_public_key*)identity preKeys:(id)keys signedPreKey:(id)key completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPE2ERequestGetUserKey : XMPPRequest {
	NSString* _userJid;
}
@property(copy, nonatomic) id completion;
-(void).cxx_destruct;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithJid:(id)jid completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPE2ERequestPreKeysCount : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPE2ERequestPreKeyDigest : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAGroupInfo : NSManagedObject {
}
@property(retain, nonatomic) NSNumber* state;
@property(retain, nonatomic) WAGroupMember* lastMessageOwner;
@property(retain, nonatomic) NSDate* subjectTimestamp;
@property(retain, nonatomic) NSString* subjectOwnerJID;
@property(retain, nonatomic) NSString* picturePath;
@property(retain, nonatomic) NSString* pictureID;
@property(retain, nonatomic) WAChatSession* chatSession;
@property(retain, nonatomic) NSString* creatorJID;
@property(retain, nonatomic) NSDate* creationDate;
@property(retain, nonatomic) NSString* sourceJID;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncSocketPreBuffer : NSObject {
	char* preBuffer;
	unsigned long preBufferSize;
	char* readPointer;
	char* writePointer;
}
-(void)reset;
-(void)didWrite:(unsigned long)write;
-(void)getWriteBuffer:(char**)buffer availableSpace:(unsigned*)space;
-(char*)writeBuffer;
-(unsigned long)availableSpace;
-(void)didRead:(unsigned long)read;
-(void)getReadBuffer:(char**)buffer availableBytes:(unsigned*)bytes;
-(char*)readBuffer;
-(unsigned long)availableBytes;
-(void)ensureCapacityForWrite:(unsigned long)write;
-(void)dealloc;
-(id)initWithCapacity:(unsigned long)capacity;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncReadPacket : NSObject {
	NSMutableData* buffer;
	unsigned startOffset;
	unsigned bytesDone;
	unsigned maxLength;
	double timeout;
	unsigned readLength;
	NSData* term;
	BOOL bufferOwner;
	unsigned originalBufferLength;
	long tag;
}
-(void).cxx_destruct;
-(int)searchForTermAfterPreBuffering:(long)termAfterPreBuffering;
-(unsigned)readLengthForTermWithPreBuffer:(id)preBuffer found:(BOOL*)found;
-(unsigned)readLengthForTermWithHint:(unsigned)hint shouldPreBuffer:(BOOL*)buffer;
-(unsigned)readLengthForNonTermWithHint:(unsigned)hint;
-(unsigned)optimalReadLengthWithDefault:(unsigned)aDefault shouldPreBuffer:(BOOL*)buffer;
-(void)ensureCapacityForAdditionalDataOfLength:(unsigned)length;
-(id)initWithData:(id)data startOffset:(unsigned)offset maxLength:(unsigned)length timeout:(double)timeout readLength:(unsigned)length5 terminator:(id)terminator tag:(long)tag;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncWritePacket : NSObject {
	NSData* buffer;
	unsigned bytesDone;
	long tag;
	double timeout;
}
-(void).cxx_destruct;
-(id)initWithData:(id)data timeout:(double)timeout tag:(long)tag;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncSpecialPacket : NSObject {
	NSDictionary* tlsSettings;
}
-(void).cxx_destruct;
-(id)initWithTLSSettings:(id)tlssettings;
@end

__attribute__((visibility("hidden")))
@interface GCDAsyncSocket : NSObject {
	unsigned flags;
	unsigned short config;
	id delegate;
	NSObject<OS_dispatch_queue>* delegateQueue;
	int socket4FD;
	int socket6FD;
	int stateIndex;
	NSData* connectInterface4;
	NSData* connectInterface6;
	NSObject<OS_dispatch_queue>* socketQueue;
	NSObject<OS_dispatch_source>* accept4Source;
	NSObject<OS_dispatch_source>* accept6Source;
	NSObject<OS_dispatch_source>* connectTimer;
	NSObject<OS_dispatch_source>* readSource;
	NSObject<OS_dispatch_source>* writeSource;
	NSObject<OS_dispatch_source>* readTimer;
	NSObject<OS_dispatch_source>* writeTimer;
	NSMutableArray* readQueue;
	NSMutableArray* writeQueue;
	GCDAsyncReadPacket* currentRead;
	GCDAsyncWritePacket* currentWrite;
	unsigned long socketFDBytesAvailable;
	GCDAsyncSocketPreBuffer* preBuffer;
	XXStruct_4pnlqD streamContext;
	CFReadStreamRef readStream;
	CFWriteStreamRef writeStream;
	SSLContextRef sslContext;
	GCDAsyncSocketPreBuffer* sslPreBuffer;
	unsigned long sslWriteCachedLength;
	long sslErrCode;
	void* IsOnSocketQueueOrTargetQueueKey;
	id userData;
}
@property(assign) BOOL autoDisconnectOnClosedReadStream;
@property(readonly, assign) BOOL isSecure;
@property(readonly, assign) BOOL isIPv6;
@property(readonly, assign) BOOL isIPv4;
@property(readonly, assign) NSData* localAddress;
@property(readonly, assign) NSData* connectedAddress;
@property(readonly, assign) unsigned short localPort;
@property(readonly, assign) NSString* localHost;
@property(readonly, assign) unsigned short connectedPort;
@property(readonly, assign) NSString* connectedHost;
@property(readonly, assign) BOOL isConnected;
@property(readonly, assign) BOOL isDisconnected;
@property(retain) id userData;
@property(assign, getter=isIPv4PreferredOverIPv6) BOOL IPv4PreferredOverIPv6;
@property(assign, getter=isIPv6Enabled) BOOL IPv6Enabled;
@property(assign, getter=isIPv4Enabled) BOOL IPv4Enabled;
@property(retain) NSObject<OS_dispatch_queue>* delegateQueue;
@property(assign) __weak id delegate;
+(id)ZeroData;
+(id)LFData;
+(id)CRData;
+(id)CRLFData;
+(BOOL)getHost:(id*)host port:(unsigned short*)port family:(char*)family fromAddress:(id)address;
+(BOOL)getHost:(id*)host port:(unsigned short*)port fromAddress:(id)address;
+(BOOL)isIPv6Address:(id)address;
+(BOOL)isIPv4Address:(id)address;
+(unsigned short)portFromAddress:(id)address;
+(id)hostFromAddress:(id)address;
+(unsigned short)portFromSockaddr6:(const sockaddr_in6*)sockaddr6;
+(unsigned short)portFromSockaddr4:(const sockaddr_in*)sockaddr4;
+(id)hostFromSockaddr6:(const sockaddr_in6*)sockaddr6;
+(id)hostFromSockaddr4:(const sockaddr_in*)sockaddr4;
+(id)lookupHost:(id)host port:(unsigned short)port error:(id*)error;
+(void)unscheduleCFStreams:(id)streams;
+(void)scheduleCFStreams:(id)streams;
+(void)cfstreamThread;
+(void)stopCFStreamThreadIfNeeded;
+(void)startCFStreamThreadIfNeeded;
+(void)ignore:(id)ignore;
+(id)gaiError:(int)error;
-(void).cxx_destruct;
-(SSLContextRef)sslContext;
-(BOOL)enableBackgroundingOnSocketWithCaveat;
-(BOOL)enableBackgroundingOnSocket;
-(BOOL)enableBackgroundingOnSocketWithCaveat:(BOOL)caveat;
-(CFWriteStreamRef)writeStream;
-(CFReadStreamRef)readStream;
-(int)socket6FD;
-(int)socket4FD;
-(int)socketFD;
-(void)performBlock:(id)block;
-(void)unmarkSocketQueueTargetQueue:(id)queue;
-(void)markSocketQueueTargetQueue:(id)queue;
-(BOOL)openStreams;
-(void)removeStreamsFromRunLoop;
-(BOOL)addStreamsToRunLoop;
-(BOOL)registerForStreamCallbacksIncludingReadWrite:(BOOL)streamCallbacksIncludingReadWrite;
-(BOOL)createReadAndWriteStream;
-(void)cf_startTLS;
-(void)cf_abortSSLHandshake:(id)handshake;
-(void)cf_finishSSLHandshake;
-(void)ssl_shouldTrustPeer:(BOOL)peer stateIndex:(int)index;
-(void)ssl_continueSSLHandshake;
-(void)ssl_startTLS;
-(long)sslWriteWithBuffer:(const void*)buffer length:(unsigned*)length;
-(long)sslReadWithBuffer:(void*)buffer length:(unsigned*)length;
-(void)maybeStartTLS;
-(void)startTLS:(id)tls;
-(void)doWriteTimeoutWithExtension:(double)extension;
-(void)doWriteTimeout;
-(void)setupWriteTimerWithTimeout:(double)timeout;
-(void)endCurrentWrite;
-(void)completeCurrentWrite;
-(void)doWriteData;
-(void)maybeDequeueWrite;
-(float)progressOfWriteReturningTag:(long*)writeReturningTag bytesDone:(unsigned*)done total:(unsigned*)total;
-(void)writeData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)doReadTimeoutWithExtension:(double)extension;
-(void)doReadTimeout;
-(void)setupReadTimerWithTimeout:(double)timeout;
-(void)endCurrentRead;
-(void)completeCurrentRead;
-(void)doReadEOF;
-(void)doReadData;
-(void)flushSSLBuffers;
-(void)maybeDequeueRead;
-(float)progressOfReadReturningTag:(long*)readReturningTag bytesDone:(unsigned*)done total:(unsigned*)total;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout maxLength:(unsigned)length tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToData:(id)data withTimeout:(double)timeout tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataToLength:(unsigned)length withTimeout:(double)timeout tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset maxLength:(unsigned)length tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout buffer:(id)buffer bufferOffset:(unsigned)offset tag:(long)tag;
-(void)readDataWithTimeout:(double)timeout tag:(long)tag;
-(void)resumeWriteSource;
-(void)suspendWriteSource;
-(void)resumeReadSource;
-(void)suspendReadSource;
-(BOOL)usingSecureTransportForTLS;
-(BOOL)usingCFStreamForTLS;
-(void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)newlyConnectedSocket;
-(void)getInterfaceAddress4:(id*)a4 address6:(id*)a6 fromDescription:(id)description port:(unsigned short)port;
-(unsigned short)localPortFromSocket6:(int)socket6;
-(unsigned short)localPortFromSocket4:(int)socket4;
-(id)localHostFromSocket6:(int)socket6;
-(id)localHostFromSocket4:(int)socket4;
-(unsigned short)connectedPortFromSocket6:(int)socket6;
-(unsigned short)connectedPortFromSocket4:(int)socket4;
-(id)connectedHostFromSocket6:(int)socket6;
-(id)connectedHostFromSocket4:(int)socket4;
-(unsigned short)localPort6;
-(unsigned short)localPort4;
-(id)localHost6;
-(id)localHost4;
-(unsigned short)connectedPort6;
-(unsigned short)connectedPort4;
-(id)connectedHost6;
-(id)connectedHost4;
-(id)otherError:(id)error;
-(id)connectionClosedError;
-(id)writeTimeoutError;
-(id)readTimeoutError;
-(id)readMaxedOutError;
-(id)connectTimeoutError;
-(id)sslError:(long)error;
-(id)errnoError;
-(id)errnoErrorWithReason:(id)reason;
-(id)badParamError:(id)error;
-(id)badConfigError:(id)error;
-(void)maybeClose;
-(void)disconnectAfterReadingAndWriting;
-(void)disconnectAfterWriting;
-(void)disconnectAfterReading;
-(void)disconnect;
-(void)closeWithError:(id)error;
-(void)doConnectTimeout;
-(void)endConnectTimeout;
-(void)startConnectTimeout:(double)timeout;
-(void)didNotConnect:(int)connect error:(id)error;
-(void)didConnect:(int)connect;
-(BOOL)connectWithAddress4:(id)address4 address6:(id)a6 error:(id*)error;
-(void)lookup:(int)lookup didFail:(id)fail;
-(void)lookup:(int)lookup didSucceedWithAddress4:(id)address4 address6:(id)a6;
-(BOOL)connectToAddress:(id)address viaInterface:(id)interface withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToAddress:(id)address error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port viaInterface:(id)interface withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port withTimeout:(double)timeout error:(id*)error;
-(BOOL)connectToHost:(id)host onPort:(unsigned short)port error:(id*)error;
-(BOOL)preConnectWithInterface:(id)interface error:(id*)error;
-(BOOL)doAccept:(int)accept;
-(BOOL)acceptOnInterface:(id)interface port:(unsigned short)port error:(id*)error;
-(BOOL)acceptOnPort:(unsigned short)port error:(id*)error;
-(void)synchronouslySetDelegate:(id)delegate delegateQueue:(id)queue;
-(void)setDelegate:(id)delegate delegateQueue:(id)queue;
-(void)setDelegate:(id)delegate delegateQueue:(id)queue synchronously:(BOOL)synchronously;
-(void)getDelegate:(id*)delegate delegateQueue:(id*)queue;
-(void)synchronouslySetDelegateQueue:(id)queue;
-(void)setDelegateQueue:(id)queue synchronously:(BOOL)synchronously;
-(void)synchronouslySetDelegate:(id)delegate;
-(void)setDelegate:(id)delegate synchronously:(BOOL)synchronously;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate delegateQueue:(id)queue socketQueue:(id)queue3;
-(id)initWithDelegate:(id)delegate delegateQueue:(id)queue;
-(id)initWithSocketQueue:(id)socketQueue;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAAutobackupSettingsViewController : WATableViewController {
	NSIndexPath* _selectedIndexPath;
	float _sideTextMargin;
	WAAutoBackupSettings* _autoBackupSettings;
	UIView* _viewFooter;
	float _cachedWidthFooter;
	UILabel* _labelFooter;
}
@property(retain, nonatomic) UILabel* labelFooter;
@property(assign, nonatomic) float cachedWidthFooter;
@property(retain, nonatomic) UIView* viewFooter;
@property(retain, nonatomic) WAAutoBackupSettings* autoBackupSettings;
@property(readonly, assign, nonatomic) NSString* bottomText;
@property(readonly, assign, nonatomic) float sideTextMargin;
@property(retain, nonatomic) NSIndexPath* selectedIndexPath;
+(id)stringForSequence:(id)sequence;
+(unsigned)autoBackupFrequencyForIndexPath:(id)indexPath;
+(id)indexForAutoBackupFrequency:(unsigned)autoBackupFrequency;
+(id)disableCellularDataSequence;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)layoutFooterView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithAutoBackupSettings:(id)autoBackupSettings;
-(id)init;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAMediaManager : NSObject <NSFetchedResultsControllerDelegate> {
	NSMutableArray* _chatSessions;
	BOOL _databaseAccessAvailable;
	BOOL _needsReset;
	BOOL _loadOnChatStorageDidLoadDatabase;
	NSFetchedResultsController* _resultsController;
	int _cachedPhotoCount;
	int _cachedVideoCount;
	int _cachedTotalItemCount;
	int _currentMonth;
	int _currentYear;
	NSString* _title;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* chatSessions;
@property(readonly, assign, nonatomic) unsigned numberOfVideos;
@property(readonly, assign, nonatomic) unsigned numberOfPhotos;
@property(readonly, assign, nonatomic) unsigned numberOfItems;
@property(copy, nonatomic) NSString* title;
+(void)initialize;
-(void).cxx_destruct;
-(id)titleForHeaderInSection:(int)section;
-(int)numberOfRowsInSection:(int)section;
-(int)numberOfSections;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controllerWillChangeContent:(id)controller;
-(void)deleteMessagesAtIndexPaths:(id)indexPaths;
-(id)indexPathOfMessage:(id)message;
-(id)messageAtIndexPath:(id)indexPath;
-(void)loadIfNeeded;
-(BOOL)isForSingleItem;
-(unsigned)countOfMessageType:(unsigned)messageType;
-(BOOL)isResultSetEmpty;
-(void)reset;
-(void)setNeedsReset;
-(id)indexPathFromIndex:(unsigned)index;
-(unsigned)indexFromIndexPath:(id)indexPath;
-(BOOL)isGroupChatMedia;
-(void)chatStorageDidReplaceChatSession:(id)chatStorage;
-(void)updateDateFormatters;
-(void)currentLocaleDidChange:(id)currentLocale;
-(void)handleSignificantTimeChange:(id)change;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface NotificationsViewController : WAStaticTableViewController <WALinkLabelDelegate> {
	UIView* _headerView;
	UILabel* _headerLabel;
	WATableSection* _sectionPersonal;
	WATableRow* _rowMessageSound;
	UISwitch* _switchMessageAlerts;
	WATableSection* _sectionGroup;
	WATableRow* _rowGroupSound;
	UISwitch* _switchGroupAlerts;
	WATableSection* _sectionCall;
	WATableRow* _rowCallSound;
	UISwitch* _switchCallAlerts;
	UISwitch* _switchPreview;
	WALinkLabel* _noPreviewLinkLabel;
	int _noPreviewSectionIndex;
	WATableRow* _rowInAppAlerts;
	WATableRow* _rowResetSettings;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)controller;
-(void).cxx_destruct;
-(void)handleOpenURL:(id)url fromLinkLabel:(id)linkLabel;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)wa_fontSizeDidChange;
-(void)wa_applicationWillEnterForeground;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewWillAppear:(BOOL)view;
-(void)setupTableView;
-(void)viewDidLoad;
-(void)showInAppNotificationSettings;
-(void)showPreviewAction:(id)action;
-(void)callAlertsAction:(id)action;
-(void)groupAlertsAction:(id)action;
-(void)messageAlertsAction:(id)action;
-(void)reloadData;
-(void)resetNotificationSettigs;
-(void)showSoundPickerController:(int)controller;
-(void)updateTableViewHeader;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPBinaryCoder : NSObject {
	XMPPTokenizer* _tokenizer;
	XMPPEncryption* _encryption;
	NSData* _sessionKeyMacIn;
	NSData* _sessionKeyMacOut;
	NSData* _token;
	int _elementCountOut;
	int _elementCountIn;
}
+(unsigned char)characterFromNibble:(unsigned char)nibble;
+(unsigned char)characterFromHex:(unsigned char)hex;
-(void).cxx_destruct;
-(id)readList:(id)list offset:(unsigned*)offset error:(unsigned*)error;
-(id)decodeHexFromData:(id)data discardLast:(BOOL)last;
-(id)decodeNibblesFromData:(id)data discardLast:(BOOL)last;
-(id)readString:(id)string offset:(unsigned*)offset error:(unsigned*)error;
-(unsigned)readListLength:(id)length offset:(unsigned*)offset error:(unsigned*)error;
-(id)readElement:(id)element offset:(unsigned*)offset error:(unsigned*)error;
-(unsigned char)getToken:(id)token index:(unsigned)index;
-(unsigned)isCanRead:(unsigned)read from:(id)from offset:(unsigned)offset error:(unsigned*)error;
-(BOOL)isJID:(id)jid;
-(id)encodeListHeader:(unsigned)header;
-(id)encodeHex:(id)hex;
-(id)encodeNibble:(id)nibble;
-(id)encodeJID:(id)jid;
-(id)encodeData:(id)data;
-(id)encodeString:(id)string;
-(id)encodeList:(id)list;
-(id)unserialize:(id)unserialize mustBeEncrypted:(BOOL)encrypted processedBytes:(unsigned*)bytes streamError:(out BOOL*)error;
-(id)serialize:(id)serialize encrypted:(BOOL)encrypted compressed:(BOOL)compressed;
-(id)keepalive;
-(id)header;
-(id)version;
-(id)authBlobForUser:(id)user;
-(void)setToken:(id)token andPassword:(id)password;
-(id)initForWeb;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPTokenizer : NSObject {
	NSDictionary* _textToTokenDictionaries[240];
	NSDictionary* _tokenToTextDictionaries[240];
}
+(id)webClientTokenizer;
+(id)mainTokenizer;
-(void).cxx_destruct;
-(id)convertTokenToText:(unsigned char)text usingDictionaryType:(int)type;
-(id)convertTextToToken:(id)token;
-(void)setTokenToTextDictionary:(id)textDictionary forDictionaryType:(int)dictionaryType;
-(void)setTextToTokenDictionary:(id)tokenDictionary forDictionaryType:(int)dictionaryType;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WACameraZoomSlider : UISlider {
	CAShapeLayer* _holePunchLayer;
}
-(void).cxx_destruct;
-(void)cancelTrackingWithEvent:(id)event;
-(void)endTrackingWithTouch:(id)touch withEvent:(id)event;
-(void)fadeOutWithDuration:(double)duration;
-(void)fadeOut;
-(void)fadeOutAfterDelay;
-(void)setValueAndFadeOut:(float)anOut;
-(CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface XMPPStanzaElement : NSObject {
	NSMutableDictionary* _attributes;
	NSMutableArray* _children;
	BOOL _compressed;
	NSString* _name;
	NSData* _value;
}
@property(readonly, assign, nonatomic) NSArray* children;
@property(retain, nonatomic) NSData* value;
@property(retain, nonatomic) NSString* name;
@property(assign, nonatomic) BOOL compressed;
@property(readonly, copy, nonatomic) NSArray* participantJIDs;
+(id)batteryElement;
+(id)configElement;
-(void).cxx_destruct;
-(id)attributes;
-(id)log;
-(id)description;
-(id)childArrayByName:(id)name;
-(id)childByName:(id)name attribute:(id)attribute value:(id)value;
-(id)childByName:(id)name;
-(id)childByIndex:(unsigned)index;
-(unsigned)childCount;
-(void)removeChild:(id)child;
-(void)addChild:(id)child;
-(id)allAttributes;
-(id)attributeByName:(id)name;
-(void)setAttributeWithName:(id)name value:(id)value;
-(id)initWithName:(id)name;
-(void)addStatusAttributeWithMessage:(id)message;
@end

__attribute__((visibility("hidden")))
@interface WATextMessageCell : WAMessageCell {
	WAMessageTextView* _messageTextView;
}
+(id)cellReuseIdentifier;
+(float)rowHeightForCellData:(id)cellData maxWidth:(float)width;
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
-(void).cxx_destruct;
-(void)configureForAccessibility;
-(id)dataForPreviewingContext:(id)previewingContext atLocation:(CGPoint)location;
-(id)registerSubviewsForPreviewingUsingViewController:(id)previewingUsingViewController previewingDelegate:(id)delegate;
-(void)performCopy;
-(BOOL)canPerformCopy;
-(void)updateStarIndicatorAnimated:(BOOL)animated;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMediaStreamUploadOperation : WAMediaUploadOperationBase <NSStreamDelegate, NSURLConnectionDelegate> {
	NSString* _fileName;
	BOOL _isExecuting;
	BOOL _isFinished;
	NSString* _uploadURL;
	NSString* _uploadIp;
	NSString* _uploadHost;
	NSMutableData* _receiveData;
	BOOL _mediaComplete;
	int _uploadPhase;
	int _waitCount;
	NSString* _streamingHash;
	NSURLConnection* _urlConnection;
	NSData* _bodyPrefixData;
	NSData* _bodyFileData;
	NSData* _bodySuffixData;
	NSOutputStream* _producerStream;
	NSInputStream* _consumerStream;
	const char* _currentBuffer;
	unsigned _bufferOffset;
	unsigned _bufferLimit;
	unsigned _fileOffset;
	NSString* _mediaLocalPath;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* mediaLocalPath;
@property(assign, nonatomic) unsigned fileOffset;
@property(assign, nonatomic) unsigned bufferLimit;
@property(assign, nonatomic) unsigned bufferOffset;
@property(assign, nonatomic) const char* currentBuffer;
@property(retain, nonatomic) NSInputStream* consumerStream;
@property(retain, nonatomic) NSOutputStream* producerStream;
@property(retain, nonatomic) NSData* bodySuffixData;
@property(retain, nonatomic) NSData* bodyFileData;
@property(retain, nonatomic) NSData* bodyPrefixData;
@property(retain, nonatomic) NSURLConnection* urlConnection;
@property(retain, nonatomic) NSString* streamingHash;
-(void).cxx_destruct;
-(id)hashOfMedia;
-(void)stream:(id)stream handleEvent:(unsigned)event;
-(void)processNextUploadChunk;
-(void)uploadRequestFailedWithError:(id)error;
-(void)uploadRequestFinishedWithResult:(id)result;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(id)uploadError;
-(BOOL)shouldProceed;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(void)finish;
-(void)startHTTPUploadToIp:(id)ip;
-(void)start;
-(void)dealloc;
-(void)assignMessage:(id)message delegate:(id)delegate;
-(id)initWithMediaLocalPath:(id)mediaLocalPath;
@end

__attribute__((visibility("hidden")))
@interface WAMediaViewToolbar : UIToolbar {
}
-(void)layoutSubviews;
-(BOOL)isInPortraitOrientation;
@end

__attribute__((visibility("hidden")))
@interface WAMediaViewController : WAViewController <UIScrollViewDelegate, UINavigationControllerDelegate, ABPeoplePickerNavigationControllerDelegate, WAMediaScrollViewDelegate, WAMediaGalleryControllerDelegate, WAImageToImageTransitioning, WAImageToImagePanPopGestureRecognizerDelegate, WANavigationControllerPopFromAnimating> {
	NSMutableSet* _recycledPages;
	NSMutableSet* _visiblePages;
	BOOL _suppressRelayoutInScrollViewDidScroll;
	BOOL _tiling;
	UINavigationController* _lastNavigationController;
	NSTimer* _hideBarsTimer;
	BOOL _shouldAutoPlay;
	BOOL _shouldResumePlayback;
	BOOL _fullScreenMode;
	float _lastStatusBarHeight;
	UIBarButtonItem* _showAllButton;
	UIBarButtonItem* _actionButton;
	UIBarButtonItem* _trashButton;
	UIBarButtonItem* _playButton;
	UIBarButtonItem* _pauseButton;
	UIBarButtonItem* _previousButton;
	UIBarButtonItem* _nextButton;
	NSTimer* _holdingTimer;
	BOOL _holding;
	BOOL _mediaManagerUpdateInProgress;
	WAMessage* _currentMessage;
	BOOL _reloadCurrentMessageOnAppear;
	UIView* _busyBackgroundView;
	UIActivityIndicatorView* _busySpinner;
	WAMediaCaptionView* _captionView;
	WAImageToImagePanPopGestureRecognizer* _panPopGesture;
	WAMediaManager* _mediaManager;
	int _currentPageIndex;
	UIScrollView* _pagingScrollView;
	UIToolbar* _toolbar;
	UIView* _viewMediaInfo;
	UILabel* _labelMediaInfo;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* labelMediaInfo;
@property(retain, nonatomic) UIView* viewMediaInfo;
@property(retain, nonatomic) UIToolbar* toolbar;
@property(retain, nonatomic) UIScrollView* pagingScrollView;
@property(assign, nonatomic) int currentPageIndex;
@property(retain, nonatomic) WAMediaManager* mediaManager;
-(void).cxx_destruct;
-(void)applicationWillPresentCallScreen:(id)application;
-(void)showMissingVideoErrorWithTryingToForward:(BOOL)forward;
-(void)gestureRecognizerWillFinishManagingInteractivePopTransition:(id)gestureRecognizer;
-(void)gestureRecognizerDidBeginManagingInteractivePopTransition:(id)gestureRecognizer;
-(void)gestureRecognizerWillBeginManagingInteractivePopTransition:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)usesScreenEdgePanGestureRecognizerForCustomPopTransition;
-(id)popFromAnimationIdentifier;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)nonTransitioningContainerView;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)wa_applicationWillEnterForeground;
-(void)wa_applicationDidEnterBackground;
-(void)setCurrentPageIndex:(int)index scrollToPage:(BOOL)page;
-(void)refreshInterfaceOnPageChange;
-(void)mediaGalleryController:(id)controller didSelectMediaAtIndexPath:(id)indexPath;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person property:(int)property identifier:(int)identifier;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(void*)person;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)assignImage:(id)image toContactID:(int)contactID;
-(void)presentMoveAndScaleViewControllerForPerson:(void*)person;
-(void)assignImageToContact;
-(void)saveCurrentMedia;
-(BOOL)isMediaScrollViewInFullScreenMode:(id)fullScreenMode;
-(void)mediaScrollViewDidEndZooming:(id)mediaScrollView;
-(void)mediaScrollViewWillBeginZooming:(id)mediaScrollView;
-(void)mediaScrollViewWillBeginDragging:(id)mediaScrollView;
-(void)mediaScrollViewWillBeginZoomBounceAnimation:(id)mediaScrollView;
-(void)mediaScrollViewDidScroll:(id)mediaScrollView;
-(void)mediaScrollViewDidZoom:(id)mediaScrollView;
-(void)updateImageRectOfCaptionViewForMediaScrollView:(id)mediaScrollView;
-(void)mediaScrollViewDidEndScrubbing:(id)mediaScrollView;
-(void)mediaScrollViewDidBeginScrubbing:(id)mediaScrollView;
-(UIEdgeInsets)mediaScrollViewLayoutInset:(id)inset;
-(BOOL)mediaScrollViewCanShowErrorAlertView:(id)view;
-(void)mediaScrollViewWantsFullscreenTimerInvalidated:(id)invalidated;
-(void)mediaScrollViewDidFinishLongPress:(id)mediaScrollView;
-(void)mediaScrollViewDidReceiveSingleTap:(id)mediaScrollView;
-(void)mediaScrollViewPlaybackDidFinish:(id)mediaScrollViewPlayback;
-(BOOL)mediaScrollView:(id)view handleEncounteredError:(id)error;
-(void)mediaScrollViewPlaybackStateDidChange:(id)mediaScrollViewPlaybackState;
-(void)mediaScrollViewLoadStateDidChange:(id)mediaScrollViewLoadState;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)updateCaptionView;
-(void)relayoutCaptionView;
-(void)wa_fontSizeDidChange;
-(id)previewActionItems;
-(void)didReceiveMemoryWarning;
-(void)viewWillTransitionToSize:(CGSize)view withTransitionCoordinator:(id)transitionCoordinator;
-(id)rotatingFooterView;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotate;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)willMoveToParentViewController:(id)parentViewController;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)deleteCurrentMedia:(id)media;
-(void)showAllMedia:(id)media;
-(void)navigateToNextPage:(id)nextPage;
-(void)beginSeekingForward:(id)forward;
-(void)handleNextButtonTouchDown:(id)down;
-(void)handleNextButtonTouchUp:(id)up;
-(void)navigateToPreviousPage:(id)previousPage;
-(void)beginSeekingBackward:(id)backward;
-(void)handlePreviousButtonTouchDown:(id)down;
-(void)handlePreviousButtonTouchUp:(id)up;
-(void)showMediaActions:(id)actions;
-(void)togglePlayPause:(id)pause;
-(void)reallyDeleteCurrentMedia;
-(void)tilePages;
-(void)configurePage:(id)page forIndex:(unsigned)index;
-(id)pageForIndex:(unsigned)index;
-(BOOL)isDisplayingPageForIndex:(unsigned)index;
-(void)recyclePage:(id)page;
-(id)dequeueRecycledPage;
-(void)shareMediaExternally;
-(void)forwardMediaViaWhatsAppToContactInfo:(id)contactInfo;
-(void)showPersonPickerForMediaForwardViaWhatsApp;
-(void)setProfilePhoto;
-(void)assignCurrentImageToGroup;
-(void)setSpinnerHidden:(BOOL)hidden;
-(void)hideBarsTimer:(id)timer;
-(void)cancelHideBarsTimer;
-(void)startHideBarsTimer;
-(int)preferredStatusBarStyle;
-(void)setFullScreenMode:(BOOL)mode animated:(BOOL)animated;
-(void)setFullScreenMode:(BOOL)mode;
-(BOOL)fullScreenModeAllowed;
-(void)updateToolbar;
-(void)updateInterface;
-(void)reloadPagingScrollView;
-(float)topLayoutEdge;
-(CGRect)frameForPageAtIndex:(unsigned)index;
-(CGRect)frameForPagingScrollView;
-(void)mediaManagerDidChangeContent:(id)mediaManager;
-(void)mediaManagerWillChangeContent:(id)mediaManager;
-(void)reloadMediaViewer;
-(id)uniqueIdentifier;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAMediaScrollView : UIScrollView <WAMediaPlayerTransportControlViewDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate, WAMediaPlayerDelegate> {
	UIImageView* _imageView;
	float _fillToScreenScale;
	UIImageView* _audioOnlyBackgroundImageView;
	UIImageView* _audioOnlyLogoImageView;
	WAMessage* _currentMediaMessage;
	BOOL _showNextPlaybackError;
	WAMediaPlayerTransportControlView* _playerTransportBar;
	UILongPressGestureRecognizer* _longPressGesture;
	UITapGestureRecognizer* _doubleTapGesture;
	BOOL _needsScrollViewZoomAdjustment;
	BOOL _mediaControlsHidden;
	BOOL _suppressLayout;
	id<WAMediaScrollViewDelegate> _mediaDelegate;
	unsigned _index;
	float _topLayoutEdge;
	float _offset;
	WAMediaPlayer* _mediaPlayer;
	float _initialZoomScale;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL suppressLayout;
@property(readonly, assign, nonatomic) float initialZoomScale;
@property(readonly, assign, nonatomic) UIView* contentView;
@property(readonly, assign, nonatomic) BOOL isLongPressing;
@property(readonly, assign, nonatomic, getter=isPlayable) BOOL playable;
@property(readonly, assign, nonatomic) WAMediaPlayer* mediaPlayer;
@property(assign, nonatomic) BOOL mediaControlsHidden;
@property(assign, nonatomic) float offset;
@property(assign, nonatomic) float topLayoutEdge;
@property(assign, nonatomic) unsigned index;
@property(assign, nonatomic) __weak id<WAMediaScrollViewDelegate> mediaDelegate;
-(void).cxx_destruct;
-(void)mediaPlayerTransportControlViewDidChangeCurrentTime:(id)mediaPlayerTransportControlView;
-(void)mediaPlayerTransportControlViewDidEndScrubbing:(id)mediaPlayerTransportControlView;
-(void)mediaPlayerTransportControlViewDidBeginScrubbing:(id)mediaPlayerTransportControlView;
-(void)mediaPlayerDidEndScrubbing:(id)mediaPlayer;
-(void)mediaPlayerDidBeginScrubbing:(id)mediaPlayer;
-(void)mediaPlayerDidPlayToEndTime:(id)mediaPlayer;
-(void)mediaPlayerDidFinishLoading:(id)mediaPlayer;
-(void)mediaPlayerDidChangeCurrentTime:(id)mediaPlayer;
-(void)mediaPlayerStatusDidChange:(id)mediaPlayerStatus;
-(void)handlePlaybackError;
-(void)tryToShowPlaybackError;
-(void)displayMediaInMessage:(id)message;
-(id)accessibilityLabelWithMediaType:(CFStringRef)mediaType size:(CGSize)size date:(id)date;
-(void)mediaPlayerDidRequestPlaybackStart:(id)mediaPlayer;
-(void)pause;
-(void)playInitiatedByAutoPlay:(BOOL)play;
-(void)displayQTLogo;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)scrollViewWillBeginZooming:(id)scrollView withView:(id)view;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)handleLongPress:(id)press;
-(void)handleDoubleTap:(id)tap;
-(void)handleSingleTap:(id)tap;
-(void)showPopupMenuAtPoint:(CGPoint)point;
-(void)copy:(id)copy;
-(BOOL)canBecomeFirstResponder;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)configureZooming;
-(CGRect)zoomRectForScale:(float)scale withCenter:(CGPoint)center;
-(void)relayoutAlongsideLayerAnimation;
-(void)toggleZoomInOutAtPoint:(CGPoint)point;
-(void)setMediaControlsHidden:(BOOL)hidden animationDuration:(double)duration;
-(void)animateOutImageView:(id)view completion:(id)completion;
-(void)animateDeletionWithCompletionHandler:(id)completionHandler;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)setFrame:(CGRect)frame;
-(void)setBounds:(CGRect)bounds;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WASafariPreviewController : WAViewController {
	UIView* _headerView;
	UILabel* _titleLabel;
	NSURL* _URL;
	SFSafariViewController* _safariViewController;
}
-(void).cxx_destruct;
-(id)previewActionItems;
-(void)viewDidLayoutSubviews;
-(void)loadView;
-(id)initWithURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface WADatabaseStatsTableViewHeader : UIView {
	UILabel* _headerLabel;
	UIView* _borderView;
	UIView* _backgroundView;
}
@property(retain, nonatomic) UIView* backgroundView;
@property(retain, nonatomic) UIView* borderView;
@property(retain, nonatomic) UILabel* headerLabel;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WADatabaseStatsTableViewController : WATableViewController <NSFetchedResultsControllerDelegate> {
	BOOL _isLoading;
	WADatabaseStatsTableViewHeader* _headerView;
	UIBarButtonItem* _refreshButton;
	UIBarButtonItem* _spinnerItem;
	WACircularProgressView* _progressCircle;
	UIView* _progressView;
	UILabel* _progressLabel;
	NSMutableIndexSet* _expandedCells;
	NSFetchedResultsController* _fetchedResultsController;
	int _sortMethod;
	float _expandedHeight;
	float _collapsedHeight;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)title;
-(void).cxx_destruct;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)unhideAllSeparators;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)configureCell:(id)cell atIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)controllerWillChangeContent:(id)controller;
-(id)fetchedResultsController;
-(void)finishedRefreshing:(id)refreshing;
-(void)receivedRefreshUpdate:(id)update;
-(void)startRefreshRecurring:(BOOL)recurring;
-(void)setHeaderLabelText;
-(void)refreshButtonTapped:(id)tapped;
-(void)sortMethodDidChange:(id)sortMethod;
-(void)viewDidLayoutSubviews;
-(void)viewWillLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)wa_fontSizeDidChange;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAContactEditingHeaderView : UIView <WAContactPropertyTextFieldDelegate> {
	BOOL _hasPhoto;
	id<WAContactEditingHeaderViewDelegate> _delegate;
	WAMergedContact* _mergedContact;
	UIFont* _textFieldFont;
	UIView* _viewPhoto;
	UIImageView* _imageViewPhoto;
	UIButton* _buttonAddPhoto;
	UIButton* _buttonEditPhoto;
	NSMutableArray* _textFields;
	unsigned _nameFormat;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) unsigned nameFormat;
@property(retain, nonatomic) NSMutableArray* textFields;
@property(retain, nonatomic) UIButton* buttonEditPhoto;
@property(retain, nonatomic) UIButton* buttonAddPhoto;
@property(retain, nonatomic) UIImageView* imageViewPhoto;
@property(retain, nonatomic) UIView* viewPhoto;
@property(assign, nonatomic) BOOL hasPhoto;
@property(retain, nonatomic) UIFont* textFieldFont;
@property(retain, nonatomic) WAMergedContact* mergedContact;
@property(assign, nonatomic) __weak id<WAContactEditingHeaderViewDelegate> delegate;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)isFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(void)contactPropertyTextFieldValueChanged:(id)changed;
-(BOOL)contactPropertyTextFieldShouldReturn:(id)contactPropertyTextField;
-(id)unusedContactHeaderProperties;
-(id)allContactHeaderProperties;
-(void)editPhotoAction:(id)action;
-(void)reloadContactPhoto;
-(void)reloadContactData;
-(id)addTextFieldForABPropertyID:(int)abpropertyID withValue:(id)value;
-(id)addTextFieldForABPropertyID:(int)abpropertyID withValue:(id)value makeActive:(BOOL)active;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WACameraFilter : NSObject {
}
-(id)filterImage:(id)image;
@end

__attribute__((visibility("hidden")))
@interface WACameraGaussianBlurFilter : WACameraFilter {
	CIFilter* _blurFilter;
	CIFilter* _affineClampFilter;
	float _radius;
}
@property(assign, nonatomic) float radius;
-(void).cxx_destruct;
-(id)filterImage:(id)image;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAPlaceDetailsViewController : WAViewController <UIWebViewDelegate> {
	BOOL _pageLoaded;
	WAPlace* _waPlace;
	id<ShareLocationControllerDelegate> _delegate;
	UIWebView* _webView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIWebView* webView;
@property(assign, nonatomic) __weak id<ShareLocationControllerDelegate> delegate;
@property(retain, nonatomic) WAPlace* waPlace;
-(void).cxx_destruct;
-(void)webView:(id)view didFailLoadWithError:(id)error;
-(void)webViewDidFinishLoad:(id)webView;
-(void)webViewDidStartLoad:(id)webView;
-(BOOL)webView:(id)view shouldStartLoadWithRequest:(id)request navigationType:(int)type;
-(void)hideActivityIndicator;
-(void)showActivityIndicator;
-(void)loadPlacePageWithURLString:(id)urlstring;
-(void)sendPlaceAction:(id)action;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(void)dealloc;
-(id)initWithWAPlace:(id)waplace delegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WAThumbsViewController : WASavedContentBrowserChildTableViewController <WAThumbsTableViewCellDelegate, WAMediaGallery> {
	UIView* _mediaCountView;
	UILabel* _mediaCountLabel;
	UIView* _noMediaView;
	UIImageView* _noMediaImageView;
	UILabel* _noMediaTitleLabel;
	UILabel* _noMediaTextLabel;
	UIBarButtonItem* _editBarButton;
	UIBarButtonItem* _cancelBarButton;
	UIBarButtonItem* _deleteBarButton;
	UIBarButtonItem* _doneBarButton;
	BOOL _editing;
	NSMutableSet* _selectedIndexPaths;
	NSOperationQueue* _thumbnailLoadingOpQueue;
	int _thumbnailCountPerRow;
	BOOL _needsAutoScroll;
	BOOL _isPerformingFancyRotation;
	UIImageView* _beforeRotationSnapshotImageView;
	UIImageView* _afterRotationSnapshotImageView;
	UIView* _whiteBackgroundView;
	NSIndexPath* _thumbnailIndexPathToRestore;
	CGPoint _contentOffsetAtStartOfRotation;
	NSMutableArray* _selectedMessagesBeforeMediaManagerContentChange;
	BOOL _mediaManagerUpdateInProgress;
	WAMediaManager* _mediaManager;
	id<WAMediaGalleryControllerDelegate> _delegate;
	NSIndexPath* _indexPathOfMessageToScrollToWhenAppearing;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSIndexPath* indexPathOfMessageToScrollToWhenAppearing;
@property(assign, nonatomic) __weak id<WAMediaGalleryControllerDelegate> delegate;
@property(retain, nonatomic) WAMediaManager* mediaManager;
-(void).cxx_destruct;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)scrollToThumbnailAtIndexPath:(id)indexPath animated:(BOOL)animated;
-(id)indexPathOfThumbnailAtCenterOfView;
-(id)tableViewSnapshot;
-(void)tableViewCell:(id)cell tappedImageAtIndex:(int)index;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)updateFooter;
-(void)scrollAutomaticallyToRelevantItem;
-(void)viewDidLayoutSubviews;
-(void)viewWillLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)exit:(id)exit;
-(void)deleteAction:(id)action;
-(void)cancelAction:(id)action;
-(void)editAction:(id)action;
-(void)mediaManagerDidChangeContent:(id)mediaManager;
-(void)mediaManagerWillChangeContent:(id)mediaManager;
-(void)presentMediaAtIndexPath:(id)indexPath;
-(void)deleteSelectedMedia;
-(void)updateEditingWithAnimation:(BOOL)animation;
-(void)updateSelection;
-(void)updateLayoutToOrientation:(int)orientation;
-(void)relayoutNoMediaViews;
-(id)uniqueIdentifier;
-(id)initWithStyle:(int)style;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface ChatNavigationController : WANavigationController {
}
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAPlace : NSObject <MKAnnotation> {
	NSObject<OS_dispatch_group>* _infoLoadingGroup;
	NSString* _placeId;
	NSString* _name;
	NSString* _shortAddress;
	NSString* _fullAddress;
	NSString* _urlString;
	NSString* _iconURLString;
	CLLocation* _location;
	UIImage* _mapThumbnail;
	unsigned _source;
	double _distance;
}
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) XXStruct_gLbvpC coordinate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned source;
@property(retain, nonatomic) UIImage* mapThumbnail;
@property(assign, nonatomic) double distance;
@property(retain, nonatomic) CLLocation* location;
@property(retain, nonatomic) NSString* iconURLString;
@property(retain, nonatomic) NSString* urlString;
@property(retain, nonatomic) NSString* fullAddress;
@property(retain, nonatomic) NSString* shortAddress;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* placeId;
+(void)fetchAppleMapsThumbnailForLocation:(id)location completion:(id)completion retryOnFail:(BOOL)fail;
+(void)fetchGoogleMapsThumbnailForLocation:(id)location completion:(id)completion;
+(id)mapPreviewWithPinOverlay:(id)pinOverlay;
+(id)WAPlaceWithVCardData:(id)vcardData;
+(void)initialize;
-(void).cxx_destruct;
-(void)fetchMapThumbnailWithCompletion:(id)completion;
-(BOOL)mapThumbnailFetchNeeded;
-(void)fetchFacebookPlaceDetailsWithCompletion:(id)completion;
-(void)fetchGooglePlaceDetailsWithCompletion:(id)completion;
-(void)fetchPlaceDetailsWithCompletion:(id)completion;
-(BOOL)placeDetailsFetchNeeded;
-(BOOL)isEqual:(id)equal;
-(int)compare:(id)compare;
-(id)initWithSource:(unsigned)source;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoViewController : WAContactInfoBaseViewController <MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate, UIActionSheetDelegate, WAImageToImageTransitioning, WANavigationControllerPopToAnimating, WAContactEditViewControllerDelegate, WAContactInfoTableViewCellDelegate, WATableViewCellPreviewingDelegate> {
	NSManagedObjectID* _contactID;
	NSMutableArray* _contactInfoSections;
	NSMutableArray* _sectionHeights;
	WAContactInfoPageAction* _clearChatHistoryAction;
	WAContactInfoPageAction* _emailChatHistoryAction;
	WAContactInfoPageAction* _viewAllMediaAction;
	WAContactInfoPageAction* _viewStarredMessagesAction;
	WAContactInfoPageAction* _blockContactAction;
	WAContactInfoPageAction* _viewGroupsInCommonAction;
	WAContactInfoPageAction* _muteContactAction;
	WAContactInfoPageAction* _callUnknownContactAction;
	BOOL _showMergedContact;
	BOOL _hasLinkedContacts;
	NSString* _jidForAnimatedTransition;
	WAContactInfoTableViewCell* _tableViewCellForAnimatedTransition;
	NSArray* _whatsAppPhoneIDs;
	NSArray* _inviteUnits;
	WACallEventsTableViewCell* _callEventsCell;
	int _numberOfStarredMessages;
	NSIndexPath* _indexPathOfStarredMessagesCell;
	int _numberOfWebURLs;
	NSIndexPath* _indexPathOfAllMediaCell;
	int _willDeleteMessagesCounter;
	BOOL _willDeleteWebURLMessages;
	BOOL _showOnlySaveToAddressBookActions;
	WAContactInfoTableHeaderView* _tableHeader;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int numberOfWebURLs;
@property(assign, nonatomic) BOOL showOnlySaveToAddressBookActions;
@property(retain, nonatomic) WAContactInfoTableHeaderView* tableHeader;
-(void).cxx_destruct;
-(BOOL)shouldBeginCustomPopAnimationForAnimationIdentifier:(id)animationIdentifier;
-(id)popAnimationControllerFromViewController:(id)viewController;
-(id)popAnimationInteractionControllerFromViewController:(id)viewController;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)profilePictureUpdated:(id)updated;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)invalidateNumberOfWebURLs;
-(void)invalidateNumberOfStarredMessages;
-(int)numberOfStarredMessages;
-(void)previewingContext:(id)context inTableViewCell:(id)tableViewCell commitViewController:(id)controller;
-(id)previewingContext:(id)context viewControllerForData:(id)data inTableViewCell:(id)tableViewCell;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)cellForContact:(id)contact indexPath:(id)path tableView:(id)view;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)contactEditControllerDidCancel:(id)contactEditController;
-(void)contactEditControllerDidSave:(id)contactEditController;
-(void)editAction:(id)action;
-(void)cancelAction:(id)action;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)inviteViaEmail:(id)email;
-(void)inviteViaSMS:(id)sms;
-(void)inviteContactViaPhoneOrEmail:(id)email;
-(void)inviteContact;
-(void)profilePictureTappedInContactInfoCell:(id)contactInfoCell;
-(void)callButtonTappedInContactInfoCell:(id)contactInfoCell;
-(void)messageButtonTappedInContactInfoCell:(id)contactInfoCell;
-(void)startChatWithJID:(id)jid;
-(void)sendMessageToContact;
-(void)setUpMediaManager;
-(void)didDeleteAllMessages;
-(void)didDeleteMessages:(id)messages;
-(void)willDeleteMessages:(id)messages;
-(void)didAddMessages:(id)messages;
-(void)clearChatHistory;
-(void)emailChatHistory;
-(void)askToAttachMediaForChatSession:(id)chatSession;
-(void)emailChatHistoryForWAChatSession:(id)wachatSession withMedia:(BOOL)media;
-(void)contactBlockedStatusDidChange;
-(void)updateBlockContactAction;
-(void)setAggregateCallEvent:(id)event;
-(void)muteContactUntil:(id)until;
-(void)rebuildContactInfoDataUnitsForKnownContact;
-(void)rebuildContactInfoDataUnitsForUnknownContact;
-(void)reload;
-(id)headerTextForLinkedContacts;
-(void)setContact:(id)contact;
-(id)contact;
-(void)callStateDidChange:(id)callState;
-(void)wa_fontSizeDidChange;
-(void)reloadWithContact:(id)contact;
-(void)configureForSaveToAddressBookWithTitle:(id)title andData:(id)data ofType:(unsigned long long)type;
-(id)initWithContact:(id)contact merged:(BOOL)merged whatsAppID:(id)anId detailText:(id)text;
@end

__attribute__((visibility("hidden")))
@interface WATableRow : NSObject {
	BOOL _editable;
	BOOL _disabled;
	id _editHandler;
	id _handler;
	UITableViewCell* _cell;
	float _height;
}
@property(assign, nonatomic) float height;
@property(assign, nonatomic) BOOL disabled;
@property(assign, nonatomic, getter=isEditable) BOOL editable;
@property(retain, nonatomic) UITableViewCell* cell;
@property(copy, nonatomic) id handler;
@property(copy, nonatomic) id editHandler;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WATableSection : NSObject {
	NSMutableArray* _rows;
	NSString* _headerText;
	NSString* _footerText;
}
@property(retain, nonatomic) NSString* footerText;
@property(retain, nonatomic) NSString* headerText;
@property(retain, nonatomic) NSArray* rows;
-(void).cxx_destruct;
-(void)deleteRow:(id)row;
-(id)addTableRowWithCellStyle:(int)cellStyle;
-(id)addDefaultTableRow;
-(void)addRow:(id)row;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAStaticTableViewController : WATableViewController {
	NSMutableArray* _sections;
}
@property(retain, nonatomic) NSArray* sections;
-(void).cxx_destruct;
-(void)deselectActiveCell;
-(void)wa_fontSizeDidChange;
-(void)reload;
-(void)willDisplayHeaderView:(id)view forSection:(int)section;
-(void)tableView:(id)view willDisplayHeaderView:(id)view2 forSection:(int)section;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)rowAtIndexPath:(id)indexPath;
-(id)addSection;
-(void)setupTableView;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAApplication : UIApplication {
	NSArray* _keyboardShortcuts;
}
+(id)wa_delegate;
-(void).cxx_destruct;
-(void)handleCommandReturn:(id)aReturn;
-(id)keyCommands;
-(void)sendEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface WAChatBackgroundViewController : WAViewController {
	UIMotionEffectGroup* _parallaxEffect;
	WAOverlayImageView* _wallpaperImageView;
}
@property(retain, nonatomic) WAOverlayImageView* wallpaperImageView;
-(void).cxx_destruct;
-(void)resizeWallpaper;
-(void)reloadWallpaper;
-(void)updateLayoutForCurrentOrientation;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WAMonospaceLabel : UILabel {
}
-(void)drawRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface WAInputTextView : WATextView {
	float _previousContentHeight;
	BOOL _scrollIndicatorsShown;
	UIEdgeInsets _fixedInsets;
	WAMessageCell* _popupMenuTargetCell;
	WATextView* _textViewForMeasuring;
	BOOL _ignoreSetContentOffset;
	BOOL _alwaysBecomesFirstResponder;
	BOOL _didCompleteFirstLayoutPass;
	BOOL _caretHidden;
	BOOL _alwaysResignsFirstResponder;
	BOOL _neverResignsFirstResponder;
	BOOL _neverBecomesFirstResponder;
	float _minimumHeight;
}
@property(assign, nonatomic) BOOL neverBecomesFirstResponder;
@property(assign, nonatomic) BOOL neverResignsFirstResponder;
@property(assign, nonatomic) BOOL alwaysResignsFirstResponder;
@property(assign, nonatomic, getter=isCaretHidden) BOOL caretHidden;
@property(readonly, assign, nonatomic) float minimumHeight;
@property(assign, nonatomic) __weak id<WAInputTextViewDelegate> delegate;
-(void).cxx_destruct;
-(void)dictationRecordingDidEnd;
-(void)dictationRecognitionFailed;
-(void)markMessageAsStarred:(id)starred;
-(void)stopSpeakingMessage:(id)message;
-(void)speakMessage:(id)message;
-(void)replyMessageSender:(id)sender;
-(void)addMessageSenderToContacts:(id)contacts;
-(void)forwardMessage:(id)message;
-(void)messageDetails:(id)details;
-(void)deleteMessage:(id)message;
-(void)saveMediaInMessage:(id)message;
-(void)copyMessage:(id)message;
-(void)paste:(id)paste;
-(void)menuControllerDidHideMenu:(id)menuController;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)showPopupMenuForMessageCell:(id)messageCell;
-(void)setContentOffset:(CGPoint)offset;
-(void)scrollToBottomAnimated:(BOOL)bottomAnimated;
-(void)setText:(id)text;
-(void)setFont:(id)font;
-(void)scrollToVisibleRangeAfterDelay:(double)visibleRangeAfterDelay;
-(void)setFrame:(CGRect)frame;
-(void)updateTextViewMetrics;
-(void)setContentInset:(UIEdgeInsets)inset;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(float)bestHeightForAttributedText:(id)attributedText inSize:(CGSize)size lastLineRect:(CGRect*)rect;
-(float)bestHeightForText:(id)text inSize:(CGSize)size lastLineRect:(CGRect*)rect;
-(id)topMostView;
-(float)bestHeightForAttributedText:(id)attributedText inSize:(CGSize)size;
-(float)bestHeightForText:(id)text inSize:(CGSize)size;
-(float)bestHeightForAttributedText:(id)attributedText;
-(float)bestHeightForText:(id)text;
-(CGSize)sizeThatFits:(CGSize)fits;
-(float)bestHeightForCurrentText;
-(void)logMetrics;
-(void)setUserScrollingEnabled:(BOOL)enabled;
-(id)caretView;
-(BOOL)canBecomeFirstResponder;
-(BOOL)canResignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)resignFirstResponder;
-(void)forceBecomeFirstResponder;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAChatProperties : NSManagedObject {
}
@property(retain, nonatomic) WAChatSession* chatSession;
@property(retain, nonatomic) NSDate* muteDate;
@property(retain, nonatomic) NSNumber* alerts;
@property(retain, nonatomic) NSString* soundName;
@property(retain, nonatomic) NSNumber* enabled;
@end

__attribute__((visibility("hidden")))
@interface WACircularActivityView : WAShapeView {
	BOOL _animating;
	BOOL _hidesWhenStopped;
	UIColor* _color;
}
@property(assign) BOOL hidesWhenStopped;
@property(retain, nonatomic) UIColor* color;
@property(assign, nonatomic) float barWidth;
-(void).cxx_destruct;
-(void)stopAnimating;
-(void)startAnimating;
-(BOOL)isAnimating;
-(void)applicationWillEnterForeground:(id)application;
-(void)updateVisibility;
-(void)tintColorDidChange;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

@interface WAPlaceInfoView : UIView {
	NSAttributedString* _placeInfoString;
	NSAttributedString* _placeInfoStringHighlighted;
	WAMessageFooterView* _footerView;
	BOOL _showListIcon;
	UIImageView* _listIconImageView;
	UIView* _listIconSeparatorView;
	BOOL _highlighted;
	UILabel* _label;
}
@property(readonly, assign, nonatomic) UIImageView* listIconImageView;
@property(assign, nonatomic) BOOL highlighted;
@property(readonly, assign, nonatomic) UILabel* label;
+(id)nameFont;
+(id)attributedStringFromCellData:(id)cellData returningNameRange:(out NSRange*)range;
+(CGSize)preferredSizeForCellData:(id)cellData maximumWidth:(float)width;
+(void)initialize;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setStarIconHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)configureWithCellData:(id)cellData animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface RecordingUserData : NSObject {
	NSDate* _startTime;
	void* _fileHanlde;
}
@property(assign, nonatomic) void* fileHanlde;
@property(retain, nonatomic) NSDate* startTime;
-(void).cxx_destruct;
-(id)initWithDate:(id)date fileHandle:(void*)handle;
@end

__attribute__((visibility("hidden")))
@interface CallManager : NSObject {
	BOOL _pendingCall;
	UILocalNotification* _localCallNotification;
	unsigned long _previousAudioCategory;
	int _muteEnable;
	NSMutableArray* _offlineStanzaList;
	WATimer* _outgoingCallTimer;
	double _callWatchDogStartTs;
	int _timeoutSecs;
	id _outgoingSoundActivity;
	id _incomingSoundActivity;
	id _callActivity;
	unsigned long _callSoundPlayer;
	NSObject<OS_dispatch_queue>* _recording_write_queue;
	BOOL _voipInited;
	NSObject<OS_dispatch_queue>* _voip_queue;
	NSTimer* _vibrationTimer;
	int _callWakeupSource;
	int _callUISource;
	BOOL _uploadFieldStatsAtCallEnd;
	XXStruct_QeyDBA _saved_field_stats;
	int _userRating;
	NSString* _userRatingText;
	BOOL _sendUserRating;
	BOOL _savedFieldStatsValid;
	int _vibrateSecs;
	unsigned long _reflexiveIPfromChatd;
	BOOL _isCallerKnown;
	BOOL _isCaller;
	BOOL _callConnected;
	BOOL _callFailed;
	BOOL _callTimedout;
	BOOL _callEndedByUser;
	BOOL _relayBindsFailed;
	BOOL _callInterrupted;
	BOOL _callInterruptedByPeer;
	BOOL _callMutedByPeer;
	BOOL _callRejected;
	BOOL _shouldAutoAcceptTheCallFromPush;
	BOOL _restartAudioStreamOnCallActive;
	BOOL _rxTrafficStopped;
	BOOL _callRejectedViaNotificationAction;
	BOOL _showRatingScreenForCall;
	BOOL _badASN;
	BOOL _peerBadASN;
	NSString* _peerJid;
	NSString* _peerDisplayName;
	NSString* _peerPhoneLabel;
	NSString* _peerFirstName;
	NSString* _rejectReason;
	NSString* _callIdFromPush;
	NSString* _callOfferPushName;
	NSString* _callOfferElapsedTime;
	NSString* _callIdFromLocalNotification;
	NSString* _callIdFromOffer;
	NSString* _callPeerPlatform;
	NSString* _callPeerVersion;
}
@property(readonly, assign, nonatomic) BOOL peerBadASN;
@property(readonly, assign, nonatomic) BOOL badASN;
@property(readonly, assign, nonatomic) BOOL showRatingScreenForCall;
@property(copy, nonatomic) NSString* callPeerVersion;
@property(copy, nonatomic) NSString* callPeerPlatform;
@property(assign, nonatomic) BOOL callRejectedViaNotificationAction;
@property(assign, nonatomic, getter=isRxTrafficStopped) BOOL rxTrafficStopped;
@property(assign, nonatomic) BOOL restartAudioStreamOnCallActive;
@property(copy, nonatomic) NSString* callIdFromOffer;
@property(copy, nonatomic) NSString* callIdFromLocalNotification;
@property(assign, nonatomic) BOOL shouldAutoAcceptTheCallFromPush;
@property(copy, nonatomic) NSString* callOfferElapsedTime;
@property(copy, nonatomic) NSString* callOfferPushName;
@property(copy, nonatomic) NSString* callIdFromPush;
@property(assign, nonatomic) unsigned extraOpusModes;
@property(assign, nonatomic) unsigned callRecordingOptions;
@property(retain, nonatomic) NSString* rejectReason;
@property(assign, nonatomic) BOOL callRejected;
@property(assign, nonatomic, getter=isCallMutedByPeer) BOOL callMutedByPeer;
@property(assign, nonatomic, getter=isCallInterruptedByPeer) BOOL callInterruptedByPeer;
@property(assign, nonatomic, getter=isCallInterrupted) BOOL callInterrupted;
@property(assign, nonatomic) BOOL relayBindsFailed;
@property(assign, nonatomic) BOOL callEndedByUser;
@property(assign, nonatomic) BOOL callTimedout;
@property(assign, nonatomic) BOOL callFailed;
@property(assign, nonatomic) BOOL callConnected;
@property(readonly, assign, nonatomic) BOOL isCaller;
@property(readonly, assign, nonatomic) BOOL isCallerKnown;
@property(copy, nonatomic) NSString* peerFirstName;
@property(copy, nonatomic) NSString* peerPhoneLabel;
@property(copy, nonatomic) NSString* peerDisplayName;
@property(copy, nonatomic) NSString* peerJid;
+(BOOL)isCellularCallActive;
+(id)getPeerDisplayNameWithJid:(id)jid;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)attemptOutgoingCellularVoiceCallWithPhoneURL:(id)phoneURL;
-(void)attemptOutgoingVoiceCallWithJID:(id)jid bypassEligibilityCheck:(BOOL)check callUISource:(int)source;
-(id)messageToDisplayIfUserIsUncallableWithJid:(id)jid;
-(void)cancelCallWatchdog;
-(void)startCallWatchdog:(int)watchdog;
-(void)updateAudioCaps:(unsigned)caps;
-(void)autoRemoveCallCaptures;
-(void)closeRecordingFile:(void*)file;
-(void)saveCallCapture:(void*)capture len:(unsigned long)len type:(int)type time:(pj_time_val)time fileHandle:(void*)handle;
-(id)getCallCaptureDir;
-(void)stopRecordCall;
-(void)recordCallIfEnabled;
-(void)recordForTapeType:(int)tapeType;
-(void*)getRecordFileHandle:(int)handle;
-(BOOL)isAutoCallRecordingEnabled;
-(double)parseUserIdFromJid:(id)jid;
-(void)noUserRating;
-(void)submitUserRating:(int)rating withText:(id)text;
-(void)saveFieldStats:(XXStruct_QeyDBA)stats;
-(void)submitFieldStatsForMissedIncomingCall:(id)missedIncomingCall;
-(void)submitFieldStats:(XXStruct_QeyDBA)stats;
-(void)notifyPeerBlockedNetwork;
-(void)notifyBlockedNetwork;
-(void)notifyIncompatibleNetwork;
-(void)handleRelayBindsFailed;
-(void)addMissedCallForJid:(id)jid ts:(double)ts;
-(void)addCallEventWithStats:(const pjmedia_rtcp_stat*)stats txBytes:(unsigned long long)bytes rxBytes:(unsigned long long)bytes3;
-(void)applyAudioSettings;
-(int)mute:(int)mute;
-(int)setAudioOutput:(int)output;
-(int)endCall:(BOOL)call;
-(void)rejectCall:(XXStruct_qdxGfC*)call withReason:(id)reason;
-(int)rejectCall;
-(int)acceptCall;
-(int)getCallState;
-(BOOL)isCallStarted;
-(BOOL)isCallActive;
-(void)stopCallSound;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)stopIncomingCallVibration;
-(void)onVibrateTimer;
-(void)startIncomingCallVibration;
-(void)playCallSound:(int)sound;
-(void)do_voip_cleanup;
-(int)doVoIPInit;
-(BOOL)iPhone5orHigher;
-(void)resetCallDataStatsIfNeeded;
-(void)logVoIP:(const char*)ip;
-(const char*)getEndPointName:(int)name;
-(void)updateNetworkMedium;
-(void)handleNetworkChange;
-(void)sendAckForStanza:(id)stanza ackType:(id)type;
-(void)sendReceiptForStanza:(id)stanza;
-(id)getCallIdFromStanza:(id)stanza;
-(int)convertFromStanza:(id)stanza buf:(void*)buf len:(int*)len maxlen:(int)maxlen msgtype:(char*)msgtype reasonStr:(id*)str;
-(void)getRelayElectionFromStanza:(id)stanza relayElection:(XXStruct_jraSTC*)election;
-(void)getRelayLatenciesFromStanza:(id)stanza relayList:(XXStruct_sT6xeB*)list;
-(void)getClientOptionsFromStanza:(id)stanza;
-(void)getVoIPParamsFromStanza:(id)stanza voipParam:(XXStruct_v2Fk5C*)param msgType:(int)type;
-(void)getDefaultAndClientVoIPParams:(XXStruct_v2Fk5C*)params;
-(void)getRelayInfoFromStanza:(id)stanza relayInfo:(XXStruct_K5V6bD*)info;
-(void)getTransportCandidatesFromStanza:(id)stanza candList:(XXStruct_sJOP8D*)list;
-(id)convertToStanza:(char*)stanza len:(int)len;
-(int)voipStanzaTypeFromString:(id)string;
-(id)voipStanzaStringFromType:(int)type;
-(void)showLocalCallNotificationWithMissed:(BOOL)missed;
-(void)handleCallStanzaTimeout:(id)timeout;
-(void)handleCallOfferReceipt:(id)receipt;
-(void)handleCallAck:(id)ack;
-(void)handleCallStateOnEnteringForeground;
-(BOOL)timeoutCallIfNeeded;
-(void)uninitializeCallState;
-(void)restorePreviousAudioCategory;
-(void)callInterruptionDidEnd:(id)callInterruption;
-(void)callInterruptionDidBegin:(id)callInterruption;
-(void)startVoipAudioSession;
-(void)initializeCallStateWithCaller:(BOOL)caller peerJid:(id)jid pushName:(id)name callOfferElapsedTime:(id)time;
-(int)startCallWith:(id)with;
-(void)handleCallMuteFromPeer:(id)peer;
-(void)sendCallMuteToPeerBegin:(BOOL)peerBegin;
-(void)handleCallInterruptionFromPeer:(id)peer;
-(void)sendCallInterruptionToPeerBegin:(BOOL)peerBegin;
-(void)setCallWakeupSource:(id)source;
-(void)notifyEndofOffline;
-(id)callIdForStanza:(id)stanza;
-(int)innerTypeForStanza:(id)stanza;
-(void)processIncomingCallStanza:(id)stanza;
-(void)receiptOrAckStanza:(id)stanza;
-(void)handleIncomingCallStanza:(id)stanza;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAVCardMessageHelper : WAMessageHelper {
}
+(id)stringRepresentationForChatForMessage:(id)message;
+(id)stringRepresentationForMessage:(id)message;
-(id)activityDataTypeIdentifierForActivityType:(id)activityType;
-(id)activitySubjectForActivityType:(id)activityType;
-(id)activityItemForActivityType:(id)activityType;
-(id)activityPlaceholderItem;
@end

__attribute__((visibility("hidden")))
@interface WADateBubbleView : UIView {
	UIImageView* _bubbleImageView;
	UILabel* _titleLabel;
	UIView* _backgroundView;
	UIView* _maskView;
	UIImageView* _blurredBackgroundView;
	UIImageView* _highlightsImageView;
	BOOL _useBlurredBackground;
	id<WADateBubbleViewDelegate> _delegate;
	float _floating;
	int _sectionIndex;
	CGRect _toFrame;
}
@property(assign, nonatomic) CGRect toFrame;
@property(assign, nonatomic) int sectionIndex;
@property(assign, nonatomic) float floating;
@property(copy, nonatomic) NSString* title;
@property(assign, nonatomic) __weak id<WADateBubbleViewDelegate> delegate;
+(float)preferredHeight;
-(void).cxx_destruct;
-(id)accessibilityValue;
-(CGRect)accessibilityFrame;
-(BOOL)isAccessibilityElement;
-(void)fadeOutIfNeededWithAnimation:(BOOL)animation;
-(void)fadeInWithAnimation:(BOOL)animation;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAContactPopup : MKAnnotationView {
	int _imageTag;
}
@property(assign, nonatomic) int imageTag;
+(id)popupWithAnnotation:(id)annotation reuseIdentifier:(id)identifier;
-(void)setAnnotation:(id)annotation;
-(id)initWithAnnotation:(id)annotation reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _WAContactPopupOS7 : WAContactPopup {
	UIImage* _bottomArrow;
	UIView* _viewBody;
	UIImage* _pinImage;
}
-(void).cxx_destruct;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)drawRect:(CGRect)rect;
-(void)setAnnotation:(id)annotation;
-(void)setImageTag:(int)tag;
-(id)initWithAnnotation:(id)annotation reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _WAContactPopupOS6 : WAContactPopup {
	UIImage* _topImage;
	UIImage* _bottomLeft;
	UIImage* _bottomArrow;
	UIImage* _bottomRight;
	UIImage* _pinImage;
}
-(void).cxx_destruct;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)drawRect:(CGRect)rect;
-(void)setAnnotation:(id)annotation;
-(void)setImageTag:(int)tag;
-(id)initWithAnnotation:(id)annotation reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WALocationMessageHelper : WAMessageHelper {
}
+(id)stringRepresentationForNotificationForMessage:(id)message;
+(id)stringRepresentationForChatForMessage:(id)message;
+(id)stringRepresentationForMessage:(id)message;
+(void)loadMapThumbnailForLocation:(id)location completionQueue:(id)queue completion:(id)completion retryOnFail:(BOOL)fail;
+(void)loadGoogleMapsThumbnailForLocation:(id)location completionQueue:(id)queue completion:(id)completion;
+(float)maximumChatBubbleImageWidth;
-(void)internalGenerateXMPPThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
-(void)internalGenerateChatThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
-(CGSize)chatThumbnailSize;
-(id)chatThumbnailReturningPermanentState:(out BOOL*)state;
@end

__attribute__((visibility("hidden")))
@interface WAMediaGalleryLayoutAttributes : UICollectionViewLayoutAttributes {
	BOOL _translucent;
}
@property(assign, nonatomic) BOOL translucent;
-(BOOL)isEqual:(id)equal;
-(id)copyWithZone:(NSZone*)zone;
@end

__attribute__((visibility("hidden")))
@interface WAStaticPinCalloutView : UIView {
	UIView* _backgroundView;
	WACircularActivityView* _activityIndicator;
	UIButton* _buttonSendLocation;
	UILabel* _labelTitle;
	UILabel* _labelSubtitle;
	id _callback;
	NSString* _address;
}
@property(copy, nonatomic) NSString* address;
@property(copy, nonatomic) id callback;
-(void).cxx_destruct;
-(id)accessibilityValue;
-(id)accessibilityLabel;
-(unsigned long long)accessibilityTraits;
-(BOOL)isAccessibilityElement;
-(void)configureWithPlacemark:(id)placemark showActivityIndicator:(BOOL)indicator animated:(BOOL)animated;
-(void)tintColorDidChange;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(void)reloadFonts;
-(void)sendLocationButtonAction:(id)action;
-(void)updateHighlight:(id)highlight;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAStarredMessagesViewController : WAChatBaseViewController <UISearchControllerDelegate, UISearchResultsUpdating> {
	NSArray* _jids;
	UIView* _noStarredMessagesView;
	UILabel* _helperTextTitle;
	UILabel* _helperText;
	BOOL _setContentOffsetOnLayoutSubviews;
	BOOL _loadingEarlierMessages;
	NSArray* _preloadedMessages;
	CGSize _contentSizeBeforeLoadEarlierMessages;
	unsigned _loadedMessagesCount;
	WAChatMessagesController* _allMessagesController;
	NSSet* _currentSearchTokens;
	BOOL _searchInProgress;
	NSString* _currentSearchTerm;
	WAChatMessagesController* _searchResultsController;
	UISearchController* _searchController;
	BOOL _dismissingSearchController;
	BOOL _presentingSearchController;
	float _keyboardHeight;
	BOOL _combinedViewForAllChats;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL combinedViewForAllChats;
-(void).cxx_destruct;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(void)messageUpdated:(id)updated;
-(void)chatStorageDidDeleteMessages:(id)chatStorage;
-(void)loadEarlierMessagesIfNeeded;
-(void)preloadEarlierMessagesIfNeeded;
-(void)reloadMessageControllerWithMessageCount:(unsigned)messageCount;
-(void)addMessages:(id)messages toMessagesController:(id)messagesController;
-(id)loadMessagesFromOffset:(unsigned)offset count:(unsigned)count;
-(void)insertStarredMessageIfNecessary:(id)necessary;
-(void)openChatAroundMessage:(id)message;
-(void)messagesTableDidScroll;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)didDismissSearchController:(id)controller;
-(void)willDismissSearchController:(id)controller;
-(void)didPresentSearchController:(id)controller;
-(void)willPresentSearchController:(id)controller;
-(void)updateSearchResultsForSearchController:(id)searchController;
-(void)resetSearchResults;
-(void)redoSearch;
-(void)updateSearchTerm:(id)term;
-(void)updateSearchResults:(id)results;
-(void)performSearch;
-(void)showNoMessagesViewIfNecessary;
-(void)reloadHelperTextFonts;
-(void)addNoMessagesView;
-(void)wa_fontSizeDidChange;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithChatSessions:(id)chatSessions;
@end

__attribute__((visibility("hidden")))
@interface WABaseReceiptTableViewCell : UITableViewCell {
	UILabel* _timeLabel;
	UILabel* _dateLabel;
	UIFont* _dateTimeFont;
	float _timeLabelWidth;
	CGSize _timeLabelSize;
}
@property(readonly, assign, nonatomic) CGSize timeLabelSize;
@property(assign, nonatomic) float timeLabelWidth;
@property(retain, nonatomic) UIFont* dateTimeFont;
@property(readonly, assign, nonatomic) UILabel* dateLabel;
@property(readonly, assign, nonatomic) UILabel* timeLabel;
-(void).cxx_destruct;
-(id)receiptTimeStringForDate:(id)date;
-(id)receiptDateStringForDate:(id)date;
-(void)setReceiptDate:(id)date;
-(void)layoutSubviews;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface WANewGroupViewController : WATableViewController <WebImagePickerDelegate, WASinglePhotoPickerControllerDelegate> {
	UIImage* _groupPicture;
	id<WANewGroupViewControllerDelegate> _delegate;
	UITableViewCell* _cellGroupSubject;
	UITextField* _textFieldSubject;
	UILabel* _labelCharCount;
	UIView* _viewTableHeader;
	UILabel* _labelHelperText;
	UIView* _viewAddPhoto;
	UIImageView* _imageGroupPicture;
	UIButton* _buttonAddPhoto;
	UIButton* _buttonEditPhoto;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIButton* buttonEditPhoto;
@property(retain, nonatomic) UIButton* buttonAddPhoto;
@property(retain, nonatomic) UIImageView* imageGroupPicture;
@property(retain, nonatomic) UIView* viewAddPhoto;
@property(retain, nonatomic) UILabel* labelHelperText;
@property(retain, nonatomic) UIView* viewTableHeader;
@property(retain, nonatomic) UILabel* labelCharCount;
@property(retain, nonatomic) UITextField* textFieldSubject;
@property(retain, nonatomic) UITableViewCell* cellGroupSubject;
@property(assign, nonatomic) __weak id<WANewGroupViewControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)singlePhotoPickerControllerDidCancel:(id)singlePhotoPickerController;
-(void)singlePhotoPickerController:(id)controller didFinishWithImage:(id)image;
-(void)webImagePickerDidCancel:(id)webImagePicker;
-(void)webImagePicker:(id)picker didSelectImage:(id)image;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)layoutTableHeader;
-(void)showImageSearchController;
-(void)reallyShowImagePickerForSourceType:(int)sourceType;
-(void)showImagePickerForSourceType:(int)sourceType;
-(void)updateGroupPicture;
-(void)updateCharCount;
-(void)textFieldValueChanged:(id)changed;
-(void)editPhotoAction:(id)action;
-(void)nextAction:(id)action;
-(void)cancelAction:(id)action;
-(void)wa_fontSizeDidChange;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestGetStatus : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithJIDs:(id)jids completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestSetStatus : XMPPRequest {
}
-(id)initWithStatusText:(id)statusText fromWebClientRequestID:(id)webClientRequestID completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface _WADirectionsButtonContentView : UIView {
	UIImageView* _imageViewCarIcon;
	UILabel* _labelETA;
}
-(void).cxx_destruct;
-(void)setETADurationString:(id)string;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WADirectionsButton : UIButton {
	_WADirectionsButtonContentView* _contentView;
	double _expectedTravelTime;
}
@property(assign, nonatomic) double expectedTravelTime;
+(id)stringFromTimeInterval:(double)timeInterval;
+(id)button;
-(void).cxx_destruct;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)configureForLegacyOS;
-(void)configureWithETA;
-(void)configure;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface WALocationData : NSObject <MKAnnotation> {
	UIImage* _contactImage;
	double _expectedTravelTime;
	NSDate* _directionsResponseTimestamp;
	BOOL _showDistance;
	BOOL _showTimestamp;
	BOOL _directionsRequestInProgress;
	CLLocation* _location;
	NSDictionary* _addressComponents;
	CLLocation* _baseLocation;
	NSString* _contactName;
	int _contactID;
	MKPlacemark* _placemark;
	NSDate* _timestamp;
	NSManagedObjectID* _messageId;
}
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) XXStruct_gLbvpC coordinate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) double expectedTravelTime;
@property(assign, nonatomic) BOOL directionsRequestInProgress;
@property(assign, nonatomic) BOOL showTimestamp;
@property(assign, nonatomic) BOOL showDistance;
@property(readonly, assign, nonatomic) UIImage* contactImage;
@property(retain, nonatomic) NSManagedObjectID* messageId;
@property(retain, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) MKPlacemark* placemark;
@property(assign, nonatomic) int contactID;
@property(retain, nonatomic) NSString* contactName;
@property(retain, nonatomic) CLLocation* baseLocation;
@property(readonly, assign, nonatomic) NSDictionary* addressComponents;
@property(retain, nonatomic) CLLocation* location;
+(id)sharedTimePeriodFormatter;
-(void).cxx_destruct;
-(BOOL)isEqual:(id)equal;
-(id)initWithAddressComponents:(id)addressComponents;
-(id)initWithCoordinate:(XXStruct_gLbvpC)coordinate;
@end

__attribute__((visibility("hidden")))
@interface WALocationDataGroup : NSObject <MKAnnotation> {
	NSMutableArray* _locations;
}
@property(readonly, copy, nonatomic) NSString* subtitle;
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) XXStruct_gLbvpC coordinate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)isEqual:(id)equal;
-(id)locations;
-(id)baseLocation;
-(void)addLocationData:(id)data;
-(id)locationAtIndex:(unsigned)index;
-(unsigned)numberOfLocations;
-(id)initWithLocations:(id)locations;
-(id)initWithLocation:(id)location;
@end

__attribute__((visibility("hidden")))
@interface WANotificationSettingsViewController : WATableViewController {
	NSString* _jid;
	WAMergedContact* _mergedContact;
}
@property(retain, nonatomic) WAMergedContact* mergedContact;
@property(copy, nonatomic) NSString* jid;
+(id)controller;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)showSoundPickerControllerWithTag:(int)tag;
-(void)setCallSound:(id)sound;
-(void)setNotificationSound:(id)sound;
-(id)allJIDsForCurrentContact;
-(void)wa_fontSizeDidChange;
-(void)viewDidLoad;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface HostSelector : WATableViewController {
	UITextField* _textField;
	UIView* _viewHeader;
	id<HostSelectorDelegate> _delegate;
}
-(void).cxx_destruct;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)updateTextFieldFont;
-(void)doneAction:(id)action;
-(void)cancelAction:(id)action;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WAVoiceCallViewController : WAViewController <WAOutlineRoundButtonDelegate, CLLocationManagerDelegate, WAVoiceCallRatingViewDelegate> {
	NSTimer* _timer;
	BOOL _hasTimerFired;
	BOOL _isBackgrounded;
	BOOL _isChangingBackgroundedState;
	UIView* _snapshotOfPresentingView;
	UIImage* _blurredImage;
	MPVolumeView* _audioRouteButton;
	UIActionSheet* _activeAudioRouteActionSheet;
	BOOL _isMonitoringProximity;
	BOOL _receivedRouteChangeNotifications;
	unsigned _backgroundTask;
	NSString* _peerDisplayName;
	NSString* _peerFirstName;
	BOOL _isPeerKnown;
	BOOL _isIncomingCall;
	UIView* _topButtonsContainer;
	WACallAcceptRejectButton* _rejectCallButton;
	WACallAcceptRejectButton* _acceptOrEndCallButton;
	WAOutlineRoundButton* _muteButton;
	WAOutlineRoundButton* _messageButton;
	WAOutlineRoundButton* _speakerButton;
	WABorderlessButton* _remindButton;
	WABorderlessButton* _incomingMessageButton;
	float _callButtonWidth;
	float _controlButtonWidth;
	float _controlButtonMargin;
	float _borderlessButtonOffsetY;
	UIImageView* _profileImageView;
	UIView* _profileImageShadowView;
	float _baseProfileImageDimension;
	WAVoiceCallRatingView* _ratingView;
	CLLocationManager* _activeLocationManager;
	EKEventStore* _storeNeedingLocationInfo;
	EKReminder* _reminderNeedingLocationInfo;
	double _lastCallStatsTime;
	int _lastPacketLossSum;
	float _callQuality;
	double _lastBatteryPrintTime;
	int _callDurationInSeconds;
	BOOL _debugInfoHidden;
	int _lastStatusBarStyle;
	NSString* _calleeJID;
	id<WAVoiceCallViewControllerDelegate> _delegate;
	int _callState;
	UIView* _bottomPanel;
	UIImageView* _backgroundImageView;
	UILabel* _headerLabel;
	UILabel* _callerNameLabel;
	UILabel* _subtitleLabel;
	UIView* _profileImageContainerView;
	UIView* _contentView;
	NSLayoutConstraint* _bottomPanelHeightConstraint;
	NSLayoutConstraint* _profileImageTopMarginConstraint;
	NSLayoutConstraint* _profileImageBottomMarginConstraint;
	UIView* _debugView;
	UITextView* _debugTextView;
	UILabel* _debugStatsLabel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak UILabel* debugStatsLabel;
@property(assign, nonatomic) __weak UITextView* debugTextView;
@property(retain, nonatomic) UIView* debugView;
@property(assign, nonatomic) __weak NSLayoutConstraint* profileImageBottomMarginConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* profileImageTopMarginConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* bottomPanelHeightConstraint;
@property(assign, nonatomic) __weak UIView* contentView;
@property(assign, nonatomic) __weak UIView* profileImageContainerView;
@property(assign, nonatomic) __weak UILabel* subtitleLabel;
@property(assign, nonatomic) __weak UILabel* callerNameLabel;
@property(assign, nonatomic) __weak UILabel* headerLabel;
@property(assign, nonatomic) __weak UIImageView* backgroundImageView;
@property(assign, nonatomic) __weak UIView* bottomPanel;
@property(assign, nonatomic) float callQuality;
@property(readonly, assign, nonatomic, getter=isCallRatingViewVisible) BOOL callRatingViewVisible;
@property(assign, nonatomic) int callState;
@property(assign, nonatomic) __weak id<WAVoiceCallViewControllerDelegate> delegate;
@property(readonly, assign, nonatomic) NSString* calleeJID;
-(void).cxx_destruct;
-(void)setDebugInfoHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)toggleDebugInfo:(id)info;
-(void)dismissCallRatingScreen;
-(void)voiceCallRatingView:(id)view didFinishWithAction:(unsigned)action;
-(void)showRatingView;
-(BOOL)shouldShowRatingView;
-(void)audioRouteDidChange:(id)audioRoute;
-(void)updateInterfaceForCurrentAudioRoute;
-(id)newReminderWithStore:(id)store;
-(void)prepareNewReminderWithCompletionHandler:(id)completionHandler;
-(void)createReminderWithGeolocation:(id)geolocation placemark:(id)placemark;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)waitForLocationFixAndUpdateReminder;
-(void)remindToCallWhenLeaving;
-(void)remindToCallInOneHour;
-(void)showUnableToCreateReminderError;
-(void)showReminderPermissionsAlertView;
-(void)cancelCallAndAddReminder:(id)reminder;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)becomeActiveFromView:(id)view;
-(void)minimizeWithAnimation:(BOOL)animation;
-(void)openChatWithJID:(id)jid presentKeyboard:(BOOL)keyboard;
-(void)sendMessage:(id)message;
-(void)rejectCallAndGoToChatView;
-(void)rejectCallAndSendMessageText:(id)text;
-(void)cancelCallAndSendMessage:(id)message;
-(void)toggleMute:(id)mute;
-(void)showAudioRoutePicker;
-(void)installInvisibleAudioRouteButtonIfNeeded;
-(void)toggleSpeaker:(id)speaker;
-(void)acceptOrEndCall:(id)call;
-(void)rejectCall:(id)call;
-(void)rejectOrEndCall;
-(void)proximityStateDidChange:(id)proximityState;
-(void)stopMonitoringProximity;
-(void)startMonitoringProximityIfNeeded;
-(void)updateProximityMonitoring;
-(void)loadLargeProfileImageAsync;
-(void)setContentViewHidden:(BOOL)hidden animated:(BOOL)animated completion:(id)completion;
-(void)cancelOutgoingCall;
-(void)handleCallBusy;
-(void)handleCallTimeout;
-(void)handleCallFailure;
-(void)handleCallTerminationByPeer;
-(void)reallyDismissWithDelayIfNeeded:(BOOL)delayIfNeeded;
-(void)dismiss;
-(void)setCallState:(int)state animated:(BOOL)animated;
-(BOOL)isCallEnding;
-(void)callStateDidBecomeActive:(id)callState;
-(void)windowDidBecomeKey:(id)window;
-(void)updateLayoutForCurrentState;
-(void)printBatteryLevel;
-(BOOL)isShowingChatScreenSupported;
-(void)timerFired:(id)fired;
-(id)outlineRoundButtonBackgroundImageView:(id)view;
-(void)relayoutProfileImageView;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(int)preferredStatusBarStyle;
-(void)setBlurredImageFromView:(id)view;
-(void)updateSnapshot;
-(void)prepareToAnimateInFromView:(id)view;
-(id)uniqueIdentifier;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithInitialCallState:(int)initialCallState;
@end

__attribute__((visibility("hidden")))
@interface WAWarningView : UIView {
	UIView* _topBorder;
	UIView* _bottomBorder;
	UIView* _backgroundView;
	BOOL _textShadowEnabled;
	BOOL _translucentBackground;
	BOOL _showsTopBorder;
	BOOL _showsBottomBorder;
	UIFont* _font;
	UIColor* _textColor;
	UIButton* _button;
	UILabel* _label;
	id _action;
	UIEdgeInsets _contentInset;
}
@property(copy, nonatomic) id action;
@property(retain, nonatomic) UILabel* label;
@property(retain, nonatomic) UIButton* button;
@property(readonly, assign, nonatomic) UIEdgeInsets contentInset;
@property(assign, nonatomic) BOOL showsBottomBorder;
@property(assign, nonatomic) BOOL showsTopBorder;
@property(assign, nonatomic) BOOL translucentBackground;
@property(assign, nonatomic, getter=isTextShadowEnabled) BOOL textShadowEnabled;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* font;
@property(readonly, assign, nonatomic) NSString* text;
-(void).cxx_destruct;
-(void)updateShadowForLabel;
-(void)updateShadowForButton;
-(void)setText:(id)text withAction:(id)action;
-(CGSize)preferredSizeForWidth:(float)width;
-(void)layoutSubviews;
-(void)buttonTapped:(id)tapped;
-(void)createLabelIfNeeded;
-(void)createButtonIfNeeded;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WACustomSeparatorView : UIView {
	UIColor* _separatorColor;
}
@property(retain, nonatomic) UIColor* separatorColor;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface WANotificationSoundPickerCell : UITableViewCell {
	_WACustomSeparatorView* _separator;
	BOOL _soundSelected;
	BOOL _doubleSeparator;
	float _textMargin;
}
@property(assign, nonatomic) BOOL doubleSeparator;
@property(assign, nonatomic) BOOL soundSelected;
@property(assign, nonatomic) float textMargin;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface WAGroupReceiptTableViewCell : WABaseReceiptTableViewCell {
	NSDictionary* _receiptsInfo;
	int _receiptLevel;
	NSDate* _sentDate;
	BOOL _expanded;
	BOOL _nameIsTruncated;
	BOOL _timeLabelHidden;
	BOOL _dateLabelHidden;
	BOOL _isMediaMessage;
	WAProfilePictureThumbnailView* _imageViewContact;
	UILabel* _receiptTypeLabel[3];
	UILabel* _receiptDateLabel[3];
	UILabel* _receiptTimeLabel[3];
	UILabel* _nameLabel;
	UILabel* _pushNameLabel;
	NSString* _contactJID;
	float _mainSectionHeight;
	UIFont* _contactNameFont;
	UIFont* _pushNameFont;
}
@property(retain, nonatomic) UIFont* pushNameFont;
@property(retain, nonatomic) UIFont* contactNameFont;
@property(assign, nonatomic) float mainSectionHeight;
@property(copy, nonatomic) NSString* contactJID;
@property(readonly, assign, nonatomic) UILabel* pushNameLabel;
@property(readonly, assign, nonatomic) UILabel* nameLabel;
-(void).cxx_destruct;
-(void)setReceiptInfo:(id)info receiptLevel:(int)level sentDate:(id)date isMediaMessage:(BOOL)message expanded:(BOOL)expanded;
-(void)setExpanded:(BOOL)expanded;
-(void)updatePresentationAnimated:(BOOL)animated;
-(id)receiptTimeStringForDate:(id)date;
-(id)receiptDetailTimeStringForDate:(id)date;
-(id)receiptDateStringForDate:(id)date;
-(id)receiptDateForLevel:(int)level;
-(void)layoutSubviews;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

@interface FontSizePicker : WATableViewController {
	int _currentIndex;
	int _numberOfFonts;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMoveOperation : WABackupOperation {
	BOOL _succeeded;
	NSString* _source;
	NSString* _destination;
}
@property(readonly, assign, nonatomic) NSString* destination;
@property(readonly, assign, nonatomic) NSString* source;
-(void).cxx_destruct;
-(void)run;
-(BOOL)succeeded;
-(id)initWithSource:(id)source andDestination:(id)destination;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface ProblemInputController : WATableViewController <WAImageAttachmentContainerViewDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, UIGestureRecognizerDelegate, WAFAQBrowserViewControllerDelegate, UITextViewDelegate> {
	UITableViewCell* _textViewCell;
	UITextView* _textView;
	WADoneWithSpinnerBarButtonItem* _doneButton;
	NSObject<OS_dispatch_group>* _logsGatheringDispatchGroup;
	NSString* _gzippedLogs;
	float _keyboardHeight;
	WAImageAttachmentContainerView* _imageAttachmentContainer;
	UIBarButtonItem* _dismissKeyboardBarButtonItem;
	UIBarButtonItem* _cancelBarButtonItem;
	BOOL _keyboardHidden;
	WAHTTPFetcher* _searchFetcher;
	NSArray* _imagesToSend;
	id<ProblemInputControllerDelegate> _delegate;
	NSString* _initialText;
	unsigned _numberOfFAQSearchResultsReturned;
	unsigned _numberOfFAQSearchResultsOpened;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned numberOfFAQSearchResultsOpened;
@property(readonly, assign, nonatomic) unsigned numberOfFAQSearchResultsReturned;
@property(copy, nonatomic) NSString* initialText;
@property(assign, nonatomic) __weak id<ProblemInputControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)faqBrowserViewControllerShouldProceedToEmail:(id)faqBrowserViewController;
-(void)cancelPendingSearch;
-(void)searchFAQ:(id)faq checkpoint:(id)checkpoint completion:(id)completion;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imageAttachmentContainerViewDidDeleteImage:(id)imageAttachmentContainerView;
-(void)imageAttachmentContainerViewDidRequestAddImage:(id)imageAttachmentContainerView;
-(void)dismissKeyboard:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)textViewDidChange:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewTapped:(id)tapped;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)wa_applicationDidEnterBackground;
-(void)wa_fontSizeDidChange;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)cancelAction:(id)action;
-(void)proceedToEmail;
-(void)doneAction:(id)action;
-(void)updateButtonState;
-(BOOL)userHasEnteredSufficientText;
-(void)dealloc;
-(id)initWithStyle:(int)style;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAPieLayer : CALayer {
}
@property(assign, nonatomic) float progress;
+(BOOL)needsDisplayForKey:(id)key;
-(id)initWithLayer:(id)layer;
@end

__attribute__((visibility("hidden")))
@interface _WAPieView : UIView {
	UIColor* _fillColor;
}
@property(retain, nonatomic) UIColor* fillColor;
@property(assign, nonatomic) float progress;
+(Class)layerClass;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAPieProgressView : UIView {
	_WAPieView* _pieView;
	WAShapeView* _outerView;
	unsigned _state;
	NSObject<OS_dispatch_group>* _animationDispatchGroup;
	CGRect _prevFrame;
	unsigned _counter;
	float _progress;
}
@property(assign, nonatomic) float progress;
-(void).cxx_destruct;
-(id)outerViewPathExpanded:(BOOL)expanded scale:(float)scale;
-(id)tweenableRectInRect:(CGRect)rect rounded:(BOOL)rounded;
-(id)baseOutlineInRect:(CGRect)rect;
-(void)performFinishedAnimationWithCompletionHandler:(id)completionHandler;
-(void)performAppearAnimationWithCompletionHandler:(id)completionHandler;
-(void)performCancelAnimationWithCompletionHandler:(id)completionHandler;
-(void)transitionToState:(unsigned)state forced:(BOOL)forced;
-(void)transitionToState:(unsigned)state animated:(BOOL)animated;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMediaDataParallaxPresentationController : WAMediaDataPresentationController {
	WAAutoCropImageView* _currentImageView;
	WAAutoCropImageView* _transientImageView;
	float _parallaxScaleFactor;
	float _maximumParallaxOffset;
}
-(void).cxx_destruct;
-(void)didScrollInWindowWithUserInteraction:(BOOL)userInteraction;
-(void)viewDidLayoutSubviews;
-(void)transitionFromIndex:(unsigned)index toCurrentIndexWithAnimation:(BOOL)animation completion:(id)completion;
-(void)didUpdateImageAtIndex:(unsigned)index completed:(BOOL)completed;
-(id)currentImageView;
-(id)initWithChatCellData:(id)chatCellData;
@end

__attribute__((visibility("hidden")))
@interface WARandomCloudBackupManager : WACloudBackupManager {
	BOOL _internalAvailable;
	NSTimer* _randomTimer;
}
@property(retain, nonatomic) NSTimer* randomTimer;
@property(assign, nonatomic) BOOL internalAvailable;
-(void).cxx_destruct;
-(BOOL)initialized;
-(BOOL)available;
-(void)flipAvailable:(id)available;
-(id)initWithAutoBackupSettings:(id)autoBackupSettings errorManager:(id)manager;
@end

__attribute__((visibility("hidden")))
@interface EmojiConverter : NSObject {
}
+(id)stringByRemovingEmojiCharacters:(id)characters;
+(id)stringByStandardizingEmojiCharacters:(id)characters;
+(BOOL)composedCharacterSequenceIsRegionalIndicatorSymbol:(id)symbol;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface WAPhoneNumberMap : NSObject {
	NSString* _path;
	NSDictionary* _prefixMap;
	unsigned _maxPrefixLength;
	unsigned _minPrefixLength;
	NSString* _countryCode;
	NSString* _locale;
}
@property(readonly, copy, nonatomic) NSString* locale;
@property(readonly, copy, nonatomic) NSString* countryCode;
-(void).cxx_destruct;
-(void)dealloc;
-(void)didReceiveMemoryWarning:(id)warning;
-(void)loadIfNeeded;
-(id)locationForPhoneNumber:(id)phoneNumber;
-(id)initWithPath:(id)path;
@end

__attribute__((visibility("hidden")))
@interface WAPhoneNumberGeocoder : NSObject {
	NSDictionary* _maps;
}
+(id)sharedGeocoder;
-(void).cxx_destruct;
-(void)collectAvailableMaps;
-(void)renameGeocodingFiles;
-(id)locationTextForPhoneNumber:(id)phoneNumber;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAInetAddress : NSObject <NSSecureCoding> {
	unsigned char _family;
	NSString* _ip;
}
@property(readonly, assign, nonatomic) unsigned char family;
@property(readonly, copy, nonatomic) NSString* ip;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)socketAddressForPort:(unsigned short)port;
-(id)initWithAddress:(id)address family:(unsigned char)family;
@end

__attribute__((visibility("hidden")))
@interface WACameraButtonView : UIView {
	UIView* _outerRing;
	WACircleView* _innerRing;
	WACircleView* _circleShadow;
	UILabel* _textLabel;
	UIButton* _button;
	BOOL _depressed;
	NSObject<OS_dispatch_group>* _animationDispatchGroup;
	CAKeyframeAnimation* _bounceAnimation;
	BOOL _longPressing;
	BOOL _cancelsOnRelease;
	id<WACameraButtonViewDelegate> _delegate;
	UIView* _contentView;
}
@property(retain, nonatomic) UIColor* buttonColor;
@property(assign, nonatomic) BOOL cancelsOnRelease;
@property(readonly, assign, nonatomic) UIView* contentView;
@property(copy, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) BOOL longPressing;
@property(assign, nonatomic) __weak id<WACameraButtonViewDelegate> delegate;
-(void).cxx_destruct;
-(id)loopedBounceAnimationFrom:(double)from to:(double)to;
-(void)performTransitionToReadyAnimation;
-(void)performTransitionToRecordAnimation;
-(void)setUserInteractionEnabled:(BOOL)enabled;
-(void)updateButtonHighlight;
-(void)finishTouch;
-(void)beginLongPress;
-(void)handleTouchDragExit:(id)exit;
-(void)handleTouchDragEnter:(id)enter;
-(void)handleTouchCancelled:(id)cancelled;
-(void)handleTouchDown:(id)down;
-(void)handleTouchUpOutside:(id)outside;
-(void)handleTouchUpInside:(id)inside;
-(void)reset;
-(void)layoutSubviews;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface WASpringAnimator : NSObject {
	double _x;
	double _v;
	double _initialVelocity;
	double _t;
	double _tension;
	double _friction;
}
@property(assign, nonatomic) double friction;
@property(assign, nonatomic) double tension;
@property(readonly, assign, nonatomic) double value;
@property(readonly, assign, nonatomic) double t;
-(void)integrateState:(double)state v:(double)v speed:(double)speed outX:(inout double*)x outV:(inout double*)v5;
-(void)evaluateStateWithDerivative:(double)derivative :(double)arg2 :(double)arg3 :(double)arg4 :(double)arg5 :(double*)arg6 :(double*)arg7;
-(void)evaluateState:(double)state :(double)arg2 :(double*)arg3 :(double*)arg4;
-(void)advanceByTimeDelta:(double)delta;
-(void)reset;
-(id)initWithInitialVelocity:(double)initialVelocity;
@end

__attribute__((visibility("hidden")))
@interface WACallWindow : UIWindow {
	UIView* _statusBarBackgroundView;
	UIView* _backgroundContainerView;
	int _currentInterfaceOrientation;
	BOOL _minimized;
}
@property(assign, nonatomic, getter=isMinimized) BOOL minimized;
@property(assign, nonatomic, getter=isStatusBarSuppressed) BOOL statusBarSuppressed;
-(void).cxx_destruct;
-(BOOL)_canBecomeKeyWindow;
-(void)maximize;
-(void)statusBarTapped:(id)tapped;
-(void)minimizeWithAnimation:(BOOL)animation;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)updateStatusBarFrameWithAnimationDuration:(double)animationDuration;
-(void)applicationDidChangeStatusBarFrame:(id)application;
-(void)layoutSubviews;
-(void)setUpFauxStatusBar;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMediaRestore : WAActionManager {
	WACloudInteractionOperation* _downloadOperation;
}
@property(retain, nonatomic) WACloudInteractionOperation* downloadOperation;
+(void)previousBackupChanged:(id)changed;
+(void)checkForRequiredMediaRestore;
+(void)restoreMediaAtNextOpportunity;
+(id)currentRestore;
-(void).cxx_destruct;
-(void)extractRelevantFilesFromPath:(id)path withInfo:(id)info;
-(void)downloadRelevantFilesInDirectory:(id)directory withInfo:(id)info;
-(void)start;
-(id)errorDomain;
-(id)initWithOptions:(unsigned)options;
@end

__attribute__((visibility("hidden")))
@interface ExecutionTimeProfiler : NSObject {
	NSMutableDictionary* beginDates;
	NSMutableDictionary* endDates;
	NSDate* beginDate;
	NSDate* endDate;
}
@property(retain, nonatomic) NSDate* endDate;
@property(retain, nonatomic) NSDate* beginDate;
-(void).cxx_destruct;
-(id)result;
-(double)durationForTask:(id)task;
-(double)timeFromStart;
-(double)totalTime;
-(void)endTask:(id)task;
-(void)beginTask:(id)task;
-(void)end;
-(void)begin;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAWebClientPersistentLoginRequest : NSObject {
	NSString* _webRef;
	NSString* _browserID;
	NSString* _clientToken;
	NSString* _syncType;
	WAWebClientSession* _session;
	NSData* _serverChallenge;
}
@property(retain, nonatomic) NSData* serverChallenge;
@property(readonly, assign, nonatomic) WAWebClientSession* session;
@property(readonly, copy, nonatomic) NSString* syncType;
@property(readonly, copy, nonatomic) NSString* clientToken;
@property(readonly, copy, nonatomic) NSString* browserID;
@property(readonly, copy, nonatomic) NSString* webRef;
-(void).cxx_destruct;
-(id)description;
-(id)initWithStanzaElement:(id)stanzaElement;
@end

__attribute__((visibility("hidden")))
@interface WAWebClientRequestInfo : NSObject {
	NSString* _requestID;
	NSString* _epoch;
}
@property(copy, nonatomic) NSString* epoch;
@property(copy, nonatomic) NSString* requestID;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAWebClient : NSObject <XMPPConnectionHandler> {
	XMPPConnection* _xmppConnection;
	NSMutableArray* _offlineNotifications;
	BOOL _available;
	NSMutableDictionary* _chatStates;
	WAWebClientSession* _currentSession;
	NSMutableArray* _requestsPendingChallenge;
	NSString* _actionResponseCacheEpoch;
	NSMutableDictionary* _actionResponseCache;
	NSMutableDictionary* _issuedChallenges;
	NSString* _lastSyncedBrowserID;
	BOOL _didResumeOnDifferentBrowser;
	id<WAWebClientDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAWebClientDelegate> delegate;
@property(assign, nonatomic, getter=isAvailable) BOOL available;
@property(readonly, assign, nonatomic) BOOL hasActiveSession;
+(BOOL)isSupported;
-(void).cxx_destruct;
-(void)batteryLevelOrStateDidChange:(id)batteryLevelOrState;
-(void)handleChallengeResponse:(id)response;
-(id)challengeWithNotificationID:(id)notificationID webRef:(id)ref browserID:(id)anId syncType:(id)type;
-(void)sendChallengeToServerForRequest:(id)request notificationID:(id)anId syncType:(id)type;
-(void)reportMediaResponseCode:(unsigned)code mediaURL:(id)url forRequestID:(id)requestID;
-(void)notifyAddedContacts:(id)contacts removedJIDs:(id)jids removeMissingJIDs:(BOOL)jids3;
-(void)notifyAllChatsArchived:(BOOL)archived;
-(void)notifyAllChatsDeleted;
-(void)notifyChatDeleted:(id)deleted;
-(void)notifyAllChatsCleared;
-(void)notifyChatCleared:(id)cleared;
-(void)notifyMessagesDeleted:(id)deleted inChatSession:(id)chatSession;
-(void)notifyChangeOfMuteStateForJID:(id)jid;
-(void)notifyChangeOfArchiveStateInChatSession:(id)chatSession;
-(void)notifyChangeOfBroadcastListName:(id)broadcastListName;
-(void)markChatWithJID:(id)jid read:(BOOL)read;
-(void)notifyStatusChangeInMessage:(id)message;
-(void)forwardMessage:(id)message invisible:(BOOL)invisible update:(BOOL)update;
-(void)forwardMessagesIfNeeded:(id)needed isUpdate:(BOOL)update;
-(void)pauseOutgoingChatStateForJID:(id)jid;
-(void)setOutgoingChatState:(unsigned)state forJID:(id)jid;
-(unsigned)outgoingChatStateForJID:(id)jid;
-(void)sendGenericErrorResponseForRequestID:(id)requestID code:(int)code;
-(id)outgoingMessagesAndPTTFromMessages:(id)messages withStatusUpdateAfterTimestamp:(double)statusUpdateAfterTimestamp lastTimestamp:(double*)timestamp;
-(BOOL)isJIDCurrentUser:(id)user;
-(void)sendResumeResponseWithChatSessionStates:(id)chatSessionStates requestID:(id)anId;
-(void)flushOfflineNotificationsIfNeeded;
-(void)sendJIDsOfMembersInBroadcastList:(id)broadcastList;
-(void)sendContactsWithRequestID:(id)requestID isDuplicate:(BOOL)duplicate isPreemptive:(BOOL)preemptive;
-(void)sendChatSessionsWithRequestID:(id)requestID isDuplicate:(BOOL)duplicate isPreemptive:(BOOL)preemptive;
-(void)sendPreemptiveResponse;
-(void)forwardRecentlyRelevantMessages;
-(void)forwardLastMessageInChats:(id)chats;
-(void)setBlocked:(BOOL)blocked forElement:(id)element inNotification:(id)notification;
-(void)handleRemoveBlock:(id)block inNotification:(id)notification;
-(void)handleAddBlock:(id)block inNotification:(id)notification;
-(void)handleCreateGroup:(id)group inNotification:(id)notification;
-(void)handleSubjectGroup:(id)group inNotification:(id)notification;
-(void)handleLeaveGroup:(id)group inNotification:(id)notification;
-(void)handlePromoteGroup:(id)group inNotification:(id)notification;
-(void)handleAddGroup:(id)group inNotification:(id)notification;
-(void)handleRemoveGroup:(id)group inNotification:(id)notification;
-(void)handleDeletePicture:(id)picture inNotification:(id)notification;
-(void)handleSetPicture:(id)picture inNotification:(id)notification;
-(void)handleMuteChat:(id)chat inNotification:(id)notification;
-(void)setArchivedState:(BOOL)state forElement:(id)element inNotification:(id)notification;
-(void)handleUnarchiveChat:(id)chat inNotification:(id)notification;
-(void)handleArchiveChat:(id)chat inNotification:(id)notification;
-(void)handleClearChat:(id)chat inNotification:(id)notification;
-(void)handleDeleteChat:(id)chat inNotification:(id)notification;
-(void)handlePlayedReceived:(id)received inNotification:(id)notification;
-(void)handleSetStatus:(id)status inNotification:(id)notification;
-(void)handleSetRead:(id)read inNotification:(id)notification;
-(void)handleRecordingPresence:(id)presence inNotification:(id)notification;
-(void)handlePausedPresence:(id)presence inNotification:(id)notification;
-(void)handleComposingPresence:(id)presence inNotification:(id)notification;
-(void)handleSubscribePresence:(id)presence inNotification:(id)notification;
-(void)handleUnavailablePresence:(id)presence inNotification:(id)notification;
-(void)handleAvailablePresence:(id)presence inNotification:(id)notification;
-(void)handleDebugAction:(id)action inNotification:(id)notification;
-(void)handleSetAction:(id)action inNotification:(id)notification;
-(void)handleRelayAction:(id)action inNotification:(id)notification;
-(void)handleGroupQuery:(id)query inNotification:(id)notification;
-(void)handlePreviewQuery:(id)query inNotification:(id)notification;
-(void)handleMessage_InfoQuery:(id)query inNotification:(id)notification;
-(void)handleReceiptQuery:(id)query inNotification:(id)notification;
-(void)handleResumeQuery:(id)query inNotification:(id)notification;
-(void)handleMediaQuery:(id)query inNotification:(id)notification;
-(void)handleMessageQuery:(id)query inNotification:(id)notification;
-(void)handleContactsQuery:(id)query inNotification:(id)notification;
-(void)handleChatQuery:(id)query inNotification:(id)notification;
-(void)handleActionQuery:(id)query inNotification:(id)notification;
-(void)handleSyncQuery:(id)query inNotification:(id)notification;
-(void)handleDeleteAction:(id)action inNotification:(id)notification;
-(void)rejectServerLoginWithWebRef:(id)webRef reason:(unsigned)reason;
-(void)handlePersistentLoginRequestErrorForRequest:(id)request;
-(void)acceptPersistentLoginRequest:(id)request;
-(void)handleSyncAction:(id)action inNotification:(id)notification;
-(void)handleTask:(id)task inNotification:(id)notification;
-(BOOL)handleNotification:(id)notification onConnection:(id)connection;
-(void)connectionDidReceiveOfflineCompleteMarker:(id)connection;
-(BOOL)handleLoginResponseStanza:(id)stanza onConnection:(id)connection;
-(void)xmppConnection:(id)connection initialConfigurationAsync:(id)async;
-(void)clearCurrentSession;
-(void)makeSessionCurrent:(id)current;
-(void)terminateCurrentSession;
-(void)beginNewSessionWithQRCode:(id)qrcode completion:(id)completion;
-(void)beginSessionWithQRCode:(id)qrcode completion:(id)completion;
-(void)removeSessionWithData:(id)data;
-(id)allSavedSessionDataObjects;
-(void)dealloc;
-(id)initWithXMPPConnection:(id)xmppconnection;
@end

__attribute__((visibility("hidden")))
@interface WAAllowedNetworkInterfacesPicker : WAStaticTableViewController {
	WATableRow* _neverRow;
	WATableRow* _wifiRow;
	WATableRow* _cellularRow;
	unsigned _mediaType;
}
-(void).cxx_destruct;
-(id)uniqueIdentifier;
-(void)updateCheckMarks;
-(void)selectInterface:(int)interface;
-(void)setupTableView;
-(void)viewDidLoad;
-(id)initForMediaType:(unsigned)mediaType title:(id)title;
@end

__attribute__((visibility("hidden")))
@interface FavoritesNavigationController : WANavigationController {
}
+(id)navigationController;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WACameraViewController : WABasicCameraViewController <WACameraControllerDelegate, WACameraButtonViewDelegate, WACameraRollStripViewDelegate, WAImageToImageTransitioning, UIGestureRecognizerDelegate> {
	WACameraFocusBoxView* _focusBoxView;
	float _bottomBarHeight;
	NSMutableArray* _mediaItems;
	NSObject<OS_dispatch_group>* _processingDispatchGroup;
	WACameraFlashSelector* _flashSelector;
	UIImageView* _flashBadgeView;
	int _suppressFlashBadgeViewCounter;
	WACameraZoomSlider* _zoomSlider;
	UIPinchGestureRecognizer* _zoomPinchGesture;
	float _zoomFactorBeforePinching;
	int _lastBackCameraFlashMode;
	int _lastFrontCameraFlashMode;
	NSMutableArray* _faceViews;
	BOOL _initialResetFocusBoxShown;
	BOOL _statusBarShouldReallyBeHidden;
	MPVolumeView* _hiddenVolumeView;
	float _originalVolumeLevel;
	int _suppressVolumeTriggerCounter;
	WACameraRollStripView* _cameraRollPicker;
	UISwipeGestureRecognizer* _cameraRollSwipeUpGesture;
	UISwipeGestureRecognizer* _cameraRollSwipeDownGesture;
	int _initialDeviceOrientation;
	WAMediaPickerAsset* _selectedMediaPickerAsset;
	NSTimer* _recordingTimer;
	WACameraRecordingTimeView* _recordingTimeView;
	UIView* _releaseToCancelOverlayView;
	BOOL _needsCheckAudioPermission;
	BOOL _includesCameraRollPicker;
	id<WACameraViewControllerDelegate> _delegate;
	unsigned _initialWellCount;
	unsigned _maximumWellCount;
	UIImage* _initialWellPreviewImage;
	UIButton* _changeCameraButton;
	UIView* _topBarView;
	UIView* _bottomBarView;
	UIView* _bottomBarMainView;
	WACameraButtonView* _cameraButtonView;
	UIButton* _doneButton;
	WACameraWellView* _wellView;
	UILabel* _recordingHintLabel;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic, getter=isReleaseToCancelHintHidden) BOOL releaseToCancelHintHidden;
@property(assign, nonatomic) __weak UILabel* recordingHintLabel;
@property(assign, nonatomic) __weak WACameraWellView* wellView;
@property(assign, nonatomic) __weak UIButton* doneButton;
@property(assign, nonatomic) __weak WACameraButtonView* cameraButtonView;
@property(assign, nonatomic) __weak UIView* bottomBarMainView;
@property(retain, nonatomic) UIView* bottomBarView;
@property(assign, nonatomic) __weak UIView* topBarView;
@property(assign, nonatomic) __weak UIButton* changeCameraButton;
@property(assign, nonatomic) BOOL includesCameraRollPicker;
@property(retain, nonatomic) UIImage* initialWellPreviewImage;
@property(assign, nonatomic) unsigned maximumWellCount;
@property(assign, nonatomic) unsigned initialWellCount;
@property(assign, nonatomic) __weak id<WACameraViewControllerDelegate> delegate;
+(BOOL)useBackCamera;
-(void).cxx_destruct;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)handleCameraRollSwipeDown:(id)down;
-(void)handleCameraRollSwipeUp:(id)up;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)cameraRollStripViewDidChangePresentationState:(id)cameraRollStripView;
-(void)cameraRollStripView:(id)view didSelectMediaPickerAsset:(id)asset;
-(void)cameraControllerDidChangeFlashActiveState:(id)cameraController;
-(void)cameraControllerDidUpdateFaceObjects:(id)cameraController;
-(void)cameraControllerDidChangePreviewImageSize:(id)cameraController;
-(void)cameraControllerDidResetPointOfInterest:(id)cameraController;
-(void)cameraControllerSessionDidStopRunning:(id)cameraControllerSession;
-(void)cameraControllerSessionDidBeginRunning:(id)cameraControllerSession;
-(void)cameraButtonViewDidChangeCancelsOnRelease:(id)cameraButtonView;
-(void)cameraButtonViewDidCancelLongPress:(id)cameraButtonView;
-(void)cameraButtonViewDidReceiveTouch:(id)cameraButtonView;
-(void)cameraButtonViewDidEndLongPress:(id)cameraButtonView;
-(void)attemptToStartVideoRecording;
-(void)cameraButtonViewDidBeginLongPress:(id)cameraButtonView;
-(BOOL)cameraButtonViewShouldAllowLongPress:(id)cameraButtonView;
-(void)cameraButtonViewDidReceiveTap:(id)cameraButtonView;
-(void)setAudioVolume:(float)volume;
-(void)handleAudioRouteChangeNotification:(id)notification;
-(void)volumeDidChange:(id)volume;
-(void)removeHiddenVolumeView;
-(void)setUpHiddenVolumeView;
-(void)updateFaces;
-(void)clearAllFaces;
-(void)handleTapToFocus:(id)focus;
-(void)showResetFocusBox;
-(void)showFocusBoxOfWidth:(float)width atPoint:(CGPoint)point;
-(void)deviceOrientationDidChangeWithAnimation:(BOOL)deviceOrientation;
-(void)recordingTimerDidFire:(id)recordingTimer;
-(void)videoRecordingDidCancel;
-(void)videoRecordingDidFinishRecordingToFile:(id)videoRecording;
-(void)videoRecordingDidFailWithError:(id)videoRecording;
-(void)didStopVideoRecording;
-(void)willStartVideoRecording;
-(void)cancelVideoRecording;
-(void)stopVideoRecording;
-(BOOL)startVideoRecording;
-(void)pinchGestureChanged:(id)changed;
-(void)zoomSliderChanged:(id)changed;
-(void)updateZoomInterfaceForCurrentCameraSettings;
-(void)updateFlashBadge;
-(void)updateFlashInterfaceForCurrentCameraSettingsWithAnimation:(BOOL)animation;
-(void)flashModeChanged:(id)changed;
-(void)updateCameraButtonAccessibilityValue;
-(void)changeCamera:(id)camera;
-(void)wellTapped:(id)tapped;
-(void)updateTotalMediaCount;
-(void)captureImageWithCompletionHandler:(id)completionHandler;
-(void)takeStillPhotoWithRepeat:(BOOL)repeat;
-(void)updateWithCurrentDeviceOrientationForCapture;
-(void)doneTakingPhotos;
-(void)done:(id)done;
-(BOOL)accessibilityPerformEscape;
-(BOOL)accessibilityPerformMagicTap;
-(BOOL)prefersStatusBarHidden;
-(void)updateRecordingHintLabel;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)didCreateCameraController;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)wa_applicationDidEnterBackground;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WACameraRecordingTimeView : UIView {
	UILabel* _timeLabel;
	UIImageView* _recordingDot;
	XXStruct_pwHToB _recordingTime;
}
@property(assign, nonatomic) XXStruct_pwHToB recordingTime;
-(void).cxx_destruct;
-(void)didMoveToWindow;
-(void)setHidden:(BOOL)hidden;
-(void)updateAnimation;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface ABDisabledViewController : WAViewController {
	UIImageView* _imageViewLock;
	UILabel* _labelHelperTop;
	UILabel* _labelHelperBottom;
	UIButton* _buttonSettings;
	id<ABDisabledControllerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<ABDisabledControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)wa_fontSizeDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)loadView;
-(id)bottomHelperText;
-(void)cancelAction:(id)action;
-(void)openSettingsAction:(id)action;
-(void)layoutHelperLabels;
-(void)reloadFonts;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface SettingsNavigationController : WANavigationController {
	BOOL _defersPop;
}
@property(assign, nonatomic) BOOL defersPop;
-(BOOL)navigationBar:(id)bar shouldPopItem:(id)item;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(id)init;
-(void)reloadViewControllers;
@end

__attribute__((visibility("hidden")))
@interface WAEditableImageEditingView : UIView <WAEditableImageRotationToolDelegate, WAEditableImageScrollViewEditingDelegate, WAImageCropToolViewDelegate> {
	WAEditableImageScrollView* _scrollView;
	UIImageView* _renderedImageView;
	WAImageCropToolView* _cropToolView;
	WAEditableImageRotationTool* _rotationTool;
	unsigned _deferredRenderingCounter;
	UIButton* _resetButton;
	UIButton* _aspectRatioButton;
	BOOL _suppressRotationToolUpdates;
	unsigned _suppressLayoutCounter;
	BOOL _isCropRectSmallerThanCropArea;
	BOOL _snapToMinZoomScale;
	UIVisualEffectView* _blurEffectView;
	CAShapeLayer* _blurEffectMask;
	unsigned _hideBlurCounter;
	CGRect _initialCropRect;
	CGSize _initialCropSize;
	CGSize _lastLayoutSize;
	UIView* _bottomAreaTouchBlocker;
	BOOL _allowsRotation;
	WAMultiSendMediaItem* _item;
	id<WAEditableImageEditingViewDelegate> _delegate;
	double _aspectRatio;
	UIEdgeInsets _contentInset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) double aspectRatio;
@property(assign, nonatomic) __weak id<WAEditableImageEditingViewDelegate> delegate;
@property(assign, nonatomic) BOOL allowsRotation;
@property(assign, nonatomic) UIEdgeInsets contentInset;
@property(retain, nonatomic) WAMultiSendMediaItem* item;
-(void).cxx_destruct;
-(void)animateCropAreaToFillBounds;
-(void)imageCropToolViewCropRectDidFinishChanging:(id)imageCropToolViewCropRect;
-(void)imageCropToolViewCropRectDidChange:(id)imageCropToolViewCropRect;
-(void)imageCropToolViewCropRectWillBeginChanging:(id)imageCropToolViewCropRect;
-(void)editableImageScrollViewDidEndUserScrolling:(id)editableImageScrollView;
-(void)editableImageScrollViewDidScroll:(id)editableImageScrollView;
-(void)editableImageScrollViewDidBeginUserScrolling:(id)editableImageScrollView;
-(void)editableImageScrollViewDidEndZooming:(id)editableImageScrollView withView:(id)view atScale:(float)scale;
-(void)editableImageScrollViewWillBeginZooming:(id)editableImageScrollView withView:(id)view;
-(void)editableImageRotationToolDidEndChangingAngle:(id)editableImageRotationTool;
-(void)editableImageRotationToolDidChangeAngle:(id)editableImageRotationTool;
-(void)editableImageRotationToolDidBeginChangingAngle:(id)editableImageRotationTool;
-(void)presentAspectRatioOptions;
-(void)aspectRatioButtonTapped:(id)tapped;
-(void)stopHidingBlur;
-(void)beginHidingBlur;
-(void)animateOutWithImageView:(id)imageView completion:(id)completion;
-(void)animateInWithImageView:(id)imageView completion:(id)completion;
-(void)endDeferredRendering;
-(void)beginDeferredRendering;
-(void)resetTransform:(id)transform;
-(void)animateToTransformInfo:(XXStruct_hhSZyC)transformInfo;
-(void)prepareToCancelCropping;
-(void)reloadImagesFromCurrentItem;
-(XXStruct_hhSZyC)updateAnchorPoint:(CGPoint)point cropSize:(CGSize)size ofTransformInfo:(XXStruct_hhSZyC)transformInfo;
-(void)updateAnchorPointAndCropSizeFromInterface;
-(void)relayout;
-(void)updateResetButton;
-(void)updateCropToolViewLimits;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAChatBarContainerView : UIView {
}
-(id)hitTest:(CGPoint)test withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface WAChatBarManagerAltImpl : NSObject <WAChatBarDelegate, WAWebPageFromTextLoaderDelegate, WAChatBarManager> {
	_WAChatBarContainerView* _containerView;
	WAChatBar* _chatBar;
	unsigned _keyboardState;
	BOOL _interfaceRotationInProgress;
	float _keyboardHeight;
	BOOL _adjustKeyboardInDidHide;
	WAWebPageFromTextLoader* _webPageLoader;
	BOOL _interactiveKeyboardDraggingInProgress;
	BOOL _enabled;
	BOOL _scrollToBottomOnShowKeyboardOnAppear;
	BOOL _interactiveKeyboardDraggingEnabled;
	BOOL _showKeyboardOnAppear;
	UIViewController<WAChatBarManagerDelegate>* _delegate;
}
@property(readonly, assign, nonatomic) UIButton* pttButton;
@property(readonly, assign, nonatomic) UIButton* attachMediaButton;
@property(assign, nonatomic, getter=isKeyboardPresentationDisabled) BOOL keyboardPresentationDisabled;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, assign, nonatomic) BOOL shouldAutorotate;
@property(assign, nonatomic) BOOL interactiveKeyboardDraggingEnabled;
@property(assign, nonatomic) float chatBarAlpha;
@property(assign, nonatomic) BOOL scrollToBottomOnShowKeyboardOnAppear;
@property(assign, nonatomic) BOOL showKeyboardOnAppear;
@property(readonly, assign, nonatomic) BOOL interactiveKeyboardDraggingInProgress;
@property(copy, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) float bottomInset;
@property(readonly, assign, nonatomic) float contentViewHeight;
@property(readonly, assign, nonatomic) UIView* contentView;
@property(assign, nonatomic) __weak UIViewController<WAChatBarManagerDelegate>* delegate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)endDraggingChatBarWithTranslation:(float)translation;
-(void)updateChatBarDraggingWithTranslation:(float)translation;
-(BOOL)beginDraggingChatBar;
-(void)handleChatBarDragging:(id)dragging;
-(void)chatBarDidEndDragging:(id)chatBar;
-(void)chatBarDidDrag:(id)chatBar;
-(void)beginDraggingWithKeyboardShown;
-(void)chatBarDidBeginDragging:(id)chatBar;
-(void)hideKeyboardAfterDragging;
-(void)endDraggingWithKeyboardOffset:(float)keyboardOffset;
-(void)updateDraggingWithKeyboardOffset:(float)keyboardOffset;
-(void)webPageFromTextLoaderDidUpdateMetadata:(id)webPageFromTextLoader;
-(void)chatBarWantsToDismissWebURLPreview:(id)dismissWebURLPreview;
-(void)chatBarWantsToScrollToTop:(id)top;
-(void)chatBar:(id)bar didCancelPTTRecordingByUser:(BOOL)user;
-(void)chatBarDidEndPTTRecording:(id)chatBar;
-(double)chatBarWillEndPTTRecording:(id)chatBar;
-(void)chatBarDidBeginPTTRecording:(id)chatBar;
-(BOOL)chatBarShouldBeginPTTRecording:(id)chatBar;
-(void)chatBarDidChangeHeight:(id)chatBar;
-(void)chatBarUserDidSubmitText:(id)chatBarUser;
-(void)chatBarWantsToPresentCamera:(id)presentCamera;
-(void)chatBarWantsToAttachMedia:(id)attachMedia;
-(void)chatBar:(id)bar didPasteImage:(id)image;
-(void)chatBarDidChangeText:(id)chatBar;
-(void)chatBarDidEndEditing:(id)chatBar;
-(void)chatBarWillEndEditing:(id)chatBar;
-(void)chatBarDidBeginEditing:(id)chatBar;
-(BOOL)chatBarShouldBeginEditing:(id)chatBar;
-(void)chatBarUserDidFocusChatBar:(id)chatBarUser;
-(void)chatBarDidMoveToWindow:(id)chatBar;
-(void)chatBar:(id)bar willMoveToWindow:(id)window;
-(float)chatBarMaximumHeight:(id)height;
-(unsigned)chatBarVisibleConnectionStatus:(id)status;
-(void)handleHideKeyboardWithNotification:(id)notification;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidChangeFrame:(id)keyboard;
-(void)keyboardWillChangeFrame:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)ensureKeyboardHidden;
-(void)applicationWillDismissCallWindow:(id)application;
-(void)applicationWillPresentCallWindow:(id)application;
-(void)delegateWillDisappearWithoutInteraction;
-(void)setNeedsUpdateButtons;
-(void)makeMainApplicationWindowKeyWindow;
-(void)makeKeyboardWindowKeyWindow;
-(void)restoreKeyWindow;
-(BOOL)isKeyboardVisible;
-(void)hideKeyboard;
-(BOOL)showKeyboard;
-(void)showPopupMenuForMessageCell:(id)messageCell;
-(void)didChangeKeyboardHeightWithScrolling:(BOOL)scrolling;
-(void)cancelPTTRecording;
-(void)setPTTRecordingTime:(double)time;
-(void)didChangeInterfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation;
-(void)willChangeInterfaceOrientation;
-(void)dealloc;
-(id)initWithInitialWidth:(float)initialWidth;
@end

__attribute__((visibility("hidden")))
@interface WAConversationHeaderView : UIView <WAAutoScrollingLabelDelegate> {
	BOOL _compactHeight;
	BOOL _groupLayout;
	BOOL _profilePictureHidden;
	BOOL _callButtonHidden;
	BOOL _pictureTapable;
	BOOL _tapable;
	BOOL _fadingCaptionLabel;
	BOOL _animating;
	id<WAConversationHeaderViewDelegate> _delegate;
	UIButton* _profilePictureButton;
	UIImage* _profilePicture;
	NSString* _title;
	NSString* _caption;
	NSString* _captionTextForVoiceOver;
	NSString* _activityText;
	WALabel* _titleLabel;
	WAAutoscrollingLabel* _captionLabel;
	UILabel* _activityLabel;
	UIActivityIndicatorView* _activityIndicator;
	UIButton* _headerViewButton;
	id _captionScrollCompletion;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id captionScrollCompletion;
@property(assign, nonatomic, getter=isAnimating) BOOL animating;
@property(assign, nonatomic) BOOL fadingCaptionLabel;
@property(retain, nonatomic) UIButton* headerViewButton;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UILabel* activityLabel;
@property(retain, nonatomic) WAAutoscrollingLabel* captionLabel;
@property(retain, nonatomic) WALabel* titleLabel;
@property(copy, nonatomic) NSString* activityText;
@property(copy, nonatomic) NSString* captionTextForVoiceOver;
@property(copy, nonatomic) NSString* caption;
@property(copy, nonatomic) NSString* title;
@property(retain, nonatomic) UIImage* profilePicture;
@property(retain, nonatomic) UIButton* profilePictureButton;
@property(assign, nonatomic, getter=isTapable) BOOL tapable;
@property(assign, nonatomic, getter=isPictureTapable) BOOL pictureTapable;
@property(assign, nonatomic, getter=isCallButtonHidden) BOOL callButtonHidden;
@property(assign, nonatomic, getter=isProfilePictureHidden) BOOL profilePictureHidden;
@property(assign, nonatomic, getter=isGroupLayout) BOOL groupLayout;
@property(assign, nonatomic, getter=isCompactHeight) BOOL compactHeight;
@property(assign, nonatomic) __weak id<WAConversationHeaderViewDelegate> delegate;
+(id)captionLabelTextForCaption:(id)caption isCompactHeight:(BOOL)height isGroupLayout:(BOOL)layout;
+(id)mapHeaderView;
+(id)headerViewWithDelegate:(id)delegate;
-(void).cxx_destruct;
-(void)autoscrollingLabelDidFinishScrolling:(id)autoscrollingLabel;
-(BOOL)isAccessibilityElement;
-(void)stopAnimating;
-(void)startAnimating;
-(void)setProfilePicture:(id)picture animated:(BOOL)animated;
-(void)headerViewTapped:(id)tapped;
-(void)profilePictureTapped:(id)tapped;
-(id)captionFontForCompactHeight:(BOOL)compactHeight groupLayout:(BOOL)layout;
-(id)titleFontForCompactHeight:(BOOL)compactHeight groupLayout:(BOOL)layout;
-(void)setCaption:(id)caption animated:(BOOL)animated autoscroll:(BOOL)autoscroll scrollCompletion:(id)completion;
-(void)configureVoiceOver;
-(void)configureTitleAndCaption;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAConversationHeaderViewModern : WAConversationHeaderView {
	UIButton* _callButton;
}
@property(retain, nonatomic) UIButton* callButton;
-(void).cxx_destruct;
-(void)headerViewTapped:(id)tapped;
-(void)headerViewButtonAnyTouch:(id)touch;
-(void)callButtonTapped:(id)tapped;
-(void)setCallButtonHidden:(BOOL)hidden;
-(id)captionFontForCompactHeight:(BOOL)compactHeight groupLayout:(BOOL)layout;
-(id)titleFontForCompactHeight:(BOOL)compactHeight groupLayout:(BOOL)layout;
-(void)didMoveToSuperview;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAConversationHeaderViewLegacy : WAConversationHeaderView {
}
+(id)captionLabelTextForCaption:(id)caption isCompactHeight:(BOOL)height isGroupLayout:(BOOL)layout;
-(id)captionFontForCompactHeight:(BOOL)compactHeight groupLayout:(BOOL)layout;
-(id)titleFontForCompactHeight:(BOOL)compactHeight groupLayout:(BOOL)layout;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAConversationHeaderViewMap : _WAConversationHeaderViewLegacy {
}
-(void)configureTitleAndCaption;
-(id)captionFontForCompactHeight:(BOOL)compactHeight groupLayout:(BOOL)layout;
-(id)titleFontForCompactHeight:(BOOL)compactHeight groupLayout:(BOOL)layout;
-(void)setCaption:(id)caption;
-(void)setTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface StatusNavigationController : UINavigationController {
}
-(id)init;
-(void)reloadViewControllers;
@end

__attribute__((visibility("hidden")))
@interface WATextAttachmentLoader : NSObject {
	NSMutableArray* _registeredSizes;
	NSDictionary* _symbolDict;
	NSMutableDictionary* _scaledSizeToFilenameSuffixDict;
	NSArray* _symbolArray;
}
@property(retain, nonatomic) NSArray* symbolArray;
+(BOOL)isCustomEmojiSupported;
+(id)skinToneModifierSet;
+(id)customEmojiSet;
+(id)regionalPairSet;
+(id)sharedLoader;
-(void).cxx_destruct;
-(id)bestImageForName:(id)name pointSize:(float)size;
-(id)bestRegisteredSizeForPointSize:(float)pointSize;
-(id)textAttachmentForName:(id)name pointSize:(float)size;
-(void)registerSize:(int)size;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WATextAttachment : NSTextAttachment {
	NSString* _name;
	float _pointSize;
	CGRect _boundingRect;
}
@property(assign, nonatomic) float pointSize;
@property(assign, nonatomic) CGRect boundingRect;
@property(copy, nonatomic) NSString* name;
-(void).cxx_destruct;
-(CGRect)attachmentBoundsForTextContainer:(id)textContainer proposedLineFragment:(CGRect)fragment glyphPosition:(CGPoint)position characterIndex:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAPageableVideoItemView : WAPageableItemView <WAMediaPlayerDelegate, WAVideoScrubberDelegate, UIGestureRecognizerDelegate, WAEditableImageEditingViewDelegate> {
	WAMultiSendEditableVideo* _videoItem;
	WAMediaPlayer* _mediaPlayer;
	WAVideoScrubber* _videoScrubber;
	UIView* _videoScrubberContainerView;
	XXStruct_pwHToB _sourceTimeToSeekOnPlayerLoad;
	BOOL _suppressMediaPlayerLayout;
	BOOL _needsRegenerateThumbnails;
	UITapGestureRecognizer* _tapGesture;
	BOOL _needsUpdateThumbnailOnTimeChange;
	WAEditableImageEditingView* _editingView;
	UIView* _previewView;
	BOOL _isRenderedContentAvailable;
	BOOL _suppressEditingViewItemChanges;
	BOOL _suppressVideoScrubberLayout;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(CGSize)videoScrubberThumbnailAspectRatio:(id)ratio;
-(void)videoScrubber:(id)scrubber videoFramesAtTimes:(id)times size:(CGSize)size tolerance:(XXStruct_pwHToB)tolerance block:(id)block;
-(void)videoScrubberDidEndScrubbing:(id)videoScrubber;
-(void)videoScrubberDidChangeCurrentTime:(id)videoScrubber;
-(void)videoScrubberDidBeginScrubbing:(id)videoScrubber pausePlayback:(BOOL)playback;
-(void)videoScrubberDidChangeSlowMotionTimeRange:(id)videoScrubber;
-(void)videoScrubberDidChangeTrimmedTimeRange:(id)videoScrubber;
-(void)mediaPlayerDidEndScrubbing:(id)mediaPlayer;
-(void)mediaPlayerDidBeginScrubbing:(id)mediaPlayer;
-(void)mediaPlayerDidFinishLoading:(id)mediaPlayer;
-(void)mediaPlayerDidPlayToEndTime:(id)mediaPlayer;
-(void)mediaPlayerDidChangeCurrentTime:(id)mediaPlayer;
-(void)mediaPlayerStatusDidChange:(id)mediaPlayerStatus;
-(void)mediaPlayerDidRequestPlaybackStart:(id)mediaPlayer;
-(id)editableImageEditingViewContainingViewController:(id)controller;
-(void)editableImageEditingViewDidEndDeferringRendering:(id)editableImageEditingView;
-(void)editableImageEditingViewDidBeginDeferringRendering:(id)editableImageEditingView;
-(void)setCropping:(BOOL)cropping;
-(void)setRotationAngle:(float)angle animated:(BOOL)animated;
-(void)rotateCounterClockwise;
-(void)stopPresentation;
-(void)didScroll;
-(void)setScrolling:(BOOL)scrolling;
-(void)setKeyboardHidden:(BOOL)hidden;
-(void)updateMediaPlayerPlaybackTimeRange;
-(void)updateThumb;
-(void)viewTapped:(id)tapped;
-(id)contentView;
-(id)posterImage;
-(void)applyPlayerItem:(id)item;
-(void)prepareToCancelCropping;
-(void)configureWithItem:(id)item;
-(void)destroyPlayerElements;
-(void)createPlayerElements;
-(void)prepareForReuse;
-(void)didSetContentInset;
-(void)setNeedsLayout;
-(void)layoutSubviews;
-(CGRect)fittedRectForAspectRatio:(CGSize)aspectRatio;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface CrashLogger : NSObject {
}
+(void)internalUploadDataUsingActiveLog:(BOOL)log footnote:(id)footnote discretionary:(BOOL)discretionary;
+(void)uploadDataUsingActiveLog:(BOOL)log footnote:(id)footnote discretionary:(BOOL)discretionary;
+(BOOL)crashOccurred;
+(void)setCrashOccurred:(BOOL)occurred;
+(BOOL)canUploadLogs;
+(void)uploadLogData:(id)data filename:(id)filename discretionary:(BOOL)discretionary;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface WAMessageDeletionContext : NSObject {
	NSMutableArray* _messages;
	BOOL _orphaned;
	NSManagedObjectContext* _moc;
	NSManagedObjectID* _commonChatSessionObjectID;
	BOOL _hasCommonChatSession;
	NSObject<OS_dispatch_queue>* _ioQueue;
}
-(void).cxx_destruct;
-(void)deleteEmptyDirectoriesFrom:(id)from to:(id)to;
-(void)deleteMediaFileAtPaths:(id)paths;
-(id)xmppThumbPathWithDuplicatesInMessages:(id)messages;
-(void)evaluate;
-(void)addMessage:(id)message;
-(id)initWithManagedObjectContext:(id)managedObjectContext orphanedState:(BOOL)state;
@end

__attribute__((visibility("hidden")))
@interface WACallAcceptRejectButton : UIButton {
	UILabel* _bottomLabel;
	UIImageView* _circleView;
	unsigned _buttonState;
}
@property(assign, nonatomic) unsigned buttonState;
+(id)button;
-(void).cxx_destruct;
-(id)accessibilityValue;
-(void)setButtonState:(unsigned)state animated:(BOOL)animated;
-(void)setFillColor:(id)color;
-(void)setHighlighted:(BOOL)highlighted;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WACameraPreviewAnimation : NSObject {
	BOOL _completed;
	id _callback;
	id _completionHandler;
	double _duration;
	double _startTime;
}
@property(assign, nonatomic, getter=isCompleted) BOOL completed;
@property(assign, nonatomic) double startTime;
@property(assign, nonatomic) double duration;
@property(copy, nonatomic) id completionHandler;
@property(copy, nonatomic) id callback;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WACameraPreviewView : UIView {
	EAGLContext* _eaglContext;
	CIContext* _ciContext;
	CADisplayLink* _displayLink;
	opaqueCMBufferQueue* _bufferQueue;
	opaqueCMSampleBuffer* _lastPresentedSampleBuffer;
	CGSize _imageSize;
	BOOL _updatePaused;
	NSConditionLock* _conditionLock;
	NSMutableDictionary* _animations;
	BOOL _alwaysRedraw;
	int _mediaServicesUnavailableLock;
	BOOL _mediaServicesUnavailable;
	BOOL _acceptingSampleBuffers;
	GLKView* _eaglView;
	WACameraFilter* _filter;
	id<WACameraPreviewViewDelegate> _delegate;
	CGSize _displayedImageSize;
	CGAffineTransform _videoTransform;
}
@property(assign, nonatomic, getter=isAcceptingSampleBuffers) BOOL acceptingSampleBuffers;
@property(assign, nonatomic) __weak id<WACameraPreviewViewDelegate> delegate;
@property(assign, nonatomic, getter=isPaused) BOOL paused;
@property(readonly, assign, nonatomic) CGSize displayedImageSize;
@property(assign, nonatomic) CGAffineTransform videoTransform;
@property(retain, nonatomic) WACameraFilter* filter;
@property(readonly, assign, nonatomic) GLKView* eaglView;
-(void).cxx_destruct;
-(CGRect)rectForMetadataOutputRectOfInterest:(CGRect)interest;
-(CGPoint)captureDevicePointOfInterestForPoint:(CGPoint)point;
-(void)applyAnimationsAtTime:(double)time;
-(void)performAnimationWithDuration:(double)duration key:(id)key callback:(id)callback completion:(id)completion;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)didMoveToWindow;
-(id)snapshotViewOfLastSampleBuffer;
-(void)displayImageBuffer:(CVBufferRef)buffer;
-(void)blockCurrentThreadUntilDisplay;
-(void)clear;
-(void)redraw:(id)redraw;
-(void)mediaServicesWereReset:(id)reset;
-(void)mediaServicesWereLost:(id)lost;
-(void)processSampleBuffer:(opaqueCMSampleBuffer*)buffer;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithSession:(id)session;
@end

__attribute__((visibility("hidden")))
@interface WAMicAccessViewController : WAViewController {
	UIView* _contentView;
	UIButton* _buttonClose;
	UILabel* _labelItem1;
	UILabel* _labelItem2;
	UILabel* _labelItem3;
	UILabel* _labelItem4;
	UILabel* _labelTitle;
	UILabel* _labelSubtitle;
	UILabel* _labelOpenSettings;
	UILabel* _labelOpenPrivacy;
	UILabel* _labelOpenMicrophone;
	UILabel* _labelAllowWhatsApp;
	UILabel* _labelWhatsApp;
	UIImageView* _imageSettings;
	UIImageView* _imagePrivacy;
	UIImageView* _imageMicrophone;
	UIView* _viewWhatsApp;
}
@property(retain, nonatomic) UIView* viewWhatsApp;
@property(retain, nonatomic) UIImageView* imageMicrophone;
@property(retain, nonatomic) UIImageView* imagePrivacy;
@property(retain, nonatomic) UIImageView* imageSettings;
@property(retain, nonatomic) UILabel* labelWhatsApp;
@property(retain, nonatomic) UILabel* labelAllowWhatsApp;
@property(retain, nonatomic) UILabel* labelOpenMicrophone;
@property(retain, nonatomic) UILabel* labelOpenPrivacy;
@property(retain, nonatomic) UILabel* labelOpenSettings;
@property(retain, nonatomic) UILabel* labelSubtitle;
@property(retain, nonatomic) UILabel* labelTitle;
@property(retain, nonatomic) UILabel* labelItem4;
@property(retain, nonatomic) UILabel* labelItem3;
@property(retain, nonatomic) UILabel* labelItem2;
@property(retain, nonatomic) UILabel* labelItem1;
@property(retain, nonatomic) UIButton* buttonClose;
@property(retain, nonatomic) UIView* contentView;
+(id)controller;
-(void).cxx_destruct;
-(void)closeAction:(id)action;
-(void)dismiss;
-(void)presentModallyFromViewController:(id)viewController;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestServerProperties : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAPhotoLibraryCollectionViewCell : WAMediaCollectionViewCell <WAMediaPickerAssetPresenting> {
	WAMediaPickerAsset* _mediaPickerAsset;
	int _pendingRequestID;
	BOOL _showsCheckmarkWhenSelected;
	int _index;
	CGSize _maximumThumbnailSizeInPixels;
}
@property(assign, nonatomic) BOOL showsCheckmarkWhenSelected;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) CGSize maximumThumbnailSizeInPixels;
@property(assign, nonatomic) int index;
-(void).cxx_destruct;
-(void)cancelThumbnailLoading;
-(void)prepareForReuse;
-(void)configureWithMediaPickerAsset:(id)mediaPickerAsset;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WADownloadProgressArcLayer : CALayer {
}
@property(assign, nonatomic) float progress;
+(BOOL)needsDisplayForKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface WACircularProgressView : UIView {
	float _barWidth;
	UIColor* _progressColor;
	UIColor* _trackColor;
}
@property(retain, nonatomic) UIColor* trackColor;
@property(retain, nonatomic) UIColor* progressColor;
@property(assign, nonatomic) float barWidth;
@property(assign, nonatomic) float progress;
+(Class)layerClass;
-(void).cxx_destruct;
-(CGSize)intrinsicContentSize;
-(void)drawRect:(CGRect)rect;
-(id)barColor;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(float)presentationValueForProgress;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAImageSearchBar : UISearchBar {
	UIView* _backgroundView;
	UIView* _bottomBorderView;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface ImageSearchController : WAViewController <UISearchBarDelegate> {
	UIActivityIndicatorView* _activityIndicator;
	UILabel* _labelNoResults;
	UIButton* _buttonLoadMore;
	UIView* _overlayView;
	UIImageView* _bingAttribution;
	NSMutableArray* _imageURLs;
	NSMutableArray* _thumbnailViews;
	UIImageView* _highlightedImageView;
	int _searchOffset;
	int _resultsCount;
	UISearchBar* _searchBar;
	ImageListScrollView* _scrollView;
	NSString* _preloadedSearchText;
	id<ImageSearchControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<ImageSearchControllerDelegate> delegate;
@property(retain, nonatomic) NSString* preloadedSearchText;
@property(retain, nonatomic) ImageListScrollView* scrollView;
@property(retain, nonatomic) UISearchBar* searchBar;
-(void).cxx_destruct;
-(void)processImageSearchResponseData:(id)data error:(id)error;
-(void)doSearch:(id)search;
-(void)searchBarTextDidEndEditing:(id)searchBarText;
-(void)searchBarTextDidBeginEditing:(id)searchBarText;
-(void)searchBar:(id)bar textDidChange:(id)text;
-(void)searchBarCancelButtonClicked:(id)clicked;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)cancelAction:(id)action;
-(void)clearAction:(id)action;
-(void)loadMoreAction:(id)action;
-(void)updateLayoutForCurrentOrientation;
-(int)positionForBar:(id)bar;
-(void)addSearchResults:(id)results;
-(void)selectMediaAtIndex:(id)index;
-(void)resetSearchResults;
-(void)showActivity:(BOOL)activity;
-(void)hideOverlay;
-(void)showOverlay;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WANetworkChangedViewController : WAViewController <UITableViewDataSource, UITableViewDelegate> {
	UIImageView* _imageViewTower;
	UILabel* _labelHelperTextTop;
	UILabel* _labelHelperTextBottom;
	UIView* _viewButtons;
	UIButton* _buttonChangeNumber;
	UIButton* _buttonKeepNumber;
	id<WANetworkChangedControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WANetworkChangedControllerDelegate> delegate;
+(id)controller;
-(void).cxx_destruct;
-(void)keepNumber:(id)number;
-(void)changeNumber:(id)number;
-(void)finishControllerWithResult:(BOOL)result;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidLayoutSubviews;
-(void)loadView;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAStarredMessageCellFooterView : UIView {
	UIView* _separator;
	float _leftInset;
}
@property(assign, nonatomic) float leftInset;
+(float)preferredHeight;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WebImagePicker : UINavigationController <ImageSearchControllerDelegate, WAPhotoMoveAndScaleViewControllerDelegate> {
	ImageSearchController* _imageSearchController;
	id<WebImagePickerDelegate> _pickerDelegate;
	WAHTTPFetcher* _httpFetcher;
	WAPhotoMoveAndScaleViewController* _moveAndScaleViewController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSString* preloadedSearchText;
-(void).cxx_destruct;
-(void)downloadImageAtURL:(id)url;
-(void)photoMoveAndScaleViewController:(id)controller didFinishWithImage:(id)image;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)imageSearchControllerDidCancel:(id)imageSearchController;
-(void)imageSearchController:(id)controller didSelectImageWithURL:(id)url;
-(id)initWithPickerDelegate:(id)pickerDelegate;
@end

__attribute__((visibility("hidden")))
@interface ShareLocationController : WAViewController <MKMapViewDelegate, WAMapViewDelegate, UISearchBarDelegate, UIToolbarDelegate, WALinkLabelDelegate, UITableViewDataSource, UITableViewDelegate, UISearchDisplayDelegate, CLLocationManagerDelegate> {
	WAFieldStatsEventLocationPicker* _fieldStats;
	double _elapsedTime;
	double _controllerLoadedTime;
	CLLocationManager* _locationManager;
	BOOL _goodLocationReceived;
	WATimer* _staleTimer;
	NSString* _placeSearchCriteria;
	WALinkLabel* _viewAttribution;
	UITableViewCell* _cellSendMyLocation;
	WAPulsingCircleView* _pulsingCircle;
	NSTimer* _pulseAnimationUpdateTimer;
	CAAnimation* _lastKnownPulseAnimation;
	NSMutableSet* _cachesCreatedThisSession;
	NSArray* _places;
	NSMutableArray* _searchHistory;
	CLLocation* _searchLocation;
	CLLocation* _lastUpdatedLocation;
	double _searchRadius;
	WAHTTPFetcher* _fetcher;
	MKLocalSearch* _appleMapsSearch;
	BOOL _requestInProgress;
	unsigned _defaultSource;
	BOOL _isFallBack;
	BOOL _displayShadow;
	int _lastKnownOrientation;
	BOOL _moreResultsAvailable;
	NSString* _nextResultsPageURLString;
	int _loadingMoreRowIndex;
	UITableViewCell* _cellLoadingMore;
	int _expandCollapseRowIndex;
	int _searchingRowIndex;
	BOOL _zoomToPlacesWhenMapExpands;
	BOOL _locationUnavailableAlertShown;
	BOOL _locationServicesDisabledAlertShown;
	BOOL _fullHeightLayout;
	BOOL _showCollapseButton;
	BOOL _placeListExpanded;
	id<ShareLocationControllerDelegate> _delegate;
	UISearchBar* _searchBar;
	UIView* _viewMapContainer;
	WAMapView* _mapView;
	UIView* _horizontalMapDivider;
	UIView* _verticalMapDivider;
	UITableView* _tableViewPlaces;
	UIToolbar* _toolbarMapType;
	WAMapTypeSegmentedControl* _scMapType;
	UIBarButtonItem* _barButtonCancel;
	UIBarButtonItem* _barButtonRefresh;
	NSString* _accuracyStr;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL placeListExpanded;
@property(assign, nonatomic) BOOL showCollapseButton;
@property(assign, nonatomic) BOOL fullHeightLayout;
@property(copy, nonatomic) NSString* accuracyStr;
@property(retain, nonatomic) UIBarButtonItem* barButtonRefresh;
@property(retain, nonatomic) UIBarButtonItem* barButtonCancel;
@property(retain, nonatomic) WAMapTypeSegmentedControl* scMapType;
@property(retain, nonatomic) UIToolbar* toolbarMapType;
@property(retain, nonatomic) UITableView* tableViewPlaces;
@property(retain, nonatomic) UIView* verticalMapDivider;
@property(retain, nonatomic) UIView* horizontalMapDivider;
@property(retain, nonatomic) WAMapView* mapView;
@property(retain, nonatomic) UIView* viewMapContainer;
@property(retain, nonatomic) UISearchBar* searchBar;
@property(assign, nonatomic) __weak id<ShareLocationControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)handleOpenURL:(id)url fromLinkLabel:(id)linkLabel;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(void)searchDisplayController:(id)controller didHideSearchResultsTableView:(id)view;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchDisplayController:(id)controller willShowSearchResultsTableView:(id)view;
-(void)searchBarSearchButtonClicked:(id)clicked;
-(void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
-(void)mapView:(id)view didSelectLocation:(id)location;
-(void)mapView:(id)view didSelectPlacemark:(id)placemark location:(id)location;
-(void)mapView:(id)view annotationView:(id)view2 calloutAccessoryControlTapped:(id)tapped;
-(void)mapView:(id)view didFailToLocateUserWithError:(id)error;
-(void)mapView:(id)view didUpdateUserLocation:(id)location;
-(int)positionForBar:(id)bar;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_applicationWillEnterForeground;
-(void)wa_applicationDidEnterBackground;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)willTransitionToTraitCollection:(id)traitCollection withTransitionCoordinator:(id)transitionCoordinator;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)cancelController;
-(void)finishControllerWithWAPlace:(id)waplace;
-(void)showDetailsForWAPlace:(id)waplace;
-(void)expandOrCollapsePlaceList;
-(void)refreshAction:(id)action;
-(void)cancelAction:(id)action;
-(void)mapTypeChangedAction:(id)action;
-(id)fullPathToSearchHistoryFile;
-(void)addSearchHistoryItem:(id)item;
-(void)setAttribution:(id)attribution;
-(void)startLocationUpdatesIfNecessary;
-(void)checkStateOfLocationServices;
-(void)processLocationError:(id)error;
-(void)processUpdatedLocation:(id)location;
-(void)searchUsingBestKnownLocation;
-(void)searchWithCriteria:(id)criteria;
-(void)fetchNextPage;
-(void)searchForPlaces;
-(BOOL)searchCache:(id)cache;
-(void)searchWithApple;
-(void)processFacebookPlaceSearchData:(id)data error:(id)error;
-(id)stripNewlines:(id)newlines;
-(void)appendString:(id)string ToAddress:(id)address withSeparator:(BOOL)separator;
-(void)searchWithFacebook;
-(void)processFoursquarePlaceSearchData:(id)data error:(id)error;
-(void)searchWithFoursquare;
-(void)processGooglePlaceSearchData:(id)data error:(id)error;
-(void)searchWithGoogle;
-(void)useFallbackForSource:(unsigned)source submitFailure:(BOOL)failure;
-(void)sendCurrentLocation;
-(void)stopPlaceSearch;
-(void)useResults:(id)results add:(BOOL)add cache:(BOOL)cache moreAvailable:(BOOL)available;
-(int)minSearchDistanceNoQuery;
-(void)updatePulseAnimation:(id)animation;
-(void)updateLayoutForCurrentOrientation;
-(void)dealloc;
-(id)initWithShareDelegate:(id)shareDelegate;
@end

@interface WALegacyLocationMessageCell : WAMessageCell {
	UIView* _placeInfoContainer;
	UILabel* _labelPlaceName;
	UILabel* _labelPlaceAddress;
	UIView* _thumbnailContainer;
	UIImageView* _mapThumbnail;
	UIView* _thumbnailDimmerView;
	UIActivityIndicatorView* _activityIndicator;
	UIImageView* _chevronImage;
	UIImageView* _broadcastImageView;
	UIImageView* _lowerRightShadowView;
}
+(id)cellReuseIdentifier;
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
+(BOOL)cellDataHasPlaceInformation:(id)information;
+(id)placeAddressFont;
+(id)placeNameFont;
-(void).cxx_destruct;
-(id)accessibilityHintText;
-(id)accessibilityValueText;
-(void)configureForAccessibility;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)layoutSubviews;
-(void)performCopy;
-(BOOL)canPerformCopy;
-(void)setPlaceInfoHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setMapDimmed:(BOOL)dimmed animated:(BOOL)animated;
-(void)setDimmed:(BOOL)dimmed;
-(void)handleTapOnBubbleWithLocation:(CGPoint)location;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WABlacklistViewController : WATableViewController <SinglePersonPickerDelegate> {
	NSMutableArray* _blockedContacts;
	UITableViewCell* _addNewCell;
	BOOL _ignoreBlockedContactListNotifications;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)controller;
-(void).cxx_destruct;
-(id)excludedJIDsForSinglePersonPicker:(id)singlePersonPicker;
-(void)singlePersonPicker:(id)picker didSelectContactInfo:(id)info;
-(void)singlePersonPickerDidCancel:(id)singlePersonPicker;
-(void)addPerson;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)blockedContactsListUpdated:(id)updated;
-(void)removeBlacklistItem:(id)item;
-(void)addBlacklistItem:(id)item;
-(void)showUnableToMakeChangesError;
-(BOOL)canMakeChanges;
-(void)updateInterface;
-(void)reloadBlacklistItems;
-(void)xmppConnectionStateDidChange:(id)xmppConnectionState;
-(void)wa_tintColorDidChange;
-(void)wa_fontSizeDidChange;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAAddressBookFieldPicker : WATableViewController {
	NSArray* _fieldSections;
	NSArray* _fields;
	id<WAAddressBookFieldPickerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAAddressBookFieldPickerDelegate> delegate;
@property(retain, nonatomic) NSArray* fields;
+(id)pickerWithDelegate:(id)delegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)cancelAction:(id)action;
-(void)viewDidLoad;
-(void)setupFieldData;
@end

__attribute__((visibility("hidden")))
@interface WAArchivedChatsViewController : WAChatSessionsViewController {
}
-(void)setUpNoContentView:(id)view;
-(id)predicateForFetchRequest;
-(void)commonInit;
@end

__attribute__((visibility("hidden")))
@interface WACallStack : NSObject {
	NSDictionary* _threads;
	NSDateFormatter* _dateFormatter;
}
+(id)sharedManager;
-(void).cxx_destruct;
-(id)callStackSymbols;
-(void)pushWithFormat:(id)format;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WATask : NSObject {
	BOOL _active;
	id _handler;
	WATaskManager* _taskManager;
}
@property(assign, nonatomic) __weak WATaskManager* taskManager;
@property(readonly, assign, nonatomic) id handler;
@property(assign, nonatomic, getter=isActive) BOOL active;
-(void).cxx_destruct;
-(void)rescheduleIfNeeded;
-(id)initWithHandler:(id)handler;
@end

__attribute__((visibility("hidden")))
@interface WATaskManager : NSObject {
	BOOL _isRunning;
	NSMutableArray* _tasks;
	unsigned _counter;
	NSObject<OS_dispatch_group>* _dispatchGroup;
	unsigned _quietTimeCounter;
	BOOL _interfaceIsIdle;
	BOOL _isBatteryLow;
	BOOL _isInLowPowerMode;
	BOOL _isInBackground;
	BOOL _paused;
	double _minimumIntervalBetweenTasks;
	double _minimumDelayBeforeIdle;
}
@property(assign, nonatomic, getter=isPaused) BOOL paused;
@property(assign, nonatomic) double minimumDelayBeforeIdle;
@property(assign, nonatomic) double minimumIntervalBetweenTasks;
+(id)defaultManager;
-(void).cxx_destruct;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)setBackgroundState:(BOOL)state;
-(void)lowPowerModeDidChange:(id)lowPowerMode;
-(void)batteryLevelDidChange:(id)batteryLevel;
-(void)batteryStateDidChange:(id)batteryState;
-(void)updateLowPowerMode;
-(void)updateIsBatteryLow;
-(void)performOneTask;
-(void)restartQueueIfNeeded;
-(void)scheduleTask:(id)task;
-(void)endQuietTime;
-(void)beginQuietTimeWithCompletionHandler:(id)completionHandler;
-(void)beginQuietTime;
-(void)endQuietTimeAfterDelay;
-(void)reportEvent:(id)event;
-(void)dealloc;
-(id)init;
@end

@interface WARecipientNameView : UIView {
	UILabel* _label;
	UIView* _bottomBorderView;
	float _leadingInset;
	NSString* _name;
	UIVisualEffectView* _backgroundView;
}
-(void).cxx_destruct;
-(void)reloadAttributedText;
-(void)layoutSubviews;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)contentSizeCategoryDidChange:(id)contentSizeCategory;
-(id)initWithName:(id)name leadingInset:(float)inset;
@end

__attribute__((visibility("hidden")))
@interface WAWebClientSessionTableViewCell : UITableViewCell {
	UILabel* _lastActiveLabel;
	UILabel* _locationLabel;
	UILabel* _operatingSystemLabel;
	UIImageView* _iconImageView;
}
@property(assign, nonatomic) __weak UIImageView* iconImageView;
@property(assign, nonatomic) __weak UILabel* operatingSystemLabel;
@property(assign, nonatomic) __weak UILabel* locationLabel;
@property(assign, nonatomic) __weak UILabel* lastActiveLabel;
-(void).cxx_destruct;
-(void)setIconImageForBrowserName:(id)browserName;
@end

__attribute__((visibility("hidden")))
@interface WAWebClientSettingsViewController : WAStaticTableViewController <WAQRCodeScannerViewControllerDelegate> {
	BOOL _ignoreWebClientSessionDataUpdates;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void)qrCodeScannerViewControllerDidCancel:(id)qrCodeScannerViewController;
-(void)qrCodeScannerViewController:(id)controller didFinishWithCode:(id)code;
-(BOOL)qrCodeScannerViewController:(id)controller shouldAcceptCode:(id)code;
-(void)scanQRCode;
-(void)signOut;
-(void)promptUserToSignOut;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)setupTableView;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)webClientDidUpdateSessionData:(id)webClient;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAAlertViewPresenter : NSObject {
}
-(void)addButtonWithTitle:(id)title handler:(id)handler;
-(void)addCancelButtonWithTitle:(id)title handler:(id)handler;
-(void)dismissByCancellingWithAnimation:(BOOL)animation;
-(void)presentFromViewController:(id)viewController;
-(id)initWithTitle:(id)title message:(id)message;
-(void)applicationWillResetUserInterface:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAAlertViewPresenterOS7 : WAAlertViewPresenter <UIAlertViewDelegate> {
	UIAlertView* _alertView;
	UIAlertView* _retainedAlertViewBeforePresentation;
	NSMutableDictionary* _actionMap;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)didPresentActionSheet:(id)sheet;
-(void)alertView:(id)view didDismissWithButtonIndex:(int)buttonIndex;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)addCancelButtonWithTitle:(id)title handler:(id)handler;
-(void)addButtonWithTitle:(id)title handler:(id)handler;
-(void)dismissByCancellingWithAnimation:(BOOL)animation;
-(void)presentFromViewController:(id)viewController;
-(id)initWithTitle:(id)title message:(id)message;
@end

__attribute__((visibility("hidden")))
@interface _WAAlertViewPresenterOS8 : WAAlertViewPresenter {
	UIAlertController* _alertController;
	UIAlertController* _retainedControllerBeforePresentation;
	id _cancelActionHandler;
}
-(void).cxx_destruct;
-(void)addButtonWithTitle:(id)title handler:(id)handler;
-(void)addCancelButtonWithTitle:(id)title handler:(id)handler;
-(void)dismissByCancellingWithAnimation:(BOOL)animation;
-(void)presentFromViewController:(id)viewController;
-(id)initWithTitle:(id)title message:(id)message;
@end

__attribute__((visibility("hidden")))
@interface WAContactAddressEditingCell : WAContactMultiValueEditingCell {
	NSArray* _textFields;
	WAContactPropertyTextField* _textFieldStreet1;
	WAContactPropertyTextField* _textFieldStreet2;
	WAContactPropertyTextField* _textFieldCity;
	WAContactPropertyTextField* _textFieldState;
	WAContactPropertyTextField* _textFieldZIP;
	WAContactPropertyTextField* _textFieldCountry;
}
@property(retain, nonatomic) WAContactPropertyTextField* textFieldCountry;
@property(retain, nonatomic) WAContactPropertyTextField* textFieldZIP;
@property(retain, nonatomic) WAContactPropertyTextField* textFieldState;
@property(retain, nonatomic) WAContactPropertyTextField* textFieldCity;
@property(retain, nonatomic) WAContactPropertyTextField* textFieldStreet2;
@property(retain, nonatomic) WAContactPropertyTextField* textFieldStreet1;
@property(assign, nonatomic) __weak id<WAContactAddressEditingCellDelegate> delegate;
+(float)rowHeight;
-(void).cxx_destruct;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)isFirstResponder;
-(BOOL)canBecomeFirstResponder;
-(id)currentlyActiveTextField;
-(void)contactPropertyTextFieldValueChanged:(id)changed;
-(BOOL)contactPropertyTextFieldShouldReturn:(id)contactPropertyTextField;
-(BOOL)contactPropertyTextFieldShouldBeginEditing:(id)contactPropertyTextField;
-(void)reconfigure;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface PhoneConfirmationController : WAViewController <WAPhoneNumberTextFieldDelegate, WACountryPickerControllerDelegate> {
	WAOverlayView* _overlayView;
	CountryInfo* _selectedCountry;
	id<PhoneConfirmationControllerDelegate> _delegate;
	UITableView* _tableView;
	UIView* _footerView;
	UIView* _viewInputFieldsContainer;
	UIView* _viewCCodeContainer;
	UILabel* _labelPlusSign;
	UILabel* _labelCCode;
	UITextField* _textFieldCode;
	UIImageView* _imageCodeBg;
	UIView* _viewPhoneNumberContainer;
	WAPhoneNumberTextField* _phoneNumberTextField;
	UIImageView* _imagePhoneBG;
	UIButton* _buttonDelete;
	UIView* _viewWarning;
	NSMutableArray* _bulletLabels;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain) NSMutableArray* bulletLabels;
@property(retain, nonatomic) UIView* viewWarning;
@property(retain, nonatomic) UIButton* buttonDelete;
@property(retain, nonatomic) UIImageView* imagePhoneBG;
@property(retain, nonatomic) WAPhoneNumberTextField* phoneNumberTextField;
@property(retain, nonatomic) UIView* viewPhoneNumberContainer;
@property(retain, nonatomic) UIImageView* imageCodeBg;
@property(retain, nonatomic) UITextField* textFieldCode;
@property(retain, nonatomic) UILabel* labelCCode;
@property(retain, nonatomic) UILabel* labelPlusSign;
@property(retain, nonatomic) UIView* viewCCodeContainer;
@property(retain, nonatomic) UIView* viewInputFieldsContainer;
@property(retain, nonatomic) UIView* footerView;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) __weak id<PhoneConfirmationControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)phoneNumberNormalizationFailedWithError:(id)error;
-(void)phoneNumberNormalized:(id)normalized;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)countryPicker:(id)picker didSelectCountry:(id)country;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)bulletViewFromString:(id)string;
-(id)formattedLabelOfSize:(float)size;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)phoneNumberTextFieldDidChange:(id)phoneNumberTextField;
-(void)wa_tintColorDidChange;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)deleteAction;
-(void)cancelAction:(id)action;
-(void)codeChangedAction:(id)action;
-(void)formatCodeField;
-(void)validatePhoneNumber:(id)number;
-(void)showOverlay:(id)overlay;
-(id)buttonTitle;
-(id)warningBulletPoints;
-(id)warningText;
-(id)title;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WADeleteAccountController : WAModalNavigationController <PhoneConfirmationControllerDelegate, FeedbackInputControllerDelegate, DeleteConfirmationControllerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WADeleteAccountControllerDelegate, UINavigationControllerDelegate> delegate;
-(void)deleteConfirmationControllerDidCancel:(id)deleteConfirmationController;
-(void)deleteConfirmationControllerDidFinish:(id)deleteConfirmationController;
-(void)feedbackInputControllerDidCancel:(id)feedbackInputController;
-(void)feedbackInputController:(id)controller didFinishWithFeedbackText:(id)feedbackText;
-(void)phoneConfirmationControllerDidCancel:(id)phoneConfirmationController;
-(void)phoneConfirmationControllerDidFinish:(id)phoneConfirmationController;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WAUploadBackupOperation_Documents : WACloudInteractionBackupOperation_Documents {
	NSFileCoordinator* _coordinator;
	WABackup* _backup;
	NSString* _localPath;
	BOOL _failed;
	NSString* _source;
	NSString* _destination;
}
-(void).cxx_destruct;
-(BOOL)removeFileAtURL:(id)url;
-(BOOL)createDirectoryAtURL:(id)url;
-(id)pathForRemoteFile:(id)remoteFile;
-(BOOL)moveToCloud;
-(void)addRecentLogsToBackup;
-(BOOL)saveBackupInformation;
-(id)buildBackupInformation;
-(id)buildExpectedSizes;
-(float)progress;
-(BOOL)succeeded;
-(void)run;
-(void)listenForCloudStatus;
-(id)cloudStatusToObserve;
-(id)initWithBackup:(id)backup localPath:(id)path;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAProfilePictureScrollView : UIScrollView <UIScrollViewDelegate> {
	UIImageView* _imageView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIImageView* imageView;
-(void).cxx_destruct;
-(void)scrollViewDidZoom:(id)scrollView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)recenterImageView;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface GroupIconViewController : WAViewController <WASinglePhotoPickerControllerDelegate, WebImagePickerDelegate, WAImageToImageTransitioning, WAImageToImagePanPopGestureRecognizerDelegate, WANavigationControllerPopFromAnimating> {
	BOOL _ignoreNextProfilePictureUpdateNotification;
	BOOL _displayingPlaceholderImage;
	BOOL _displayingFullsizeImage;
	WAActivityLabel* _activityLabel;
	_WAProfilePictureScrollView* _scrollView;
	UIActivityIndicatorView* _activityIndicator;
	WebImagePicker* _webImagePicker;
	UIToolbar* _toolbar;
	UIBarButtonItem* _bbItemEditPicture;
	UIBarButtonItem* _bbItemPictureAction;
	WAImageToImagePanPopGestureRecognizer* _panPopGesture;
	BOOL _addressBookPictureAllowed;
	BOOL _updating;
	NSString* _jid;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) BOOL updating;
@property(assign, nonatomic) BOOL addressBookPictureAllowed;
@property(copy, nonatomic) NSString* jid;
+(id)controllerWithJID:(id)jid;
-(void).cxx_destruct;
-(id)previewActionItems;
-(void)profilePictureUpdated:(id)updated;
-(void)wa_applicationDidEnterBackground;
-(void)webImagePickerDidCancel:(id)webImagePicker;
-(void)webImagePicker:(id)picker didSelectImage:(id)image;
-(void)singlePhotoPickerControllerDidCancel:(id)singlePhotoPickerController;
-(void)singlePhotoPickerController:(id)controller didFinishWithImage:(id)image;
-(void)gestureRecognizerWillFinishManagingInteractivePopTransition:(id)gestureRecognizer;
-(void)gestureRecognizerDidBeginManagingInteractivePopTransition:(id)gestureRecognizer;
-(void)gestureRecognizerWillBeginManagingInteractivePopTransition:(id)gestureRecognizer;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)usesScreenEdgePanGestureRecognizerForCustomPopTransition;
-(id)popFromAnimationIdentifier;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(id)rotatingFooterView;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)loadView;
-(void)pictureAction:(id)action;
-(void)editAction:(id)action;
-(void)copyImageToPasteboard;
-(void)saveImageToCameraRoll;
-(void)showImageSearchController;
-(void)reallyShowImagePickerForSourceType:(int)sourceType;
-(void)showImagePickerForSourceType:(int)sourceType;
-(void)deletePicture:(BOOL)picture;
-(void)handleDoubleTapGesture:(id)gesture;
-(void)configureScrollViewForZooming;
-(void)relayout;
-(void)reloadPicture:(BOOL)picture;
-(void)handleReceivedFullsizeProfilePicture:(id)picture;
-(void)hideActivityIndicator;
-(void)showActivityIndicator;
-(void)hideActivity;
-(void)showActivity:(id)activity;
-(void)updateNavigationTitle;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAClearConversationsPhoneConfirmationViewController : PhoneConfirmationController {
}
-(id)buttonTitle;
-(id)warningBulletPoints;
-(id)warningText;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface WAPrepareBackupOperation : WAWaitOperation {
	WABackup* _backup;
	NSArray* _tarOperations;
	WACleanUpBackupOperation* _cleanUp;
	NSString* _localBackupPath;
}
@property(retain, nonatomic) NSString* localBackupPath;
+(id)fileListComparator;
+(id)recentCompareBlock;
-(void).cxx_destruct;
-(id)createUploadOperationWithDependencies:(id)dependencies;
-(id)createCleanUpOperationWithDependencies:(id)dependencies;
-(id)createCopyFileFromPath:(id)path toPath:(id)path2;
-(id)createDatabaseOperations;
-(void)removeDuplicateFiles:(id)files;
-(void)removeMissingFiles:(id)files;
-(id)sortFilePaths:(id)paths relativeToPath:(id)path;
-(id)createCopyTARFromPath:(id)path toPath:(id)path2;
-(id)createTARCopyOperations:(id)operations withUpload:(id)upload;
-(id)prepareTAROperations;
-(id)splitFileUrls:(id)urls;
-(unsigned)firstIndexInArray:(id)array pastDate:(id)date;
-(void)addFieldStatsReportingToTAROperations:(id)taroperations;
-(id)generateTARFilePaths;
-(id)storeUserDefaultsToDictionary;
-(void)saveUserDefaults;
-(void)createLocalBackupDirectory;
-(void)lockSyncManager;
-(void)drop;
-(void)disconnect;
-(long long)temporaryBackupSize;
-(BOOL)calculatePotentialBackupSize;
-(BOOL)checkForRegistration;
-(BOOL)checkForCorruption;
-(BOOL)requireChatStore;
-(BOOL)requireConnection;
-(BOOL)checkBattery;
-(BOOL)checkRecentInProgress;
-(void)cancel;
-(void)performDroppedActions;
-(void)performDisconnectedActions;
-(void)run;
-(void)main;
-(id)initWithBackup:(id)backup;
-(id)initWithCount:(int)count;
@end

__attribute__((visibility("hidden")))
@interface WATooltipView : UIView {
	float _leftRightPadding;
	float _topBottomPadding;
	UIButton* _buttonClose;
	NSString* _text;
	UIFont* _font;
	BOOL _arrowDown;
	CGRect _toolTipRect;
	float _arrowOffset;
	BOOL _fadingIn;
	BOOL _fadingOut;
	BOOL _buttonFired;
	UIEdgeInsets _textInsets;
	NSString* _accessibilityText;
	double _animationDuration;
}
@property(assign, nonatomic) double animationDuration;
@property(retain, nonatomic) UIFont* font;
@property(copy, nonatomic) NSString* accessibilityText;
@property(copy, nonatomic) NSString* text;
-(void).cxx_destruct;
-(CGRect)accessibilityFrame;
-(id)accessibilityHint;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)setTooltipVisible:(BOOL)visible animated:(BOOL)animated;
-(void)setTargetRect:(CGRect)rect inView:(id)view;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)layoutSubviews;
-(void)drawRectiOS6:(CGRect)a6;
-(void)drawText;
-(void)drawRectiOS7:(CGRect)a7;
-(void)drawRect:(CGRect)rect;
-(void)fireButton:(id)button;
-(void)closeAction:(id)action;
-(void)dismissTooltip;
-(void)updateOrientation;
-(void)adjustSizeToContent;
-(void)dealloc;
-(id)initWithVisibleCloseButton:(BOOL)visibleCloseButton;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAContact : NSManagedObject {
}
@property(retain, nonatomic) NSSet* children;
@property(retain, nonatomic) WAContact* parent;
@property(retain, nonatomic) NSDate* lastModifiedDate;
@property(retain, nonatomic) WAContactSection* section;
@property(retain, nonatomic) NSSet* phones;
@property(retain, nonatomic) NSNumber* sort;
@property(retain, nonatomic) NSArray* tokens;
@property(retain, nonatomic) NSString* highlightedName;
@property(retain, nonatomic) NSString* indexName;
@property(retain, nonatomic) NSString* firstName;
@property(retain, nonatomic) NSString* fullName;
@property(retain, nonatomic) NSNumber* abUserID;
+(id)mergedContactWithParent:(id)parent includeChildren:(BOOL)children dedupeProperties:(BOOL)properties;
+(BOOL)isABPersonRecordReadony:(void*)readony;
+(id)allLinkedNonWhatsAppPhonesWithParent:(id)parent includeChildren:(BOOL)children;
+(id)allLinkedWhatsAppPhonesWithParent:(id)parent includeChildren:(BOOL)children;
-(id)individualContactAsMergedContact;
-(id)mergedContactForEditing;
-(id)mergedContact;
-(id)allLinkedAddressBookIDs;
-(id)allLinkedNonWhatsAppPhones;
-(id)allLinkedWhatsAppPhones;
@end

__attribute__((visibility("hidden")))
@interface WAMergedContact : NSObject <NSCopying> {
	BOOL _keepExistingAddressBookData;
	BOOL _readonly;
	BOOL _imageModified;
	unsigned _numberOfMergedContacts;
	UIImage* _image;
	NSString* _prefix;
	NSString* _firstName;
	NSString* _phoneticFirstName;
	NSString* _middleName;
	NSString* _phoneticMiddleName;
	NSString* _lastName;
	NSString* _phoneticLastName;
	NSString* _suffix;
	NSString* _nickname;
	NSString* _jobTitle;
	NSString* _department;
	NSString* _organization;
	unsigned _nameFormat;
	NSArray* _whatsAppPhones;
	WAContactMultiValueProperty* _phones;
	WAContactMultiValueProperty* _emails;
	WAContactMultiValueProperty* _webURLs;
	WAContactMultiValueProperty* _addresses;
	WAContactProperty* _birthday;
	WAContactMultiValueProperty* _dates;
	WAContactMultiValueProperty* _imAccounts;
	WAContactMultiValueProperty* _socialProfiles;
	WAContactMultiValueProperty* _notes;
	int _defaultPersonID;
}
@property(assign, nonatomic) BOOL imageModified;
@property(assign, nonatomic) int defaultPersonID;
@property(retain, nonatomic) WAContactMultiValueProperty* notes;
@property(retain, nonatomic) WAContactMultiValueProperty* socialProfiles;
@property(retain, nonatomic) WAContactMultiValueProperty* imAccounts;
@property(retain, nonatomic) WAContactMultiValueProperty* dates;
@property(retain, nonatomic) WAContactProperty* birthday;
@property(retain, nonatomic) WAContactMultiValueProperty* addresses;
@property(retain, nonatomic) WAContactMultiValueProperty* webURLs;
@property(retain, nonatomic) WAContactMultiValueProperty* emails;
@property(retain, nonatomic) WAContactMultiValueProperty* phones;
@property(retain, nonatomic) NSArray* whatsAppPhones;
@property(assign, nonatomic) unsigned nameFormat;
@property(copy, nonatomic) NSString* organization;
@property(copy, nonatomic) NSString* department;
@property(copy, nonatomic) NSString* jobTitle;
@property(copy, nonatomic) NSString* nickname;
@property(copy, nonatomic) NSString* suffix;
@property(copy, nonatomic) NSString* phoneticLastName;
@property(copy, nonatomic) NSString* lastName;
@property(copy, nonatomic) NSString* phoneticMiddleName;
@property(copy, nonatomic) NSString* middleName;
@property(copy, nonatomic) NSString* phoneticFirstName;
@property(copy, nonatomic) NSString* firstName;
@property(copy, nonatomic) NSString* prefix;
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) unsigned numberOfMergedContacts;
@property(assign, nonatomic, getter=isReadonly) BOOL readonly;
+(void)initialize;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(BOOL)isEqualToMergedContact:(id)mergedContact;
-(BOOL)isEqual:(id)equal;
-(BOOL)deleteContactFromAddressBook:(void*)addressBook;
-(BOOL)saveChangesToAddressBook:(void*)addressBook;
-(void)populateAddressBookPersonRecord:(void*)record;
-(void)updatePersonRecord:(void*)record withDataFromMultiValueProperty:(id)multiValueProperty;
-(void)updatePersonRecordsInAddressBook:(void*)addressBook withDataFromMultiValueProperty:(id)multiValueProperty;
-(id)propertyMapFromContactMultiValueProperty:(id)contactMultiValueProperty;
-(void)updatePersonRecord:(void*)record withStringValue:(id)stringValue forProperty:(int)property;
-(void)mergeInSingleValueFieldsFromRecord:(void*)record;
-(BOOL)hasWhatsAppAblePhoneNumbers;
-(BOOL)isOrganizationContact;
-(id)compositeName;
@end

__attribute__((visibility("hidden")))
@interface WAE2eMessageV2 : WAE2eMessage {
	unsigned _messageType;
	NSString* _mediaUrl;
	NSString* _mediaMatchedText;
	NSString* _mediaTitle;
	NSString* _mediaText;
	NSString* _mediaDescription;
	NSData* _thumbnailData;
	NSData* _senderKeyData;
	NSString* _senderKeyGroupId;
	NSMutableArray* _unknownTags;
	double _locationLatitude;
	double _locationLongitude;
}
@property(retain, nonatomic) NSMutableArray* unknownTags;
@property(retain, nonatomic) NSString* senderKeyGroupId;
@property(retain, nonatomic) NSData* senderKeyData;
@property(assign, nonatomic) double locationLongitude;
@property(assign, nonatomic) double locationLatitude;
@property(retain, nonatomic) NSData* thumbnailData;
@property(retain, nonatomic) NSString* mediaDescription;
@property(retain, nonatomic) NSString* mediaText;
@property(retain, nonatomic) NSString* mediaTitle;
@property(retain, nonatomic) NSString* mediaMatchedText;
@property(retain, nonatomic) NSString* mediaUrl;
@property(assign, nonatomic) unsigned messageType;
-(void).cxx_destruct;
-(id)serializedDataForData:(id)data;
-(void)fromSerializedData:(id)serializedData;
-(void)addParticipantMessage:(id)message;
-(void)setDecryptedData:(id)data;
-(id)dataToEncrypt;
-(int)version;
-(id)initForMessage:(id)message;
@end

__attribute__((visibility("hidden")))
@interface _WASpinner : UIView {
	UIImageView* _imageView;
	BOOL _animating;
	CAAnimation* _animation;
}
-(void).cxx_destruct;
-(void)stopAnimating;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)performAnimation;
-(void)startAnimating;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAWebURLPreviewView : UIView {
	UIImageView* _imageView;
	UILabel* _contentLabel;
	UILabel* _webURLLabel;
	float _preferredHeight;
	UIView* _containerView;
	UIView* _topEdge;
	UIView* _bottomEdge;
	_WASpinner* _spinner;
	UIButton* _dismissButton;
	WAWebPageMetadata* _metadata;
	id<WAWebURLPreviewViewDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAWebURLPreviewViewDelegate> delegate;
@property(assign, nonatomic, getter=isBottomEdgeHidden) BOOL bottomEdgeHidden;
@property(assign, nonatomic, getter=isTopEdgeHidden) BOOL topEdgeHidden;
@property(readonly, assign, nonatomic) float preferredHeight;
@property(retain, nonatomic) WAWebPageMetadata* metadata;
-(void).cxx_destruct;
-(void)reloadFont;
-(BOOL)shouldHidePreview;
-(void)layoutSubviews;
-(void)handleWebURLPreviewSwipe:(id)swipe;
-(void)dismiss:(id)dismiss;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAPhone : NSManagedObject {
}
@property(retain, nonatomic) WAStatus* status;
@property(retain, nonatomic) WAFavorite* favorite;
@property(retain, nonatomic) WAContact* contact;
@property(retain, nonatomic) NSString* whatsAppID;
@property(retain, nonatomic) NSString* label;
@property(retain, nonatomic) NSString* phone;
@end

__attribute__((visibility("hidden")))
@interface WAContactsStorage : NSObject {
	NSString* _eTag;
	BOOL _needsRefreshContacts;
	BOOL _needsRefreshStatus;
	BOOL _contactsAvailable;
	BOOL _emailsLoading;
	BOOL _reverseNameSearch;
	NSArray* _contactEmails;
	NSMutableDictionary* _existResults;
	NSMutableSet* _deletedWhatsAppIDs;
	NSMutableSet* _existingWhatsAppIDs;
	NSManagedObjectContext* _syncResponseMOC;
	NSManagedObjectContext* _managedObjectContext;
	NSPersistentStoreCoordinator* _persistentStoreCoordinator;
	NSLock* _pscLock;
	NSManagedObjectModel* _managedObjectModel;
	UILocalizedIndexedCollation* _collation;
	NSArray* _sectionTitles;
	NSArray* _sectionIndexTitles;
	NSIndexSet* _ignoredIndexTitles;
	NSRange _oldLatinIndexRange;
	NSRange _newLatinIndexRange;
	NSRange _oldLatinSectionRange;
	NSRange _newLatinSectionRange;
	NSCharacterSet* _nonAlphanumericCharacterSet;
	NSObject<OS_dispatch_queue>* _contactsSerialQueue;
	id<WAContactsStorageDelegate> _delegate;
	NSLock* _addressBookMutationLock;
	int _approxCountOfContactsBeingUpdated;
}
@property(readonly, assign, nonatomic) NSArray* sectionIndexTitles;
@property(readonly, assign, nonatomic) NSArray* sectionTitles;
@property(readonly, assign, nonatomic) UILocalizedIndexedCollation* collation;
@property(readonly, assign, nonatomic) BOOL reverseNameSearch;
@property(assign) int approxCountOfContactsBeingUpdated;
@property(readonly, assign, nonatomic) NSLock* addressBookMutationLock;
@property(readonly, copy, nonatomic) NSString* persistentStorePath;
@property(readonly, assign, nonatomic) NSPersistentStoreCoordinator* persistentStoreCoordinator;
@property(readonly, assign, nonatomic) NSManagedObjectContext* managedObjectContext;
@property(readonly, assign, nonatomic) NSCharacterSet* nonAlphanumericCharacterSet;
@property(readonly, assign, nonatomic) BOOL contactsAvailable;
@property(assign, nonatomic) __weak id<WAContactsStorageDelegate> delegate;
@property(readonly, copy, nonatomic) NSString* eTag;
+(BOOL)isAddressBookAuthStatusKnown;
+(BOOL)isAddressBookAllowed;
-(void).cxx_destruct;
-(id)statusForWhatsAppID:(id)whatsAppID;
-(id)statusForWhatsAppID:(id)whatsAppID inContext:(id)context;
-(id)phoneWithObjectID:(id)objectID inContext:(id)context;
-(id)phoneWithObjectID:(id)objectID;
-(id)phonesWithStatus:(BOOL)status;
-(id)findContactWithABID:(int)abid registeredInContext:(id)context;
-(id)contactWithABID:(int)abid inContext:(id)context parentOnly:(BOOL)only;
-(id)parentContactWithABID:(int)abid inContext:(id)context;
-(id)parentContactWithABID:(int)abid;
-(id)addressBookContainsJID:(id)jid;
-(int)sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(unsigned)sectionForObjectName:(id)objectName;
-(void)prepareSectionData;
-(void)performSeriallyOnQueue:(id)queue block:(id)block;
-(void)setMetadata:(id)metadata forKey:(id)key;
-(id)metadataForKey:(id)key;
-(id)newManagedObjectContext;
-(id)persistentStoreURL;
-(id)init;
-(void)refreshETag;
-(void)setExistStatus:(id)status forJID:(id)jid;
-(id)existStatusForJID:(id)jid;
-(void)refreshExistStatusForJID:(id)jid;
-(void)statusFetchFailerWithError:(id)error;
-(void)statusFetchFinishedWithResults:(id)results;
-(void)requestStatusMessagesForJIDs:(id)jids;
-(void)requestStatusMessagesForAllContactsIfNeeded;
-(void)deleteStatusForJID:(id)jid;
-(void)setStatusText:(id)text timestamp:(id)timestamp forJID:(id)jid;
-(void)loadContactEmails;
-(id)emailsForAllContacts;
-(id)contactEmails;
-(id)statusesForWhatsAppID:(id)whatsAppID inContext:(id)context;
-(id)statusMessagesForWhatsAppIDs:(id)whatsAppIDs inContext:(id)context;
-(id)statusWithObjectID:(id)objectID inContext:(id)context;
-(id)statusWithObjectID:(id)objectID;
-(id)phonesOfAllNonWhatsAppableContacts;
-(id)phonesOfAllWhatsAppableContacts;
-(id)phoneNumbers:(BOOL)numbers;
-(unsigned)numberOfPhones;
-(id)contactsInSectionWithID:(id)anId;
-(id)contactsIDsInSectionWithID:(id)anId;
-(id)sectionWithObjectID:(id)objectID;
-(id)sections;
-(id)allContactsForWhatsAppID:(id)whatsAppID inContext:(id)context;
-(id)bestContactForWhatsAppID:(id)whatsAppID inContext:(id)context;
-(id)bestContactForJID:(id)jid;
-(id)bestContactFromContacts:(id)contacts;
-(id)allContactsWithWhatsAppIDs:(id)whatsAppIDs inContext:(id)context;
-(id)contactsWithABIDs:(id)abids withPrefetchedRelationships:(id)prefetchedRelationships inContext:(id)context;
-(id)contactWithObjectID:(id)objectID;
-(unsigned)numberOfContacts;
-(void)receivedUpdatedContactCapabilities:(id)capabilities;
-(BOOL)updateContactCapabilities:(id)capabilities;
-(void)requestFeatureCapabilitiesForJIDs:(id)jids;
-(id)capabilitiesForJid:(id)jid;
-(id)capabilitiesForJid:(id)jid inContext:(id)context;
-(int)capabilityStatusFromFeatureCapability:(int)featureCapability;
-(int)capabilityOfJid:(id)jid capability:(unsigned)capability;
-(void)processSyncError:(id)error;
-(void)processSyncResults:(id)results syncMode:(unsigned)mode syncContext:(unsigned)context;
-(void)syncResponseMOCDidSave:(id)syncResponseMOC;
-(id)allPhonesMatchingNumbers:(id)numbers inContext:(id)context;
-(BOOL)phoneNumber:(id)number isFavoriteForContactABID:(int)contactABID;
-(void)addPhoneToFavorites:(id)favorites;
-(void)deleteFavorites:(id)favorites;
-(id)addContactFromABRecord:(void*)abrecord addressBook:(void*)book whatsAppID:(id)anId;
-(id)reloadDataFromABRecord:(void*)abrecord whatsAppID:(id)anId;
-(void)addressBookReloadMOCDidSave:(id)addressBookReloadMOC;
-(id)mergeContacts:(id)contacts;
-(void)establishParentChildRelationshipsWithContacts:(id)contacts;
-(void)reloadContactsFromAddressBook;
-(id)jidsDeletedDuringABReload;
-(void)updateContact:(id)contact withRecord:(void*)record;
-(void)reloadPhonesForContact:(id)contact fromABRecord:(void*)abrecord;
-(void)deletePhone:(id)phone;
-(id)addPhone:(id)phone label:(id)label toContact:(id)contact;
-(id)addStatus:(id)status toPhone:(id)phone whatsAppID:(id)anId statusDate:(id)date;
-(id)sectionWithTitle:(id)title inContext:(id)context;
-(id)addSectionWithTitle:(id)title inContext:(id)context;
-(void)deleteDatabase;
-(void)reset;
-(void)notifyUpdatedStatusIfNecessary;
-(void)notifyUpdatedContactsIfNecessary;
-(void)unregisterFromManagedObjectContextDidSaveNotification:(id)unregisterFromManagedObjectContext;
-(void)workerMOCDidSave:(id)workerMOC;
-(BOOL)saveManagedObjectContextAndMergeChanges:(id)changes;
-(void)saveContext:(id)context;
@end

__attribute__((visibility("hidden")))
@interface WAFileUtilities : NSObject {
}
+(void)logFilesRecursivelyAtDirectoryURL:(id)directoryURL;
+(void)showTemporaryFilesWithCompletionHandler:(id)completionHandler;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface WACellProvider : NSObject {
	BOOL _didEverUpdate;
	NSString* _currentRadioAccessTechnology;
	CTTelephonyNetworkInfo* _info;
	NSInvocation* _updateInvocation;
	NSString* _mcc;
	NSString* _mnc;
	NSString* _carrier;
}
@property(assign) BOOL didEverUpdate;
@property(retain) NSString* carrier;
@property(retain) NSString* mnc;
@property(retain) NSString* mcc;
@property(readonly, assign, nonatomic) NSInvocation* updateInvocation;
@property(retain, nonatomic) CTTelephonyNetworkInfo* info;
@property(retain) NSString* currentRadioAccessTechnology;
@property(readonly, assign) NSString* realMNC;
@property(readonly, assign) NSString* realMCC;
@property(readonly, assign) NSString* normalizedMNC;
@property(readonly, assign) NSString* normalizedMCC;
@property(readonly, assign) NSString* carrierName;
+(id)normalizeCode:(id)code;
+(id)realValueOrNilForCode:(id)code;
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)radioAccessDidChange:(id)radioAccess;
-(void)updateInformation;
-(BOOL)tryToUpdate;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAPrepareRestoreOperation : WABackupOperation {
	WARestore* _restore;
	NSString* _localRestorePath;
	NSString* _permanentMediaPath;
	WACloudInteractionOperation* _download;
}
@property(retain, nonatomic) WACloudInteractionOperation* download;
+(id)createExtractOperationsForFiles:(id)files fromDownload:(id)download toPath:(id)path;
+(id)createExtractOperationForName:(id)name fromDownload:(id)download toPath:(id)path;
-(void).cxx_destruct;
-(id)createUnTAROperations;
-(id)createCopyOperation:(id)operation;
-(id)createCopyDatabaseOperations;
-(void)loadUserDefaultsFromDictionary:(id)dictionary;
-(void)loadUserDefaults;
-(void)loadNetworkUsageStatistics;
-(void)run;
-(id)initWithRestore:(id)restore;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface WANotificationsConfig : NSObject {
	CTCallCenter* _callCenter;
	SoundEffect* _incomingSoundEffect;
	SoundEffect* _outgoingSoundEffect;
	AVAudioPlayer* _incomingSoundShort;
	NSMutableDictionary* _lastIncomingSounds;
	NSMutableDictionary* _fetchedCustomConfigs;
	BOOL _needsUpdateServer;
	BOOL _requestInProgress;
	BOOL _playOfflineMessageSound;
	BOOL _chatSoundsEnabled;
	BOOL _chatVibrateEnabled;
	BOOL _showMessagePreview;
	BOOL _personalMessageAlertsEnabled;
	BOOL _groupMessageAlertsEnabled;
	BOOL _callAlertsEnabled;
	unsigned _inAppAlertStyle;
	NSString* _personalMessageSound;
	NSString* _groupMessageSound;
	NSString* _callSound;
	NSArray* _pushSoundSets;
	NSArray* _ringtoneSets;
	WAPushSound* _defaultRingtone;
}
@property(readonly, assign, nonatomic) WAPushSound* defaultRingtone;
@property(readonly, assign, nonatomic) NSArray* ringtoneSets;
@property(readonly, assign, nonatomic) NSArray* pushSoundSets;
@property(assign, nonatomic) BOOL callAlertsEnabled;
@property(readonly, assign, nonatomic) NSString* localizedCallSound;
@property(copy, nonatomic) NSString* callSound;
@property(assign, nonatomic) BOOL groupMessageAlertsEnabled;
@property(readonly, assign, nonatomic) NSString* localizedGroupMessageSound;
@property(copy, nonatomic) NSString* groupMessageSound;
@property(assign, nonatomic) BOOL personalMessageAlertsEnabled;
@property(readonly, assign, nonatomic) NSString* localizedPersonalMessageSound;
@property(copy, nonatomic) NSString* personalMessageSound;
@property(assign, nonatomic) BOOL showMessagePreview;
@property(assign, nonatomic) unsigned inAppAlertStyle;
@property(assign, nonatomic) BOOL chatVibrateEnabled;
@property(assign, nonatomic) BOOL chatSoundsEnabled;
@property(assign) BOOL playOfflineMessageSound;
@property(copy, nonatomic) NSString* voipToken;
@property(copy, nonatomic) NSString* apnsToken;
+(id)titleForWAAlertStyle:(unsigned)waalertStyle;
+(void)promptUserForToUnmuteFromViewController:(id)viewController completion:(id)completion;
+(void)promptUserForMuteEndDateFromViewController:(id)viewController completion:(id)completion;
-(void).cxx_destruct;
-(void)playOutgoingSoundEffect;
-(void)resetIncomingMessageSoundSquelchFor:(id)aFor;
-(void)playIncomingSoundEffectShort:(id)aShort;
-(void)playIncomingSoundEffect;
-(void)playOutgoingSoundEffectIfAllowed;
-(void)playIncomingSoundEffectForWAMessage:(id)wamessage;
-(BOOL)hasValidVOIPToken;
-(BOOL)hasValidAPNSToken;
-(void)setCallSound:(id)sound forJIDs:(id)jids;
-(id)localizedCallSoundForJID:(id)jid;
-(id)callSoundForJID:(id)jid;
-(void)setPushNotificationSound:(id)sound forJIDs:(id)jids;
-(id)localizedPushNotificationSoundForJID:(id)jid;
-(id)pushNotificationSoundForJID:(id)jid;
-(id)defaultPushSoundForJID:(id)jid;
-(void)setAlertsSetting:(short)setting forJIDs:(id)jids;
-(id)localizedAlertsSettingForJID:(id)jid;
-(short)alertsSettingForJID:(id)jid;
-(void)setMuteDate:(id)date forJID:(id)jid;
-(id)localizedMuteDateForJID:(id)jid;
-(id)muteDateForJID:(id)jid;
-(void)updateServerIfNecessary;
-(void)setNeedsUpdateServer;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(id)addNewConfigForJID:(id)jid;
-(id)configForJID:(id)jid;
-(id)allCustomNotificationConfigs;
-(void)fetchAllCustomNotificationConfigsIfNecessary;
-(void)loadNotificationSounds;
-(void)resetToDefaultsAndUpdateServer:(BOOL)defaultsAndUpdateServer;
-(void)migrateSettings;
-(void)loadGlobalSettings;
-(void)initializeDefaults;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAStorageWarningViewController : WAViewController {
	UIView* _contentView;
	UIButton* _buttonClose;
	UILabel* _labelItem1;
	UILabel* _labelItem2;
	UILabel* _labelItem3;
	UILabel* _labelTitle;
	UILabel* _labelBody;
	UILabel* _labelDeleteApps;
	UILabel* _labelDeleteVideos;
	UILabel* _labelManageStorage;
}
@property(retain, nonatomic) UILabel* labelManageStorage;
@property(retain, nonatomic) UILabel* labelDeleteVideos;
@property(retain, nonatomic) UILabel* labelDeleteApps;
@property(retain, nonatomic) UILabel* labelBody;
@property(retain, nonatomic) UILabel* labelTitle;
@property(retain, nonatomic) UILabel* labelItem3;
@property(retain, nonatomic) UILabel* labelItem2;
@property(retain, nonatomic) UILabel* labelItem1;
@property(retain, nonatomic) UIButton* buttonClose;
@property(retain, nonatomic) UIView* contentView;
+(id)controller;
-(void).cxx_destruct;
-(void)closeAction:(id)action;
-(void)dismiss;
-(void)presentModallyFromViewController:(id)viewController;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WALinkLabel : UILabel {
	TextBlock* _selectedTextBlock;
	TextMessage* _message;
	BOOL _underlineLinks;
	id<WALinkLabelDelegate> _delegate;
	UIColor* _linkColor;
	UIColor* _linkColorHighlighted;
	UIColor* _linkBackgroundColor;
	UIEdgeInsets _contentInset;
}
@property(assign, nonatomic) BOOL underlineLinks;
@property(retain, nonatomic) UIColor* linkBackgroundColor;
@property(retain, nonatomic) UIColor* linkColorHighlighted;
@property(retain, nonatomic) UIColor* linkColor;
@property(assign, nonatomic) UIEdgeInsets contentInset;
@property(assign, nonatomic) __weak id<WALinkLabelDelegate> delegate;
-(void).cxx_destruct;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)drawRect:(CGRect)rect;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)setTextAlignment:(int)alignment;
-(void)setTextColor:(id)color;
-(void)setFont:(id)font;
-(void)setText:(id)text;
-(void)openURL;
-(void)highlightURL:(BOOL)url;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMessageInfo : NSManagedObject {
}
@property(readonly, copy, nonatomic) NSDictionary* allPlayedReceipts;
@property(readonly, copy, nonatomic) NSDictionary* allReadReceipts;
@property(readonly, copy, nonatomic) NSDictionary* allDeliveredReceipts;
@property(readonly, assign, nonatomic) double lastTimestamp;
@property(retain, nonatomic) NSDictionary* receiptInfo;
-(id)allReceiptsForKey:(id)key;
@end

__attribute__((visibility("hidden")))
@interface WAMessageReceiptInfoTransformer : NSValueTransformer {
}
+(BOOL)allowsReverseTransformation;
+(Class)transformedValueClass;
-(id)reverseTransformedValue:(id)value;
-(id)transformedValue:(id)value;
@end

__attribute__((visibility("hidden")))
@interface TextRect : NSObject {
	int _line;
	NSRange _range;
	CGRect _rect;
}
@property(assign, nonatomic) int line;
@property(assign, nonatomic) NSRange range;
@property(assign, nonatomic) CGRect rect;
+(id)rectWithRect:(CGRect)rect range:(NSRange)range;
-(id)initWithRect:(CGRect)rect range:(NSRange)range;
@end

__attribute__((visibility("hidden")))
@interface TextBlock : NSObject {
	NSMutableArray* _textRects;
	id<TextBlockDelegate> _delegate;
	BOOL _highlighted;
	NSString* _text;
	NSString* _url;
	NSTextCheckingResult* _checkingResult;
	NSRange _range;
	unsigned long long _type;
}
@property(assign, nonatomic) BOOL highlighted;
@property(retain, nonatomic) NSTextCheckingResult* checkingResult;
@property(assign, nonatomic) unsigned long long type;
@property(retain, nonatomic) NSString* url;
@property(retain, nonatomic) NSString* text;
@property(assign, nonatomic) NSRange range;
+(id)applicationURLForSparrowFromMailtoURL:(id)mailtoURL;
+(id)applicationURLForGmailFromMailtoURL:(id)mailtoURL;
+(id)blockWithRange:(NSRange)range text:(id)text;
-(void).cxx_destruct;
-(void*)copyPersonRecord;
-(id)actionSheetForDate;
-(id)actionSheetForMailtoURL:(id)mailtoURL;
-(id)actionSheetForWebURL:(id)webURL;
-(id)actionSheetForPhoneNumber;
-(id)actionSheetForAddress;
-(id)actionSheetWithDelegate:(id)delegate completionHandler:(id)handler;
-(void)deleteAllTextRects;
-(void)addTextRect:(id)rect;
-(id)textRects;
-(BOOL)isEqualToTextBlock:(id)textBlock;
-(BOOL)isEqual:(id)equal;
-(id)initWithRange:(NSRange)range text:(id)text;
@end

__attribute__((visibility("hidden")))
@interface TextMessage : NSObject {
	BOOL _dataDetectionEnabled;
	BOOL _underlineLinks;
	BOOL _RTLText;
	UIFont* _font;
	UIColor* _textColor;
	UIColor* _urlColor;
	UIColor* _highlightedUrlColor;
	UIColor* _urlBackgroundColor;
	int _alignment;
	UIColor* _shadowColor;
	NSArray* _textBlocks;
	NSSet* _highlightedTerms;
	UIColor* _highlightBoxColor;
	NSString* _text;
	NSArray* _highlightedTextBlocks;
	CGSize _shadowOffset;
	CGSize _size;
	CGPoint _displayOrigin;
}
@property(retain, nonatomic) NSArray* highlightedTextBlocks;
@property(copy, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) CGPoint displayOrigin;
@property(assign, nonatomic, getter=isRTLText) BOOL RTLText;
@property(retain, nonatomic) UIColor* highlightBoxColor;
@property(copy, nonatomic) NSSet* highlightedTerms;
@property(assign, nonatomic) CGSize size;
@property(retain, nonatomic) NSArray* textBlocks;
@property(assign, nonatomic) CGSize shadowOffset;
@property(retain, nonatomic) UIColor* shadowColor;
@property(assign, nonatomic) int alignment;
@property(retain, nonatomic) UIColor* urlBackgroundColor;
@property(retain, nonatomic) UIColor* highlightedUrlColor;
@property(retain, nonatomic) UIColor* urlColor;
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) UIFont* font;
@property(assign, nonatomic) BOOL underlineLinks;
@property(assign, nonatomic) BOOL dataDetectionEnabled;
+(id)matchesInString:(id)string;
+(BOOL)isStringSafe:(id)safe;
+(id)textBlocksInText:(id)text withDataDetectionEnabled:(BOOL)dataDetectionEnabled;
+(id)textMessageWithText:(id)text;
+(void)initialize;
-(void).cxx_destruct;
-(void)setNeedsRedraw;
-(void)createTextBlocksForHighlightedTermsIfNeeded;
-(void)updateAttributesForTextBlock:(id)textBlock;
-(void)drawInRect:(CGRect)rect context:(CGContextRef)context lastLineRect:(CGRect*)rect3;
-(CGRect)boundingRectWithSize:(CGSize)size lastLineRect:(CGRect*)rect;
-(void)enableDataDetection:(BOOL)detection;
-(id)hitTest:(CGPoint)test withPadding:(float)padding;
-(BOOL)isWord:(id)word foundInHighlightedTerms:(id)highlightedTerms;
-(void)loadTextBlocksIfNecessary;
-(void)enableDataDetection:(BOOL)detection onQueue:(id)queue withCompletionHandler:(id)completionHandler;
-(id)initWithText:(id)text;
-(id)init;
@end

@interface _TextMessage_TextKit : TextMessage {
	NSString* _originalText;
	NSLayoutManager* _layoutManager;
	NSTextContainer* _textContainer;
	NSTextStorage* _textStorage;
}
-(void).cxx_destruct;
-(void)setAttributesOnTextStorage:(id)storage forTextBlock:(id)textBlock;
-(void)markTextStorage:(id)storage usingTextBlocks:(id)blocks;
-(void)prepareTextStorageIfNeeded;
-(id)textStorageFromCurrentText;
-(void)setNeedsRedraw;
-(void)updateAttributesForTextBlock:(id)textBlock;
-(void)enableDataDetection:(BOOL)detection onQueue:(id)queue withCompletionHandler:(id)completionHandler;
-(void)setFont:(id)font;
-(void)drawInRect:(CGRect)rect context:(CGContextRef)context lastLineRect:(CGRect*)rect3;
-(CGRect)boundingRectWithSize:(CGSize)size lastLineRect:(CGRect*)rect;
-(id)initWithText:(id)text;
@end

@interface _TextMessage_CoreText : TextMessage {
	CTFramesetterRef _framesetter;
}
+(void)initialize;
-(CGPoint)lineBoundsWithRange:(CTLineRef)range range:(XXStruct_K5nmsA)range2;
-(CGPoint)visualRangeOfTextRange:(XXStruct_K5nmsA)textRange inLine:(CTLineRef)line;
-(void)prepareFramesetterIfNeeded;
-(CTFramesetterRef)createFramesetterForCurrentTextUsingTextBlocks:(id)currentTextUsingTextBlocks;
-(void)setNeedsRedraw;
-(void)updateAttributesForTextBlock:(id)textBlock;
-(void)drawInRect:(CGRect)rect context:(CGContextRef)context lastLineRect:(CGRect*)rect3;
-(CGRect)boundingRectWithSize:(CGSize)size lastLineRect:(CGRect*)rect;
-(void)enableDataDetection:(BOOL)detection onQueue:(id)queue withCompletionHandler:(id)completionHandler;
-(void)setFont:(id)font;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WATarFileOperation : WABackupOperation {
	unsigned _tarStepsComplete;
	unsigned _stepsToComplete;
	BOOL _succeeded;
	NSArray* _files;
	BOOL _useOptimizedSearching;
	NSString* _prefix;
	NSString* _path;
	id _completion;
}
@property(copy, nonatomic) id completion;
@property(assign) BOOL useOptimizedSearching;
@property(readonly, assign, nonatomic) NSString* path;
@property(retain, nonatomic) NSString* prefix;
-(void).cxx_destruct;
-(void)run;
-(float)progress;
-(BOOL)succeeded;
-(id)initWithPath:(id)path files:(id)files;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface WAContactSection : NSManagedObject {
}
@property(retain, nonatomic) NSSet* contacts;
@property(retain, nonatomic) NSNumber* contactCount;
@property(retain, nonatomic) NSNumber* sort;
@property(retain, nonatomic) NSString* title;
@end

__attribute__((visibility("hidden")))
@interface WAProfileTableViewCell : UITableViewCell {
	UIView* _topSeparator;
	UIView* _bottomSeparator;
}
@property(assign, nonatomic) BOOL bottomSeparatorHidden;
-(void).cxx_destruct;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(void)createSeparators;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface WAChatListTableView : UITableView <UIGestureRecognizerDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)setLayoutMargins:(UIEdgeInsets)margins;
-(void)setContentSize:(CGSize)size;
-(void)setFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAChatListHeaderCell : UITableViewCell {
	WAChatButton* _broadcastButton;
	WAChatButton* _groupButton;
}
@property(readonly, assign, nonatomic) UIButton* groupButton;
@property(readonly, assign, nonatomic) UIButton* broadcastButton;
-(void).cxx_destruct;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)layoutSubviews;
-(float)preferredHeight;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAChatSearchDisplayController : UISearchDisplayController {
}
@end

__attribute__((visibility("hidden")))
@interface WAChatListViewController : WAChatSessionsViewController <WASearchResultsControllerDelegate, PhoneInputViewControllerDelegate, ABDisabledControllerDelegate, WAChatComposerDelegate, WAForwardPickerViewControllerDelegate, WAEmptyChatListViewDelegate, PhoneConfirmationControllerDelegate, WAAllChatsArchivedViewDelegate, UIViewControllerTransitioningDelegate, UIGestureRecognizerDelegate, UINavigationControllerDelegate, UIVideoEditorControllerDelegate, WAChatListSearchBarDelegate, UISearchDisplayDelegate, WAMultiSendPreviewViewControllerDelegate> {
	id _prepareToSendVideoFileCompletionHandler;
	NSMutableDictionary* _chatViewControllers;
	UIBarButtonItem* _deleteAllButton;
	UIBarButtonItem* _composeButton;
	WAChatListHeaderCell* _headerCell;
	WAActivityLabel* _activityLabel;
	NSString* _activityText;
	unsigned _activityCounter;
	double _lastActivityUpdateTime;
	WAEmptyChatListView* _emptyChatListView;
	WAAllChatsArchivedView* _allChatsArchivedView;
	NSString* _lastPresentedJID;
	NSArray* _deletedEmptyChatSessions;
	WAContactInfo* _recipientContact;
	NSURL* _fileURL;
	WASearchResultsController* _searchResultsController;
	float _searchResultCellHeight;
	BOOL _needsRemoveInvalidSearchResults;
	BOOL _needsReloadSearchResultsTableAfterLayout;
	BOOL _isSearchBarAnimationInProgress;
	BOOL _needsHideSearchBarOnLayout;
	BOOL _ignoreScrollViewDidScroll;
	BOOL _animateChangesToSearchResults;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned numberOfNewUnreadMessagesSinceGoingToBackground;
@property(readonly, assign, nonatomic) unsigned numberOfUnreadMessages;
@property(readonly, assign, nonatomic) unsigned numberOfUnreadChatSessions;
+(unsigned)editButtonPlacement;
-(void).cxx_destruct;
-(id)startChatWithContact:(id)contact JID:(id)jid animated:(BOOL)animated;
-(id)tableViewSessions;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)processSendURL:(id)url;
-(void)forwardFileAtURL:(id)url;
-(void)multiSendPreviewViewControllerDidRequestRetakePhoto:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewControllerDidCancel:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewController:(id)controller didConfirmItems:(id)items;
-(void)showChatAfterSendingExternalMediaWithMessage:(id)message error:(id)error;
-(void)sendExternalMediaAtURL:(id)url toContactInfo:(id)contactInfo;
-(void)videoEditorControllerDidCancel:(id)videoEditorController;
-(void)videoEditorController:(id)controller didFailWithError:(id)error;
-(void)videoEditorController:(id)controller didSaveEditedVideoToPath:(id)path;
-(void)prepareExternalVideoFileForSending:(id)sending completion:(id)completion;
-(void)forwardMessages:(id)messages toContactInfo:(id)contactInfo;
-(id)forwardPicker:(id)picker confirmationButtonTitleForContactInfo:(id)contactInfo;
-(id)forwardPicker:(id)picker confirmationTextForContactInfo:(id)contactInfo;
-(BOOL)forwardPicker:(id)picker shouldProceedWithContactInfo:(id)contactInfo;
-(void)forwardPickerDidCancel:(id)forwardPicker;
-(void)forwardPicker:(id)picker didSelectContactInfo:(id)info;
-(void)chatComposerDidAskToInviteFriends:(id)chatComposer;
-(void)chatComposerDidCancel:(id)chatComposer;
-(void)chatComposer:(id)composer didFinishWithContacts:(id)contacts subject:(id)subject picture:(id)picture;
-(void)chatComposer:(id)composer didFinishWithContactInfo:(id)contactInfo;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)setChatSearchBarExpanded:(BOOL)expanded animated:(BOOL)animated;
-(void)chatListSearchBarWillShowArchivedChats:(id)chatListSearchBar;
-(void)showAllArchivedChats;
-(void)allChatsArchivedViewDidChooseViewArchivedChats:(id)allChatsArchivedView;
-(void)phoneInputViewControllerDidCancel:(id)phoneInputViewController;
-(void)phoneInputViewController:(id)controller didFinishWithCountryCode:(id)countryCode phoneNumber:(id)number;
-(void)abDisabledViewControllerDidCancel:(id)abDisabledViewController;
-(void)removeFileAtURL:(id)url;
-(void)updateChatSessionCellsInSearchTableView;
-(void)searchDisplayControllerDidEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillEndSearch:(id)searchDisplayController;
-(void)searchDisplayControllerDidBeginSearch:(id)searchDisplayController;
-(void)searchDisplayControllerWillBeginSearch:(id)searchDisplayController;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)searchResultsControllerDidUpdateContent:(id)searchResultsController;
-(void)searchResultsController:(id)controller didDeleteSections:(id)sections;
-(void)searchResultsController:(id)controller didInsertSections:(id)sections;
-(void)searchResultsController:(id)controller didDeleteRowsAtIndexPaths:(id)indexPaths;
-(void)searchResultsController:(id)controller didInsertRowsAtIndexPaths:(id)indexPaths;
-(void)searchResultsControllerWillUpdateContent:(id)searchResultsController;
-(BOOL)searchResultsControllerShouldUpdateContent:(id)searchResultsController;
-(void)redrawSeparatorsInTableView:(id)tableView;
-(void)reloadSearchResultsTableView;
-(void)searchResultsControllerDidChangeContent:(id)searchResultsController;
-(void)removeInvalidSearchResults;
-(void)hideSearchBarIfNeeded;
-(void)activateSearchModeAnimated:(BOOL)animated;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(void)tableView:(id)view willDisplayFooterView:(id)view2 forSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view willDisplayHeaderView:(id)view2 forSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(id)chatSessionForRowAtIndexPath:(id)indexPath inTableView:(id)tableView;
-(id)tableViewForChatSessionCell:(id)chatSessionCell;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(void)didSelectSearchResultsRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableViewCellForSearchResultInTableView:(id)tableView atIndexPath:(id)indexPath;
-(id)tableViewCellForList:(id)list inTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(unsigned)fetchedResultsSectionIndexFromTableSectionIndex:(unsigned)tableSectionIndex;
-(unsigned)tableSectionIndexFromFetchedResultsSectionIndex:(unsigned)fetchedResultsSectionIndex;
-(id)fetchedResultsIndexPathFromTableIndexPath:(id)tableIndexPath;
-(id)tableIndexPathFromFetchedResultsIndexPath:(id)fetchedResultsIndexPath;
-(void)rollbackPendingDeletionOfEligibleChatSessions;
-(void)commitPendingDeletionOfEligibleChatSessions;
-(void)deleteEmptyEligibleChatSessionsImmediately:(BOOL)immediately;
-(void)setNeedsRemoveInvalidSearchResultsIfNeeded;
-(void)chatStorageDidDeleteAllMessagesInChatSession:(id)chatStorage;
-(void)chatStorageDidDeleteMessagesInChatSession:(id)chatStorage;
-(void)chatStorageDidDeleteChatSessions:(id)chatStorage;
-(void)chatStorageWillDeleteChatSession:(id)chatStorage;
-(void)didLoadDatabase;
-(void)didInsertOrDeleteRows;
-(void)didChangeContent;
-(void)updateUnreadBadgeInTabBar;
-(void)saveUnreadCount;
-(id)predicateForFetchRequest;
-(void)previewingContext:(id)context commitViewController:(id)controller;
-(id)chatViewControllerForPreviewForChatSession:(id)chatSession;
-(id)startChatWithContact:(id)contact jid:(id)jid prefilledText:(id)text pushImmediately:(BOOL)immediately animated:(BOOL)animated;
-(id)startChatWithContact:(id)contact jid:(id)jid pushImmediately:(BOOL)immediately animated:(BOOL)animated;
-(void)startChatWithContact:(id)contact jid:(id)jid prefilledText:(id)text;
-(void)startChatWithContactInfo:(id)contactInfo prefilledText:(id)text;
-(id)existingOrNewChatSessionWithContact:(id)contact jid:(id)jid;
-(id)existingOrNewChatSessionWithABID:(int)abid jid:(id)jid;
-(id)startChatWithSession:(id)session highlightedMessage:(id)message prefilledText:(id)text presentKeyboard:(BOOL)keyboard pushImmediately:(BOOL)immediately animated:(BOOL)animated;
-(void)presentChatSessionOfMessage:(id)message;
-(void)presentChatSession:(id)session;
-(void)startNewChatAnimated:(BOOL)animated;
-(void)emptyChatListViewWillInviteContacts:(id)emptyChatListView;
-(void)phoneConfirmationControllerDidCancel:(id)phoneConfirmationController;
-(void)phoneConfirmationControllerDidFinish:(id)phoneConfirmationController;
-(void)deleteAllChats:(id)chats;
-(void)inviteContacts;
-(void)showBroadcastLists:(id)lists;
-(void)startGroupChat:(id)chat;
-(void)startNewChat:(id)chat;
-(void)wa_fontSizeDidChange;
-(void)wa_applicationDidEnterBackground;
-(void)didReceiveMemoryWarning;
-(void)showTooltipIfNeeded;
-(id)backItemTitleForViewController:(id)viewController;
-(id)shortViewControllerTitle;
-(void)formatTitle;
-(void)updateNetworkStatusLabel;
-(void)visibleConnectionStatusDidChange;
-(void)purgeViewControllers;
-(BOOL)isCachedViewControllerAvailableForChatSession:(id)chatSession;
-(void)removeCachedViewControllerForChatSession:(id)chatSession;
-(void)willUnloadDatabase;
-(BOOL)shouldAutorotate;
-(void)viewWillTransitionToSize:(CGSize)view withTransitionCoordinator:(id)transitionCoordinator;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(id)preselectedIndexPathOnAppear;
-(BOOL)shouldShowNoContentView;
-(void)setUpNoContentView:(id)view;
-(id)separatorColor;
-(void)updateInterfaceWithAnimation:(BOOL)animation;
-(void)updateAllChatsArchivedView;
-(id)searchOverlayInView:(id)view;
-(void)viewDidLayoutSubviews;
-(void)viewWillLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)commonInit;
@end

__attribute__((visibility("hidden")))
@interface WAMaskedTextButton : UIButton {
	CALayer* _maskLayer;
}
+(id)button;
-(void).cxx_destruct;
-(void)drawLayer:(id)layer inContext:(CGContextRef)context;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAFAQUtilities : NSObject {
}
+(id)urlForArticle:(unsigned)article ofType:(unsigned)type withLanguageCode:(id)languageCode;
+(id)stringForCategory:(unsigned)category;
@end

__attribute__((visibility("hidden")))
@interface WAVideoScrubberPrecisionRangeSlider : UIView {
	float _lowerValue;
	float _upperValue;
	float _scaleFactor;
	BOOL _draggingLeftHandle;
	BOOL _draggingRightHandle;
	CGPoint _touchStartPoint;
	CGPoint _lastTouchPoint;
	float _valueBeforeDragging;
	float _valueDuringDragging;
	float _maximumDifference;
	id<WAVideoScrubberPrecisionRangeSliderDelegate> _delegate;
	float _horizontalInset;
	float _minimumHandleSeparation;
	float _centerValue;
	double _videoDurationInSeconds;
}
@property(readonly, assign, nonatomic) UIView* rightHandleView;
@property(readonly, assign, nonatomic) UIView* leftHandleView;
@property(readonly, assign, nonatomic) float centerValue;
@property(assign, nonatomic) float minimumHandleSeparation;
@property(assign, nonatomic) float horizontalInset;
@property(assign, nonatomic) double videoDurationInSeconds;
@property(readonly, assign, nonatomic) float scaleFactor;
@property(assign, nonatomic) __weak id<WAVideoScrubberPrecisionRangeSliderDelegate> delegate;
@property(readonly, assign, nonatomic) BOOL draggingRightHandle;
@property(readonly, assign, nonatomic) BOOL draggingLeftHandle;
@property(assign, nonatomic) float maximumDifference;
@property(readonly, assign, nonatomic) float upperValue;
@property(readonly, assign, nonatomic) float lowerValue;
-(void).cxx_destruct;
-(void)internalChangeScaleFactorTo:(float)to animated:(BOOL)animated;
-(void)changeScaleFactorTo:(float)to centeredAt:(float)at animationDuration:(double)duration;
-(void)revertScaleFactorIfNeeded;
-(void)increaseScaleFactor;
-(void)prepareToIncreaseScaleFactor;
-(void)cancelIncreaseScaleFactorAfterDelay;
-(void)increaseScaleFactorAfterDelay;
-(void)finishDragging;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)shouldBeginDraggingWithTouch:(id)touch;
-(float)minimumRangeWidth;
-(float)expandedScaleFactor;
-(void)didEndDragging;
-(void)didBeginDragging;
-(void)didChangeRange;
-(void)getFramesForLeftHandle:(CGRect*)leftHandle atPosition:(float)position rightHandle:(CGRect*)handle atPosition:(float)position4 leftMostVisiblePosition:(float)position5 rightMostVisiblePosition:(float)position6;
-(float)horizontalOffsetForValue:(float)value;
-(void)layoutSubviews;
-(void)setLowerValue:(float)value upperValue:(float)value2;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAAutoBackupSettings : NSObject {
	id _autoBackupDate;
	unsigned _frequency;
	NSUserDefaults* _defaults;
}
@property(readonly, assign, nonatomic) NSUserDefaults* defaults;
@property(readonly, assign, nonatomic) NSDate* autoBackupDate;
@property(readonly, assign, nonatomic) BOOL shouldPerformAutoBackupNow;
@property(readonly, assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) unsigned frequency;
+(id)expirationForDate:(id)date withMultiple:(int)multiple ofInterval:(unsigned)interval;
+(int)integerForFrequency:(unsigned)frequency;
+(double)timeIntervalForFrequency:(unsigned)frequency;
+(unsigned)parseFrequencyFromInteger:(int)integer;
+(id)descriptionForFrequency:(unsigned)frequency;
+(id)localizedDescriptionForFrequency:(unsigned)frequency;
-(void).cxx_destruct;
-(BOOL)hasMultiple:(int)multiple ofCurrentAutoBackupIntervalElapsedSinceDate:(id)currentAutoBackupIntervalElapsedSinceDate;
-(id)expirationForDate:(id)date withMultiple:(int)multiple;
-(void)setAutoBackupDate:(id)date;
-(void)updateAutoBackupDate;
-(void)resetAutoBackupDate;
-(id)initWithUserDefaults:(id)userDefaults;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WATimer : NSObject {
	id _block;
	NSObject<OS_dispatch_source>* _timer;
	NSObject<OS_dispatch_queue>* _queue;
	double _delay;
	BOOL _didInvalidateTimer;
}
+(id)performBlock:(id)block onQueue:(id)queue afterDelay:(double)delay;
-(void).cxx_destruct;
-(void)internalInvalidate;
-(void)invalidate;
-(void)start;
-(void)performBlock:(id)block;
-(id)initWithBlock:(id)block onQueue:(id)queue afterDelay:(double)delay;
@end

__attribute__((visibility("hidden")))
@interface WABlockedContactInfo : NSObject {
	NSString* _name;
	NSString* _phoneNumber;
	NSString* _jid;
	NSString* _label;
}
@property(copy, nonatomic) NSString* label;
@property(copy, nonatomic) NSString* jid;
@property(copy, nonatomic) NSString* phoneNumber;
@property(copy, nonatomic) NSString* name;
-(void).cxx_destruct;
-(int)compare:(id)compare;
-(id)initWithJID:(id)jid;
-(id)initWithContactInfo:(id)contactInfo;
@end

__attribute__((visibility("hidden")))
@interface WAFinishOperation : WABackupOperation {
	WAActionManager* _manager;
	unsigned _code;
}
@property(assign) unsigned code;
-(void).cxx_destruct;
-(void)run;
-(id)initWithActionManager:(id)actionManager code:(unsigned)code;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface WADebugFullTextSearchViewController : WAStaticTableViewController {
	unsigned _unindexableMessagesCount;
	unsigned _messagesToIndexCount;
	unsigned _totalMessagesCount;
	WATableRow* _indexedMessagesRow;
	WATableRow* _messagesToIndexRow;
	WATableRow* _completionRow;
	WATableRow* _messagesWithIndexingErrorsRow;
	WATableRow* _searchDatabaseSizeRow;
	WATableRow* _indexRemainingMessagesRow;
	unsigned _inProgressCount;
	double _startTime;
}
-(void).cxx_destruct;
-(void)endIndexingRemainingMessages;
-(void)indexSomeMessages;
-(void)beginIndexingRemainingMessages;
-(void)setupTableView;
-(void)reloadTable;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface XMPPEncryption : NSObject {
	XMPPRC4Coder* _incoming;
	XMPPRC4Coder* _outgoing;
}
@property(readonly, assign, nonatomic) XMPPRC4Coder* outgoing;
@property(readonly, assign, nonatomic) XMPPRC4Coder* incoming;
+(id)MACWithKey:(id)key andData:(id)data sequence:(int)sequence;
+(id)PBKDF2WithPassword:(id)password andSalt:(id)salt derivedKeyLength:(int)length rounds:(int)rounds;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPRC4Coder : NSObject {
	NSData* _key;
	CCCryptorRef _cryptor;
}
-(void).cxx_destruct;
-(id)process:(id)process;
-(void)drop:(int)drop;
-(void)reset:(id)reset;
-(void)dealloc;
-(void)clean;
@end

__attribute__((visibility("hidden")))
@interface WACallingNotAvailableViewController : WAViewController {
	NSString* _peerName;
	UILabel* _titleLabel;
	UILabel* _bodyLabel;
	UIButton* _bottomButton;
	UIButton* _closeButton;
	NSLayoutConstraint* _topSpacerConstraint;
}
@property(assign, nonatomic) __weak NSLayoutConstraint* topSpacerConstraint;
@property(assign, nonatomic) __weak UIButton* closeButton;
@property(assign, nonatomic) __weak UIButton* bottomButton;
@property(assign, nonatomic) __weak UILabel* bodyLabel;
@property(assign, nonatomic) __weak UILabel* titleLabel;
@property(copy, nonatomic) NSString* peerName;
-(void).cxx_destruct;
-(void)closeButtonTapped:(id)tapped;
-(void)bottomButtonTapped:(id)tapped;
-(void)wa_applicationDidEnterBackground;
-(void)viewDidLayoutSubviews;
-(void)viewDidLoad;
-(int)preferredStatusBarStyle;
-(unsigned)supportedInterfaceOrientations;
@end

__attribute__((visibility("hidden")))
@interface WAForwardActivity : UIActivity {
	NSArray* _items;
	NSString* _customActivityTitle;
	WAContactInfo* _selectedContactInfo;
	int _maximumItemCount;
}
@property(assign, nonatomic) int maximumItemCount;
@property(readonly, assign, nonatomic) WAContactInfo* selectedContactInfo;
+(id)forwardActivityForMessages:(id)messages;
+(id)activityTitleForForwardingMessages:(id)forwardingMessages;
+(int)activityCategory;
-(void).cxx_destruct;
-(void)performActivity;
-(id)activityViewController;
-(void)prepareWithActivityItems:(id)activityItems;
-(BOOL)canPerformWithActivityItems:(id)activityItems;
-(id)activityType;
-(void)setActivityTitle:(id)title;
-(id)activityTitle;
-(id)activitySettingsImage;
-(id)activityImage;
@end

__attribute__((visibility("hidden")))
@interface ProfileViewController : WAViewController <WASinglePhotoPickerControllerDelegate, UITextFieldDelegate, WAImageToImageTransitioning, WANavigationControllerPopToAnimating> {
	UIImage* _tempProfilePicture;
	UIActivityIndicatorView* _aiGroupIcon;
	WAProgressHUD* _progressHUD;
	int _networkActivities;
	BOOL _modal;
	BOOL _photoModified;
	BOOL _showFBSection;
	BOOL _showProfilePhotoReminder;
	GroupIconViewController* _groupIconViewController;
	ACAccountStore* _accountStore;
	ACAccount* _fbAccount;
	UIEdgeInsets _originalContentInset;
	float _keyboardHeight;
	UITableViewCell* _editStatusCell;
	BOOL _useDeviceName;
	id<ProfileViewControllerDelegate> _delegate;
	UITableView* _tableViewProfile;
	UIView* _viewTableHeader;
	UILabel* _labelHelperText;
	UIView* _viewProfilePhoto;
	NSLayoutConstraint* _profilePhotoHeightConstraint;
	NSLayoutConstraint* _labelHelperHeightConstraint;
	UIImageView* _imageProfilePhoto;
	UIButton* _buttonAddPhoto;
	UIButton* _buttonEditPhoto;
	WAProfileTableViewCell* _cellPushName;
	UITextField* _textFieldName;
	UILabel* _labelCharCount;
	UIView* _viewFacebookTitle;
	UILabel* _labelFacebookTitle;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* labelFacebookTitle;
@property(retain, nonatomic) UIView* viewFacebookTitle;
@property(retain, nonatomic) UILabel* labelCharCount;
@property(retain, nonatomic) UITextField* textFieldName;
@property(retain, nonatomic) WAProfileTableViewCell* cellPushName;
@property(retain, nonatomic) UIButton* buttonEditPhoto;
@property(retain, nonatomic) UIButton* buttonAddPhoto;
@property(retain, nonatomic) UIImageView* imageProfilePhoto;
@property(retain, nonatomic) NSLayoutConstraint* labelHelperHeightConstraint;
@property(retain, nonatomic) NSLayoutConstraint* profilePhotoHeightConstraint;
@property(retain, nonatomic) UIView* viewProfilePhoto;
@property(retain, nonatomic) UILabel* labelHelperText;
@property(retain, nonatomic) UIView* viewTableHeader;
@property(retain, nonatomic) UITableView* tableViewProfile;
@property(assign, nonatomic) __weak id<ProfileViewControllerDelegate> delegate;
@property(assign, nonatomic) BOOL useDeviceName;
-(void).cxx_destruct;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)adjustContentInsetForKeyboardHeight:(float)keyboardHeight;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldEndEditing:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)applicationDidBecomeActive:(id)application;
-(void)singlePhotoPickerControllerDidCancel:(id)singlePhotoPickerController;
-(void)singlePhotoPickerController:(id)controller didFinishWithImage:(id)image;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)chatManagerDidUpdateStatus:(id)chatManager;
-(void)updateStatusCell;
-(void)editStatus;
-(BOOL)shouldBeginCustomPopAnimationForAnimationIdentifier:(id)animationIdentifier;
-(id)popAnimationControllerFromViewController:(id)viewController;
-(id)popAnimationInteractionControllerFromViewController:(id)viewController;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)layoutTableHeader;
-(void)constrainTableHeader;
-(void)deleteProfilePhoto;
-(void)reallyShowImagePickerForSourceType:(int)sourceType;
-(void)showImagePickerForSourceType:(int)sourceType;
-(void)showProfilePhotoActivity:(BOOL)activity;
-(void)reloadProfilePicture;
-(void)profilePictureUpdated:(id)updated;
-(void)requestFBAccess;
-(void)renewCredentialsForAccount:(id)account;
-(void)importUsernameFromFBAccount:(id)fbaccount accountRenewed:(BOOL)renewed;
-(void)importProfilePhotoFromFBAccount:(id)fbaccount;
-(void)processFBPicture:(id)picture;
-(void)processFBAccountInfo:(id)info;
-(void)checkFBCompletion;
-(void)cancelAction:(id)action;
-(void)doneAction:(id)action;
-(void)textFieldValueChanged:(id)changed;
-(void)editPhotoAction:(id)action;
-(void)removeHUD;
-(void)showHUD:(id)hud;
-(void)layoutFBHelperText;
-(void)checkProfilePictureActivity:(id)activity;
-(void)updateTextFieldValues;
-(void)validateUserInput;
-(void)updateUI;
-(void)updateCharCount;
-(void)dealloc;
-(id)initWithProfileContollerDelegate:(id)profileContollerDelegate;
@end

__attribute__((visibility("hidden")))
@interface _WANonZeroContentSizeTableView : UITableView {
}
-(void)setContentSize:(CGSize)size;
@end

__attribute__((visibility("hidden")))
@interface _WATapMaskView : UIView {
	UIView* _targetView;
	id _tapHandler;
}
@property(copy, nonatomic) id tapHandler;
@property(retain, nonatomic) UIView* targetView;
-(void).cxx_destruct;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAShakeDetectionView : UIView {
}
-(void)motionEnded:(int)ended withEvent:(id)event;
-(BOOL)resignFirstResponder;
-(BOOL)becomeFirstResponder;
-(BOOL)canBecomeFirstResponder;
@end

__attribute__((visibility("hidden")))
@interface _WAArchiveUndoManager : NSUndoManager {
	NSString* _jid;
}
@property(copy, nonatomic) NSString* jid;
-(void).cxx_destruct;
-(void)removeAllActions;
-(void)removeAllActionsWithTarget:(id)target;
-(void)registerUndoWithTarget:(id)target selector:(SEL)selector object:(id)object;
@end

__attribute__((visibility("hidden")))
@interface WAChatSessionsViewController : WATableViewController <NSFetchedResultsControllerDelegate, MFMailComposeViewControllerDelegate, UIViewControllerPreviewingDelegate, WAChatSessionCellDelegate> {
	BOOL _editingSingleRow;
	BOOL _isUpdatingTable;
	BOOL _reloadTableAfterUpdate;
	BOOL _needsSelectionRowChangeOnLayout;
	BOOL _didInsertOrDeleteRows;
	UIView* _noContentView;
	NSIndexPath* _indexPathToDeselectOnLayoutSubviews;
	_WATapMaskView* _tapMaskView;
	_WAShakeDetectionView* _shakeDetectionView;
	_WAArchiveUndoManager* _archiveUndoManager;
	BOOL _animateRowChanges;
	BOOL _chatStorageAvailable;
	NSFetchedResultsController* _fetchedResultsController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned fetchedResultsCount;
@property(readonly, assign, nonatomic) NSFetchedResultsController* fetchedResultsController;
@property(readonly, assign, nonatomic) BOOL chatStorageAvailable;
@property(assign, nonatomic) BOOL animateRowChanges;
+(unsigned)editButtonPlacement;
-(void).cxx_destruct;
-(void)didLoadDatabase;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)willUnloadDatabase;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(void)didInsertOrDeleteRows;
-(void)didChangeContent;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controllerWillChangeContent:(id)controller;
-(void)prefetchAndCheckChildrenOfChatSessions:(id)chatSessions;
-(void)setUpFetchRequest;
-(id)predicateForFetchRequest;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(unsigned)fetchedResultsSectionIndexFromTableSectionIndex:(unsigned)tableSectionIndex;
-(unsigned)tableSectionIndexFromFetchedResultsSectionIndex:(unsigned)fetchedResultsSectionIndex;
-(id)fetchedResultsIndexPathFromTableIndexPath:(id)tableIndexPath;
-(id)tableIndexPathFromFetchedResultsIndexPath:(id)fetchedResultsIndexPath;
-(id)tableView:(id)view titleForDeleteConfirmationButtonForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(id)chatSessionForRowAtIndexPath:(id)indexPath inTableView:(id)tableView;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)configureCell:(id)cell forChatSession:(id)chatSession message:(id)message;
-(id)tableViewCellForChatSession:(id)chatSession message:(id)message inTableView:(id)tableView;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)presentSaveToContactsScreenForChatSession:(id)chatSession;
-(void)emailChatHistoryForChatSession:(id)chatSession withMailComposeViewController:(id)mailComposeViewController;
-(void)addMuteOrUnmuteOptionForChatSession:(id)chatSession toActionSheet:(id)actionSheet;
-(void)showUnknownContactOptionsForChatSession:(id)chatSession;
-(void)showKnownContactOptionsForChatSession:(id)chatSession;
-(void)showGroupOptionsForChatSession:(id)chatSession;
-(void)promptForConfirmationToClearChatSession:(id)clearChatSession;
-(void)muteChatSessionWithJID:(id)jid until:(id)until;
-(void)reportArchiveAction;
-(void)unarchiveChatSessionWithJID:(id)jid;
-(void)archiveChatSessionWithJID:(id)jid;
-(void)handleShakeMotion:(id)motion;
-(void)disableShakeGesture;
-(void)enableShakeGesture;
-(void)performArchiveActionForChatAtIndexPath:(id)indexPath inTableView:(id)tableView;
-(void)reportDeleteChatAction;
-(void)requestConfirmationToDeleteChatSession:(id)deleteChatSession;
-(void)performDeleteActionForChatSession:(id)chatSession;
-(void)chatSessionCellMarkAsReadOrUnread:(id)unread;
-(void)markChatSessionAsReadOrUnread:(id)unread;
-(void)chatSessionCellPerformArchiveAction:(id)action;
-(void)chatSessionCellShowMoreOptions:(id)options;
-(void)showMoreOptionsForChatSession:(id)chatSession;
-(void)chatSessionCellDidEndChangingSideButtons:(id)chatSessionCell buttonsVisible:(BOOL)visible;
-(void)chatSessionCellDidStartChangingSideButtons:(id)chatSessionCell;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)hideSideButtonsInAllCellsExceptForCell:(id)cell inTableView:(id)tableView animated:(BOOL)animated;
-(void)removeTapMaskView;
-(id)previewActionItemsForChatSession:(id)chatSession;
-(void)previewingContext:(id)context commitViewController:(id)controller;
-(id)previewingContext:(id)context viewControllerForLocation:(CGPoint)location;
-(id)chatViewControllerForPreviewForChatSession:(id)chatSession;
-(id)tableViewForChatSessionCell:(id)chatSessionCell;
-(void)presentChatSession:(id)session;
-(void)presentChatSession:(id)session atIndexPath:(id)indexPath inTableView:(id)tableView;
-(BOOL)shouldAutorotate;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)updateInterfaceWithAnimation:(BOOL)animation;
-(BOOL)shouldShowNoContentView;
-(id)separatorColor;
-(void)layoutViews;
-(void)adjustTableViewRowSelection;
-(void)viewDidLayoutSubviews;
-(void)viewWillLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)preselectedIndexPathOnAppear;
-(void)setUpNoContentView:(id)view;
-(void)preloadProfilePicturesForVisibleRows;
-(void)viewDidLoad;
-(void)setBackButtonHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)wa_fontSizeDidChange;
-(void)wa_applicationDidEnterBackground;
-(void)commonInit;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface _WAEditListNameTableViewCell : UITableViewCell {
	UITextField* _textField;
}
@property(readonly, assign, nonatomic) UITextField* textField;
-(void).cxx_destruct;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAListInfoViewController : WATableViewController <NSFetchedResultsControllerDelegate, WARecipientsViewControllerDelegate, UITextFieldDelegate, UIGestureRecognizerDelegate> {
	NSFetchedResultsController* _fetchedResultsController;
	BOOL _chatStorageAvailable;
	UITableViewCell* _changeRecipientCell;
	_WAEditListNameTableViewCell* _editNameCell;
	NSMutableArray* _groupMembersToUpdate;
	BOOL _animateListChanges;
	WAChatSession* _list;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned fetchedResultsCount;
@property(retain, nonatomic) WAChatSession* list;
-(void).cxx_destruct;
-(void)wa_fontSizeDidChange;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(void)updateGroupMemberInfoForVisibleCells;
-(void)loadStatusMessagesOfGroupMembers:(id)groupMembers;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controllerWillChangeContent:(id)controller;
-(void)setUpFetchRequest;
-(void)recipientsControllerDidCancel:(id)recipientsController;
-(void)updateRecipientsWithContacts:(id)contacts;
-(void)recipientsController:(id)controller didFinishWithContacts:(id)contacts;
-(void)changeRecipients;
-(BOOL)showContactInfoForGroupMember:(id)groupMember;
-(void)textFieldDidEndEditing:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(BOOL)textFieldShouldBeginEditing:(id)textField;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)updateGroupMemberAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)updateInterface;
-(void)tableViewTapped:(id)tapped;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)reloadAll;
-(void)dealloc;
-(id)initWithStyle:(int)style;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WANoPreviewCameraOnlyImagePickerController : WACameraOnlyImagePickerController {
}
+(BOOL)_reviewCapturedItems;
@end

__attribute__((visibility("hidden")))
@interface WACameraOnlyImagePickerController : UIImagePickerController {
}
-(void)setStatusBarViewHidden:(BOOL)hidden;
-(void)viewWillDisappear:(BOOL)view;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(void)viewWillAppear:(BOOL)view;
-(BOOL)prefersStatusBarHidden;
-(id)childViewControllerForStatusBarHidden;
-(void)applicationWillDismissCallWindow:(id)application;
-(void)applicationWillPresentCallWindow:(id)application;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPMultiReceipt : NSObject {
	NSString* _stanzaId;
	NSString* _toJID;
	NSString* _participant;
	NSMutableArray* _receiptIds;
	unsigned _receiptType;
}
@property(readonly, assign, nonatomic) unsigned receiptType;
@property(readonly, assign, nonatomic) NSMutableArray* receiptIds;
@property(readonly, assign, nonatomic) NSString* participant;
@property(readonly, assign, nonatomic) NSString* toJID;
@property(readonly, assign, nonatomic) NSString* stanzaId;
+(id)uniqueReceiptKeyForStanzaId:(id)stanzaId chatJID:(id)jid participant:(id)participant;
-(void).cxx_destruct;
-(void)addReceiptId:(id)anId;
-(id)description;
-(id)initWithType:(unsigned)type toJID:(id)jid participant:(id)participant stanzaId:(id)anId;
@end

__attribute__((visibility("hidden")))
@interface _WAAudioActivity : NSObject {
	int _type;
}
@property(assign, nonatomic) int type;
-(void)set;
@end

__attribute__((visibility("hidden")))
@interface WAAudioSessionManager : NSObject {
	NSMutableArray* _activityStack;
	_WAAudioActivity* _currentAudioActivity;
	BOOL _active;
	NSString* _currentRouteName;
}
@property(readonly, assign, nonatomic, getter=isActive) BOOL active;
@property(readonly, assign, nonatomic, getter=isRoutingToReceiver) BOOL routingToReceiver;
@property(readonly, assign, nonatomic, getter=isRoutingToBluetoothHeadset) BOOL routingToBluetoothHeadset;
@property(readonly, assign, nonatomic, getter=isRoutingToHeadset) BOOL routingToHeadset;
@property(readonly, assign, nonatomic, getter=isRoutingToSpeaker) BOOL routingToSpeaker;
@property(readonly, copy, nonatomic) NSString* currentRouteName;
@property(readonly, assign, nonatomic) float currentVolume;
+(id)descriptionOfAllPorts:(id)allPorts;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)promptForMicrophoneAccessForVideoRecordingWithCompletionHandler:(id)completionHandler;
-(void)routeToReceiver;
-(void)routeToSpeaker;
-(BOOL)isRoutingToOutputPortType:(id)outputPortType;
-(void)handleAudioRouteChangeNotification:(id)notification;
-(void)audioVolumeDidChange;
-(void)handleAudioSessionInterruptionNotification:(id)notification;
-(void)updateSessionState;
-(void)endAudioActivity:(id)activity;
-(id)beginAudioActivityOfType:(int)type;
-(BOOL)canInterruptCurrentActivity;
-(BOOL)isRecordPermissionGranted;
-(void)requestRecordPermissionWithCompletionHandler:(id)completionHandler;
-(void)applicationWillEnterForeground:(id)application;
-(void)handleMediaServicesWereResetNotification:(id)notification;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAVoiceCallRatingViewTextField : UITextField {
}
-(CGRect)editingRectForBounds:(CGRect)bounds;
-(CGRect)textRectForBounds:(CGRect)bounds;
@end

__attribute__((visibility("hidden")))
@interface WAVoiceCallRatingView : UIView <UITextFieldDelegate, UIGestureRecognizerDelegate> {
	WAMaskedTextButton* _notNowButton;
	WAMaskedTextButton* _submitButton;
	WAStarRatingControl* _starRater;
	UILabel* _ratingLabel;
	UILabel* _titleLabel;
	_WAVoiceCallRatingViewTextField* _textField;
	UITapGestureRecognizer* _tapGesture;
	id<WAVoiceCallRatingViewDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int rating;
@property(readonly, copy, nonatomic) NSString* textInput;
@property(assign, nonatomic) __weak id<WAVoiceCallRatingViewDelegate> delegate;
-(void).cxx_destruct;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)viewTapped:(id)tapped;
-(void)starRatingChanged:(id)changed;
-(void)submitButtonTapped:(id)tapped;
-(void)notNowButtonTapped:(id)tapped;
-(void)dismissKeyboardIfNeededWithCompletionHandler:(id)completionHandler;
-(CGSize)sizeThatFits:(CGSize)fits;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAChatDatabaseStatsTableViewCell : UITableViewCell {
	UIView* _containerView;
	WAProfilePictureThumbnailView* _imageViewContactPicture;
	UILabel* _nameLabel;
	UILabel* _detailLabel;
	UILabel* _textType;
	UILabel* _imageType;
	UILabel* _videoType;
	UILabel* _audioType;
	UILabel* _locationType;
	UILabel* _contactType;
	UILabel* _totalType;
	UILabel* _textCount;
	UILabel* _imageCount;
	UILabel* _videoCount;
	UILabel* _audioCount;
	UILabel* _locationCount;
	UILabel* _contactCount;
	UILabel* _totalCount;
	UILabel* _imageSize;
	UILabel* _videoSize;
	UILabel* _audioSize;
	UILabel* _totalSize;
	NSLayoutConstraint* _nameToDetailConstraint;
	NSLayoutConstraint* _nameToContainerConstraint;
}
@property(retain, nonatomic) NSLayoutConstraint* nameToContainerConstraint;
@property(retain, nonatomic) NSLayoutConstraint* nameToDetailConstraint;
@property(retain, nonatomic) UILabel* totalSize;
@property(retain, nonatomic) UILabel* audioSize;
@property(retain, nonatomic) UILabel* videoSize;
@property(retain, nonatomic) UILabel* imageSize;
@property(retain, nonatomic) UILabel* totalCount;
@property(retain, nonatomic) UILabel* contactCount;
@property(retain, nonatomic) UILabel* locationCount;
@property(retain, nonatomic) UILabel* audioCount;
@property(retain, nonatomic) UILabel* videoCount;
@property(retain, nonatomic) UILabel* imageCount;
@property(retain, nonatomic) UILabel* textCount;
@property(retain, nonatomic) UILabel* totalType;
@property(retain, nonatomic) UILabel* contactType;
@property(retain, nonatomic) UILabel* locationType;
@property(retain, nonatomic) UILabel* audioType;
@property(retain, nonatomic) UILabel* videoType;
@property(retain, nonatomic) UILabel* imageType;
@property(retain, nonatomic) UILabel* textType;
@property(retain, nonatomic) UILabel* detailLabel;
@property(retain, nonatomic) UILabel* nameLabel;
@property(retain, nonatomic) WAProfilePictureThumbnailView* imageViewContactPicture;
@property(retain, nonatomic) UIView* containerView;
+(float)preferredRowHeightExpanded:(BOOL)expanded;
-(void).cxx_destruct;
-(void)setDetailLabelHidden:(BOOL)hidden withAnimation:(BOOL)animation;
-(void)formatCellWithRecord:(id)record detailType:(int)type;
-(void)layoutViews;
-(void)createDetailLabels;
-(void)setLabelFonts;
-(id)createDetailLabelWithAlignment:(int)alignment dark:(BOOL)dark;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WASupportEmailComposer : NSObject <ProblemInputControllerDelegate, MFMailComposeViewControllerDelegate> {
	WAServerStatus* _serverStatus;
	WASupportEmailComposer* _retainedSelf;
	unsigned _numberOfFAQSearchResultsReturned;
	unsigned _numberOfFAQSearchResultsOpened;
	BOOL _skipServerStatusCheck;
	BOOL _registration;
	BOOL _suppressHUD;
	id _completion;
	NSString* _context;
	NSString* _initialText;
	UIViewController* _controller;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIViewController* controller;
@property(assign, nonatomic) BOOL suppressHUD;
@property(assign, nonatomic) BOOL registration;
@property(assign, nonatomic) BOOL skipServerStatusCheck;
@property(copy, nonatomic) NSString* initialText;
@property(copy, nonatomic) NSString* context;
@property(copy, nonatomic) id completion;
+(id)composer;
-(void).cxx_destruct;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)probleminputControllerDidCancel:(id)probleminputController;
-(void)problemInputController:(id)controller didFinishWithText:(id)text attachment:(id)attachment imageAttachments:(id)attachments;
-(void)cancel;
-(void)presentFromViewController:(id)viewController;
-(void)finishComposerWithResult:(BOOL)result;
-(void)composeEmailWithProblemDescription:(id)problemDescription attachment:(id)attachment imageAttachments:(id)attachments;
@end

__attribute__((visibility("hidden")))
@interface WACloudBackupManager : NSObject {
	id _uploadListener;
	unsigned _waitingBackgroundTask;
	unsigned _actionBackgroundTask;
	BOOL _didChangeAccountRecently;
	BOOL _backingUp;
	BOOL _restoring;
	BOOL _blockingConnection;
	WACloudStatus* _uploadStatus;
	WACloudStatus* _downloadStatus;
	WABackupErrorManager* _errorManager;
	WAAutoBackupSettings* _autoBackupSettings;
	WAPreviousBackup* _previousBackup;
	WAUploadedBackup* _uploadedBackup;
	NSObject<OS_dispatch_queue>* _queue;
	NSObject<OS_dispatch_group>* _group;
	WAActionManager* _currentAction;
	id _ubiquityIdentityToken;
}
@property(readonly, assign, nonatomic) NSString* uploadedBackupPath;
@property(readonly, assign, nonatomic, getter=isReadyForBackup) BOOL readyForBackup;
@property(retain, nonatomic) id ubiquityIdentityToken;
@property(readonly, assign, nonatomic) NSString* statisticsFileName;
@property(readonly, assign, nonatomic) NSString* mediaPath;
@property(readonly, assign, nonatomic) NSString* localRestorePath;
@property(readonly, assign, nonatomic) NSString* localBackupPath;
@property(readonly, assign, nonatomic) WAActionManager* currentAction;
@property(readonly, assign, nonatomic, getter=isUserRegistered_cached) BOOL userRegistered_cached;
@property(readonly, assign, nonatomic, getter=isUserRegistered) BOOL userRegistered;
@property(retain, nonatomic) NSObject<OS_dispatch_group>* group;
@property(retain, nonatomic) NSObject<OS_dispatch_queue>* queue;
@property(readonly, assign, nonatomic) WAUploadedBackup* uploadedBackup;
@property(readonly, assign, nonatomic) WAPreviousBackup* previousBackup;
@property(readonly, assign, nonatomic) WACloudStatus* downloadStatus;
@property(readonly, assign, nonatomic) WACloudStatus* uploadStatus;
@property(assign, getter=isBlockingConnection) BOOL blockingConnection;
@property(assign, getter=isRestoring) BOOL restoring;
@property(assign, getter=isBackingUp) BOOL backingUp;
@property(readonly, assign, nonatomic) WARestore* currentRestore;
@property(readonly, assign, nonatomic) WABackup* currentBackup;
@property(readonly, assign, nonatomic) WAAutoBackupSettings* autoBackupSettings;
@property(readonly, assign, nonatomic) WABackupErrorManager* errorManager;
@property(assign, nonatomic) BOOL didChangeAccountRecently;
@property(readonly, assign, nonatomic) BOOL initialized;
@property(readonly, assign, nonatomic) BOOL availableEstimate;
@property(readonly, assign, nonatomic) BOOL available;
+(void)checkForCrash;
+(void)stopWatchingForCrash;
+(void)startWatchingForCrash;
+(id)userDefaultsToInclude;
+(void)addUserDefaults:(id)defaults;
+(void)addUserDefault:(id)aDefault;
+(BOOL)supported;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)startBackup;
-(void)endWaitingBackgroundTask;
-(void)cancelScheduledBackup;
-(void)scheduleBackup;
-(void)willEnterForeground:(id)foreground;
-(void)willEndForegroundTask:(id)task;
-(void)unregisterForAutoBackup;
-(void)registerForAutoBackup;
-(BOOL)extractToTmp;
-(BOOL)logFiles;
-(BOOL)evictFiles;
-(void)postLoadOverrideExpiredNotification;
-(void)clearAccountChangedRecently;
-(void)markAccountChanged;
-(void)ubiquityIdentityTokenDidChange;
-(void)loadUbiquityIdentityToken;
-(void)ubiquityIdentityTokenChanged:(id)changed;
-(void)deleteBackup:(id)backup withOptions:(unsigned)options completion:(id)completion;
-(id)createDownloadOperationWithRestore:(id)restore;
-(id)createUploadOperationWithBackup:(id)backup fromOperation:(id)operation;
-(void)restoreWithOptions:(unsigned)options completion:(id)completion;
-(void)backupWithOptions:(unsigned)options completion:(id)completion;
-(void)startCurrentAction;
-(void)action:(Class)action withChatStorage:(id)chatStorage options:(unsigned)options completion:(id)completion;
-(void)reportUploadStatusFinished:(id)finished;
-(void)listenForUploadCompletion;
-(id)createPreviousBackup;
-(id)TARsToBackup;
-(id)databasesToBackup;
-(void)cleanTemporaryFiles;
-(id)createDownloadStatus;
-(id)createUploadStatus;
-(void)dealloc;
-(id)initWithAutoBackupSettings:(id)autoBackupSettings errorManager:(id)manager;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAAxolotlIdentity : NSManagedObject {
}
@property(retain, nonatomic) NSData* keyData;
@property(retain, nonatomic) NSDate* timestamp;
@property(assign, nonatomic) long long recipientId;
@end

__attribute__((visibility("hidden")))
@interface WAThumbsTableViewCell : UITableViewCell {
	NSMutableArray* _thumbnailViews;
	NSBlockOperation* _thumbnailLoadingOp;
	NSMutableArray* _thumbnails;
	int _loadingID;
	NSMutableSet* _selectedIndexes;
	id<WAThumbsTableViewCellDelegate> _delegate;
	int _thumbnailCount;
}
@property(readonly, assign, nonatomic) NSArray* thumbnailViews;
@property(readonly, assign, nonatomic) int thumbnailCount;
@property(assign, nonatomic) __weak id<WAThumbsTableViewCellDelegate> delegate;
+(int)thumbnailCountForRowOfWidth:(float)width;
-(void).cxx_destruct;
-(void)loadThumbnailsForMessages:(id)messages loadingID:(int)anId inOperation:(id)operation;
-(void)cancelThumbnailLoading;
-(void)loadThumbnailsForMessages:(id)messages inQueue:(id)queue;
-(unsigned)thumbnailStateAtIndex:(unsigned)index;
-(void)setThumbnailState:(unsigned)state atIndex:(unsigned)index;
-(void)cellTapped:(id)tapped;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(void)refreshSelectionState;
-(void)setSelectedIndexes:(id)indexes;
-(void)setThumbnails:(id)thumbnails;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WACallHistoryTableView : UITableView {
	UIView* _overlayView;
}
@property(readonly, assign, nonatomic) UIView* overlayView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setFrame:(CGRect)frame;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface WACallHistoryViewController : WATableViewController <UISearchDisplayDelegate, UISearchBarDelegate> {
	UISegmentedControl* _callFilterSegmentedControl;
	BOOL _showMissedCallsOnly;
	UIBarButtonItem* _clearAllButton;
	BOOL _editingSingleRow;
	NSArray* _searchResults;
	NSCharacterSet* _symbolsInPhoneNumberSet;
	NSCharacterSet* _nonNumbersSet;
	UIView* _emptyListView;
	UITextView* _emptyListViewTextView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(id)tabBarItem;
-(void).cxx_destruct;
-(BOOL)searchDisplayController:(id)controller shouldReloadTableForSearchString:(id)searchString;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)showContactInfoScreenForAggregateCallEvent:(id)aggregateCallEvent;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(id)aggregateCallEventAtIndexPath:(id)indexPath;
-(void)callFilterDidChange:(id)callFilter;
-(void)wa_fontSizeDidChange;
-(void)reload;
-(void)callLoggerDidUpdateEvents:(id)callLogger;
-(void)clearAll:(id)all;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)editButtonTapped:(id)tapped;
-(void)reloadEmptyListView;
-(id)tableOverlayView;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)hideSearchBarIfNeeded;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface TarFile : NSObject {
	NSString* _path;
	NSMutableArray* _seekers;
	BOOL _useAuxiliaryFile;
	unsigned _baseProgress;
	unsigned _extractedFileCounter;
	BOOL _atomic;
	id _shouldCancel;
	id _updateProgress;
	NSFileHandle* _handle;
	WAOffsetsFile* _offsets;
	unsigned _mode;
}
@property(assign, nonatomic) unsigned mode;
@property(readonly, assign, nonatomic) BOOL isCancelled;
@property(readonly, assign, nonatomic) WAOffsetsFile* offsets;
@property(readonly, assign, nonatomic) NSFileHandle* handle;
@property(assign, nonatomic) BOOL atomic;
@property(copy, nonatomic) id updateProgress;
@property(copy, nonatomic) id shouldCancel;
+(BOOL)createDirectory:(id)directory;
+(unsigned long long)sizeOfTARFileAtPath:(id)path;
+(unsigned)chunkedCopyFromHandle:(id)handle toHandle:(id)handle2 bytesRemaining:(unsigned long long*)remaining shouldCancel:(id)cancel;
+(BOOL)doesHeaderFitAtOffset:(unsigned long long)offset forFileSize:(unsigned long long)fileSize;
+(BOOL)isOffset:(unsigned long long)offset validForSize:(unsigned long long)size;
+(BOOL)fileForHeader:(id)header fitsInTar:(unsigned long long)tar withOffset:(unsigned long long)offset;
+(BOOL)file:(id)file matchesHeader:(id)header;
-(void).cxx_destruct;
-(unsigned)extractToDirectory:(id)directory withOffset:(unsigned long long*)offset;
-(BOOL)extractFile:(id)file toDirectory:(id)directory;
-(unsigned)storeFiles:(id)files relativeToPath:(id)path;
-(void)setProgress:(unsigned)progress;
-(unsigned)addFileAtURL:(id)url relativeToPath:(id)path;
-(unsigned)seekWithURLs:(id)urls;
-(id)createSeekers;
-(void)initializeAuxiliaryFileWithMaximumCount:(unsigned)maximumCount;
-(void)useAuxiliaryFile;
-(void)addEOF;
-(void)close;
-(void)dealloc;
-(id)initWithPath:(id)path mode:(unsigned)mode;
@end

__attribute__((visibility("hidden")))
@interface WATarSeeker : NSObject {
	TarFile* _file;
}
@property(assign, nonatomic) __weak TarFile* file;
-(void).cxx_destruct;
-(unsigned)seekToFindIndex:(unsigned*)findIndex withFiles:(id)files;
-(id)initWithTarFile:(id)tarFile;
@end

__attribute__((visibility("hidden")))
@interface WAMostRecentTarSeeker : WATarSeeker {
}
-(unsigned)seekToFindIndex:(unsigned*)findIndex withFiles:(id)files;
@end

__attribute__((visibility("hidden")))
@interface WABinaryTarSeeker : WATarSeeker {
}
-(unsigned)seekToFindIndex:(unsigned*)findIndex withFiles:(id)files;
@end

__attribute__((visibility("hidden")))
@interface WAIterativeTarSeeker : WATarSeeker {
}
-(unsigned)seekToFindIndex:(unsigned*)findIndex withFiles:(id)files;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoNameUnit : NSObject {
	NSString* _prefix;
	NSString* _firstName;
	NSString* _phoneticFirstName;
	NSString* _middleName;
	NSString* _phoneticMiddleName;
	NSString* _lastName;
	NSString* _phoneticLastName;
	NSString* _suffix;
	NSString* _nickname;
	NSString* _jobTitle;
	NSString* _department;
	NSString* _organization;
	unsigned _nameFormat;
}
@property(readonly, assign, nonatomic) unsigned nameFormat;
@property(readonly, copy, nonatomic) NSString* organization;
@property(readonly, copy, nonatomic) NSString* department;
@property(readonly, copy, nonatomic) NSString* jobTitle;
@property(readonly, copy, nonatomic) NSString* nickname;
@property(readonly, copy, nonatomic) NSString* suffix;
@property(readonly, copy, nonatomic) NSString* phoneticLastName;
@property(readonly, copy, nonatomic) NSString* lastName;
@property(readonly, copy, nonatomic) NSString* phoneticMiddleName;
@property(readonly, copy, nonatomic) NSString* middleName;
@property(readonly, copy, nonatomic) NSString* phoneticFirstName;
@property(readonly, copy, nonatomic) NSString* firstName;
@property(readonly, copy, nonatomic) NSString* prefix;
+(id)contactInfoNameUnitForRecord:(void*)record;
-(void).cxx_destruct;
-(id)initWithRecord:(void*)record;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoPhotoUnit : NSObject {
	UIImage* _image;
}
@property(readonly, assign, nonatomic) UIImage* image;
+(id)contactInfoPhotoUnitForRecord:(void*)record;
-(void).cxx_destruct;
-(id)initWithRecord:(void*)record;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoUnit : NSObject {
	BOOL _multipleLines;
	BOOL _highlighted;
	UIImage* _image;
	NSString* _detailText;
	id _action;
	WAContactProperty* _property;
}
@property(retain, nonatomic) WAContactProperty* property;
@property(copy, nonatomic) id action;
@property(assign, nonatomic) BOOL highlighted;
@property(assign, nonatomic) BOOL multipleLines;
@property(copy, nonatomic) NSString* detailText;
@property(retain, nonatomic) UIImage* image;
@property(readonly, copy, nonatomic) NSString* label;
@property(readonly, copy, nonatomic) NSString* valueText;
@property(readonly, copy, nonatomic) NSString* value;
+(id)contactInfoUnitForContactProperty:(id)contactProperty;
-(void).cxx_destruct;
-(id)initWithContactProperty:(id)contactProperty;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoPhoneUnit : WAContactInfoUnit {
	NSString* _jid;
	NSManagedObjectID* _waStatusID;
}
@property(retain, nonatomic) NSManagedObjectID* waStatusID;
@property(copy, nonatomic) NSString* jid;
+(id)contactInfoPhoneUnitForWAPhone:(id)waphone;
-(void).cxx_destruct;
-(id)waStatus;
-(id)valueText;
-(id)initWithContactProperty:(id)contactProperty;
-(id)initWithWAPhone:(id)waphone;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoStatusUnit : WAContactInfoUnit {
}
+(id)timePeriodFormatter;
+(id)contactInfoStatusUnitForWAStatus:(id)wastatus;
-(id)initWithWAStatus:(id)wastatus;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoEmailUnit : WAContactInfoUnit {
}
-(id)initWithContactProperty:(id)contactProperty;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoAddressUnit : WAContactInfoUnit {
}
-(id)initWithContactProperty:(id)contactProperty;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoURLUnit : WAContactInfoUnit {
}
-(id)initWithContactProperty:(id)contactProperty;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoNoteUnit : WAContactInfoUnit {
}
-(id)initWithContactProperty:(id)contactProperty;
@end

__attribute__((visibility("hidden")))
@interface _WAPhoneNumberFormatInfo : NSObject {
	NSString* _pattern;
	NSString* _format;
	NSArray* _leadingDigitsPatterns;
}
@property(retain, nonatomic) NSArray* leadingDigitsPatterns;
@property(retain, nonatomic) NSString* format;
@property(retain, nonatomic) NSString* pattern;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface CountryInfo : NSObject {
	NSMutableSet* _searchTokens;
	NSString* _iso;
	NSString* _name;
	NSString* _localizedName;
	NSString* _cc;
	NSArray* _mcc;
	NSArray* _lengths;
	NSArray* _trims;
	NSString* _regex;
	NSArray* _formats;
}
@property(readonly, assign, nonatomic) NSSet* searchTokens;
@property(retain, nonatomic) NSArray* formats;
@property(retain, nonatomic) NSString* regex;
@property(retain, nonatomic) NSArray* trims;
@property(retain, nonatomic) NSArray* lengths;
@property(retain, nonatomic) NSArray* mcc;
@property(retain, nonatomic) NSString* cc;
@property(retain, nonatomic) NSString* localizedName;
@property(retain, nonatomic) NSString* name;
@property(retain, nonatomic) NSString* iso;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface PhoneNumberFormatter : NSObject {
}
+(id)numberStringFromPhoneNumberString:(id)phoneNumberString;
+(id)formatNumberForVoiceOver:(id)voiceOver;
+(id)clearNumber:(id)number;
+(BOOL)phoneNumber:(id)number meetsMinimumLengthRequirementOfCountry:(id)country;
+(id)formatLocalPhoneNumber:(id)number usingCountryInfo:(id)info;
+(id)formatLocalPhoneNumber:(id)number usingCountryCode:(id)code;
+(id)formatNumber:(id)number;
+(id)countryInfoByCountryCode:(id)code;
+(id)countryInfoByMCC:(id)mcc;
+(id)countryInfoByIsoCode:(id)code;
+(id)preferredCountries;
+(id)internalLoadAllCountries;
+(id)allCountries;
+(void)loadAsync;
+(id)removeDigits:(int)digits atEndOfString:(id)string;
+(id)formatNationalNumber:(id)number withCountryInfo:(id)countryInfo;
+(id)countryInfoFromNumber:(id)number;
+(id)countryInfoFromRawNumber:(id)rawNumber;
+(BOOL)nationalNumber:(id)number containsLeadingDigits:(id)digits;
@end

__attribute__((visibility("hidden")))
@interface WACloudConstants : NSObject {
}
+(id)recentForNormalTarFile:(id)normalTarFile;
+(BOOL)isRecentTarFileOrRelative:(id)relative;
+(BOOL)isTarFileOrRelative:(id)relative;
+(BOOL)isRecentTarFile:(id)file;
+(BOOL)isTarFile:(id)file;
+(id)filesToExtractLaterForInformation:(id)information;
+(id)filesToDownloadLaterForInformation:(id)information;
+(id)filesToExtractForInformation:(id)information;
+(id)filesToDownloadForInformation:(id)information;
+(id)baseFileListForInformation:(id)information;
+(id)baseFileList;
@end

__attribute__((visibility("hidden")))
@interface WAContactMultiValueEditingCell : WAContactPropertyEditingCell {
	UIButton* _labelButton;
	float _labelSectionWidth;
	UIImageView* _chevronImage;
	UIImageView* _fbBadge;
}
@property(retain, nonatomic) UIImageView* fbBadge;
@property(retain, nonatomic) UIImageView* chevronImage;
@property(assign, nonatomic) float labelSectionWidth;
@property(readonly, assign, nonatomic) UIButton* labelButton;
@property(assign, nonatomic) __weak id<WAContactMultiValueEditingCellDelegate> delegate;
-(void).cxx_destruct;
-(void)reconfigure;
-(void)labelButtonAction:(id)action;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WASavedContentBrowserViewController : WAViewController <WAImageToImageTransitioning, WANavigationControllerPopToAnimating> {
	WAWebLinksBrowserViewController* _webLinksViewController;
	NSArray* _childViewControllers;
	UISegmentedControl* _segmentedControl;
	UIViewController<WAMediaGallery>* _mediaGalleryViewController;
	int _selectedIndex;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) UIViewController* currentViewController;
@property(assign, nonatomic) int selectedIndex;
@property(readonly, assign, nonatomic) UIViewController<WAMediaGallery>* mediaGalleryViewController;
-(void).cxx_destruct;
-(BOOL)shouldBeginCustomPopAnimationForAnimationIdentifier:(id)animationIdentifier;
-(id)popAnimationControllerFromViewController:(id)viewController;
-(id)popAnimationInteractionControllerFromViewController:(id)viewController;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutomaticallyForwardRotationMethods;
-(void)segmentedControlDidChange:(id)segmentedControl;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithMediaManager:(id)mediaManager;
-(id)initWithCoder:(id)coder;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WASavedContentBrowserChildViewController : WAViewController {
}
-(void)willMoveToParentViewController:(id)parentViewController;
-(void)setToolbarItems:(id)items;
-(id)toolbarItems;
-(id)navigationItem;
-(id)navigationController;
@end

__attribute__((visibility("hidden")))
@interface WASavedContentBrowserChildTableViewController : WATableViewController {
}
-(void)willMoveToParentViewController:(id)parentViewController;
-(void)setToolbarItems:(id)items;
-(id)toolbarItems;
-(id)navigationItem;
-(id)navigationController;
@end

__attribute__((visibility("hidden")))
@interface WADisabledPushReminderViewController : WAViewController {
	UIView* _contentView;
	UIButton* _buttonClose;
	UILabel* _labelItem1;
	UILabel* _labelItem2;
	UILabel* _labelItem3;
	UILabel* _labelItem4;
	UILabel* _labelTitle;
	UILabel* _labelSubtitle;
	UILabel* _labelOpenSettings;
	UILabel* _labelOpenNotificationCenter;
	UILabel* _labelSelectWhatsApp;
	UILabel* _labelSelectAlertStyle;
	UIImageView* _imageSettings;
	UIImageView* _imageNotificationCenter;
	UIImageView* _imageWhatsApp;
	UIView* _viewAlertStyles;
	UIView* _labelBanners;
}
@property(retain, nonatomic) UIView* labelBanners;
@property(retain, nonatomic) UIView* viewAlertStyles;
@property(retain, nonatomic) UIImageView* imageWhatsApp;
@property(retain, nonatomic) UIImageView* imageNotificationCenter;
@property(retain, nonatomic) UIImageView* imageSettings;
@property(retain, nonatomic) UILabel* labelSelectAlertStyle;
@property(retain, nonatomic) UILabel* labelSelectWhatsApp;
@property(retain, nonatomic) UILabel* labelOpenNotificationCenter;
@property(retain, nonatomic) UILabel* labelOpenSettings;
@property(retain, nonatomic) UILabel* labelSubtitle;
@property(retain, nonatomic) UILabel* labelTitle;
@property(retain, nonatomic) UILabel* labelItem4;
@property(retain, nonatomic) UILabel* labelItem3;
@property(retain, nonatomic) UILabel* labelItem2;
@property(retain, nonatomic) UILabel* labelItem1;
@property(retain, nonatomic) UIButton* buttonClose;
@property(retain, nonatomic) UIView* contentView;
+(void)updateLastRemindDate;
+(void)resetLastReminderDate;
+(BOOL)canPresentReminder;
+(id)controller;
-(void).cxx_destruct;
-(void)closeAction:(id)action;
-(void)dismiss;
-(void)presentModallyFromViewController:(id)viewController;
-(void)viewDidLayoutSubviews;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WARestore : WAActionManager {
	WACloudStatus* _cloudStatus;
	id _cloudStatusListener;
	BOOL _shouldRestore;
	WATriggeredOperation* _delayedStart;
	NSMutableArray* _untarOperations;
	NSString* _localRestorePath;
	unsigned _backgroundTask;
	BOOL _additionalSpaceRequired;
	WACloudStatus* _downloadStatus;
	WACloudBackupManager* _manager;
	WAChatStorage* _storage;
	WABackupInformation* _backupInformation;
	WACloudInteractionBackupOperation_Documents* _downloadOperation;
	unsigned long long _size;
	unsigned long long _additionalSpaceAmount;
}
@property(retain) WACloudInteractionBackupOperation_Documents* downloadOperation;
@property(readonly, assign) WABackupInformation* backupInformation;
@property(readonly, assign, nonatomic) WAChatStorage* storage;
@property(readonly, assign, nonatomic) WACloudBackupManager* manager;
@property(retain, nonatomic) WACloudStatus* downloadStatus;
@property(readonly, assign, nonatomic) unsigned long long additionalSpaceAmount;
@property(readonly, assign, nonatomic) BOOL additionalSpaceRequired;
@property(readonly, assign, nonatomic) unsigned long long size;
@property(readonly, assign, nonatomic) BOOL encounteredTARError;
-(void).cxx_destruct;
-(void)willEnterForeground:(id)foreground;
-(void)endBackgroundTask;
-(void)willEndForegroundTask:(id)task;
-(void)calculateSizeParameters;
-(void)unregisterForCloudStatus;
-(void)registerForCloudStatus;
-(void)incrementPhase;
-(unsigned)maximumPhase;
-(id)errorDomain;
-(void)start;
-(void)removeTemporaryDirectory;
-(void)completeWithReason:(unsigned)reason;
-(void)addFirstOperations;
-(void)internalStartRestore;
-(void)addOperation:(id)operation;
-(void)dealloc;
-(id)initWithManager:(id)manager chatStorage:(id)storage options:(unsigned)options completion:(id)completion;
-(id)initWithOptions:(unsigned)options;
@end

__attribute__((visibility("hidden")))
@interface URLQueryProcessor : NSObject {
}
+(id)dictionaryFromQueryString:(id)queryString;
+(BOOL)validateRegistrationQueryComponents:(id)components;
+(BOOL)isOnlyDigits:(id)digits;
@end

__attribute__((visibility("hidden")))
@interface WAModalNavigationController : UINavigationController {
}
-(unsigned)supportedInterfaceOrientations;
@end

__attribute__((visibility("hidden")))
@interface KeychainWrapper : NSObject {
}
+(BOOL)updateKeychainValue:(id)value forIdentifier:(id)identifier;
+(BOOL)createKeychainValue:(id)value forIdentifier:(id)identifier;
+(id)keychainItemMatching:(id)matching withAccessibilityControl:(BOOL)accessibilityControl;
+(id)searchDictionary:(id)dictionary withAccessibilityControl:(BOOL)accessibilityControl;
+(void)deleteKeychainValueWithIdentifier:(id)identifier;
+(void)setKeychainValue:(id)value forIdentifier:(id)identifier;
+(id)keychainValueWithIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAEmptyChatListView : UIView <UITableViewDataSource, UITableViewDelegate> {
	UITableView* _tableView;
	UITableViewCell* _tellAFriendCell;
	UIView* _headerView;
	UITextView* _textView;
	UIWebView* _webView;
	UILabel* _bottomLabel;
	id<WAEmptyChatListViewDelegate> _emptyViewDelegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAEmptyChatListViewDelegate> emptyViewDelegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)fontSizeDidChange:(id)fontSize;
-(void)tintColorDidChange;
-(id)topHelperHTMLStringWithFont:(id)font;
-(void)configureTextViewWithFont:(id)font text:(id)text;
-(void)layoutSubviews;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAURLSessionDownloadTaskResumeDataOS6 : NSObject <NSSecureCoding> {
	NSString* _filePath;
	NSString* _etag;
}
@property(copy, nonatomic) NSString* etag;
@property(copy, nonatomic) NSString* filePath;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAURLSessionDownloadTaskHandlerOS6 : WAAsyncOperation <WAURLSessionDownloadTaskHandler> {
	NSURLConnection* _connection;
	NSHTTPURLResponse* _response;
	NSFileHandle* _outputFile;
	NSString* _outputFilePath;
	id _completionHandler;
	NSString* _etagForResume;
	WAURLTaskData* _wa_taskData;
	id<WAURLSessionDownloadTaskHandlerOS6Delegate> _delegate;
	long long _countOfBytesExpectedToReceive;
}
@property(readonly, assign, nonatomic) NSURLResponse* response;
@property(readonly, assign, nonatomic) NSURLRequest* currentRequest;
@property(readonly, assign, nonatomic) long long countOfBytesReceived;
@property(readonly, assign, nonatomic) long long countOfBytesExpectedToReceive;
@property(copy, nonatomic) WAURLTaskData* wa_taskData;
@property(readonly, assign, nonatomic) int state;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAURLSessionDownloadTaskHandlerOS6Delegate> delegate;
+(void)resumeAll;
+(void)suspendAll;
+(void)initialize;
-(void).cxx_destruct;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)handleTcpConnectionTimeout;
-(void)cancelTcpConnectionTimeout;
-(void)cancelByProducingResumeData:(id)data;
-(void)suspend;
-(void)resume;
-(void)didFinishDownloadWithError:(id)error;
-(void)performTaskWithCompletionHandler:(id)completionHandler;
-(id)initWithTaskData:(id)taskData;
@end

__attribute__((visibility("hidden")))
@interface _WASwipeFromMessageInfoToChatInteractiveTransition : WAPercentDrivenInteractiveTransition {
}
-(void)cancelInteractiveTransition;
@end

__attribute__((visibility("hidden")))
@interface ChatViewController : WAChatBaseViewController <WAInfoInputViewControllerDelegate, WAConversationHeaderViewDelegate, ShareLocationControllerDelegate, WAChatBarManagerDelegate, UIGestureRecognizerDelegate, WAPttRecorderDelegate, WAMultiSendMediaPickerControllerDelegate, WAShareContactViewControllerDelegate, MPMediaPickerControllerDelegate, UINavigationControllerDelegate, WAMultiSendPreviewViewControllerDelegate, WAMultiShotCameraControllerDelegate, UIViewControllerAnimatedTransitioning, UIViewControllerPreviewingDelegate> {
	WAChatSession* _chatSession;
	BOOL _isList;
	BOOL _isGroup;
	BOOL _forwardingMessagesInEditMode;
	WAChatCellData* _preselectedCellData;
	int _selectedMessagesCount;
	int _lastMessageIndex;
	int _loadedMessagesCount;
	BOOL _needsScrollToTarget;
	BOOL _needsScrollToTargetAfterTableUpdates;
	BOOL _ignoreUnreadDividerOnScrollToTargetAfterTableUpdates;
	NSIndexPath* _indexPathToScrollTo;
	CGSize _contentSizeBeforeLoadLaterMessages;
	CGSize _contentSizeBeforeLoadEarlierMessages;
	NSManagedObjectID* _messageIDToScrollTo;
	BOOL _loadingEarlierMessages;
	NSArray* _preloadedMessages;
	UIView* _loadingMessagesHeader;
	int _peoplePickerTag;
	BOOL _suspiciousChatUI;
	BOOL _hasOutgoingMessages;
	UIPanGestureRecognizer* _keyboardDraggingScrollGesture;
	id<WAChatBarManager> _chatBarManager;
	BOOL _interactiveChatBarDraggingFromTableViewInProgress;
	CGPoint _interactiveChatBarDraggingInitialTranslation;
	WAPttRecorder* _pttRecorder;
	double _pttRecordStartTime;
	NSTimer* _pttAudioRecorderUpdateTimer;
	BOOL _pttInterruption;
	WAMediaStreamUploadOperation* _voiceMsgStreamOperation;
	SoundEffect* _startRecordSoundEffect;
	SoundEffect* _stopRecordSoundEffect;
	SoundEffect* _errorRecordSoundEffect;
	int _lastKnownOrientation;
	BOOL _interfaceRotationInProgress;
	double _initialViewDidAppearTimestamp;
	double _lastViewDidAppearTimestamp;
	id<UIViewControllerPreviewing> _profilePicturePreviewingContext;
	BOOL _swipeToDetailsInProgress;
	int _navigationControllerOperation;
	WAMessageCell* _messageCellForSwipeToDetails;
	UIView* _messageCellForSwipeToDetailsSnapshot;
	WAChatCellData* _lastSelectedCellDataForDetails;
	UIBarButtonItem* _showAllChatsBarButtonItem;
	UINavigationController* _navigationControllerToBeRestored;
	UIView* _previewHeader;
	BOOL _ignoreUnsentTextOnDisappear;
	BOOL _alwaysShowsBackButton;
	BOOL _fadingOutReadonlyWarning;
	WAMessage* _highlightedMessage;
	NSSet* _highlightedTerms;
	NSString* _jid;
	NSArray* _chatPreviewActionItems;
	UIToolbar* _toolbarEditMode;
	UIBarButtonItem* _barButtonForward;
	UIBarButtonItem* _barButtonShare;
	UIBarButtonItem* _barButtonDelete;
	UIBarButtonItem* _barButtonEditModeTitle;
	UIBarButtonItem* _barButtonDoneEditing;
	UIBarButtonItem* _barButtonDeleteAll;
	WAConversationHeaderView* _headerView;
	WAWarningView* _viewReadonlyWarning;
	double _openChatStartTime;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL fadingOutReadonlyWarning;
@property(retain, nonatomic) WAWarningView* viewReadonlyWarning;
@property(retain, nonatomic) WAConversationHeaderView* headerView;
@property(retain, nonatomic) UIBarButtonItem* barButtonDeleteAll;
@property(retain, nonatomic) UIBarButtonItem* barButtonDoneEditing;
@property(retain, nonatomic) UIBarButtonItem* barButtonEditModeTitle;
@property(retain, nonatomic) UIBarButtonItem* barButtonDelete;
@property(retain, nonatomic) UIBarButtonItem* barButtonShare;
@property(retain, nonatomic) UIBarButtonItem* barButtonForward;
@property(retain, nonatomic) UIToolbar* toolbarEditMode;
@property(retain, nonatomic) NSArray* chatPreviewActionItems;
@property(assign, nonatomic) BOOL alwaysShowsBackButton;
@property(readonly, assign, nonatomic, getter=isShowingMostRecentMessages) BOOL showingMostRecentMessages;
@property(assign, nonatomic) BOOL ignoreUnsentTextOnDisappear;
@property(assign, nonatomic) double openChatStartTime;
@property(readonly, assign, nonatomic) WAChatSession* chatSession;
@property(retain, nonatomic) NSString* jid;
@property(assign, nonatomic) BOOL showKeyboardOnAppear;
@property(copy, nonatomic) NSSet* highlightedTerms;
@property(retain, nonatomic) WAMessage* highlightedMessage;
-(void).cxx_destruct;
-(id)previewActionItems;
-(void)previewingContext:(id)context commitViewController:(id)controller;
-(id)previewingContext:(id)context viewControllerForLocation:(CGPoint)location;
-(void)sendAudioAtFilePath:(id)filePath durationSeconds:(int)seconds streamingHash:(id)hash;
-(void)pttRecorder:(id)recorder didFinishRecordingSuccessfully:(BOOL)successfully filePath:(id)path;
-(void)pttRecorderWasInterrupted:(id)interrupted;
-(void)pttRecorderDidFailToRecord:(id)pttRecorder;
-(void)pttRecorderDidStartRecording:(id)pttRecorder;
-(void)pttRecordWillStartRecording:(id)pttRecord;
-(id)pttRecorder;
-(void)waqrSetText:(id)text;
-(void)shareSelectedMessages:(id)messages;
-(void)forwardSelectedMessages:(id)messages;
-(id)allSelectedMessages;
-(void)forwardMessagesInCellData:(id)cellData;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)beginDraggingInMessagesTableViewIfPossible:(id)messagesTableViewIfPossible;
-(void)handleDraggingInMessagesTableView:(id)messagesTableView;
-(void)chatBarManagerWantsToScrollToTop:(id)top;
-(void)chatBarManager:(id)manager didEndDraggingChatBarWithAdditionalTranslation:(float)additionalTranslation finalBottomInset:(float)inset;
-(void)chatBarManagerWillBeginDraggingChatBar:(id)chatBarManager;
-(void)chatBarManager:(id)manager didCancelPTTRecordingByUser:(BOOL)user;
-(void)chatBarManagerDidEndPTTRecording:(id)chatBarManager;
-(double)chatBarManagerWillEndPTTRecording:(id)chatBarManager;
-(void)chatBarManagerDidBeginPTTRecording:(id)chatBarManager;
-(BOOL)chatBarManagerShouldBeginPTTRecording:(id)chatBarManager;
-(BOOL)isUserConnectedShowingErrorMessageIfNeeded:(BOOL)needed;
-(void)chatBarManager:(id)manager needsAdjustBottomInset:(float)inset withScrolling:(BOOL)scrolling;
-(void)promptUserToSendMessageIfNeeded:(id)sendMessageIfNeeded completion:(id)completion;
-(void)chatBarManager:(id)manager userDidSubmitText:(id)user metadata:(id)metadata completion:(id)completion;
-(void)chatBarManagerWantsToPresentCamera:(id)presentCamera;
-(void)chatBarManagerWantsToAttachMedia:(id)attachMedia;
-(void)multiSendPreviewViewControllerDidRequestRetakePhoto:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewControllerDidCancel:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewController:(id)controller didConfirmItems:(id)items;
-(void)chatBarManager:(id)manager didPasteImage:(id)image;
-(void)chatBarManagerDidChangeText:(id)chatBarManager;
-(BOOL)chatBarManagerDelegateIsPreviewingContent:(id)content;
-(BOOL)chatBarManagerDelegateIsDisappearing:(id)disappearing;
-(BOOL)chatBarManagerDelegateIsAppearing:(id)appearing;
-(float)chatBarManagerMaximumHeight:(id)height;
-(unsigned)chatBarManagerVisibleConnectionStatus:(id)status;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)sendAudioTrack:(id)track;
-(void)mediaPicker:(id)picker didPickMediaItems:(id)items;
-(void)mediaPickerDidCancel:(id)mediaPicker;
-(void)showAudioMediaPicker;
-(void)multiSendMediaPickerControllerDidRequestRetakePhoto:(id)multiSendMediaPickerController;
-(void)multiSendMediaPickerControllerDidCancel:(id)multiSendMediaPickerController;
-(void)multiSendMediaPickerController:(id)controller didSelectItems:(id)items;
-(id)findChooseButtonInVideoPickerView:(id)videoPickerView;
-(void)navigationController:(id)controller willShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)callButtonTapped:(id)tapped;
-(void)headerViewTapped:(id)tapped;
-(void)profilePictureTapped:(id)tapped;
-(void)applicationWillPresentCallWindow:(id)application;
-(void)profilePictureUpdated:(id)updated;
-(void)audioSessionMediaServicesWereReset:(id)reset;
-(void)audioSessionMediaServicesWereLost:(id)lost;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(void)currentLocaleChanged:(id)changed;
-(void)applicationDidBecomeActive:(id)application;
-(void)wa_applicationWillEnterForeground;
-(void)wa_applicationDidEnterBackground;
-(void)applicationWillTerminate:(id)application;
-(void)xmppConnectionChatStateDidChange:(id)xmppConnectionChatState;
-(void)xmppConnectionPresenceDidChange:(id)xmppConnectionPresence;
-(void)xmppConnectionStateDidChange:(id)xmppConnectionState;
-(void)setWallpaperHidden:(BOOL)hidden;
-(void)showOrHideSuspiciousChatUI;
-(void)visibleConnectionStatusDidChange;
-(void)updateHeaderView;
-(void)chatStorageDidDisplayChatSessionRemotely:(id)chatStorage;
-(void)chatStorageDidDeleteChatSessions:(id)chatStorage;
-(void)chatStorageDidUpdateParticipantsOfChatSession:(id)chatStorage;
-(void)chatStorageDidUpdateChatSession:(id)chatStorage;
-(void)chatStorageDidAddMessages:(id)chatStorage;
-(void)chatStorageDidDeleteMessages:(id)chatStorage;
-(void)showErrorMessageForUnsupportedMediaInMessage:(id)message;
-(void)showErrorMessageForUnavailableMediaInMessage:(id)message;
-(void)showGenericDownloadErrorForMediaInMessage:(id)message;
-(void)mediaProgressDidChange:(id)mediaProgress;
-(void)mediaDownloadDidFail:(id)mediaDownload;
-(void)locationUpdateDidFail:(id)locationUpdate;
-(BOOL)shouldBeginCustomPopAnimationForAnimationIdentifier:(id)animationIdentifier;
-(id)popAnimationControllerFromViewController:(id)viewController;
-(id)popAnimationInteractionControllerFromViewController:(id)viewController;
-(id)pushAnimationControllerToViewController:(id)viewController;
-(id)pushAnimationInteractionControllerToViewController:(id)viewController;
-(BOOL)isPerformingCustomPushAnimation;
-(void)animatePopTransition:(id)transition;
-(void)animatePushTransition:(id)transition;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(void)cleanUpAfterSwipeToDetails;
-(BOOL)allowSwipeToDetailsToComplete:(id)complete;
-(void)messageCell:(id)cell swipeGestureDidChange:(id)swipeGesture;
-(id)defaultPreviewActionsForMessage:(id)message;
-(void)viewDetailsForMessage:(id)message withPreviewAction:(id)previewAction;
-(void)openDetailsScreenForMessageInCellData:(id)cellData;
-(void)detailsForMessageInCell:(id)cell;
-(void)handleDoubleTapInCell:(id)cell;
-(void)handleSingleTapInCell:(id)cell;
-(void)invertSelectionForCell:(id)cell;
-(void)messagesTableDidEndDecelerating;
-(void)messagesTableDidEndDraggingAndWillDecelerate:(BOOL)messagesTable;
-(void)messagesTableWillBeginDragging;
-(void)messagesTableDidScrollToTop;
-(void)messagesTableDidScroll;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(void)tableView:(id)view tapped:(id)tapped;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)cellForRowWithCellData:(id)cellData inTableView:(id)tableView;
-(float)heightForRowWithCellData:(id)cellData inTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)viewWillTransitionToSize:(CGSize)view withTransitionCoordinator:(id)transitionCoordinator;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldAutorotate;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)makeActiveIfPossible;
-(void)applicationDidDismissCallScreen:(id)application;
-(void)applicationWillPresentCallScreen:(id)application;
-(BOOL)shouldShowAllChatsButton;
-(void)updateLeftBarButtonItem;
-(void)viewWillAppear:(BOOL)view;
-(id)uniqueIdentifier;
-(void)viewDidLayoutSubviews;
-(void)viewDidLoad;
-(void)infoInputViewControllerDidCancel:(id)infoInputViewController;
-(void)infoInputViewControllerDidFinish:(id)infoInputViewController;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(void*)person;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)continueEditingPerson:(void*)person onNavigationController:(id)controller;
-(void)sendVideoAtURL:(id)url referenceURL:(id)url2 caption:(id)caption;
-(void)debug_showMovieFileInfoAtURL:(id)url;
-(void)multiSendMediaPickerController:(id)controller didSelectVideoAtURL:(id)url referenceURL:(id)url3 caption:(id)caption;
-(void)sendRecordedVideoAtURL:(id)url caption:(id)caption;
-(void)multiSendMediaPickerController:(id)controller didSaveVideoToURL:(id)url caption:(id)caption;
-(void)shareLocationControllerDidCancel:(id)shareLocationController;
-(void)shareLocationControllerDidSelectWAPlace:(id)shareLocationController;
-(void)presentShareLocationController;
-(void)shareContactViewControllerDidCancel:(id)shareContactViewController;
-(void)shareContactViewController:(id)controller didFinishWithVCard:(id)vcard;
-(void)sendVCard:(id)card;
-(void)showVCardPersonPicker;
-(void)showMultiSendPickerWithMode:(unsigned)mode;
-(void)showVideoOnlyLibrary;
-(void)showPhotoOnlyLibrary;
-(void)showPhotoLibrary;
-(void)dequeueMediaItemSendQueue:(id)queue index:(int)index count:(int)count previousMessage:(id)message;
-(void)sendMediaItems:(id)items;
-(void)multiShotCameraController:(id)controller didSelectVideoAtURL:(id)url referenceURL:(id)url3 caption:(id)caption;
-(void)multiShotCameraControllerDidCancel:(id)multiShotCameraController;
-(void)multiShotCameraController:(id)controller didCaptureItems:(id)items;
-(void)showMultiShotCameraWithCameraRollPicker:(BOOL)cameraRollPicker;
-(void)showCameraFromChatBar;
-(void)showCameraWithCameraRollPicker:(BOOL)cameraRollPicker;
-(void)reallyShowMultiSendCameraWithCompletionHandler:(id)completionHandler;
-(void)showCameraFromActionSheetWithCompletionHandler:(id)completionHandler;
-(void)showCameraFromActionSheet;
-(BOOL)hasSufficientDiskSpaceToUseCamera;
-(void)addUnknownSenderToContact;
-(void)createNewContactForUnknownSender;
-(void)presentUnknownContactScreenForUnknownSender;
-(void)addUnknownSenderToAddressBook;
-(void)disableShareToolTips;
-(void)updatePushToTalkRecordTime;
-(void)markChatAsTrusted;
-(void)blockedContactsListUpdated:(id)updated;
-(void)unblockContact;
-(void)reportContactAsSpam;
-(void)reallyReportContactAsSpam;
-(void)blockContact;
-(void)reallyBlockContact;
-(void)jumpToAllChats:(id)allChats;
-(void)viewGroupInfo;
-(void)viewContactInfo;
-(void)viewListInfo;
-(void)deleteMessagesInCellData:(id)cellData;
-(void)deleteSelectedMessages;
-(void)deleteAction:(id)action;
-(float)calculateTableHeight;
-(void)clearAllAction:(id)action;
-(void)leaveEditModeAction:(id)action;
-(void)leaveEditMode;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)setEditing:(BOOL)editing;
-(void)reloadMessages;
-(void)removeUnreadDivider;
-(void)chatStorageDidReplaceChatSession:(id)chatStorage;
-(void)clearConversation;
-(id)extendMessagesForwardToCompleteCollection:(id)completeCollection fromOffset:(int)offset;
-(void)showLoadingMessagesIndicatorIfNeeded;
-(void)loadLaterMessagesIfNeeded;
-(void)loadEarlierMessagesIfNeeded;
-(void)preloadEarlierMessagesIfNeeded;
-(id)loadMessagesFromOffset:(unsigned)offset count:(unsigned)count;
-(void)didUpdateMessagesTableAfterControllerDidChangeContent;
-(void)addMessagesToTheBottom:(id)theBottom animated:(BOOL)animated dividerBehavior:(unsigned)behavior allowScrolling:(BOOL)scrolling searchResultMessageID:(id)anId;
-(void)reloadMessageController;
-(BOOL)isIndexPathValid:(id)valid inTableView:(id)tableView;
-(void)updateLayoutForCurrentOrientation;
-(void)updateEditModeButtons;
-(void)updateUserPresence;
-(void)reloadProfilePictureInNavigatioBar;
-(void)updateTitleViewTapability;
-(void)setupNavigationBarTitle;
-(void)updateTableViewContentInsetsWithKeyboardHeight:(float)keyboardHeight adjustingContentOffset:(BOOL)offset extendBottomInsetIfNeeded:(BOOL)needed;
-(void)restoreSavedInput;
-(CGPoint)correctContentOffsetForOverscroll:(CGPoint)overscroll;
-(void)correctForOverscroll;
-(void)transitionToShowingOnlyMostRecentMessagesIfNeeded;
-(void)cancelScrolling;
-(void)scrollToRowAtIndexPath:(id)indexPath position:(float)position;
-(void)restoreContentOffset;
-(void)storeContentOffset;
-(void)scrollToBottomAnimated:(BOOL)bottomAnimated usingTransitionIfNeeded:(BOOL)needed;
-(void)scrollToBottom;
-(void)scrollToTarget;
-(void)setNeedsScrollToTarget;
-(void)showActionSheet:(id)sheet;
-(void)layoutReadonlyWarningView;
-(void)removeReadonlyWarningAnimated:(BOOL)animated;
-(void)showReadonlyWarningAnimated:(BOOL)animated;
-(void)showBlockedContactWarning:(id)warning;
-(CGRect)frameOfRightButtonInNavigationBar:(id)navigationBar;
-(void)showTooltipIfNeeded;
-(void)showPushToTalkTooltipFromButton:(id)button;
-(void)setPausedSessionState;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithChatSession:(id)chatSession;
@end

__attribute__((visibility("hidden")))
@interface WAChatCellData : NSObject <WAMediaProgressDelegate> {
	NSDate* _date;
	NSMutableArray* _messages;
	AVSpeechUtterance* _currentUtterance;
	WAMergedContact* _vCardContact;
	BOOL _disallowMerging;
	BOOL _disallowBubbleHeader;
	BOOL _selected;
	BOOL _longTimestampFormat;
	BOOL _fromMe;
	BOOL _chatIsSuspicious;
	BOOL _mergedWithNextMessage;
	BOOL _mergedWithPreviousMessage;
	BOOL _searchResult;
	BOOL _unreadAllVoice;
	BOOL _didAnnounceMediaUploadOrDownloadStatus;
	BOOL _vCardActionsAllowed;
	short _sessionType;
	WAMediaDataPresentationController* _presentationController;
	unsigned _type;
	unsigned _bubbleDirection;
	float _progress;
	NSArray* _textMessages;
	float _lastHeight;
	NSNumber* _unreadCount;
	unsigned _pttPlayerState;
	float _pttPlayerProgress;
	CGSize _lastSize;
	UIEdgeInsets _cellInsets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL vCardActionsAllowed;
@property(readonly, assign, nonatomic) UIImage* mediaThumbnail;
@property(readonly, assign, nonatomic) NSString* pushName;
@property(readonly, assign, nonatomic) NSString* fromName;
@property(readonly, assign, nonatomic) BOOL needToShowAlert;
@property(assign, nonatomic) BOOL didAnnounceMediaUploadOrDownloadStatus;
@property(assign, nonatomic) float pttPlayerProgress;
@property(assign, nonatomic) unsigned pttPlayerState;
@property(assign, nonatomic) BOOL unreadAllVoice;
@property(retain, nonatomic) NSNumber* unreadCount;
@property(readonly, assign, nonatomic) BOOL requiresBroadcastListIcon;
@property(readonly, assign, nonatomic) unsigned footerStatus;
@property(readonly, assign, nonatomic) short sessionType;
@property(assign, nonatomic, getter=isSearchResult) BOOL searchResult;
@property(assign, nonatomic) CGSize lastSize;
@property(assign, nonatomic) float lastHeight;
@property(readonly, assign, nonatomic) NSArray* messages;
@property(retain, nonatomic) NSArray* textMessages;
@property(assign, nonatomic) BOOL mergedWithPreviousMessage;
@property(assign, nonatomic) BOOL mergedWithNextMessage;
@property(readonly, assign, nonatomic, getter=isStarred) BOOL starred;
@property(readonly, assign, nonatomic) BOOL skipCellLayout;
@property(readonly, assign, nonatomic, getter=isSending) BOOL sending;
@property(readonly, assign, nonatomic, getter=isGroupMessage) BOOL groupMessage;
@property(readonly, assign, nonatomic, getter=isSenderUnknown) BOOL senderUnknown;
@property(assign, nonatomic) BOOL chatIsSuspicious;
@property(readonly, assign, nonatomic) BOOL canBeForwarded;
@property(readonly, assign, nonatomic, getter=isFromMe) BOOL fromMe;
@property(assign, nonatomic) BOOL longTimestampFormat;
@property(readonly, assign, nonatomic) NSDate* date;
@property(assign, nonatomic) float progress;
@property(assign, nonatomic) BOOL selected;
@property(assign, nonatomic) unsigned bubbleDirection;
@property(assign, nonatomic) UIEdgeInsets cellInsets;
@property(assign, nonatomic) BOOL disallowBubbleHeader;
@property(assign, nonatomic) BOOL disallowMerging;
@property(readonly, assign, nonatomic) unsigned type;
@property(readonly, assign, nonatomic) WAMediaDataPresentationController* presentationController;
+(BOOL)textEffectsEnabled;
+(id)divider;
+(void)initialize;
-(void).cxx_destruct;
-(void)stopSpeakingContent;
-(void)startSpeakingContent;
-(BOOL)isSpeakingContent;
-(void)textToSpeechEngineDidFinishSpeechUtterance:(id)textToSpeechEngine;
-(void)textToSpeechEngineDidCancelSpeechUtterance:(id)textToSpeechEngine;
-(BOOL)containsSpeakableContent;
-(void)setProgress:(float)progress forMessage:(id)message;
-(id)dividerText;
-(id)fullEventText;
-(id)vCardContact;
-(id)vCardContactImage;
-(id)vCardContactName;
-(XXStruct_gLbvpC)locationCoordinate;
-(id)placeURL;
-(id)placeAddress;
-(id)placeName;
-(void)queueDownloadOfUndownloadedMedia;
-(BOOL)containsUndownloadedMedia;
-(void)reloadPresentationController;
-(id)mediaURLString;
-(id)fullMediaPath;
-(CGSize)thumbnailSize;
-(BOOL)mediaLoading;
-(long long)fileSize;
-(BOOL)canDoPartialMergeWithCellData:(id)cellData;
-(BOOL)canDoFullMergeWithMessage:(id)message;
-(id)messageStrings;
-(void)regenerateTextMessages;
-(void)removeMessage:(id)message;
-(void)addMessage:(id)message addToFront:(BOOL)front;
-(void)fontSizeDidChange:(id)fontSize;
-(void)removeObjectFromMessagesAtIndex:(unsigned)index;
-(void)insertObject:(id)object inMessagesAtIndex:(unsigned)index;
-(id)textMessageForText:(id)text;
-(id)nameColor;
-(id)shortName;
-(id)messageID;
-(id)allUnsentMessages;
-(id)messageTimestampString;
-(unsigned)messageStatus;
-(unsigned)mediaOrigin;
-(unsigned)messageType;
-(id)message;
-(void)dealloc;
-(id)initWithMessage:(id)message highlightedTerms:(id)terms;
-(id)initWithType:(unsigned)type;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAExclusiveTouchImageView : UIImageView {
}
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface WAMessageCell : UITableViewCell <UIViewControllerPreviewingDelegate, WAMediaProgressDelegate, WAMessageTextViewDelegate, WATableViewCellPreviewing, UIGestureRecognizerDelegate> {
	WAChatCellData* _cellData;
	UIImageView* _imageViewCheckmark;
	UIButton* _buttonAlert;
	BOOL _singleTapDisabled;
	BOOL _cellLayoutDisabled;
	BOOL _skipLayoutPass;
	BOOL _horizontallyFlipped;
	NSArray* _accessibleElements;
	UIPanGestureRecognizer* _swipeGestureRecognizer;
	id<WAMessageCellDelegate> _delegate;
	WAMessageFooterView* _footerView;
	UILabel* _fromNameLabel;
	UILabel* _pushNameLabel;
	UIImageView* _bubbleImageView;
	float _rightAccessoryViewMargin;
	UIView* _rightAccessoryView;
	UIView* _cellHeader;
	UIView* _cellFooter;
	UITapGestureRecognizer* _singleTapGestureRecognizer;
	UITapGestureRecognizer* _doubleTapGestureRecognizer;
	UILongPressGestureRecognizer* _longPressGestureRecognizer;
	UIViewController<WATableViewCellPreviewingDelegate>* _previewingDelegate;
	NSSet* _previewingContexts;
	UIEdgeInsets _currentContentInsets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSSet* previewingContexts;
@property(assign, nonatomic) __weak UIViewController<WATableViewCellPreviewingDelegate>* previewingDelegate;
@property(readonly, assign, nonatomic) UILongPressGestureRecognizer* longPressGestureRecognizer;
@property(readonly, assign, nonatomic) UITapGestureRecognizer* doubleTapGestureRecognizer;
@property(readonly, assign, nonatomic) UITapGestureRecognizer* singleTapGestureRecognizer;
@property(readonly, assign, nonatomic, getter=isHorizontallyFlipped) BOOL horizontallyFlipped;
@property(assign, nonatomic) BOOL skipLayoutPass;
@property(readonly, assign, nonatomic) BOOL cellLayoutDisabled;
@property(readonly, assign, nonatomic) UIEdgeInsets currentContentInsets;
@property(retain, nonatomic) UIView* cellFooter;
@property(retain, nonatomic) UIView* cellHeader;
@property(retain, nonatomic) UIView* rightAccessoryView;
@property(assign, nonatomic) float rightAccessoryViewMargin;
@property(retain, nonatomic) UIImageView* bubbleImageView;
@property(readonly, assign, nonatomic) UILabel* pushNameLabel;
@property(readonly, assign, nonatomic) UILabel* fromNameLabel;
@property(retain, nonatomic) WAMessageFooterView* footerView;
@property(assign, nonatomic) BOOL singleTapDisabled;
@property(assign, nonatomic) __weak id<WAMessageCellDelegate> delegate;
@property(readonly, assign, nonatomic) UIPanGestureRecognizer* swipeGestureRecognizer;
@property(retain, nonatomic) NSArray* accessibleElements;
@property(readonly, assign, nonatomic) WAChatCellData* cellData;
+(void)unhighlightAllSubviewsOfView:(id)view exceptForView:(id)view2;
+(float)rowHeightForCellData:(id)cellData maxWidth:(float)width;
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
+(float)maximumBubbleWidthForCellWidth:(float)cellWidth;
+(UIEdgeInsets)textInsetsForCellData:(id)cellData;
+(UIEdgeInsets)contentInsetsForCellData:(id)cellData cellWidth:(float)width;
+(UIEdgeInsets)baseContentInsetsForCellData:(id)cellData;
+(UIEdgeInsets)bubbleMarginsForCellData:(id)cellData;
+(BOOL)shouldShowHeaderForCellData:(id)cellData;
+(unsigned)bubbleDirectionForCellData:(id)cellData;
+(BOOL)selectable;
+(float)maxBubbleWidthForCellWidth:(float)cellWidth;
+(id)cellReuseIdentifier;
+(Class)cellClassForCellData:(id)cellData;
+(void)initialize;
-(void).cxx_destruct;
-(void)setProgress:(float)progress forMessage:(id)message;
-(int)indexOfAccessibilityElement:(id)accessibilityElement;
-(id)accessibilityElementAtIndex:(int)index;
-(int)accessibilityElementCount;
-(void)configureForAccessibility;
-(id)accessibilityValueText;
-(id)accessibilityHintText;
-(id)accessibilityHint;
-(id)accessibilityValue;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)resetAppearance;
-(void)setProgress:(float)progress;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)addTransitionAnimation;
-(void)setBubbleHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setDimmed:(BOOL)dimmed;
-(void)messageTextView:(id)view willShowMoreOptionsForTextBlock:(id)textBlock completionHandler:(id)handler;
-(void)messageTextView:(id)view didSelectTextBlock:(id)block;
-(void)previewingContext:(id)context commitViewController:(id)controller;
-(id)previewingContext:(id)context viewControllerForLocation:(CGPoint)location;
-(void)prepareFor3DTouchPreviewWithContext:(id)context;
-(id)registerSubviewsForPreviewingUsingViewController:(id)previewingUsingViewController previewingDelegate:(id)delegate;
-(id)dataForPreviewingContext:(id)previewingContext atLocation:(CGPoint)location;
-(void)unregisterForPreviewing;
-(void)registerForPreviewingUsingViewController:(id)previewingUsingViewController;
-(void)markMessageAsStarred:(id)starred;
-(void)stopSpeakingMessage:(id)message;
-(void)speakMessage:(id)message;
-(void)replyMessageSender:(id)sender;
-(void)addMessageSenderToContacts:(id)contacts;
-(void)forwardMessage:(id)message;
-(void)messageDetails:(id)details;
-(void)deleteMessage:(id)message;
-(void)reallySaveMediaInMessage;
-(void)saveMediaInMessage:(id)message;
-(void)copyMessage:(id)message;
-(void)performCopy;
-(BOOL)canPerformCopy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(void)menuControllerDidHideMenu:(id)menuController;
-(void)didHidePopupMenu;
-(void)didShowPopupMenu;
-(void)showPopupMenu;
-(void)showPopupMenuFromCell;
-(BOOL)canBecomeFirstResponder;
-(id)referenceViewForPopupMenu;
-(CGRect)targetRectForPopupMenu;
-(id)starMessagePopupMenuItemWithAction:(SEL)action;
-(id)shortNameForPopupMenu;
-(void)layoutSubviews;
-(void)reloadBubbleImage;
-(void)performSelectionRefusedAnimation;
-(void)updateStarIndicatorAnimated:(BOOL)animated;
-(void)setCellData:(id)data delegate:(id)delegate;
-(void)refreshUI;
-(void)showAlertButton:(BOOL)button animated:(BOOL)animated;
-(void)alertButtonTapped:(id)tapped;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)handleLongPressOnBubbleWithLocation:(CGPoint)location;
-(void)_internalHandleLongPressGesture:(id)gesture;
-(void)handleDoubleTapOnBubbleWithLocation:(CGPoint)location;
-(void)_internalHandleDoubleTapGesture:(id)gesture;
-(void)handleTapOnBubbleWithLocation:(CGPoint)location;
-(void)_internalHandleTapGesture:(id)gesture;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)handleSwipeGesture:(id)gesture;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _WADividerCellBackground : UIView {
	UIImageView* _imageViewTop;
	UIImageView* _imageViewMiddle;
	UIImageView* _imageViewBottom;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WADividerCell : WATranslucentTableViewCell {
	UIView* _backgroundView;
	UIView* _blurredBackgroundTrackingView;
}
@property(copy, nonatomic) NSString* title;
+(BOOL)selectable;
+(float)rowHeight;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)reloadFonts;
-(id)blurMaskTrackingView;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAAudioMessageCell : WAMessageCell {
	UIButton* _buttonPlayPauseDownload;
	BOOL _playerWasPlaying;
	UISlider* _playerScrubber;
	UITapGestureRecognizer* _voiceOverSingleTapGesture;
	UIProgressView* _progressView;
	UISlider* _uploadScrubber;
	NSTimer* _uploadProgressUpdateTimer;
	int _uploadProgressPosition;
	UIImageView* _micIndicator;
	UIImageView* _mediaThumbnail;
	UILabel* _labelAudioDuration;
	UIImageView* _broadcastImageView;
	BOOL _allowVoiceOverAnnouncement;
	BOOL _uploadOrDownloadInProgress;
	BOOL _announceUploadOrDownloadCompletion;
	NSString* _voiceOverPositionText;
	BOOL _allowVoiceOverAction;
	int _audioDuration;
	float _scrubberSkipValue;
}
+(float)maximumBubbleWidthForCellWidth:(float)cellWidth;
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
+(id)cellReuseIdentifier;
+(void)initialize;
-(void).cxx_destruct;
-(void)updateControlsForCurrentVoiceOverStatus;
-(void)handleSingleTapVoiceOverOnly:(id)only;
-(void)voiceOverStatusChanged:(id)changed;
-(void)accessibilityDecrement;
-(void)accessibilityIncrement;
-(unsigned long long)accessibilityTraits;
-(id)accessibilityPositionString;
-(id)accessibilityHintText;
-(id)accessibilityValue;
-(id)accessibilityLabel;
-(void)playerScrubberDraggingEnded:(id)ended;
-(void)playerScrubberDraggingStarted:(id)started;
-(void)playOrPauseAudio:(id)audio;
-(void)startDownloadingAudio:(id)audio;
-(void)cancelUploadOrDownload:(id)download;
-(void)uploadProgressUpdate:(id)update;
-(void)updatePlayedIndication;
-(void)updateDurationLabel;
-(void)updatePushToTalkControls;
-(void)layoutSubviews;
-(void)setBubbleHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setProgress:(float)progress;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)setCellData:(id)data delegate:(id)delegate;
-(void)dealloc;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAEditableImagePreviewScrollView : WAEditableImageScrollView {
	BOOL _performRotationAfterZooming;
	BOOL _suppressLayout;
	double _animationDuration;
	float _springDamping;
	float _initialVelocity;
}
@property(assign, nonatomic) __weak id<WAEditableImagePreviewScrollViewEditingDelegate> editingDelegate;
-(void)scrollViewDidEndZooming:(id)scrollView withView:(id)view atScale:(float)scale;
-(void)reallyRotateCounterClockwise;
-(void)rotateCounterClockwise;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAFriendLocationAnnotation : NSObject <MKAnnotation> {
	NSString* _fullName;
	int lastUpdateMinutes;
	CLLocation* _friendLocation;
	NSString* _jid;
	NSString* _contactName;
	NSString* _subtitle;
}
@property(readonly, copy, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) XXStruct_gLbvpC coordinate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* subtitle;
@property(retain, nonatomic) NSString* contactName;
@property(retain, nonatomic) NSString* jid;
@property(retain, nonatomic) CLLocation* friendLocation;
-(void).cxx_destruct;
-(void)updateSubtitle;
-(id)initForJid:(id)jid location:(id)location;
@end

__attribute__((visibility("hidden")))
@interface XMPPAckStanza : XMPPStanza {
}
@property(readonly, assign, nonatomic) BOOL negative;
@property(readonly, assign, nonatomic) int count;
@property(assign, nonatomic) unsigned callType;
@property(assign, nonatomic) unsigned notificationType;
@property(assign, nonatomic) unsigned messageType;
@property(assign, nonatomic) unsigned receiptType;
@property(assign, nonatomic) unsigned ackClass;
+(unsigned)typeForString:(id)string;
+(id)stringForType:(unsigned)type;
+(id)stringsForTypes;
-(id)log;
-(id)initWithClass:(unsigned)aClass;
@end

__attribute__((visibility("hidden")))
@interface WAStarredMessageCellHeaderView : UIView {
	UILabel* _participantNameLabel;
	UILabel* _separatorLabel;
	UILabel* _groupNameLabel;
	UILabel* _dateLabel;
	BOOL _canShowGroupName;
	UIEdgeInsets _textInsets;
}
@property(assign, nonatomic) BOOL canShowGroupName;
@property(assign, nonatomic) UIEdgeInsets textInsets;
+(float)preferredHeightForCellData:(id)cellData;
+(id)contactNameForCellData:(id)cellData;
-(void).cxx_destruct;
-(void)configureWithCellData:(id)cellData;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAVideoPreviewStatusView : UIView {
	UILabel* _progressLabel;
	UIProgressView* _progressView;
}
@property(retain, nonatomic) UIColor* textColor;
@property(assign, nonatomic) float progress;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAVideoPreviewViewController : WAViewController <WACaptionBarDelegate, UIGestureRecognizerDelegate> {
	WAVideoTranscoder* _transcoder;
	NSTimer* _progressTimer;
	NSObject<OS_dispatch_group>* _transcodeDispatchGroup;
	int _transcodeJobID;
	UIBarButtonItem* _cancelButton;
	BOOL _requiresTranscoding;
	BOOL _sendButtonTapped;
	BOOL _showsBackButton;
	NSString* _caption;
	NSURL* _videoURL;
	NSURL* _outputFileURL;
	NSURL* _referenceURL;
	NSURL* _assetLibraryURL;
	id _assetIdentifier;
	id<WAVideoPreviewViewControllerDelegate> _delegate;
	WAVideoPreviewStatusView* _progressView;
	WADoneWithSpinnerBarButtonItem* _sendButton;
	WACaptionBar* _captionBar;
	unsigned long long _videoFileSize;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL showsBackButton;
@property(assign, nonatomic, getter=isProgressViewHidden) BOOL progressViewHidden;
@property(readonly, assign, nonatomic) WACaptionBar* captionBar;
@property(readonly, assign, nonatomic) BOOL sendButtonTapped;
@property(readonly, assign, nonatomic) WADoneWithSpinnerBarButtonItem* sendButton;
@property(retain, nonatomic) WAVideoPreviewStatusView* progressView;
@property(assign, nonatomic) __weak id<WAVideoPreviewViewControllerDelegate> delegate;
@property(copy, nonatomic) id assetIdentifier;
@property(copy, nonatomic) NSURL* assetLibraryURL;
@property(copy, nonatomic) NSURL* referenceURL;
@property(copy, nonatomic) NSURL* outputFileURL;
@property(assign, nonatomic) BOOL requiresTranscoding;
@property(assign, nonatomic) unsigned long long videoFileSize;
@property(copy, nonatomic) NSURL* videoURL;
@property(copy, nonatomic) NSString* caption;
+(int)captionBarStyle;
+(BOOL)movieFileAtURL:(id)url hasSameDurationAsMovieFileAtURL:(id)url2;
+(void)controllerWithURL:(id)url identifier:(id)identifier completion:(id)completion;
+(id)controllerWithURL:(id)url;
+(id)controller;
-(void).cxx_destruct;
-(void)captionBarDidChangeText:(id)captionBar;
-(void)captionBarDidFinishEditing:(id)captionBar;
-(void)captionBarDidHideKeyboard:(id)captionBar;
-(void)captionBarWillHideKeyboard:(id)captionBar;
-(void)captionBarWillShowKeyboard:(id)captionBar;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)viewTapped:(id)tapped;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)didProcessVideo;
-(void)willProcessVideo;
-(void)processTranscodedVideoOfDuration:(double)duration atURL:(id)url referenceURL:(id)url3;
-(id)videoCompositionForTranscode;
-(id)assetToTranscode;
-(void)reallyProcessVideo;
-(void)setNeedsVideoProcessing;
-(void)cancelVideoProcessing;
-(XXStruct_yD8eWC)timeRangeToExport;
-(BOOL)internalRequiresTranscoding;
-(void)waitForVideoProcessingToFinish;
-(void)sendVideo:(id)video;
-(void)updateSendButton;
-(void)updateProgress:(id)progress;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)cancel:(id)cancel;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface XMPPContact : NSObject {
	BOOL _whatsapp;
	NSString* _number;
	NSString* _jid;
}
@property(assign, nonatomic) BOOL whatsapp;
@property(copy, nonatomic) NSString* jid;
@property(copy, nonatomic) NSString* number;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface WAMapTypeSegmentedControl : UISegmentedControl {
}
@property(assign, nonatomic) unsigned mapType;
+(id)controlWithTarget:(id)target selector:(SEL)selector;
@end

__attribute__((visibility("hidden")))
@interface VerificationEncrypter : NSObject {
}
+(void)deleteRecoveryToken;
+(void)removeRecoveryTokenFile;
+(BOOL)setRecoveryToken:(id)token;
+(BOOL)setRecoveryToken:(id)token phoneNumber:(id)number;
+(id)generateRecoveryToken;
+(id)recoveryToken;
+(id)recoveryToken:(id)token;
+(id)abbreviatedPhoneNumber:(id)number;
+(id)recoveryTokenFilePath;
+(id)readRecoveryTokenFromFile:(id)file;
+(BOOL)writeRecoveryTokenToFile:(id)file ccAndPhoneNumber:(id)number;
+(id)readRecoveryTokenFromKeychain;
+(void)writeRecoveryTokenToKeychain:(id)keychain;
+(id)decryptData:(id)data saltLength:(int)length encodedSecret:(id)secret phoneNumberSecret:(id)secret4;
+(id)saltAndEncryptData:(id)data saltLength:(int)length encodedSecret:(id)secret phoneNumberSecret:(id)secret4;
+(id)key:(id)key encodedSecret:(id)secret phoneNumberSecret:(id)secret3;
@end

__attribute__((visibility("hidden")))
@interface WABackupInfoTableCell : UITableViewCell {
	WAAnimatedGearsView* _gearsView;
	UILabel* _labelHelperText;
	NSMutableArray* _detailLabels;
}
@property(retain, nonatomic) NSMutableArray* detailLabels;
@property(readonly, assign, nonatomic) UILabel* labelHelperText;
@property(retain, nonatomic) NSString* detailText;
@property(readonly, assign, nonatomic) WAAnimatedGearsView* gearsView;
-(void).cxx_destruct;
-(UIEdgeInsets)layoutMargins;
-(float)heightForContentWidth:(float)contentWidth;
-(void)updateFonts;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _WAForwardPickerNoContactsTableViewCell : UITableViewCell {
}
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAForwardPickerLoadingContactsTableViewCell : UITableViewCell {
}
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAForwardPickerDataSource : NSObject <UITableViewDataSource> {
	NSArray* _sections;
	int _totalCount;
	id<WAForwardPickerDataSourceDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) NSString* title;
@property(assign, nonatomic) __weak id<WAForwardPickerDataSourceDelegate> delegate;
@property(readonly, assign, nonatomic) UIEdgeInsets separatorInset;
@property(readonly, assign, nonatomic) BOOL showsEmptyListView;
@property(readonly, assign, nonatomic) BOOL allowsSearch;
@property(readonly, assign, nonatomic, getter=isLoaded) BOOL loaded;
@property(readonly, assign, nonatomic) int totalCount;
-(void).cxx_destruct;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)contactInfoAtIndexPath:(id)indexPath;
-(void)setNeedsReloadSections;
-(id)loadSections;
-(id)allContactInfos;
-(id)sections;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAForwardPickerRecentsDataSource : WAForwardPickerDataSource {
}
-(id)loadSections;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface WAForwardPickerGroupsDataSource : WAForwardPickerDataSource {
}
-(id)loadSections;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface WAForwardPickerBroadcastsDataSource : WAForwardPickerDataSource {
}
-(id)loadSections;
-(BOOL)allowsSearch;
-(UIEdgeInsets)separatorInset;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface WAForwardPickerContactsDataSource : WAForwardPickerDataSource {
	BOOL _needsRefreshOnContactsSync;
}
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)loadSections;
-(UIEdgeInsets)separatorInset;
-(BOOL)showsEmptyListView;
-(void)syncManagerDidFinishSync:(id)syncManager;
-(id)title;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAForwardPickerSearchDataSource : WAForwardPickerDataSource <WAContactsSearchControllerDelegate> {
	WAContactsSearchController* _searchController;
	NSArray* _searchResults;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)contactsSearchControllerDelegateDidInvalidateSearchResults:(id)contactsSearchControllerDelegate;
-(void)updateSearchText:(id)text;
-(id)loadSections;
-(void)configureWithContactsFromDataSource:(id)dataSource;
-(BOOL)allowsSearch;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMessageBaseKey : NSManagedObject {
}
@property(assign, nonatomic) double timestamp;
@property(retain, nonatomic) NSData* baseKey;
@property(retain, nonatomic) NSString* recipientJID;
@property(retain, nonatomic) NSString* stanzaId;
@end

__attribute__((visibility("hidden")))
@interface WAAnimatedGearsView : UIView {
	UIImageView* _gearsBase;
	UIImageView* _border;
	UIImageView* _spinner;
	BOOL _animating;
}
@property(readonly, assign, nonatomic, getter=isAnimating) BOOL animating;
+(CGSize)baseSize;
-(void).cxx_destruct;
-(void)stopAnimating;
-(void)startAnimating;
-(void)layoutSubviews;
-(void)setFrame:(CGRect)frame;
-(void)configure;
-(void)initialize;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WACriticallyLowStorageViewController : WAViewController {
	UIButton* _exitButton;
	UIView* _contentView;
	UILabel* _labelItem1;
	UILabel* _labelItem2;
	UILabel* _labelItem3;
	UILabel* _labelTitle;
	UILabel* _labelBody;
	UILabel* _labelDeleteApps;
	UILabel* _labelDeleteVideos;
	UILabel* _labelManageStorage;
}
@property(retain, nonatomic) UILabel* labelManageStorage;
@property(retain, nonatomic) UILabel* labelDeleteVideos;
@property(retain, nonatomic) UILabel* labelDeleteApps;
@property(retain, nonatomic) UILabel* labelBody;
@property(retain, nonatomic) UILabel* labelTitle;
@property(retain, nonatomic) UILabel* labelItem3;
@property(retain, nonatomic) UILabel* labelItem2;
@property(retain, nonatomic) UILabel* labelItem1;
@property(retain, nonatomic) UIView* contentView;
@property(assign, nonatomic) __weak UIButton* exitButton;
-(void).cxx_destruct;
-(void)exitApp:(id)app;
-(unsigned)supportedInterfaceOrientations;
-(int)preferredStatusBarStyle;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WACameraFaceObject : NSObject {
	int _faceID;
	float _rollAngle;
	double _beginTime;
	CGRect _bounds;
	CGRect _rawBounds;
}
@property(readonly, assign, nonatomic) float area;
@property(assign, nonatomic) CGRect rawBounds;
@property(assign, nonatomic) float rollAngle;
@property(assign, nonatomic) CGRect bounds;
@property(readonly, assign, nonatomic) double beginTime;
@property(readonly, assign, nonatomic) int faceID;
-(id)initWithFaceID:(int)faceID beginTime:(double)time;
@end

__attribute__((visibility("hidden")))
@interface WACameraQRCodeObject : NSObject {
	NSString* _code;
	double _time;
	CGRect _bounds;
}
@property(copy, nonatomic) NSString* code;
@property(assign, nonatomic) CGRect bounds;
@property(assign, nonatomic) double time;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WACameraController : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCaptureAudioDataOutputSampleBufferDelegate, WACameraPreviewViewDelegate> {
	WACameraPreviewView* _previewView;
	NSObject<OS_dispatch_queue>* _captureQueue;
	NSObject<OS_dispatch_queue>* _audioCaptureQueue;
	NSObject<OS_dispatch_queue>* _videoCaptureQueue;
	NSObject<OS_dispatch_group>* _cameraConfigGroup;
	NSMutableDictionary* _faceObjects;
	BOOL _isChangingCamerasInteractively;
	double _lastAutoFocusOnFaceTime;
	BOOL _startSessionOnDidEnterForeground;
	id _defaultAudioActivity;
	id _videoRecordingAudioActivity;
	int _cameraState;
	AVCaptureSession* _captureSession;
	AVCaptureDeviceInput* _videoDeviceInput;
	AVCaptureDeviceInput* _audioDeviceInput;
	AVCaptureStillImageOutput* _stillImageOutput;
	AVCaptureVideoDataOutput* _videoDataOutput;
	AVCaptureAudioDataOutput* _audioDataOutput;
	AVCaptureMetadataOutput* _metadataOutput;
	AVAssetWriterInput* _audioWriterInput;
	AVAssetWriterInput* _videoWriterInput;
	opaqueCMFormatDescription* _audioFormatDescription;
	opaqueCMFormatDescription* _videoFormatDescription;
	CIContext* _ciContext;
	BOOL _lockExposureAfterAutoExposure;
	BOOL _needsReexposure;
	double _lastExposureLockTime;
	CGPoint _exposurePointOfInterest;
	opaqueCMBufferQueue* _previewBufferQueue;
	unsigned long long _exposureLockID;
	int _deviceOrientationForCapture;
	AVAssetWriter* _assetWriter;
	BOOL _isAssetWriterSessionStarted;
	BOOL _needsFinishAssetWriterSession;
	int _acceptSampleBuffersLock;
	BOOL _isAssetWriterAcceptingSampleBuffers;
	int _videoSampleTimeLock;
	XXStruct_pwHToB _timeOfFirstAppendedVideoSampleBuffer;
	XXStruct_pwHToB _timeOfLastAppendedVideoSampleBuffer;
	XXStruct_pwHToB _maximumRecordingDuration;
	AVCaptureSession* _audioCaptureSession;
	struct {
		XXStruct_pwHToB duration;
		XXStruct_pwHToB presentationTimeStamp;
		XXStruct_pwHToB decodeTimeStamp;
	} _sampleTimingInfo;
	BOOL _needsStartAssetWriterWhenAudioFormatDescriptionIsReady;
	int _startSessionCounter;
	BOOL _useBackCamera;
	BOOL _exposurePointOfInterestSupported;
	BOOL _focusPointOfInterestSupported;
	BOOL _flashActive;
	BOOL _running;
	id<WACameraControllerDelegate> _delegate;
	int _cameraMode;
	NSSet* _supportedFlashModes;
	int _flashMode;
	float _maximumZoomFactor;
	float _currentZoomFactor;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isRecordingVideo) BOOL recordingVideo;
@property(readonly, assign) XXStruct_pwHToB durationOfCurrentVideoRecording;
@property(retain, nonatomic) WACameraFilter* filter;
@property(readonly, copy, nonatomic) NSArray* faceObjects;
@property(readonly, assign, nonatomic, getter=isRunning) BOOL running;
@property(readonly, assign, nonatomic) float currentZoomFactor;
@property(readonly, assign, nonatomic) float maximumZoomFactor;
@property(readonly, assign, nonatomic, getter=isFlashActive) BOOL flashActive;
@property(readonly, assign, nonatomic) int flashMode;
@property(readonly, assign, nonatomic) NSSet* supportedFlashModes;
@property(readonly, assign, nonatomic) BOOL focusPointOfInterestSupported;
@property(readonly, assign, nonatomic) BOOL exposurePointOfInterestSupported;
@property(readonly, assign, nonatomic) int cameraMode;
@property(readonly, assign, nonatomic) BOOL readyForMediaCapture;
@property(readonly, assign, nonatomic) BOOL useBackCamera;
@property(readonly, assign, nonatomic) CGSize previewImageSize;
@property(assign, nonatomic, getter=isPreviewPaused) BOOL previewPaused;
@property(readonly, assign, nonatomic) UIView* previewView;
@property(assign, nonatomic) __weak id<WACameraControllerDelegate> delegate;
+(int)imageOrientationForSourceVideoOrientation:(int)sourceVideoOrientation targetVideoOrientation:(int)orientation backFacingCamera:(BOOL)camera;
+(int)numberOfRightAnglesForVideoOrientation:(int)videoOrientation;
+(int)frontCameraVideoOrientationForDeviceOrientation:(int)deviceOrientation;
+(int)backCameraVideoOrientationForDeviceOrientation:(int)deviceOrientation;
+(id)videoCaptureDeviceWithPreferredPosition:(int)preferredPosition;
+(BOOL)hasActiveInstances;
+(void)recoverUnsavedMediaIfNeeded;
+(id)temporaryMediaPathWithExtension:(id)extension;
+(id)cameraMediaDirectory;
+(void)requestCameraPermissionWithCompletionHandler:(id)completionHandler;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)handleCaptureSessionRuntimeError:(id)error;
-(void)mediaServicesWereReset:(id)reset;
-(void)mediaServicesWereLost:(id)lost;
-(void)captureDeviceSubjectAreaDidChange:(id)captureDeviceSubjectArea;
-(id)imageFromImageBuffer:(CVBufferRef)imageBuffer imageOrientation:(int)orientation;
-(id)imageFromSampleBuffer:(opaqueCMSampleBuffer*)sampleBuffer;
-(void)drainBufferQueue:(opaqueCMBufferQueue*)queue;
-(opaqueCMSampleBuffer*)dequeueAndRetainBestSampleBufferInQueue:(opaqueCMBufferQueue*)queue forPresentationTime:(XXStruct_pwHToB)presentationTime;
-(void)updatePreviewWithSampleBuffer:(opaqueCMSampleBuffer*)sampleBuffer;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)performAnimationWithDuration:(double)duration key:(id)key callback:(id)callback completion:(id)completion;
-(void)blockCurrentThreadUntilDisplay;
-(id)redrawPreviewAndSnapshot;
-(void)cameraPreviewViewDidChangeImageSize:(id)cameraPreviewView;
-(void)getZoomFactorWithCompletionBlock:(id)completionBlock;
-(void)setZoomFactor:(float)factor completion:(id)completion;
-(float)maximumZoomFactorForCurrentSettings;
-(void)updatePointOfInterestWithFaceMetadata;
-(id)faceObjectWithMetadataObject:(id)metadataObject fromConnection:(id)connection;
-(id)qrCodeObjectWithMetadataObject:(id)metadataObject;
-(void)captureOutput:(id)output didOutputMetadataObjects:(id)objects fromConnection:(id)connection;
-(void)setUpMetadataOutputForCameraMode:(int)cameraMode;
-(void)finishAssetWriterSession;
-(void)appendSampleBuffer:(opaqueCMSampleBuffer*)buffer toWriterInput:(id)writerInput;
-(void)cleanUpAfterRecording;
-(void)didFailToPrepareRecording;
-(void)startAssetWriterSession;
-(void)cancelVideoRecording;
-(void)stopVideoRecording;
-(XXStruct_pwHToB)preferredFrameRateForDevice:(id)device;
-(void)resetCaptureDeviceAfterVideoRecording:(id)recording;
-(void)prepareCaptureDeviceForVideoRecording:(id)videoRecording;
-(BOOL)startVideoRecording;
-(void)performStillImageCaptureAnimation;
-(void)captureImageWithCompletion:(id)completion;
-(void)exposeAtPoint:(CGPoint)point;
-(void)exposeAndFocusWithMode:(int)mode atDevicePoint:(CGPoint)devicePoint monitorSubjectAreaChange:(BOOL)change;
-(void)unlockExposure;
-(void)lockExposure;
-(BOOL)isHoldingExposureLock;
-(void)setDeviceOrientation:(int)orientation;
-(void)resetPointOfInterest;
-(void)setPointOfInterest:(CGPoint)interest;
-(id)supportedFlashModesForCurrentDevice;
-(void)internalSetFlashMode:(int)mode;
-(void)setFlashMode:(int)mode completion:(id)completion;
-(void)internalSetCameraMode:(int)mode;
-(void)setCameraMode:(int)mode fromQueue:(id)queue completion:(id)completion;
-(void)internalSetUseBackCamera:(BOOL)camera forCameraMode:(int)cameraMode;
-(void)handleAudioSessionRouteChangeNotification:(id)notification;
-(void)setUpMicrophoneForCameraPosition:(BOOL)cameraPosition;
-(void)setUseBackCamera:(BOOL)camera forCameraMode:(int)cameraMode fromQueue:(id)queue completion:(id)completion;
-(void)setUseBackCamera:(BOOL)camera completion:(id)completion;
-(CGAffineTransform)previewTransform;
-(void)stopRunning;
-(void)startRunning;
-(void)dealloc;
-(id)initWithCameraMode:(int)cameraMode useBackCamera:(BOOL)camera;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAProfilePictureOperation : NSOperation {
	BOOL _isExecuting;
	BOOL _isFinished;
	NSString* _jid;
}
@property(copy, nonatomic) NSString* jid;
+(id)operationForJID:(id)jid;
-(void).cxx_destruct;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(BOOL)isConcurrent;
-(void)finish;
-(void)start;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendTitleView : UIView {
	UIButton* _deleteButton;
	UIButton* _rotateButton;
	UIButton* _cropButton;
	BOOL _cropping;
	BOOL _editingButtonsHidden;
	id<WAMultiSendTitleViewDelegate> _delegate;
}
@property(assign, nonatomic, getter=isEditingButtonsHidden) BOOL editingButtonsHidden;
@property(assign, nonatomic, getter=isCropping) BOOL cropping;
@property(assign, nonatomic) __weak id<WAMultiSendTitleViewDelegate> delegate;
+(CGSize)preferredSize;
-(void).cxx_destruct;
-(void)cropButtonTapped:(id)tapped;
-(void)rotateButtonTapped:(id)tapped;
-(void)deleteButtonTapped:(id)tapped;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WACameraFlashLabel : UILabel {
}
@property(assign, nonatomic, getter=isShadowHidden) BOOL shadowHidden;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WACameraFlashSelector : UIControl {
	UIImage* _flashOnImage;
	UIImage* _flashOffImage;
	_WACameraFlashLabel* _autoLabel;
	_WACameraFlashLabel* _offLabel;
	_WACameraFlashLabel* _onLabel;
	float _labelSpacing;
	UIView* _containerView;
	UIImageView* _flashIconView;
	UIColor* _onTintColor;
	UIColor* _offTintColor;
	BOOL _expanded;
	NSArray* _activeLabels;
	NSArray* _supportedFlashModes;
	unsigned _selectedFlashModeIndex;
	int _orientation;
}
@property(readonly, assign, nonatomic) int flashMode;
@property(assign, nonatomic) int orientation;
-(void).cxx_destruct;
-(void)switchToFlashModeAtPoint:(CGPoint)point;
-(void)endTrackingWithTouch:(id)touch withEvent:(id)event;
-(void)cancelTrackingWithEvent:(id)event;
-(BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)layoutViews:(id)views from:(CGPoint)from spacing:(float)spacing;
-(void)layoutSubviews;
-(void)collapse;
-(void)setExpanded:(BOOL)expanded animated:(BOOL)animated;
-(void)setOrientation:(int)orientation animated:(BOOL)animated;
-(void)switchToNextFlashMode;
-(id)accessibilityValue;
-(void)setFlashMode:(int)mode supportedFlashModes:(id)modes;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WABasicPresentationAnimationController : NSObject <UIViewControllerAnimatedTransitioning> {
	BOOL _presenting;
	double _duration;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) double duration;
@property(assign, nonatomic, getter=isPresenting) BOOL presenting;
-(void)animateDismissTransition:(id)transition;
-(void)animatePresentTransition:(id)transition;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAPTTButton : UIButton {
}
-(BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface WAChatBar : UIView <WAInputTextViewDelegate, UIGestureRecognizerDelegate, WAWebURLPreviewViewDelegate> {
	BOOL _sendButtonHidden;
	UIView* _contentView;
	UIView* _backgroundView;
	UIView* _inputBoxView;
	WAInputTextView* _inputTextView;
	UIView* _placeholderTapReceiverView;
	CGPoint _selectionPoint;
	UITapGestureRecognizer* _tapGestureRecognizer;
	UILongPressGestureRecognizer* _longPressGestureRecognizer;
	UISwipeGestureRecognizer* _downSwipeGestureRecognizer;
	BOOL _clearingTextViewAfterSendingMessage;
	UIImageView* _dividerImageView;
	UIScrollView* _statusBarTapDetectionScrollView;
	WAWebURLPreviewView* _webURLPreview;
	UILabel* _pttRecordingProgressLabel;
	WAAnimatedCancelLabel* _pttSlideToCancelLabel;
	UIView* _pttSlideToCancelLabelMaskView;
	UIImageView* _pttMic;
	UIImageView* _pttMicInactive;
	UIImageView* _pttBucket;
	UIImageView* _pttBucketLid;
	CGPoint _pttButtonOriginalTouchPoint;
	BOOL _isPlaceholder;
	BOOL _preservesInnerContentLayoutOnBoundsChange;
	BOOL _pttRecordingIsActive;
	BOOL _receivedLongPress;
	BOOL _enabled;
	BOOL _editingEnabled;
	BOOL _includeCameraButton;
	id<WAChatBarDelegate> _delegate;
	UIButton* _sendButton;
	UIButton* _attachMediaButton;
	UIButton* _cameraButton;
	UIButton* _pttButton;
	UIPanGestureRecognizer* _panGestureRecognizer;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WAWebPageMetadata* webPageMetadata;
@property(assign, nonatomic) BOOL includeCameraButton;
@property(assign, nonatomic) BOOL editingEnabled;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) BOOL receivedLongPress;
@property(readonly, assign, nonatomic) UIPanGestureRecognizer* panGestureRecognizer;
@property(readonly, assign, nonatomic) float visibleHeight;
@property(readonly, assign, nonatomic) CGRect contentFrame;
@property(copy, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) BOOL pttRecordingIsActive;
@property(readonly, assign, nonatomic) WAInputTextView* inputTextView;
@property(readonly, assign, nonatomic) UIButton* pttButton;
@property(readonly, assign, nonatomic) UIButton* cameraButton;
@property(readonly, assign, nonatomic) UIButton* attachMediaButton;
@property(readonly, assign, nonatomic) UIButton* sendButton;
@property(assign, nonatomic) __weak id<WAChatBarDelegate> delegate;
@property(assign, nonatomic) BOOL preservesInnerContentLayoutOnBoundsChange;
@property(readonly, assign, nonatomic) BOOL isPlaceholder;
+(void)initialize;
+(float)textViewMinimumHeight;
+(float)preferredInitialHeight;
+(float)verticalPadding;
-(void).cxx_destruct;
-(void)cancelPTTRecording;
-(void)animatePttControlsOutWithDiscardAnimation:(BOOL)discardAnimation;
-(void)setRecordingMicActive:(BOOL)active;
-(void)animatePttControlsIn;
-(void)setPTTRecordingTime:(double)time;
-(void)pttButtonTrackSliding:(id)sliding withEvent:(id)event;
-(void)pttButtonReleased:(id)released withEvent:(id)event;
-(void)pttButtonPressed:(id)pressed withEvent:(id)event;
-(void)configurePTTViews;
-(void)textViewDictationDidEnd:(id)textViewDictation;
-(void)textViewDidChange:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)textViewDidPasteImage:(id)textView;
-(void)textView:(id)view needsHeightChangedTo:(float)to;
-(float)textViewMaximumHeight:(id)height;
-(BOOL)scrollViewShouldScrollToTop:(id)scrollView;
-(void)handleLongPress:(id)press;
-(void)handlePan:(id)pan;
-(void)hideKeyboard;
-(void)forceShowKeyboard;
-(void)showKeyboard;
-(BOOL)isDictationInProgress;
-(BOOL)isKeyboardVisible;
-(void)relayoutWebURLPreview;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)isInDictationMode;
-(void)acceptAutoCorrection;
-(void)showPopupMenuForMessageCell:(id)messageCell;
-(void)clearAnimationInSubviews:(id)subviews;
-(void)clearAnimations;
-(void)updateConstraints;
-(void)internalSetInputTextViewHeight:(float)height webURLPreviewHeight:(float)height2 animated:(BOOL)animated;
-(void)reallySetInputTextViewHeight:(float)height animated:(BOOL)animated;
-(void)setInputTextViewHeight:(float)height animated:(BOOL)animated;
-(void)setWebURLPreviewHeight:(float)height animated:(BOOL)animated;
-(void)didSendMessage;
-(void)cameraButtonTapped:(id)tapped;
-(void)attachMediaButtonTapped:(id)tapped;
-(void)applicationDidReceiveCommandReturnEvent:(id)application;
-(void)sendButtonTapped:(id)tapped;
-(void)updateChatBarAnimated:(BOOL)animated;
-(void)setNeedsUpdateButtons;
-(void)restoreSelectedTextRangeFromChatBar:(id)chatBar showMenu:(BOOL)menu;
-(void)clearSelectionPoint;
-(void)configureWithChatBar:(id)chatBar;
-(void)redraw;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)compactLayout;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(float)singleLineHeight;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation;
-(void)webURLPreviewViewDidDismiss:(id)webURLPreviewView;
-(void)configureViews;
-(void)configureViews6;
-(void)fontSizeDidChange:(id)fontSize;
-(void)didMoveToWindow;
-(void)willMoveToWindow:(id)window;
-(void)inputTextViewTapped:(id)tapped;
-(void)forceInputTextViewToResignFirstResponder;
-(BOOL)isHorizontallyFlipped;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame isPlaceHolder:(BOOL)holder;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAURLRequestConfig : NSObject <NSSecureCoding, NSCopying> {
	BOOL _allowsCellularAccess;
	NSURL* _remoteURL;
	NSError* _previousError;
	int _maxRetryCount;
	double _timeoutInterval;
}
@property(assign, nonatomic) int maxRetryCount;
@property(assign, nonatomic) double timeoutInterval;
@property(assign, nonatomic) BOOL allowsCellularAccess;
@property(copy, nonatomic) NSError* previousError;
@property(copy, nonatomic) NSURL* remoteURL;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPStatus : NSObject {
	NSString* _text;
	NSString* _jid;
	NSDate* _timestamp;
	unsigned _error;
}
@property(assign, nonatomic) unsigned error;
@property(retain, nonatomic) NSDate* timestamp;
@property(copy, nonatomic) NSString* jid;
@property(copy, nonatomic) NSString* text;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAEmptyChatListController : NSObject <UITableViewDataSource, UITableViewDelegate> {
	UITableViewCell* _tellAFriendCell;
	id<WAEmptyChatListControllerDelegate> _delegate;
	UITableView* _tableView;
	UIView* _viewHelperText;
	UIWebView* _labelHelperTop;
	UILabel* _labelHelperBottom;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* labelHelperBottom;
@property(retain, nonatomic) UIWebView* labelHelperTop;
@property(retain, nonatomic) UIView* viewHelperText;
@property(readonly, assign, nonatomic) UITableView* tableView;
@property(assign, nonatomic) __weak id<WAEmptyChatListControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reloadTableView;
-(id)topHelperHTMLStringWithFont:(id)font;
-(void)layoutContent;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface WAActionManager : NSObject {
	NSOperationQueue* _queue;
	unsigned _options;
	int _canceling;
	int _finishing;
	NSPort* _mainThreadWaitPort;
	NSMutableDictionary* _phaseOperations;
	NSLock* _updatePhaseLock;
	unsigned _latestPhase;
	WAWaitOperation* _wait;
	WAFinishOperation* _finish;
	unsigned _phase;
	id _completion;
}
@property(readonly, assign, nonatomic) unsigned maximumPhase;
@property(readonly, assign, nonatomic) NSString* errorDomain;
@property(readonly, assign) BOOL canceled;
@property(copy, nonatomic) id completion;
@property(readonly, assign, nonatomic) float progress;
@property(readonly, assign, nonatomic) unsigned phase;
-(void).cxx_destruct;
-(float)progressForOperations:(id)operations;
-(void)setOperations:(id)operations forPhase:(unsigned)phase;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)incrementPhase;
-(void)setPhase:(unsigned)phase;
-(void)manuallyUpdatePhaseTo:(unsigned)to;
-(void)updatePhase;
-(void)runBlockOnMainThread:(id)thread waitUntilDone:(BOOL)done;
-(void)runBlock:(id)block;
-(void)waitForCompletion;
-(void)runMainThreadRunLoop;
-(BOOL)shouldFinish;
-(BOOL)shouldCancel;
-(void)cancelWithReason:(unsigned)reason;
-(void)finish;
-(id)errorForCode:(unsigned)code;
-(void)completeWithReason:(unsigned)reason;
-(void)addOperations:(id)operations;
-(void)addOperation:(id)operation;
-(void)start;
-(BOOL)checkOption:(unsigned)option;
-(void)dealloc;
-(id)initWithOptions:(unsigned)options;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface FeedbackInputViewController : WAViewController <UITextViewDelegate> {
	float _keyboardHeight;
	id<FeedbackInputControllerDelegate> _delegate;
	UITableView* _tableViewFeedback;
	UITableViewCell* _cellFeedbackInput;
	UITextView* _textViewFeedback;
	UILabel* _labelPlaceholder;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* labelPlaceholder;
@property(retain, nonatomic) UITextView* textViewFeedback;
@property(retain, nonatomic) UITableViewCell* cellFeedbackInput;
@property(retain, nonatomic) UITableView* tableViewFeedback;
@property(assign, nonatomic) __weak id<FeedbackInputControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)keyboardWillShow:(id)keyboard;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidChange:(id)textView;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)nextAction:(id)action;
-(void)cancelAction:(id)action;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface DeleteConfirmationController : WAViewController {
	UIView* _spinnerBackgroundView;
	UIActivityIndicatorView* _spinner;
	NSString* _feedbackText;
	id<DeleteConfirmationControllerDelegate> _delegate;
	UITableView* _tableView;
	UIView* _viewThankYou;
	UILabel* _labelThankYou;
	UIView* _viewDeleteButton;
	UIButton* _buttonDelete;
	UITableViewCell* _cellConfirmation;
	UILabel* _labelTitle;
	UILabel* _labelHelperText;
	UIImageView* _imageSadPhone;
}
@property(retain, nonatomic) UIImageView* imageSadPhone;
@property(retain, nonatomic) UILabel* labelHelperText;
@property(retain, nonatomic) UILabel* labelTitle;
@property(retain, nonatomic) UITableViewCell* cellConfirmation;
@property(retain, nonatomic) UIButton* buttonDelete;
@property(retain, nonatomic) UIView* viewDeleteButton;
@property(retain, nonatomic) UILabel* labelThankYou;
@property(retain, nonatomic) UIView* viewThankYou;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) __weak id<DeleteConfirmationControllerDelegate> delegate;
@property(copy, nonatomic) NSString* feedbackText;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewDidLoad;
-(void)hideSpinnerWithCompletionHandler:(id)completionHandler;
-(void)showSpinner;
-(void)deleteAction;
-(void)cancelAction:(id)action;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface ChangeConfirmationController : WAViewController {
	id<ChangeConfirmationControllerDelegate> _delegate;
	UILabel* _labelHelperText;
	UIImageView* _imageChangeNumber;
}
@property(retain, nonatomic) UIImageView* imageChangeNumber;
@property(retain, nonatomic) UILabel* labelHelperText;
@property(assign, nonatomic) __weak id<ChangeConfirmationControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)wa_fontSizeDidChange;
-(void)viewDidLayoutSubviews;
-(void)loadView;
-(void)nextAction:(id)action;
-(void)cancelAction:(id)action;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WAWebLinkTableViewCell : UITableViewCell {
	NSLayoutConstraint* _imageViewLeadingMarginConstraint;
	NSLayoutConstraint* _contentImageMarginConstraint;
	NSLayoutConstraint* _thumbnailImageViewWidthConstraint;
	UILabel* _contentLabel;
	UILabel* _webURLLabel;
	UIImageView* _thumbnailImageView;
}
@property(assign, nonatomic) __weak UIImageView* thumbnailImageView;
@property(assign, nonatomic) __weak UILabel* webURLLabel;
@property(assign, nonatomic) __weak UILabel* contentLabel;
@property(assign, nonatomic) __weak NSLayoutConstraint* thumbnailImageViewWidthConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* contentImageMarginConstraint;
@property(assign, nonatomic) __weak NSLayoutConstraint* imageViewLeadingMarginConstraint;
+(float)preferredHeight;
-(void).cxx_destruct;
-(void)configureWithMessage:(id)message;
-(void)layoutSubviews;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface WAReceiptTableViewCell : WABaseReceiptTableViewCell {
	UILabel* _nameLabel;
	UIImageView* _receiptIcon;
	UIFont* _nameLabelFont;
}
@property(retain, nonatomic) UIFont* nameLabelFont;
-(void).cxx_destruct;
-(void)setReceiptDate:(id)date;
-(void)layoutSubviews;
-(void)setReceiptType:(int)type isMediaMessage:(BOOL)message;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface FMDatabase : NSObject {
	sqlite3* _db;
	NSString* _databasePath;
	BOOL _logsErrors;
	BOOL _crashOnErrors;
	BOOL _traceExecution;
	BOOL _checkedOut;
	BOOL _shouldCacheStatements;
	BOOL _isExecutingStatement;
	BOOL _inTransaction;
	double _busyTimeout;
	NSMutableDictionary* _cachedStatements;
	NSMutableSet* _openResultSets;
	NSMutableSet* _openFunctions;
	NSDateFormatter* _dateFormat;
}
@property(retain) NSMutableDictionary* cachedStatements;
@property(assign) BOOL logsErrors;
@property(assign) BOOL crashOnErrors;
@property(assign) double busyTimeout;
@property(assign) BOOL checkedOut;
@property(assign) BOOL traceExecution;
+(id)storeableDateFormat:(id)format;
+(BOOL)isSQLiteThreadSafe;
+(id)sqliteLibVersion;
+(id)databaseWithPath:(id)path;
-(void).cxx_destruct;
-(void)makeFunctionNamed:(id)named maximumArguments:(int)arguments withBlock:(id)block;
-(void)setShouldCacheStatements:(BOOL)cacheStatements;
-(BOOL)shouldCacheStatements;
-(id)inSavePoint:(id)savePoint;
-(BOOL)rollbackToSavePointWithName:(id)name error:(id*)error;
-(BOOL)releaseSavePointWithName:(id)name error:(id*)error;
-(BOOL)startSavePointWithName:(id)name error:(id*)error;
-(BOOL)inTransaction;
-(BOOL)beginTransaction;
-(BOOL)beginDeferredTransaction;
-(BOOL)commit;
-(BOOL)rollback;
-(BOOL)update:(id)update withErrorAndBindings:(id*)errorAndBindings;
-(BOOL)executeUpdateWithFormat:(id)format;
-(BOOL)executeUpdate:(id)update withVAList:(void*)valist;
-(BOOL)executeUpdate:(id)update withParameterDictionary:(id)parameterDictionary;
-(BOOL)executeUpdate:(id)update withArgumentsInArray:(id)array;
-(BOOL)executeUpdate:(id)update;
-(BOOL)executeUpdate:(id)update error:(id*)error withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;
-(id)executeQuery:(id)query withVAList:(void*)valist;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array;
-(id)executeQueryWithFormat:(id)format;
-(id)executeQuery:(id)query;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;
-(id)executeQuery:(id)query withParameterDictionary:(id)parameterDictionary;
-(void)extractSQL:(id)sql argumentsList:(void*)list intoString:(id)string arguments:(id)arguments;
-(void)bindObject:(id)object toColumn:(int)column inStatement:(sqlite3_stmt*)statement;
-(int)changes;
-(long long)lastInsertRowId;
-(id)lastError;
-(id)errorWithMessage:(id)message;
-(int)lastErrorCode;
-(BOOL)hadError;
-(id)lastErrorMessage;
-(BOOL)databaseExists;
-(void)warnInUse;
-(BOOL)goodConnection;
-(id)stringFromDate:(id)date;
-(id)dateFromString:(id)string;
-(void)setDateFormat:(id)format;
-(BOOL)hasDateFormatter;
-(BOOL)setKeyWithData:(id)data;
-(BOOL)setKey:(id)key;
-(BOOL)rekeyWithData:(id)data;
-(BOOL)rekey:(id)rekey;
-(void)setCachedStatement:(id)statement forQuery:(id)query;
-(id)cachedStatementForQuery:(id)query;
-(void)resultSetDidClose:(id)resultSet;
-(void)closeOpenResultSets;
-(BOOL)hasOpenResultSets;
-(void)clearCachedStatements;
-(void)setBusyRetryTimeout:(int)timeout;
-(int)busyRetryTimeout;
-(double)retryTimeout;
-(void)setRetryTimeout:(double)timeout;
-(BOOL)close;
-(BOOL)openWithFlags:(int)flags;
-(BOOL)open;
-(const char*)sqlitePath;
-(sqlite3*)sqliteHandle;
-(id)databasePath;
-(void)dealloc;
-(void)finalize;
-(id)initWithPath:(id)path;
-(id)init;
-(BOOL)validateSQL:(id)sql error:(id*)error;
-(BOOL)columnExists:(id)exists columnName:(id)name;
-(void)setUserVersion:(unsigned)version;
-(unsigned)userVersion;
-(void)setApplicationID:(unsigned)anId;
-(unsigned)applicationID;
-(BOOL)columnExists:(id)exists inTableWithName:(id)name;
-(id)getTableSchema:(id)schema;
-(id)getSchema;
-(BOOL)tableExists:(id)exists;
-(id)dateForQuery:(id)query;
-(id)dataForQuery:(id)query;
-(double)doubleForQuery:(id)query;
-(BOOL)boolForQuery:(id)query;
-(long)longForQuery:(id)query;
-(int)intForQuery:(id)query;
-(id)stringForQuery:(id)query;
@end

__attribute__((visibility("hidden")))
@interface FMStatement : NSObject {
	sqlite3_stmt* _statement;
	NSString* _query;
	long _useCount;
	BOOL _inUse;
}
@property(assign) BOOL inUse;
@property(assign) sqlite3_stmt* statement;
@property(retain) NSString* query;
@property(assign) long useCount;
-(void).cxx_destruct;
-(id)description;
-(void)reset;
-(void)close;
-(void)dealloc;
-(void)finalize;
@end

__attribute__((visibility("hidden")))
@interface ChangeNumberInputController : WAViewController <UITextFieldDelegate, WAPhoneNumberTextFieldDelegate> {
	CountryInfo* _selectedCountry1;
	CountryInfo* _selectedCountry2;
	NSString* _oldPhoneNumber;
	NSString* _newPhoneNumber;
	WAOverlayView* _overlayView;
	BOOL _countryCodeWarningShown;
	float _keyboardHeight;
	UITableView* _tableViewInput;
	UIView* _viewInput1;
	UIView* _viewInputFieldsContainer1;
	UILabel* _labelPhoneInput1;
	UIView* _viewCCodeContainer1;
	UILabel* _labelPlusSign1;
	UILabel* _labelCCode1;
	UITextField* _textFieldCode1;
	UIImageView* _imageCodeBg1;
	UIView* _viewPhoneNumberContainer1;
	WAPhoneNumberTextField* _textFieldPhone1;
	UIImageView* _imagePhoneBg1;
	UIView* _viewInput2;
	UIView* _viewInputFieldsContainer2;
	UILabel* _labelPhoneInput2;
	UIView* _viewCCodeContainer2;
	UILabel* _labelPlusSign2;
	UILabel* _labelCCode2;
	UITextField* _textFieldCode2;
	UIImageView* _imageCodeBg2;
	UIView* _viewPhoneNumberContainer2;
	WAPhoneNumberTextField* _textFieldPhone2;
	UIImageView* _imagePhoneBg2;
	id<ChangeNumberInputControllerDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<ChangeNumberInputControllerDelegate> delegate;
@property(retain, nonatomic) UIImageView* imagePhoneBg2;
@property(retain, nonatomic) WAPhoneNumberTextField* textFieldPhone2;
@property(retain, nonatomic) UIView* viewPhoneNumberContainer2;
@property(retain, nonatomic) UIImageView* imageCodeBg2;
@property(retain, nonatomic) UITextField* textFieldCode2;
@property(retain, nonatomic) UILabel* labelCCode2;
@property(retain, nonatomic) UILabel* labelPlusSign2;
@property(retain, nonatomic) UIView* viewCCodeContainer2;
@property(retain, nonatomic) UILabel* labelPhoneInput2;
@property(retain, nonatomic) UIView* viewInputFieldsContainer2;
@property(retain, nonatomic) UIView* viewInput2;
@property(retain, nonatomic) UIImageView* imagePhoneBg1;
@property(retain, nonatomic) WAPhoneNumberTextField* textFieldPhone1;
@property(retain, nonatomic) UIView* viewPhoneNumberContainer1;
@property(retain, nonatomic) UIImageView* imageCodeBg1;
@property(retain, nonatomic) UITextField* textFieldCode1;
@property(retain, nonatomic) UILabel* labelCCode1;
@property(retain, nonatomic) UILabel* labelPlusSign1;
@property(retain, nonatomic) UIView* viewCCodeContainer1;
@property(retain, nonatomic) UILabel* labelPhoneInput1;
@property(retain, nonatomic) UIView* viewInputFieldsContainer1;
@property(retain, nonatomic) UIView* viewInput1;
@property(retain, nonatomic) UITableView* tableViewInput;
-(void).cxx_destruct;
-(void)deviceCheckFailedWithError:(id)error;
-(void)deviceCheckFinishedWithResult:(id)result;
-(void)phoneNumberTextFieldDidChange:(id)phoneNumberTextField;
-(void)phoneNumberTextFieldDidBeginEditing:(id)phoneNumberTextField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(void)keyboardWillShow:(id)keyboard;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)code2ChangedAction:(id)action;
-(void)code1ChangedAction:(id)action;
-(void)doneAction:(id)action;
-(void)cancelAction:(id)action;
-(BOOL)needToShowPhoneNumberFormatWarning;
-(void)proceedToAuthCodeRequest;
-(void)showAppStoreAlert:(id)alert;
-(void)showContactSupportAlert:(id)alert withContext:(id)context;
-(void)performSameDeviceCheck;
-(void)validateOldPhoneNumber;
-(void)resizeInputViews;
-(void)formatCode2Field;
-(void)formatCode1Field;
-(void)validateUserInput;
-(void)showOverlay:(id)overlay;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WASyncManager : NSObject {
	NSObject<OS_dispatch_queue>* _queue;
	NSObject<OS_dispatch_source>* _fullSyncTimer;
	NSObject<OS_dispatch_source>* _syncPollingTimer;
	NSMutableArray* _syncHistory;
	NSDate* _nextSyncDate;
	unsigned _nextSyncMode;
	unsigned _nextSyncContext;
	NSMutableArray* _pengingDeletes;
	NSMutableArray* _pendingPhoneNumbers;
	NSArray* _processedDeletes;
	NSArray* _processedPhoneNumbers;
	BOOL _syncEnabled;
	BOOL _syncInProgress;
	BOOL _locked;
	id<WASyncManagerDelegate> _delegate;
	NSCondition* _condition;
}
@property(readonly, assign) NSCondition* condition;
@property(assign) BOOL locked;
@property(assign) BOOL syncInProgress;
@property(assign) BOOL syncEnabled;
@property(assign, nonatomic) __weak id<WASyncManagerDelegate> delegate;
-(void).cxx_destruct;
-(void)saveSyncHistory;
-(void)cleanSyncHistory;
-(void)loadSyncHistory;
-(void)addDeletedJIDs:(id)jids;
-(void)addPhones:(id)phones;
-(void)reset;
-(void)enableSync;
-(void)processContactsSyncResponse:(id)response mode:(unsigned)mode context:(unsigned)context;
-(int)runSyncIfNecessary;
-(void)runFullSyncIfNecessary;
-(void)setNextFullSyncDate:(id)date;
-(void)requestSyncWithMode:(unsigned)mode context:(unsigned)context;
-(void)requestNotificationDeltaSync;
-(void)requestInteractiveSyncWithMode:(unsigned)mode;
-(id)initWithDelegate:(id)delegate queue:(id)queue;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPContactsSyncContext : NSObject {
	NSMutableArray* _phoneNumbers;
	NSMutableArray* _deletedJIDs;
	unsigned _mode;
	unsigned _context;
	NSString* _sid;
	unsigned _batchSize;
	XMPPContactsSyncResponse* _response;
	id _completionHandler;
	unsigned _batchIndex;
	double _timeout;
}
@property(readonly, assign, nonatomic) unsigned batchIndex;
@property(readonly, assign, nonatomic) BOOL hasMoreData;
@property(copy, nonatomic) id completionHandler;
@property(readonly, assign, nonatomic) XMPPContactsSyncResponse* response;
@property(assign, nonatomic) double timeout;
@property(assign, nonatomic) unsigned batchSize;
@property(retain, nonatomic) NSString* sid;
@property(assign, nonatomic) unsigned context;
@property(assign, nonatomic) unsigned mode;
-(void).cxx_destruct;
-(void)getNextPhoneNumberSetInto:(id*)into deletedJIDs:(id*)jids;
-(void)setDeletedJIDs:(id)jids;
-(void)setPhoneNumbers:(id)numbers;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMediaUploadOperationBase : NSOperation {
	unsigned _backgroundTask;
	BOOL _reuploading;
	id<WAMediaUploadable> _uploadable;
	id<WAMediaUploadOperationDelegate> _delegate;
	NSString* _mediaURL;
	NSString* _serverHash;
	NSError* _error;
}
@property(readonly, assign, nonatomic) NSError* error;
@property(assign, nonatomic, getter=isReuploading) BOOL reuploading;
@property(retain, nonatomic) NSString* serverHash;
@property(retain, nonatomic) NSString* mediaURL;
@property(retain, nonatomic) id<WAMediaUploadOperationDelegate> delegate;
@property(retain, nonatomic) id<WAMediaUploadable> uploadable;
-(void).cxx_destruct;
-(void)didFailWithError:(id)error;
-(void)didFinish;
-(void)dealloc;
-(id)initWithUploadOperationDelegate:(id)uploadOperationDelegate uploadable:(id)uploadable;
@end

__attribute__((visibility("hidden")))
@interface GZipFile : NSObject {
}
+(id)deflateData:(id)data originalFile:(id)file;
+(id)deflateFile:(id)file removeOriginalFile:(BOOL)file2;
@end

__attribute__((visibility("hidden")))
@interface WAContactPhoneEditingCell : WAContactMultiValueEditingCell {
}
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAGroupEventMessageCell : WAMessageCell {
	WALabel* _eventTextLabel;
}
+(CGSize)contentSizeForCellData:(id)cellData maxWidth:(float)width;
+(UIEdgeInsets)contentInsetsForCellData:(id)cellData cellWidth:(float)width;
+(UIEdgeInsets)textInsetsForCellData:(id)cellData;
+(float)maxBubbleWidthForCellWidth:(float)cellWidth;
+(id)cellReuseIdentifier;
+(BOOL)selectable;
+(void)initialize;
-(void).cxx_destruct;
-(id)accessibilityValueText;
-(id)accessibilityLabel;
-(BOOL)canBecomeFirstResponder;
-(void)layoutSubviews;
-(void)configureCellWithAnimation:(BOOL)animation;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface OpenInChromeController : NSObject {
}
+(id)sharedInstance;
-(BOOL)openInChrome:(id)chrome withCallbackURL:(id)callbackURL createNewTab:(BOOL)tab;
-(BOOL)openInChrome:(id)chrome;
-(BOOL)isChromeInstalled;
@end

__attribute__((visibility("hidden")))
@interface CrashReport : NSObject {
}
+(void)sendRequestedLogs;
+(void)logCriticalEventWithName:(id)name crashDetails:(id)details useActiveLog:(BOOL)log discretionary:(BOOL)discretionary;
+(void)logCriticalEventWithName:(id)name useActiveLog:(BOOL)log discretionary:(BOOL)discretionary;
+(void)logCriticalEventWithName:(id)name useActiveLog:(BOOL)log;
+(void)logCriticalEventWithName:(id)name discretionary:(BOOL)discretionary;
+(void)logCriticalEventWithName:(id)name callStackAddresses:(id)addresses symbols:(id)symbols;
+(void)logCriticalEventWithName:(id)name;
+(void)initializeHandlers;
+(id)signalNumberToString:(int)string;
+(id)callStackDetailsWithName:(id)name reason:(id)reason addresses:(id)addresses symbols:(id)symbols;
+(id)parseNameFromLine:(id)line;
+(id)callStackDetailsWithName:(id)name reason:(id)reason;
+(id)callStackDetailsForCriticalEventWithName:(id)name addresses:(id)addresses symbols:(id)symbols;
+(void)checkForInstallProblemWithName:(id)name;
@end

__attribute__((visibility("hidden")))
@interface ModuleInfo : NSObject {
	NSString* _name;
	NSString* _arch;
	unsigned _base;
}
@property(assign, nonatomic) unsigned base;
@property(retain, nonatomic) NSString* arch;
@property(retain, nonatomic) NSString* name;
+(id)loadedModules;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface RestoreBackupViewController : WAWarningViewController <WAChatDatabaseMigrationViewControllerDelegate, WARepairDatabaseViewControllerDelegate> {
	UIBarButtonItem* _barButtonNext;
	BOOL _nextButtonOverride;
	WAFieldStatsEventICloudRestore* _event;
	NSDate* _eventStartTime;
	BOOL _needsIntegrityCheck;
	NSTimer* _timer;
	BOOL _restoreCompleted;
	WACloudBackupManager* _manager;
	WAPreviousBackup* _previousBackup;
	WACloudStatus* _cloudStatus;
	id _cloudStatusListener;
	BOOL _registered;
	UIViewController* _previousController;
	BOOL _allowsUserToSkipRestore;
	id<RestoreBackupViewControllerDelegate> _delegate;
	WABackupInfoTableCell* _cellBackupInfo;
	UIView* _viewNoiCloud;
	UILabel* _labelNoiCloud;
	UIView* _viewTableFooter;
	UILabel* _labelProgressInfo;
	UILabel* _labelFooterText;
	UIActivityIndicatorView* _activityIndicator;
	NSDate* _loggedPreviousBackupDate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDate* loggedPreviousBackupDate;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UILabel* labelFooterText;
@property(retain, nonatomic) UILabel* labelProgressInfo;
@property(retain, nonatomic) UIView* viewTableFooter;
@property(retain, nonatomic) UILabel* labelNoiCloud;
@property(retain, nonatomic) UIView* viewNoiCloud;
@property(retain, nonatomic) WABackupInfoTableCell* cellBackupInfo;
@property(assign, nonatomic) __weak id<RestoreBackupViewControllerDelegate> delegate;
@property(assign, nonatomic) BOOL allowsUserToSkipRestore;
@property(readonly, assign, nonatomic) BOOL backupRestored;
-(void).cxx_destruct;
-(void)repairDatabaseViewControllerDidFail:(id)repairDatabaseViewController;
-(void)repairDatabaseViewControllerDidSucceed:(id)repairDatabaseViewController;
-(void)chatDatabaseMigrationViewController:(id)controller didCompleteSuccessfully:(BOOL)successfully;
-(void)showRepairController;
-(void)showMigrationController;
-(void)prepareToShowController;
-(void)runIntegrityCheck:(id)check;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)reloadNoICloudHelperText;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidLayoutSubviews;
-(void)startRestoreIfRequested;
-(void)applicationDidBecomeActive:(id)application;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)nextAction:(id)action;
-(void)unregisterForRestoreNotifications;
-(void)registerForRestoreNotifications;
-(void)reloadStore;
-(void)submitFieldStatsEvent;
-(void)integrityCheck:(id)check;
-(void)updateUserDefaults;
-(void)finish;
-(void)restorePhaseChanged:(id)changed;
-(void)restoreFromBackupIfAvailable;
-(void)startRestoreSequence:(BOOL)sequence;
-(void)updateNextButtonEnabled;
-(void)overrideNextButton;
-(void)updateBackupDetails;
-(void)previousBackupChanged:(id)changed;
-(void)cloudStatusUpdated;
-(void)layoutFooterView;
-(void)showProgress:(BOOL)progress showFooter:(BOOL)footer;
-(void)invalidateProgressTimer;
-(void)scheduleProgressTimer;
-(void)updateProgressTimerFired:(id)fired;
-(id)footerTextForDownloadProgress;
-(id)footerTextForRestoreProgress;
-(void)updateProgress;
-(void)stopAnimatingGears;
-(void)startAnimatingGears;
-(void)skipFieldStatsEvent;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface AccountViewController : WAStaticTableViewController {
}
-(void)wa_applicationDidEnterBackground;
-(void)setupTableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)deleteAccountAction;
-(void)changeNumberAction;
-(void)showStorageUsage;
-(void)viewPaymentInfoAction;
-(void)setPrivacyAction;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WABlockedContact : NSObject <NSCoding> {
	BOOL _unblockPending;
	NSString* _jid;
}
@property(assign, nonatomic) BOOL unblockPending;
@property(copy, nonatomic) NSString* jid;
-(void).cxx_destruct;
-(BOOL)isEqualToBlockedContact:(id)blockedContact;
-(BOOL)isEqual:(id)equal;
-(unsigned)hash;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithJID:(id)jid;
@end

__attribute__((visibility("hidden")))
@interface PaymentInfoViewController : WAStaticTableViewController <WALinkLabelDelegate> {
	WATableRow* _expirationRow;
	BOOL _lifetimeService;
	UIView* _viewTableFooter;
	WALinkLabel* _blogPostLink;
	UILabel* _labelHelperText;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UILabel* labelHelperText;
@property(retain, nonatomic) WALinkLabel* blogPostLink;
@property(retain, nonatomic) UIView* viewTableFooter;
-(void).cxx_destruct;
-(void)servicePurchased:(id)purchased;
-(void)handleOpenURL:(id)url fromLinkLabel:(id)linkLabel;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)localizedServiceExpirationDate;
-(void)updateAccountInfo;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)setupTableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)layoutTableFooter;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface PaymentEduViewController : WAViewController {
	UIImageView* _imageViewWallpaper;
	UIEdgeInsets _greetingTextInsets;
	UIEdgeInsets _priceTextInsets;
	UIImageView* _imageServiceInfo;
	UILabel* _labelGreetingTop;
	UILabel* _labelGreetingBottom;
	UIButton* _blogPostButton;
	UIButton* _buttonContinue;
	UIButton* _buttonPayNow;
	UIButton* _buttonPayLater;
	id<PaymentEduControllerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<PaymentEduControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)blogPostButtonClicked:(id)clicked;
-(void)viewDidLayoutSubviews;
-(void)loadView;
-(void)payLaterAction:(id)action;
-(void)payNowAction:(id)action;
-(void)continueAction:(id)action;
-(void)layoutSubviews;
-(void)reloadServiceInfo;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WARecipientsTextField : UITextField {
}
-(CGRect)editingRectForBounds:(CGRect)bounds;
-(CGRect)textRectForBounds:(CGRect)bounds;
-(UIEdgeInsets)textRectInsets;
@end

__attribute__((visibility("hidden")))
@interface WARecipientsViewController : WAViewController <PeopleMultiPickerNavigationControllerDelegate, UINavigationControllerDelegate, UITableViewDataSource, UITableViewDelegate, UIGestureRecognizerDelegate, WAContactsSearchControllerDelegate> {
	WAContactsSearchController* _searchController;
	NSArray* _searchResults;
	NSMutableArray* _selectedContacts;
	NSMutableArray* _selectedJIDs;
	UIButton* _addContactVoiceOverButton;
	float _keyboardHeight;
	BOOL _keyboardActive;
	unsigned _maxContacts;
	unsigned _minContacts;
	unsigned _mode;
	id<WARecipientsViewControllerDelegate> _delegate;
	UIButton* _buttonAddContacts;
	UIView* _viewContactName;
	UITextField* _textFieldContactName;
	UIView* _bottomBorder;
	UIView* _viewContacts;
	UITableView* _tableViewContacts;
	UILabel* _labelHelperText;
	UIView* _viewSearchResults;
	UITableView* _tableViewSearchResults;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UITableView* tableViewSearchResults;
@property(retain, nonatomic) UIView* viewSearchResults;
@property(retain, nonatomic) UILabel* labelHelperText;
@property(retain, nonatomic) UITableView* tableViewContacts;
@property(retain, nonatomic) UIView* viewContacts;
@property(retain, nonatomic) UIView* bottomBorder;
@property(retain, nonatomic) UITextField* textFieldContactName;
@property(retain, nonatomic) UIView* viewContactName;
@property(retain, nonatomic) UIButton* buttonAddContacts;
@property(assign, nonatomic) __weak id<WARecipientsViewControllerDelegate> delegate;
@property(readonly, assign, nonatomic) NSArray* selectedContacts;
@property(readonly, assign, nonatomic) unsigned mode;
-(void).cxx_destruct;
-(void)contactsSearchControllerDelegateDidInvalidateSearchResults:(id)contactsSearchControllerDelegate;
-(void)peopleMultiPickerNavigationControllerDidCancel:(id)peopleMultiPickerNavigationController;
-(void)peopleMultiPickerNavigationController:(id)controller didSelectContacts:(id)contacts;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)updateVoiceOverElements;
-(void)accessibilityVoiceOverStatusChanged:(id)changed;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)recipientsTableTapped:(id)tapped;
-(void)deleteRowAction:(id)action withEvent:(id)event;
-(void)contactNameEditedAction:(id)action;
-(void)addContactsAction:(id)action;
-(void)cancelAction:(id)action;
-(void)createAction:(id)action;
-(void)searchContactsWithMask:(id)mask;
-(void)setupTableViews;
-(void)layoutViewsWithAnimationDuration:(double)animationDuration;
-(void)updateButtonState;
-(void)setInitiallySelectedGroupMembers:(id)members;
-(void)dealloc;
-(id)initWithDelegate:(id)delegate mode:(unsigned)mode;
@end

__attribute__((visibility("hidden")))
@interface WAMediaDownloadPolicy : NSObject <NSCoding> {
	BOOL _isDefaultPolicy;
	NSDate* _imageDownloadEnabledAtTime;
	NSDate* _audioDownloadEnabledAtTime;
	NSDate* _videoDownloadEnabledAtTime;
	int _autoDownloadPolicyImages;
	int _autoDownloadPolicyVideos;
	int _autoDownloadPolicyAudio;
}
@property(assign, nonatomic) int autoDownloadPolicyAudio;
@property(assign, nonatomic) int autoDownloadPolicyVideos;
@property(assign, nonatomic) int autoDownloadPolicyImages;
+(id)defaultPolicy;
-(void).cxx_destruct;
-(BOOL)canUseCellularToAutoDownloadMessage:(id)autoDownloadMessage;
-(void)configureAutoDownloadRequest:(id)request forMessage:(id)message;
-(int)shouldAutoDownloadMessage:(id)message;
-(void)save;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(void)resetToDefaults;
-(BOOL)equalToDefaults;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAContactProperty : NSObject <NSCopying> {
	BOOL _readonly;
	BOOL _supressAutomaticPropertyUpdates;
	int _abPropertyID;
	int _abPersonID;
	NSString* _stringValue;
	NSDate* _dateValue;
	NSDictionary* _dictionaryValue;
	NSString* _label;
	NSString* _systemLabel;
	NSDictionary* _userInfo;
}
@property(assign, nonatomic) BOOL supressAutomaticPropertyUpdates;
@property(retain, nonatomic) NSDictionary* userInfo;
@property(copy, nonatomic) NSString* systemLabel;
@property(copy, nonatomic) NSString* label;
@property(retain, nonatomic) NSDictionary* dictionaryValue;
@property(copy, nonatomic) NSDate* dateValue;
@property(copy, nonatomic) NSString* stringValue;
@property(assign, nonatomic, getter=isReadonly) BOOL readonly;
@property(assign, nonatomic) int abPersonID;
@property(assign, nonatomic) int abPropertyID;
+(id)propertyWithABProperty:(int)abproperty;
+(id)stringForAddressDictionary:(id)addressDictionary;
+(id)stringForAddressBookDate:(id)addressBookDate;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(unsigned)hash;
-(BOOL)isEqualToProperty:(id)property;
-(BOOL)isEqual:(id)equal;
-(void)addValueAndLabelToABMutableMultiValue:(void*)abmutableMultiValue;
-(void)setDictionaryValue:(id)value forKey:(id)key;
-(id)init;
-(id)initWithABProperty:(int)abproperty;
@end

__attribute__((visibility("hidden")))
@interface WAContactMultiValueProperty : NSObject <NSCopying, NSFastEnumeration> {
	NSMutableArray* _deletedProperties;
	int _abPropertyID;
	NSArray* _properties;
}
@property(retain, nonatomic) NSArray* properties;
@property(readonly, assign) unsigned count;
@property(readonly, assign, nonatomic) NSArray* deletedProperties;
@property(assign, nonatomic) int abPropertyID;
+(id)propertyWithABProperty:(int)abproperty properties:(id)properties;
-(void).cxx_destruct;
-(id)copyWithZone:(NSZone*)zone;
-(unsigned)hash;
-(BOOL)isEqualToProperty:(id)property;
-(BOOL)isEqual:(id)equal;
-(unsigned)countByEnumeratingWithState:(XXStruct_kFm5bA*)state objects:(id*)objects count:(unsigned)count;
-(void)enumeratePropertiesAtIndexes:(id)indexes options:(unsigned)options usingBlock:(id)block;
-(void)enumeratePropertiesWithOptions:(unsigned)options usingBlock:(id)block;
-(void)enumeratePropertiesUsingBlock:(id)block;
-(id)propertiesPassingTest:(id)test;
-(unsigned)indexOfPropertyIdenticalTo:(id)to;
-(void)removePropertyAtIndex:(unsigned)index;
-(void)addPropertiesFromArray:(id)array;
-(void)addProperty:(id)property;
-(id)objectAtIndexedSubscript:(unsigned)indexedSubscript;
-(id)propertyAtIndex:(unsigned)index;
-(id)lastProperty;
-(id)firstProperty;
-(id)init;
-(id)initWithABProperty:(int)abproperty properties:(id)properties;
@end

__attribute__((visibility("hidden")))
@interface WASearchEngine : NSObject {
	FMDatabaseQueue* _dbQueue;
	NSObject<OS_dispatch_queue>* _privateQueue;
	NSCharacterSet* _whitespaceCharacterSet;
	NSCharacterSet* _punctuationCharacterSet;
	long long _lastRowID;
}
-(void).cxx_destruct;
-(id)docIDsMatchingSearchTerm:(id)term chatSessionJIDs:(id)jids minimumScore:(float)score offset:(unsigned)offset limit:(unsigned)limit;
-(void)updateSearchScoreForMessage:(id)message;
-(void)removeDocIDs:(id)ids;
-(void)removeMessage:(id)message;
-(void)internalAddMessage:(id)message;
-(void)addMessage:(id)message;
-(BOOL)isMessageValid:(id)valid;
-(int)indexMessagesOfCount:(unsigned)count inContext:(id)context;
-(void)internalCloseDatabase;
-(void)closeDatabase;
-(BOOL)openDatabaseAtPath:(id)path;
-(void)openDatabaseIfNeeded;
-(void)markSearchDatabaseAsCorrupted;
-(void)deleteDatabase;
-(unsigned)numberOfIndexedMessages;
-(unsigned long long)sizeOfDatabase;
-(BOOL)isIndexReady;
-(void)closeDatabaseAfterDelayIfIdle;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillTerminate:(id)application;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAProfilePictureThumbnailingOperation : WAProfilePictureOperation {
	UIImage* _sourceImage;
	UIImage* _resultImage;
}
@property(retain) UIImage* resultImage;
@property(retain) UIImage* sourceImage;
+(id)operationForJID:(id)jid image:(id)image;
-(void).cxx_destruct;
-(void)start;
@end

__attribute__((visibility("hidden")))
@interface WAChatComposer : UINavigationController <WARecipientsViewControllerDelegate, WANewGroupViewControllerDelegate, SinglePersonPickerDelegate> {
	unsigned _mode;
	NSString* _groupSubject;
	UIImage* _groupPicture;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIImage* groupPicture;
@property(copy, nonatomic) NSString* groupSubject;
@property(assign, nonatomic) unsigned mode;
@property(assign, nonatomic) __weak id<UINavigationControllerDelegate, WAChatComposerDelegate> delegate;
-(void).cxx_destruct;
-(void)singlePersonPickerDidAskToCreateNewGroup:(id)singlePersonPicker;
-(void)singlePersonPickerDidAskToInviteFriends:(id)singlePersonPicker;
-(void)singlePersonPickerDidCancel:(id)singlePersonPicker;
-(void)singlePersonPicker:(id)picker didSelectContactInfo:(id)info;
-(void)newGroupViewControllerDidCancel:(id)newGroupViewController;
-(void)newGroupViewController:(id)controller didFinishWithSubject:(id)subject picture:(id)picture;
-(void)recipientsControllerDidCancel:(id)recipientsController;
-(void)recipientsController:(id)controller didFinishWithContacts:(id)contacts;
-(id)recipientsViewController;
-(id)newGroupViewController;
-(id)init;
-(id)initWithMode:(unsigned)mode;
-(id)initWithMode:(unsigned)mode recipients:(id)recipients;
@end

__attribute__((visibility("hidden")))
@interface WABadgedTableViewCell : UITableViewCell {
	WABadgeView* _badgeView;
	unsigned _badgeValue;
}
@property(assign, nonatomic) unsigned badgeValue;
-(void).cxx_destruct;
-(void)updateBadgeFromValue:(unsigned)value toValue:(unsigned)value2;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)updateBadgeView;
-(void)removeBadgeView;
-(void)addBadgeView;
-(void)setBackgroundColor:(id)color;
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface WABadgeView : UIView {
	UIFont* _font;
	BOOL _highlighted;
	BOOL _selected;
	unsigned _badgeValue;
}
@property(readonly, assign, nonatomic) NSString* message;
@property(assign, nonatomic) BOOL selected;
@property(assign, nonatomic) BOOL highlighted;
@property(assign, nonatomic) unsigned badgeValue;
-(void).cxx_destruct;
-(void)sizeToFit;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAWindow : UIWindow {
}
-(void)tintColorDidChange;
@end

__attribute__((visibility("hidden")))
@interface WAOverlayView : UIView {
	UILabel* _textLabel;
	UIActivityIndicatorView* _activityIndicator;
	UIImageView* _background;
	double _startTime;
}
@property(assign, nonatomic) double startTime;
@property(retain, nonatomic) NSString* text;
+(id)showOverlayInViewController:(id)viewController;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)hideWithCompletion:(id)completion;
-(void)loadBackground;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAProximityMonitor : NSObject {
	int _refCount;
}
+(id)sharedMonitor;
-(void)endMonitoring;
-(void)beginMonitoring;
@end

__attribute__((visibility("hidden")))
@interface WAListTableViewCell : UITableViewCell {
	UILabel* _nameLabel;
	UILabel* _participantsLabel;
}
+(id)cellWithReuseIdentifier:(id)reuseIdentifier;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)systemAccessoryView;
-(void)setSystemAccessoryViewHidden:(BOOL)hidden;
-(void)willTransitionToState:(unsigned)state;
-(void)configureWithList:(id)list;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPlayerSlider : UISlider {
}
-(id)accessibilityValue;
-(id)accessibilityLabel;
-(CGRect)accessibilityFrame;
-(CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPlayerTransportControlView : UIView {
	WAMediaPlayerSlider* _slider;
	UILabel* _currentTimeLabel;
	UILabel* _remainingTimeLabel;
	BOOL _scrubbingInProgress;
	id<WAMediaPlayerTransportControlViewDelegate> _delegate;
}
@property(readonly, assign, nonatomic) BOOL scrubbingInProgress;
@property(assign, nonatomic) double duration;
@property(assign, nonatomic) double currentTime;
@property(assign, nonatomic) __weak id<WAMediaPlayerTransportControlViewDelegate> delegate;
-(void).cxx_destruct;
-(void)sliderTouchEnd:(id)end;
-(void)sliderValueChanged:(id)changed;
-(void)updateTimeLabels;
-(void)reset;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAContactActionTableViewCell : UITableViewCell {
	UIView* _topEdge;
	UIView* _bottomEdge;
}
@property(assign, nonatomic) BOOL showTopEdge;
@property(assign, nonatomic) BOOL showBottomEdge;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAPrivacySettingsViewController : WAStaticTableViewController {
	WATableRow* _lastSeenRow;
	WATableRow* _profilePicRow;
	WATableRow* _statusRow;
	WATableRow* _blockedRow;
	WATableRow* _readReceiptsRow;
	UISwitch* _readReceiptsSwitch;
	WAActivityLabel* _activityLabel;
	double _activityStartTime;
	BOOL _needPrivacyRefresh;
	WAPrivacyPolicy* _privacyPolicy;
	NSString* _lastSeenTitle;
	NSString* _profilePhotoTitle;
	NSString* _statusMessageTitle;
}
@property(retain) NSString* statusMessageTitle;
@property(retain) NSString* profilePhotoTitle;
@property(retain) NSString* lastSeenTitle;
@property(retain) WAPrivacyPolicy* privacyPolicy;
-(void).cxx_destruct;
-(void)privacyPolicyDidChange:(id)privacyPolicy;
-(void)blockedContactsListUpdated:(id)updated;
-(void)wa_applicationWillEnterForeground;
-(BOOL)isSafeToUnload;
-(void)switchReadReceiptsAction:(id)action;
-(void)updateBlockedContactsCountDisplay;
-(void)showBlacklistController;
-(void)updatePrivacyValues;
-(void)setupTableView;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAContactIMEditingCell : WAContactMultiValueEditingCell {
}
-(void)contactPropertyTextFieldValueChanged:(id)changed;
-(void)reconfigure;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAProfilePictureManager : NSObject {
	NSObject<OS_dispatch_queue>* _personalPictureProcessingQueue;
	NSObject<OS_dispatch_queue>* _groupPictureProcessingQueue;
	NSCache* _profilePictureCache;
	NSMutableDictionary* _profilePictureDatabase;
	NSMutableDictionary* _pendingSetRequests;
	NSMutableSet* _pendingGetFullsizeRequests;
	NSOperationQueue* _thumbnailingQueue;
	NSManagedObjectContext* _contactsStorageContext;
	WATimer* _contactsContextReleaseTimer;
	NSManagedObjectContext* _chatStorageContext;
	WATimer* _chatContextReleaseTimer;
	NSString* _storageDirectory;
}
@property(readonly, assign, nonatomic) NSString* storageDirectory;
+(id)thumbnailFromProfilePicture:(id)profilePicture;
+(id)groupPicturePlaceholder;
+(id)personalPicturePlaceholder;
+(id)fullPathToProfilePictureThumbnailForJID:(id)jid;
+(id)thumnbailFilenameForJID:(id)jid;
+(id)prepareToSaveFile:(id)saveFile inDirectory:(id)directory relativeToDirectory:(id)directory3;
+(void)moveAllPicturesFromDirectory:(id)directory toDirectory:(id)directory2;
+(BOOL)isProfilePictureValid:(id)valid;
+(id)sanitizedProfilePictureFromImage:(id)image;
+(id)previewImageFromProfilePicture:(id)profilePicture;
+(id)jpegDataForProfilePicturePreview:(id)profilePicturePreview;
+(id)jpegDataForProfilePicture:(id)profilePicture;
+(void)disallowProfilePictureRequests;
+(BOOL)profilePictureRequestsAllowed;
-(void).cxx_destruct;
-(id)bestAvailablePictureForJID:(id)jid returningFullsizeImageAvailability:(BOOL*)availability;
-(id)bestAvailablePictureForJID:(id)jid;
-(id)bestAvailablePictureForWAStatus:(id)wastatus returningFullsizeImageAvailability:(BOOL*)availability;
-(id)bestAvailablePictureForWAStatus:(id)wastatus;
-(id)bestAvailablePictureForWAChatSession:(id)wachatSession returningFullsizeImageAvailability:(BOOL*)availability;
-(id)bestAvailablePictureForWAChatSession:(id)wachatSession;
-(id)bestAvailablePictureForJID:(id)jid addressBookPictureAllowed:(BOOL)allowed fullsizeAvailable:(out BOOL*)available;
-(void)generateProfilePictureThumbnailFromPicture:(id)picture completion:(id)completion;
-(void)fetchProfilePictureForJID:(id)jid completion:(id)completion;
-(void)fetchGroupPictureForWAChatSession:(id)wachatSession completion:(id)completion;
-(void)fetchPersonalProfilePictureForWAStatus:(id)wastatus fallbackToAddressBookPicture:(BOOL)addressBookPicture completion:(id)completion;
-(void)createProfilePictureThumbnailForJID:(id)jid loadingOptions:(int)options completion:(id)completion;
-(void)setPictureData:(id)data forJID:(id)jid;
-(id)pictureDataForJID:(id)jid;
-(void)saveProfilePictureDatabase;
-(void)loadProfilePictureDatabase;
-(id)profilePictureDatabaseFilepath;
-(id)profilePictureThumbnailForJID:(id)jid;
-(id)profilePictureThumbnailForJID:(id)jid loadingOptions:(int)options;
-(id)bestAvailablePictureWithRelativeFilePath:(id)relativeFilePath returningFullsizeImageAvailability:(BOOL*)availability;
-(void)useGeneratedProfilePictureThumbnail:(id)thumbnail forJID:(id)jid isAddressBookPicture:(BOOL)picture;
-(void)generateThumbnailFromImage:(id)image forJID:(id)jid isAddressBookPicture:(BOOL)picture;
-(void)saveProfilePictureThumbnailPlaceholderForJID:(id)jid;
-(id)profilePictureThumbnailForJID:(id)jid isPlaceholder:(BOOL*)placeholder;
-(void)saveProfilePictureThumbnail:(id)thumbnail forJID:(id)jid;
-(void)releaseContactsMOC;
-(id)acquireContactsMOC;
-(void)releaseChatMOC;
-(id)acquireChatMOC;
-(id)init;
-(id)initWithStorageDirectory:(id)storageDirectory;
-(void)deleteProfilePictureDatabase;
-(void)deleteProfilePictureThumbnailForJID:(id)jid;
-(void)deleteAllCachedThumbnailsAndResetRequestDates;
-(void)resetProfilePictureRequestDateForJID:(id)jid;
-(void)resetProfilePictureThumbnailCacheForJID:(id)jid;
-(void)reuploadMyProfilePictureOnlyIfNeeded:(BOOL)needed;
-(void)requestMyProfilePictureIfNeeded;
-(void)deleteMyProfilePicture;
-(void)saveMyProfilePicture:(id)picture;
-(void)saveMyProfilePictureData:(id)data thumbnailData:(id)data2;
-(id)myProfilePictureThumbnailData;
-(id)myProfilePictureData;
-(id)myProfilePictureThumbnail;
-(id)myProfilePictureReturningFullsizeImageAvailability:(BOOL*)availability;
-(id)fullpathToMyProfilePicture;
-(id)pendingProfilePictureForJID:(id)jid;
-(BOOL)hasPendingSetRequestForJID:(id)jid;
-(void)requestProfilePictureDeleteForJID:(id)jid webClientRequestID:(id)anId completion:(id)completion;
-(void)requestProfilePictureDeleteForJID:(id)jid completion:(id)completion;
-(void)setLargePictureData:(id)data smallPictureData:(id)data2 pictureID:(id)anId forWAChatSession:(id)wachatSession;
-(void)requestProfilePictureSetForJID:(id)jid picture:(id)picture completion:(id)completion;
-(void)requestProfilePictureSetForJID:(id)jid withLargePictureData:(id)largePictureData smallPictureData:(id)data webClientRequestID:(id)anId completion:(id)completion;
-(void)requestProfilePictureSetForJID:(id)jid withLargePictureData:(id)largePictureData smallPictureData:(id)data completion:(id)completion;
-(void)processPictureChangeNotificationForContactWithJID:(id)jid pictureIdentifier:(id)identifier;
-(void)processPictureChangeNotificationForGroupWithJID:(id)jid pictureIdentifier:(id)identifier changeAuthorJID:(id)jid3 timestamp:(id)timestamp;
-(BOOL)hasPendingGetFullsizeRequestForJID:(id)jid;
-(void)requestLargeProfilePictureForJID:(id)jid forced:(BOOL)forced completion:(id)completion;
-(void)deleteProfilePictureForJID:(id)jid;
-(void)requestSmallProfilePictureForJID:(id)jid onlyIfNecessary:(BOOL)necessary;
-(void)deleteProfilePictureForWAStatus:(id)wastatus;
-(void)deletePictureOfType:(unsigned)type forWAStatus:(id)wastatus;
-(id)savePictureData:(id)data pictureType:(unsigned)type pictureIdentifier:(id)identifier forWAStatus:(id)wastatus;
-(void)requestSmallProfilePictureForWAStatus:(id)wastatus onlyIfNecessary:(BOOL)necessary;
-(void)deleteGroupPictureForWAChatSession:(id)wachatSession;
-(void)deletePictureOfType:(unsigned)type forWAChatSession:(id)wachatSession;
-(id)savePictureData:(id)data pictureType:(unsigned)type pictureIdentifier:(id)identifier forWAChatSession:(id)wachatSession;
-(void)requestSmallGroupPictureForWAChatSession:(id)wachatSession onlyIfNecessary:(BOOL)necessary;
-(BOOL)shouldRequestPictureForWAStatus:(id)wastatus;
-(BOOL)shouldRequestPictureForJID:(id)jid;
-(void)updateProfilePictureRequestDateForJID:(id)jid;
-(void)deletePictureOfType:(unsigned)type atRelativePath:(id)relativePath;
-(id)saveImageData:(id)data forPictureOfType:(unsigned)type withFilename:(id)filename;
-(void)copyGroupPictureCachedThumbnailsFromJID:(id)jid toJID:(id)jid2;
-(void)deleteTemporaryGroupPictureForJID:(id)jid;
-(id)temporaryGroupPictureForJID:(id)jid;
-(void)storeTemporaryGroupPicture:(id)picture forWAChatSession:(id)wachatSession;
@end

__attribute__((visibility("hidden")))
@interface WAJidCapabilities : NSManagedObject {
}
@property(assign, nonatomic) short docPdf;
@property(assign, nonatomic) short docX;
@property(assign, nonatomic) short encBlist;
@property(assign, nonatomic) short encAudio;
@property(assign, nonatomic) short urlCapable;
@property(assign, nonatomic) short encLocation;
@property(assign, nonatomic) short encImage;
@property(assign, nonatomic) short encContact;
@property(assign, nonatomic) short encGroup;
@property(assign, nonatomic) short encV2;
@property(assign, nonatomic) short encV1;
@property(assign, nonatomic) short voipCapable;
@property(retain, nonatomic) NSDate* updateDate;
@property(retain, nonatomic) NSString* jid;
@end

__attribute__((visibility("hidden")))
@interface WASignedPrekey : NSManagedObject {
}
@property(assign, nonatomic) int keyId;
@property(retain, nonatomic) NSData* keyData;
@end

__attribute__((visibility("hidden")))
@interface WACertPinning : NSObject {
}
+(BOOL)verifyCertificateForTrust:(SecTrust*)trust andDomain:(id)domain;
+(id)trustedCertificatesForDomain:(id)domain;
+(id)pinnedCertificates;
+(id)string5;
+(id)string4;
+(id)string3;
+(id)string2;
+(id)string1;
@end

__attribute__((visibility("hidden")))
@interface _WAMultiSendMediaPickerPlaceholderViewController : UIViewController {
}
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendMediaPickerController : NSObject <WAMediaPickerControllerDelegate, UINavigationControllerDelegate, WAMultiSendPreviewViewControllerDelegate, UIImagePickerControllerDelegate, WAVideoPreviewViewControllerDelegate> {
	double _imagePickerDelayStartTime;
	UINavigationController* _activeNavigationController;
	id<WAMultiSendMediaPickerControllerDelegate> _delegate;
	unsigned _pickerMode;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned pickerMode;
@property(assign, nonatomic) __weak id<WAMultiSendMediaPickerControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)videoPreviewViewControllerDidCancel:(id)videoPreviewViewController;
-(void)videoPreviewViewController:(id)controller didFailWithError:(id)error;
-(void)videoPreviewViewControllerDidConfirmVideo:(id)videoPreviewViewController;
-(void)nativePickerDidCancel;
-(void)showPreviewViewControllerWithMediaInfo:(id)mediaInfo onNavigationController:(id)controller;
-(void)showPreviewViewControllerUsingInterstitialWithMediaInfo:(id)mediaInfo onNavigationController:(id)controller;
-(void)imagePickerController:(id)controller didFinishTakingPhotoWithInfo:(id)info;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)navigationController:(id)controller didShowViewController:(id)controller2 animated:(BOOL)animated;
-(void)cancel;
-(void)multiSendPreviewViewControllerDidRequestRetakePhoto:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewControllerDidCancel:(id)multiSendPreviewViewController;
-(void)multiSendPreviewViewController:(id)controller didConfirmItems:(id)items;
-(void)didSelectMediaItem:(id)item inMediaPickerController:(id)mediaPickerController;
-(void)mediaPickerControllerDidFinishPresenting:(id)mediaPickerController;
-(void)mediaPickerController:(id)controller didFinishWithSelectedItems:(id)selectedItems;
-(void)presentCustomPickerFromViewController:(id)viewController;
-(void)presentCameraFromViewController:(id)viewController;
-(void)presentFromViewController:(id)viewController;
-(void)applicationDidEnterBackground:(id)application;
-(void)dealloc;
-(id)initWithPickerMode:(unsigned)pickerMode;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendPreviewViewController : WAViewController <WAPageableItemBrowserViewDelegate, WAMultiSendThumbnailBrowserViewDelegate, WAMediaPickerControllerDelegate, UINavigationControllerDelegate, UIImagePickerControllerDelegate, WAMultiSendTitleViewDelegate, WACaptionBarDelegate, UIGestureRecognizerDelegate, WACameraViewControllerDelegate, WAImageToImageTransitioning> {
	int _selectedIndex;
	NSMutableArray* _mediaItems;
	NSString* _selectedItemUUIDBeforePresentingPicker;
	NSArray* _allAssetIdentifiersBeforePresentingPicker;
	double _imagePickerDelayStartTime;
	UIBarButtonItem* _cancelButton;
	UIBarButtonItem* _cancelExportButton;
	UIBarButtonItem* _doneCroppingButton;
	UIBarButtonItem* _sendButton;
	WAMultiSendTitleView* _titleView;
	WACaptionBar* _captionBar;
	float _captionBarAdjustment;
	BOOL _rotateCurrentItemWhenKeyboardHides;
	BOOL _cropCurrentItemWhenKeyboardHides;
	XXStruct_hhSZyC _transformInfoBeforeCropping;
	UIProgressView* _exportProgressView;
	BOOL _cancelExportRequested;
	UIView* _touchTrapperView;
	WARecipientNameView* _recipientView;
	BOOL _exportingItems;
	WAMediaPickerLibraryController* _libraryController;
	id<WAMultiSendPreviewViewControllerDelegate> _delegate;
	unsigned _pickerMode;
	id _lastUsedAssetCollectionIdentifier;
	NSString* _recipientName;
	WAMultiSendThumbnailBrowserView* _thumbnailBrowserView;
	WAPageableItemBrowserView* _pagingBrowserView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic, getter=isExportingItems) BOOL exportingItems;
@property(assign, nonatomic, getter=isCroppingCurrentItem) BOOL croppingCurrentItem;
@property(retain, nonatomic) WAPageableItemBrowserView* pagingBrowserView;
@property(retain, nonatomic) WAMultiSendThumbnailBrowserView* thumbnailBrowserView;
@property(copy, nonatomic) NSString* recipientName;
@property(retain, nonatomic) id lastUsedAssetCollectionIdentifier;
@property(assign, nonatomic) unsigned pickerMode;
@property(assign, nonatomic) __weak id<WAMultiSendPreviewViewControllerDelegate> delegate;
@property(retain, nonatomic) WAMediaPickerLibraryController* libraryController;
+(BOOL)isMixingImagesAndVideosSupported;
-(void).cxx_destruct;
-(void)multiSendTitleViewDidChangeCropping:(id)multiSendTitleView;
-(void)multiSendTitleView:(id)view willChangeCroppingWithCompletionHandler:(id)completionHandler;
-(void)multiSendTitleViewWillRotateCurrentItem:(id)multiSendTitleView;
-(void)multiSendTitleViewWillDeleteCurrentItem:(id)multiSendTitleView;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)browserViewTapped:(id)tapped;
-(void)captionBarDidFinishEditing:(id)captionBar;
-(void)captionBarDidChangeText:(id)captionBar;
-(void)captionBarDidHideKeyboard:(id)captionBar;
-(void)captionBarWillHideKeyboard:(id)captionBar;
-(void)captionBarWillShowKeyboard:(id)captionBar;
-(void)wa_fontSizeDidChange;
-(void)updateCaption;
-(void)setCaptionOfCurrentItem:(id)currentItem;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)moveThumbnailBrowserViewToBottom;
-(void)multiSendThumbnailBrowserView:(id)view willChangeFrame:(CGRect)frame;
-(void)multiSendThumbnailBrowserViewDidRequestItemSort:(id)multiSendThumbnailBrowserView;
-(BOOL)areMultiSendMediaItemsSorted;
-(id)indicesOfMultiSendMediaItemsSortedByDate;
-(void)multiSendThumbnailBrowserViewDidChangeEditingMode:(id)multiSendThumbnailBrowserView;
-(void)multiSendThumbnailBrowserView:(id)view didMoveItemAtIndex:(int)index toIndex:(int)index3;
-(void)multiSendThumbnailBrowserView:(id)view didRequestSelectionOfItemAtIndex:(int)index;
-(id)multiSendMediaItemAtIndex:(int)index;
-(int)multiSendThumbnailBrowserViewItemCount;
-(void)multiSendThumbnailBrowserViewDidRequestAddItem:(id)multiSendThumbnailBrowserView;
-(void)multiSendThumbnailBrowserView:(id)view didRequestRemovalOfItemAtIndex:(int)index;
-(void)multiSendThumbnailBrowserViewDidRequestSend:(id)multiSendThumbnailBrowserView;
-(id)pageableItemBrowserViewContainingViewController:(id)controller;
-(BOOL)pageableItemBrowserViewKeyboardIsShown:(id)shown;
-(void)pageableItemBrowserViewDidScroll:(id)pageableItemBrowserView;
-(void)pageableItemBrowserViewDidEndFocusedTask:(id)pageableItemBrowserView;
-(void)pageableItemBrowserViewWillBeginFocusedTask:(id)pageableItemBrowserView;
-(void)pageableItemBrowserView:(id)view didFinishRotatingItemAtIndex:(int)index;
-(void)pageableItemBrowserView:(id)view willAnimateRotationOfItemAtIndex:(int)index angle:(float)angle;
-(void)pageableItemBrowserView:(id)view didEndEditingAnimationForItemAtIndex:(int)index;
-(void)pageableItemBrowserView:(id)view willBeginEditingAnimationForItemAtIndex:(int)index;
-(void)pageableItemBrowserView:(id)view didUpdateThumbnailOfItemAtIndex:(int)index;
-(void)pageableItemBrowserView:(id)view wantsToDeleteItemAtIndex:(int)index;
-(void)pageableItemBrowserViewCurrentIndexDidChange:(id)pageableItemBrowserViewCurrentIndex;
-(int)pageableItemCount:(id)count;
-(id)pageableItemBrowserView:(id)view itemAtIndex:(int)index;
-(void)mediaPickerControllerDidFinishPresenting:(id)mediaPickerController;
-(void)mediaPickerController:(id)controller didFinishWithSelectedItems:(id)selectedItems;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)cameraViewController:(id)controller didSelectMediaPickerAsset:(id)asset cancelSelectionHandler:(id)handler;
-(void)cameraViewControllerDidCancel:(id)cameraViewController;
-(void)cameraViewController:(id)controller didFinishWithMediaItems:(id)mediaItems;
-(void)cancelCropping;
-(void)doneCropping:(id)cropping;
-(id)mediaItemWithUUID:(id)uuid;
-(id)mediaItemWithAssetIdentifier:(id)assetIdentifier;
-(void)updateExportProgress;
-(void)cancelExport:(id)export;
-(void)sendMediaItems:(id)items fromItems:(id)items2 atIndex:(int)index saveToCameraRoll:(BOOL)cameraRoll;
-(void)finishWithProcessedItems:(id)processedItems;
-(void)sendAllMediaItems:(id)items;
-(void)removeImageAtIndex:(int)index;
-(void)takeMorePhotos;
-(void)takeAnotherPhoto;
-(void)selectAnotherImageFromPhotoLibrary;
-(void)selectAnotherImage;
-(void)cancelAllExport;
-(void)cancelAndExit;
-(void)cancel:(id)cancel;
-(void)setSelectedIndex:(int)index animated:(BOOL)animated;
-(void)addMediaItem:(id)item;
-(void)cancelExportingAndDisableAutoExportingForAllMediaItems;
-(void)mediaItemDidUpdatePreviewContent:(id)mediaItem;
-(void)stopMonitoringMediaItem:(id)item;
-(void)startMonitoringMediaItem:(id)item;
-(unsigned)indexOfMediaItemWithIdentifier:(id)identifier;
-(void)updateInterface;
-(void)reload;
-(void)updateContentInsetWithAnimation:(BOOL)animation;
-(void)updateLayout;
-(void)viewDidLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)resetStats;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAPageableItemBrowserView : UIView <UIScrollViewDelegate, WAPageableItemViewDelegate> {
	UIScrollView* _pagingScrollView;
	NSMutableSet* _visiblePages;
	NSMutableSet* _recycledPages;
	BOOL _ignoreScrollViewDidScroll;
	BOOL _disableDelegateCallbacksDuringScrollingAnimation;
	BOOL _keyboardHidden;
	BOOL _scrolling;
	id<WAPageableItemBrowserViewDelegate> _delegate;
	int _currentIndex;
	UIEdgeInsets _contentInsetForLayout;
	UIEdgeInsets _contentInset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic, getter=isScrolling) BOOL scrolling;
@property(assign, nonatomic) UIEdgeInsets contentInset;
@property(assign, nonatomic) UIEdgeInsets contentInsetForLayout;
@property(assign, nonatomic, getter=isKeyboardHidden) BOOL keyboardHidden;
@property(readonly, assign, nonatomic) UIPanGestureRecognizer* panGestureRecognizer;
@property(assign, nonatomic, getter=isScrollEnabled) BOOL scrollEnabled;
@property(assign, nonatomic, getter=isCroppingCurrentItem) BOOL croppingCurrentItem;
@property(readonly, assign, nonatomic) WAPageableItemView* currentItemView;
@property(readonly, assign, nonatomic) float fractionalCurrentIndex;
@property(assign, nonatomic) int currentIndex;
@property(assign, nonatomic) __weak id<WAPageableItemBrowserViewDelegate> delegate;
-(void).cxx_destruct;
-(void)stopPresentation;
-(void)didScroll;
-(void)prepareToCancelCropping;
-(void)rotateCurrentItem;
-(void)setViewStateOfCurrentPage:(id)currentPage;
-(id)viewStateOfCurrentPage;
-(void)resetViewStates;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidEndScrollingAnimation:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(id)pageableItemViewContainingViewController:(id)controller;
-(BOOL)pageableItemViewKeyboardIsShown:(id)shown;
-(void)pageableItemViewDidEndFocusedTask:(id)pageableItemView;
-(void)pageableItemViewWillBeginFocusedTask:(id)pageableItemView;
-(void)pageableItemViewDidFinishRotationAnimation:(id)pageableItemView;
-(void)pageableItemView:(id)view willAnimateRotationByAngle:(float)angle;
-(void)pageableItemViewDidUpdateThumbnail:(id)pageableItemView;
-(void)pageableItemViewDidEndEditingAnimation:(id)pageableItemView;
-(void)pageableItemViewWillBeginEditingAnimation:(id)pageableItemView;
-(id)dequeueOrCreateViewForItem:(id)item;
-(void)configurePage:(id)page atIndex:(int)index;
-(CGRect)frameForPageAtIndex:(int)index;
-(id)visiblePageAtIndex:(int)index;
-(void)setContentInset:(UIEdgeInsets)inset animated:(BOOL)animated;
-(id)displayPageAtIndex:(int)index;
-(void)tilePages;
-(void)removeItemAtIndex:(int)index animated:(BOOL)animated;
-(void)insertItemAtIndex:(int)index animated:(BOOL)animated;
-(void)recycleView:(id)view;
-(void)setCurrentIndex:(int)index animated:(BOOL)animated;
-(void)reloadItemAtIndex:(int)index;
-(void)reload;
-(void)layoutSubviews;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)commonInit;
-(void)awakeFromNib;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WASharedItemOutbox : NSObject <NSCoding> {
	NSString* _outboxID;
	NSURL* _fileURL;
	NSMutableArray* _items;
	BOOL _didCancelSend;
}
@property(readonly, copy, nonatomic) NSArray* items;
@property(assign, nonatomic) BOOL didCancelSend;
+(id)sharedItemOutboxAtURL:(id)url;
-(void).cxx_destruct;
-(void)dispose;
-(void)moveToTemporaryDirectory;
-(void)save;
-(void)removeItem:(id)item;
-(void)addItem:(id)item;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WASharedItem : NSObject <WAMediaUploadable, NSCoding> {
	unsigned _mediaType;
	BOOL _isFileURLPermanent;
	NSString* _uniqueID;
	NSString* _stanzaID;
	NSDate* _creationDate;
	NSString* _toJID;
	NSString* _text;
	NSURL* _fileURL;
	int _multiSendMediaIndex;
	int _multiSendMediaCount;
	NSString* _mediaCollectionName;
	NSString* _vCardName;
	NSString* _vCardString;
	NSNumber* _latitude;
	NSNumber* _longitude;
	NSString* _locationName;
	NSString* _locationUrl;
	WAMessageMetadata* _metadata;
	NSData* _imageRepresentationData;
	NSArray* _broadcastListRecipientJIDs;
	NSString* _broadcastListName;
	int _mediaDuration;
	NSData* _thumbnailData;
	unsigned _status;
	NSString* _serverMediaURL;
	NSString* _serverHash;
	int _filteredRecipientCount;
	float _uploadProgress;
	unsigned long long _fileSize;
}
@property(readonly, assign, nonatomic) int httpRetryCount;
@property(readonly, assign, nonatomic) BOOL isPTT;
@property(readonly, copy, nonatomic) NSString* fileHash;
@property(readonly, assign, nonatomic) unsigned mediaType;
@property(readonly, copy, nonatomic) NSString* mediaPath;
@property(readonly, assign, nonatomic) NSString* stanzaID;
@property(readonly, assign, nonatomic) id<NSObject, NSCopying> uniqueID;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) float uploadProgress;
@property(assign, nonatomic) int filteredRecipientCount;
@property(copy, nonatomic) NSString* serverHash;
@property(copy, nonatomic) NSString* serverMediaURL;
@property(assign, nonatomic) unsigned status;
@property(readonly, assign, nonatomic) NSData* thumbnailData;
@property(readonly, assign, nonatomic) int mediaDuration;
@property(readonly, assign, nonatomic) unsigned long long fileSize;
@property(retain, nonatomic) NSString* broadcastListName;
@property(retain, nonatomic) NSArray* broadcastListRecipientJIDs;
@property(retain, nonatomic) NSData* imageRepresentationData;
@property(readonly, assign, nonatomic) WAMessageMetadata* metadata;
@property(retain, nonatomic) NSString* locationUrl;
@property(retain, nonatomic) NSString* locationName;
@property(retain, nonatomic) NSNumber* longitude;
@property(retain, nonatomic) NSNumber* latitude;
@property(retain, nonatomic) NSString* vCardString;
@property(retain, nonatomic) NSString* vCardName;
@property(copy, nonatomic) NSString* mediaCollectionName;
@property(assign, nonatomic) int multiSendMediaCount;
@property(assign, nonatomic) int multiSendMediaIndex;
@property(readonly, assign, nonatomic) NSURL* fileURL;
@property(readonly, copy, nonatomic) NSString* text;
@property(retain, nonatomic) NSString* toJID;
@property(readonly, assign, nonatomic) NSDate* creationDate;
-(void).cxx_destruct;
-(void)didChangeOutboxToURL:(id)url;
-(void)replaceMediaWithMediaAtPath:(id)path;
-(void)prepareForUploadWithCompletionHandler:(id)completionHandler;
-(void)prepareForSavingWithOutboxURL:(id)outboxURL;
-(void)dealloc;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithAudioFileURL:(id)audioFileURL;
-(id)initWithPlace:(id)place;
-(id)initWithVCard:(id)vcard;
-(id)initWithText:(id)text metadata:(id)metadata;
-(id)initWithVideoFileURL:(id)videoFileURL caption:(id)caption;
-(id)initWithImageFileURL:(id)imageFileURL caption:(id)caption;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAChatDatabaseStatsManager : NSObject {
	WAChatStorage* _chatStorage;
	NSPersistentStoreCoordinator* _persistentStoreCoordinator;
	NSManagedObjectModel* _managedObjectModel;
	NSManagedObjectContext* _managedObjectContext;
	NSURL* _persistentStoreURL;
	BOOL _isLoading;
	float _loadingProgress;
	NSArray* _allChatJIDs;
}
@property(retain, nonatomic) NSArray* allChatJIDs;
@property(readonly, assign, nonatomic) float loadingProgress;
@property(readonly, assign, nonatomic) BOOL isLoading;
-(void).cxx_destruct;
-(void)refreshStatsRecurring:(BOOL)recurring;
-(void)saveContext;
-(void)insertStatsToDB:(id)db;
-(id)queryStatsForJID:(id)jid isRecurring:(BOOL)recurring;
-(void)deleteAllNonrecurringStats;
-(void)deleteDB;
-(void)makeNewDB;
-(id)managedObjectContext;
-(id)persistentStoreCoordinator;
-(id)managedObjectModel;
-(id)persistentStoreURL;
-(id)persistentStorePath;
-(id)initWithStorage:(id)storage;
@end

__attribute__((visibility("hidden")))
@interface _WAMediaDataScrollerPage : NSObject {
	WAAutoCropImageView* _imageView;
	unsigned _index;
}
@property(assign, nonatomic) unsigned index;
@property(readonly, assign, nonatomic) WAAutoCropImageView* imageView;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMediaDataScrollerPresentationController : WAMediaDataPresentationController <UIScrollViewDelegate> {
	UIScrollView* _scrollView;
	NSMutableSet* _recycledPages;
	NSMutableSet* _visiblePages;
	UILabel* _label;
	BOOL _ignoreTransition;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)tilePages;
-(void)transitionFromIndex:(unsigned)index toCurrentIndexWithAnimation:(BOOL)animation completion:(id)completion;
-(void)updateLabel;
-(void)viewDidLayoutSubviews;
-(void)didUpdateImageAtIndex:(unsigned)index completed:(BOOL)completed;
-(void)cellDataMessagesDidChange;
-(id)currentImageView;
-(void)dealloc;
-(id)initWithChatCellData:(id)chatCellData;
@end

__attribute__((visibility("hidden")))
@interface WAMutableBackupInformation : WABackupInformation {
}
@property(readonly, assign, nonatomic) NSMutableDictionary* mutableData;
@property(retain, nonatomic) NSDictionary* debugFileSizes;
@property(retain, nonatomic) NSNumber* size;
@property(retain, nonatomic) NSNumber* version;
@property(retain, nonatomic) NSNumber* includeVideos;
@property(retain, nonatomic) NSDate* date;
-(BOOL)saveToPath:(id)path error:(out id*)error;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithContentsOfFile:(id)file;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAListsViewController : WAViewController <NSFetchedResultsControllerDelegate, WARecipientsViewControllerDelegate, UITableViewDataSource, UITableViewDelegate> {
	NSFetchedResultsController* _fetchedResultsController;
	UIView* _emptyListView;
	UITableView* _tableView;
	BOOL _chatStorageAvailable;
	WAChatSession* _activeList;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned fetchedResultsCount;
-(void).cxx_destruct;
-(void)chatStorageDidLoadDatabase:(id)chatStorage;
-(void)chatStorageWillUnloadDatabase:(id)chatStorage;
-(void)recipientsController:(id)controller didFinishWithContacts:(id)contacts;
-(void)recipientsControllerDidCancel:(id)recipientsController;
-(void)createNewList:(id)list;
-(void)deleteExistingList:(id)list;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndEditingRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willBeginEditingRowAtIndexPath:(id)indexPath;
-(BOOL)tableView:(id)view canEditRowAtIndexPath:(id)indexPath;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didChangeObject:(id)object atIndexPath:(id)indexPath forChangeType:(unsigned)changeType newIndexPath:(id)path;
-(void)controller:(id)controller didChangeSection:(id)section atIndex:(unsigned)index forChangeType:(unsigned)changeType;
-(void)controllerWillChangeContent:(id)controller;
-(void)setUpFetchRequest;
-(void)tableView:(id)view accessoryButtonTappedForRowWithIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)navigateToList:(id)list animated:(BOOL)animated;
-(void)updateInterfaceWithAnimation:(BOOL)animation;
-(void)setUpEmptyListView;
-(void)setBackButtonHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)setEditing:(BOOL)editing animated:(BOOL)animated;
-(void)resetAllSeparatorInsets;
-(void)wa_fontSizeDidChange;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)loadView;
-(id)uniqueIdentifier;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAAxolotlSession : NSManagedObject {
}
@property(retain, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) NSData* sessionData;
@property(assign, nonatomic) long long recipientId;
@end

__attribute__((visibility("hidden")))
@interface _WACaptionBarMetrics : NSObject {
	float _height;
	CGRect _lastLineRect;
}
@property(assign, nonatomic) float height;
@property(assign, nonatomic) CGRect lastLineRect;
@end

__attribute__((visibility("hidden")))
@interface WACaptionBar : UIView <WAInputTextViewDelegate> {
	WAInputTextView* _textView;
	WAInputTextView* _secondaryTextView;
	NSString* _placeholderText;
	float _blendAmount;
	BOOL _ignoreTextViewHeightChanges;
	NSMutableDictionary* _cachedTextHeights;
	UIView* _borderView;
	CAShapeLayer* _maskLayer;
	UIView* _contentView;
	UIView* _backgroundView;
	UIColor* _highlightedTextColor;
	UIColor* _textColor;
	UIColor* _highlightedBorderColor;
	UIColor* _borderColor;
	UIEdgeInsets _borderInsets;
	NSMutableDictionary* _cachedTextDirections;
	BOOL _placeholderIsRTL;
	BOOL _textDidChange;
	UIView* _characterCountContainer;
	UILabel* _characterCountLabel;
	UILabel* _secondaryCharacterCountLabel;
	BOOL _interfaceRotationInProgress;
	id<WACaptionBarDelegate> _delegate;
	NSString* _text;
	unsigned _maximumCaptionLength;
	float _keyboardHeight;
	int _style;
	UIEdgeInsets _edgeInsets;
	UIEdgeInsets _textViewInsets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) float maximumHeight;
@property(readonly, assign, nonatomic) int style;
@property(readonly, assign, nonatomic) float singleLineHeight;
@property(readonly, assign, nonatomic) float keyboardHeight;
@property(assign, nonatomic) unsigned maximumCaptionLength;
@property(readonly, assign, nonatomic, getter=isKeyboardShown) BOOL keyboardShown;
@property(readonly, assign, nonatomic, getter=isInterfaceRotationInProgress) BOOL interfaceRotationInProgress;
@property(copy, nonatomic) NSString* text;
@property(assign, nonatomic) UIEdgeInsets textViewInsets;
@property(assign, nonatomic) UIEdgeInsets edgeInsets;
@property(assign, nonatomic) __weak id<WACaptionBarDelegate> delegate;
-(void).cxx_destruct;
-(id)accessibilityHint;
-(id)accessibilityLabel;
-(BOOL)isAccessibilityElement;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)hideKeyboard;
-(void)textViewDictationDidEnd:(id)textViewDictation;
-(void)textViewDidChange:(id)textView;
-(BOOL)textView:(id)view shouldChangeTextInRange:(NSRange)range replacementText:(id)text;
-(void)textViewDidEndEditing:(id)textView;
-(void)textViewDidBeginEditing:(id)textView;
-(BOOL)textViewShouldEndEditing:(id)textView;
-(BOOL)textViewShouldBeginEditing:(id)textView;
-(void)textViewDidPasteImage:(id)textView;
-(void)textView:(id)view needsHeightChangedTo:(float)to;
-(float)textViewMaximumHeight:(id)height;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateWidthChangeTo:(float)to;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(BOOL)shouldShowCharacterCountLabelForText:(id)text;
-(void)updateCharacterCountLabel:(id)label withCount:(unsigned)count;
-(void)updateCharacterCountLabel:(id)label forTextView:(id)textView;
-(void)updateCharacterCount;
-(void)showText:(id)text blendedWithText:(id)text2 blendAmount:(float)amount;
-(void)setText:(id)text onTextView:(id)view;
-(void)updateFonts;
-(void)setBorderHighlighted:(BOOL)highlighted;
-(void)layoutSubviews;
-(void)didMoveToSuperview;
-(void)updateMask;
-(void)setFrame:(CGRect)frame;
-(void)setBounds:(CGRect)bounds;
-(CGSize)sizeThatFits:(CGSize)fits;
-(float)textViewHeightForText:(id)text lastLineRect:(CGRect*)rect;
-(id)newTextView;
-(void)dealloc;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAAlternatingLabel : UILabel {
	NSTimer* _timer;
	int _index;
	NSString* _primaryText;
	NSString* _secondaryText;
	double _interval;
}
@property(assign, nonatomic) double interval;
@property(assign, nonatomic, getter=isAnimating) BOOL animating;
@property(copy, nonatomic) NSString* secondaryText;
@property(copy, nonatomic) NSString* primaryText;
-(void).cxx_destruct;
-(void)switchLabel:(id)label;
@end

__attribute__((visibility("hidden")))
@interface WAPageableItemView : UIView {
	BOOL _cropping;
	BOOL _keyboardHidden;
	BOOL _scrolling;
	int _index;
	id<WAPageableItemViewDelegate> _delegate;
	WAMultiSendMediaItem* _currentMediaItem;
	UIEdgeInsets _contentInsetForLayout;
	UIEdgeInsets _contentInset;
}
@property(assign, nonatomic) UIEdgeInsets contentInset;
@property(assign, nonatomic) UIEdgeInsets contentInsetForLayout;
@property(assign, nonatomic, getter=isScrolling) BOOL scrolling;
@property(assign, nonatomic, getter=isKeyboardHidden) BOOL keyboardHidden;
@property(assign, nonatomic, getter=isCropping) BOOL cropping;
@property(readonly, assign, nonatomic) WAMultiSendMediaItem* currentMediaItem;
@property(assign, nonatomic) __weak id<WAPageableItemViewDelegate> delegate;
@property(assign, nonatomic) int index;
+(id)pageableItemViewForMultiSendMediaItem:(id)multiSendMediaItem;
-(void).cxx_destruct;
-(id)accessibilityValue;
-(id)accessibilityLabel;
-(void)prepareToCancelCropping;
-(void)stopPresentation;
-(void)didScroll;
-(void)rotateCounterClockwise;
-(id)contentView;
-(void)resetViewState;
-(void)setViewState:(id)state;
-(id)viewState;
-(void)didSetContentInset;
-(void)setContentInset:(UIEdgeInsets)inset animated:(BOOL)animated;
-(BOOL)isCompatibleWithItem:(id)item;
-(void)configureWithItem:(id)item;
-(void)prepareForReuse;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface XMPPSocket : NSObject <GCDAsyncSocketDelegate> {
	GCDAsyncSocket* _socket;
	double _timeout;
	WATimer* _disconnectionTimer;
	NSArray* _hosts;
	int _currentState;
	NSArray* _addresses;
	int _primaryPort;
	int _secondaryPort;
	NSString* _interface;
	int _disconnectCount;
	int _httpChunkRemainingLength;
	NSMutableData* _httpRemainingChunk;
	BOOL _bindsToCellularNetwork;
	WAInetAddress* _currentAddress;
	NSString* _currentHost;
	unsigned _currentPort;
	WAInetAddress* _hintIP;
	id<XMPPSocketDelegate> _delegate;
}
@property(readonly, assign, nonatomic, getter=isAlive) BOOL alive;
@property(assign, nonatomic) __weak id<XMPPSocketDelegate> delegate;
@property(retain, nonatomic) WAInetAddress* hintIP;
@property(assign, nonatomic) BOOL bindsToCellularNetwork;
@property(readonly, assign, nonatomic, getter=isConnected) BOOL connected;
@property(readonly, assign, nonatomic) unsigned currentPort;
@property(readonly, copy, nonatomic) NSString* currentHost;
@property(readonly, assign, nonatomic) WAInetAddress* currentAddress;
@property(readonly, assign, nonatomic) NSObject<OS_dispatch_queue>* queue;
-(void).cxx_destruct;
-(void)socketDidDisconnect:(id)socket withError:(id)error;
-(void)socket:(id)socket didWriteDataWithTag:(long)tag;
-(void)socket:(id)socket didReadData:(id)data withTag:(long)tag;
-(void)socket:(id)socket didConnectToHost:(id)host port:(unsigned short)port;
-(void)writeData:(id)data withTimeout:(double)timeout;
-(void)readDataWithTimeout:(double)timeout;
-(void)disconnectAfterWriting;
-(void)disconnectImmediately;
-(void)connect;
-(void)resolveAddressesForHost:(id)host;
-(id)randomHost;
-(void)processHttpChunkData:(id)data;
-(void)resetInternalState;
-(void)xmppSocketDidDisconnect;
-(void)updateAndPerformNextState;
-(void)connectToHost;
-(id)initWithQueue:(id)queue timeout:(double)timeout;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendThumbnailBrowserView : UIView <WAMultiSendThumbnailBrowserItemViewDelegate> {
	UIImageView* _topBorderImageView;
	UIImageView* _backgroundImageView;
	NSMutableArray* _itemViews;
	UIButton* _viewBlocker;
	BOOL _draggingInProgress;
	BOOL _ignoreDragging;
	int _maxItemsPerRow;
	BOOL _editingModeBeforeRotationAnimation;
	int _rowCount;
	float _itemWidth;
	UIView* _blurView;
	BOOL _editing;
	id<WAMultiSendThumbnailBrowserViewDelegate> _delegate;
	UIView* _headerView;
	int _currentIndex;
	int _maximumNumberOfItems;
	WAMultiSendThumbnailBrowserAddItemButton* _addItemButton;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) float singleRowHeight;
@property(assign, nonatomic, getter=isAddItemButtonHidden) BOOL addItemButtonHidden;
@property(assign, nonatomic) unsigned addItemButtonType;
@property(readonly, assign, nonatomic) WAMultiSendThumbnailBrowserAddItemButton* addItemButton;
@property(assign, nonatomic) int maximumNumberOfItems;
@property(assign, nonatomic, getter=isEditing) BOOL editing;
@property(assign, nonatomic) int currentIndex;
@property(retain, nonatomic) UIView* headerView;
@property(assign, nonatomic) __weak id<WAMultiSendThumbnailBrowserViewDelegate> delegate;
+(float)preferredThumbnailImageWidth;
-(void).cxx_destruct;
-(void)superViewDidEndRotationAnimation;
-(void)superViewWillBeginRotationAnimation;
-(void)multiSendThumbnailBrowserItemViewWasTapped:(id)tapped;
-(void)changeIndexOfItemView:(id)itemView to:(int)to;
-(void)multiSendThumbnailBrowserItemViewCenterDidChange:(id)multiSendThumbnailBrowserItemViewCenter;
-(void)multiSendThumbnailBrowserItemViewDidEndDragging:(id)multiSendThumbnailBrowserItemView;
-(void)multiSendThumbnailBrowserItemViewDidBeginDragging:(id)multiSendThumbnailBrowserItemView;
-(void)multiSendThumbnailBrowserItemViewWantsToEnterEditMode:(id)enterEditMode;
-(void)sortItemViewsByIndex;
-(void)windowBlockerTouched:(id)touched;
-(void)layoutViewBlocker;
-(void)removeViewBlocker;
-(void)addViewBlocker;
-(void)didMoveToWindow;
-(void)setRotationAngle:(float)angle ofThumbnailAtIndex:(int)index;
-(void)reloadThumbnailAtIndex:(int)index;
-(void)removeItemAtIndex:(int)index;
-(void)reload;
-(void)setCurrentIndex:(int)index animated:(BOOL)animated;
-(void)send:(id)send;
-(void)addItem:(id)item;
-(int)bestIndexForItemViewWithCenter:(CGPoint)center;
-(int)mapIndexToLogicalIndex:(int)logicalIndex ignoringOutsideItems:(BOOL)items;
-(CGPoint)centerForItemViewAtIndex:(int)index ignoringOutsideItems:(BOOL)items;
-(void)relayoutThumbnailsWithAnimation:(BOOL)animation;
-(void)layoutSubviews;
-(void)applicationDidEnterBackground:(id)application;
-(void)dealloc;
-(void)commonInit;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendMediaItem : NSObject <NSCopying> {
	float _exportProgress;
	NSURL* _exportedContentURL;
	NSURL* _referenceURL;
	UIImage* _originalImageForPreview;
	UIImage* _thumbnail;
	BOOL _needsExport;
	int _renderID;
	NSObject<OS_dispatch_group>* _renderDispatchGroup;
	NSObject<OS_dispatch_group>* _exportDispatchGroup;
	BOOL _exportInProgress;
	BOOL _isSavedToCameraRoll;
	BOOL _exportCancelled;
	BOOL _renderingInProgress;
	BOOL _removeFileUponDeallocation;
	BOOL _needsRegeneratePreviewImageFromSource;
	BOOL _renderingEnabled;
	BOOL _needsRender;
	BOOL _exportAutomatically;
	BOOL _exportedContentURLConsumed;
	id _identifier;
	NSString* _UUID;
	NSString* _text;
	NSString* _collectionID;
	WAPageableItemView* _presentingItemView;
	NSURL* _alAssetURL;
	float _rotationAngle;
	NSDate* _date;
	id _exportProgressHandler;
	NSURL* _sourceURL;
	CGSize _cropSize;
	CGPoint _anchorPoint;
}
@property(readonly, assign, nonatomic) NSURL* sourceURL;
@property(readonly, copy, nonatomic) NSString* accessibilityValue;
@property(readonly, copy, nonatomic) NSString* accessibilityLabel;
@property(assign, nonatomic, getter=isExportedContentURLConsumed) BOOL exportedContentURLConsumed;
@property(assign, nonatomic) BOOL exportAutomatically;
@property(readonly, assign, nonatomic) BOOL needsRender;
@property(assign, nonatomic, getter=isRenderingEnabled) BOOL renderingEnabled;
@property(assign, nonatomic) BOOL needsRegeneratePreviewImageFromSource;
@property(assign, nonatomic) BOOL removeFileUponDeallocation;
@property(readonly, assign, nonatomic) float exportProgress;
@property(copy, nonatomic) id exportProgressHandler;
@property(readonly, assign, nonatomic) NSURL* exportedContentURL;
@property(readonly, assign, nonatomic) UIImage* renderedImage;
@property(readonly, assign, nonatomic) id renderedContent;
@property(readonly, assign, nonatomic) UIImage* originalImageForPreview;
@property(readonly, assign, nonatomic) UIImage* thumbnail;
@property(readonly, assign, nonatomic) NSDate* date;
@property(readonly, assign, nonatomic) BOOL renderingInProgress;
@property(assign, nonatomic) XXStruct_hhSZyC transformInfo;
@property(assign, nonatomic) CGRect normalizedRotatedCropRect;
@property(readonly, assign, nonatomic, getter=isIdentityTransform) BOOL identityTransform;
@property(readonly, assign, nonatomic) BOOL rightAngleRotationOnly;
@property(assign, nonatomic) float rotationAngle;
@property(assign, nonatomic) CGPoint anchorPoint;
@property(assign, nonatomic) CGSize cropSize;
@property(readonly, assign, nonatomic, getter=isEditable) BOOL editable;
@property(readonly, assign, nonatomic) NSURL* alAssetURL;
@property(assign, nonatomic) __weak WAPageableItemView* presentingItemView;
@property(readonly, copy, nonatomic) NSURL* referenceURL;
@property(readonly, assign, nonatomic) BOOL isVideo;
@property(copy, nonatomic) NSString* collectionID;
@property(copy, nonatomic) NSString* text;
@property(readonly, copy, nonatomic) NSString* UUID;
@property(copy, nonatomic) id identifier;
+(id)mediaItemWithAssetIdentifier:(id)assetIdentifier media:(id)media;
+(void)initialize;
-(void).cxx_destruct;
-(id)generateOriginalImageForPreview;
-(void)invalidateOriginalImageForPreview;
-(void)reallyExportWithProgressHandler:(id)progressHandler completion:(id)completion;
-(void)internalExportContent;
-(void)exportWithCompletionHandler:(id)completionHandler;
-(void)cancelCurrentExport;
-(void)setNeedsExport;
-(void)performBlockAfterRendering:(id)rendering;
-(void)renderWithCompletionHandler:(id)completionHandler;
-(void)internalRenderContent;
-(void)didRenderUsingFastPath;
-(void)setNeedsRender;
-(void)didChangeTransform;
-(void)setRotationAngle:(float)angle adjustCropSize:(BOOL)size;
-(void)saveToCameraRollAsynchronouslyIfNeeded;
-(void)didReceiveMemoryWarning;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(void)prepareWithCompletionHandler:(id)completionHandler;
-(id)description;
-(void)dealloc;
-(void)copyAttributesFromItem:(id)item;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithSourceURL:(id)sourceURL assetIdentifier:(id)identifier;
-(id)initWithVideoURL:(id)videoURL assetIdentifier:(id)identifier;
-(id)initWithImageURL:(id)imageURL renderedImage:(id)image assetIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendThumbnailBrowserAddItemButton : WAMultiSendThumbnailBrowserItemView {
	UIButton* _button;
	unsigned _buttonType;
}
@property(assign, nonatomic) unsigned buttonType;
@property(assign, nonatomic, getter=isHighlighted) BOOL highlighted;
-(void).cxx_destruct;
-(void)updateButtonHighlight:(id)highlight;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(void)addTarget:(id)target action:(SEL)action forControlEvents:(unsigned)controlEvents;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAWebClientSessionData : NSObject <NSCoding> {
	NSString* _webRef;
	BOOL _active;
	NSString* _browserID;
	NSString* _clientToken;
	NSString* _operatingSystem;
	NSString* _browser;
	NSDate* _deviceLoginTime;
	NSString* _location;
	NSDate* _lastActiveTime;
	NSDate* _expirationTime;
}
@property(copy, nonatomic) NSDate* expirationTime;
@property(assign, nonatomic, getter=isActive) BOOL active;
@property(copy, nonatomic) NSDate* lastActiveTime;
@property(copy, nonatomic) NSString* location;
@property(copy, nonatomic) NSDate* deviceLoginTime;
@property(copy, nonatomic) NSString* browser;
@property(copy, nonatomic) NSString* operatingSystem;
@property(copy, nonatomic) NSString* webRef;
@property(copy, nonatomic) NSString* clientToken;
@property(copy, nonatomic) NSString* browserID;
-(void).cxx_destruct;
-(BOOL)isEqualToSessionData:(id)sessionData;
-(void)clear;
-(id)description;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAWebClientSession : NSObject {
	WAWebClientSessionData* _sessionData;
	BOOL _preemptiveChatResponseSent;
	BOOL _preemptiveContactsResponseSent;
	NSString* _browserID;
	NSData* _sharedSecret;
}
@property(copy, nonatomic) NSString* location;
@property(copy, nonatomic) NSString* clientToken;
@property(copy, nonatomic) NSString* browser;
@property(copy, nonatomic) NSString* operatingSystem;
@property(copy, nonatomic) NSDate* lastActiveTime;
@property(copy, nonatomic) NSDate* deviceLoginTime;
@property(copy, nonatomic) NSString* webRef;
@property(assign, nonatomic) BOOL preemptiveContactsResponseSent;
@property(assign, nonatomic) BOOL preemptiveChatResponseSent;
@property(copy, nonatomic) NSData* sharedSecret;
@property(readonly, copy, nonatomic) NSString* browserID;
+(void)deleteKeychainEntryForBrowserID:(id)browserID;
+(id)keychainQueryForBrowserID:(id)browserID;
+(id)existingSessionWithBrowserID:(id)browserID;
+(id)allSavedSessionDataObjects;
+(id)lastSession;
-(void).cxx_destruct;
-(id)hashWithSharedSecret:(id)sharedSecret;
-(id)unserialize:(id)unserialize streamError:(out BOOL*)error;
-(id)serialize:(id)serialize;
-(void)resetState;
-(void)setOrExtendTimeoutIfNeeded;
-(void)resetTimeoutIfNeeded;
-(void)makeTemporary;
-(void)remove;
-(void)makeCurrent;
-(id)description;
-(void)save;
-(id)initWithNewBrowserID:(id)newBrowserID deviceLoginTime:(id)time;
-(id)initWithExistingBrowserID:(id)existingBrowserID secret:(id)secret sessionData:(id)data;
@end

__attribute__((visibility("hidden")))
@interface WAAssetCollection : NSObject <UICollectionViewDataSource> {
	unsigned _mediaTypes;
	PHAssetCollection* _assetCollection;
	PHFetchResult* _fetchResult;
	ALAssetsGroup* _assetsGroup;
	BOOL _useReverseOrderForCollectionView;
	NSArray* _assets;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) PHFetchResult* fetchResult;
@property(assign, nonatomic) BOOL useReverseOrderForCollectionView;
@property(readonly, assign, nonatomic) NSArray* assets;
@property(readonly, assign, nonatomic) UIImage* posterImage;
@property(readonly, assign, nonatomic) id localIdentifier;
@property(readonly, assign, nonatomic) unsigned assetCount;
@property(readonly, assign, nonatomic) unsigned estimatedAssetCount;
@property(readonly, copy, nonatomic) NSString* localizedTitle;
+(id)sortedAssetCollectionsWithCollections:(id)collections;
+(void)fetchAllCollectionsForMediaTypes:(unsigned)mediaTypes completion:(id)completion;
+(void)fetchAllAssetsFromAssetsGroup:(id)assetsGroup completion:(id)completion;
-(void).cxx_destruct;
-(int)indexOfCollectionViewMediaPickerAsset:(id)collectionViewMediaPickerAsset;
-(id)collectionViewMediaPickerAssetAtIndex:(int)index;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfVideos;
-(int)numberOfPhotos;
-(BOOL)canQueryCountOfMediaType;
-(void)storeCountOfVideosInCameraRoll:(int)cameraRoll;
-(void)storeCountOfPhotosInCameraRoll:(int)cameraRoll;
-(void)stopCachingThumbnailsOfPixelSize:(CGSize)pixelSize inRange:(NSRange)range;
-(void)startCachingThumbnailsOfPixelSize:(CGSize)pixelSize inRange:(NSRange)range;
-(BOOL)updateWithChangeInstance:(id)changeInstance;
-(id)phAssetAtIndex:(unsigned)index;
-(void)fetchAssetsFromPhotosFrameworkWithCompletionHandler:(id)completionHandler;
-(void)fetchAssetsFromAssetsLibraryWithCompletionHandler:(id)completionHandler;
-(void)fetchAssetsWithCompletionHandler:(id)completionHandler;
-(void)refreshWithCompletionHandler:(id)completionHandler;
-(id)allAssetCollectionsFromMoments:(id)moments;
-(id)fetchResultsForAssetsWithMediaTypes:(unsigned)mediaTypes inCollection:(id)collection;
-(id)initWithAssetsGroup:(id)assetsGroup mediaTypes:(unsigned)types;
-(id)initWithAssetCollection:(id)assetCollection mediaTypes:(unsigned)types;
@end

__attribute__((visibility("hidden")))
@interface _WAMessageTextViewInternal : UIView {
	WAMessageTextView* _messageTextView;
}
@property(assign, nonatomic) __weak WAMessageTextView* messageTextView;
+(void)drawDividerAtPoint:(CGPoint)point width:(float)width;
-(void).cxx_destruct;
-(void)drawRect:(CGRect)rect;
@end

__attribute__((visibility("hidden")))
@interface WAMessageTextView : UIView {
	UIImageView* _listIconImageView;
	TextBlock* _selectedTextBlock;
	BOOL _isHandlingLongPress;
	BOOL _showListIcon;
	BOOL _flippedHorizontally;
	float _dividerWidth;
	id<WAMessageTextViewDelegate> _delegate;
	WAMessageFooterView* _footerView;
	_WAMessageTextViewInternal* _messageTextViewInternal;
	UIView* _listIconSeparatorView;
	NSArray* _textMessages;
}
@property(readonly, assign, nonatomic) BOOL flippedHorizontally;
@property(readonly, assign, nonatomic) BOOL showListIcon;
@property(readonly, assign, nonatomic) NSArray* textMessages;
@property(readonly, assign, nonatomic) UIView* listIconSeparatorView;
@property(readonly, assign, nonatomic) _WAMessageTextViewInternal* messageTextViewInternal;
@property(readonly, assign, nonatomic) UIImageView* listIconImageView;
@property(readonly, assign, nonatomic) WAMessageFooterView* footerView;
@property(assign, nonatomic) __weak id<WAMessageTextViewDelegate> delegate;
@property(assign, nonatomic) float dividerWidth;
@property(readonly, assign, nonatomic) UIView* contentView;
+(CGSize)preferredSizeForCellData:(id)cellData maximumWidth:(float)width;
+(void)initialize;
-(void).cxx_destruct;
-(id)linkDataForPreviewAtLocation:(CGPoint)location returningLinkDisplayRect:(CGRect*)rect;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)textBlockAtTouchLocation:(CGPoint)touchLocation;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(void)handleLongPress;
-(void)handleSingleTap;
-(void)unhighlightAllTextBlocks;
-(void)highlightTextBlock:(id)block;
-(void)setStarIconHidden:(BOOL)hidden animated:(BOOL)animated;
-(void)configureWithCellData:(id)cellData animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WASearchResultTableViewCell : UITableViewCell {
	UIView* _containerView;
	UILabel* _titleLabel;
	WALabel* _snippetLabel;
	UILabel* _dateLabel;
	NSSet* _searchTokens;
}
-(void).cxx_destruct;
-(void)configureWithSearchResultMessage:(id)searchResultMessage searchTokens:(id)tokens;
-(BOOL)isWord:(id)word foundInSearchTokens:(id)searchTokens;
-(void)configureFonts;
-(void)setUpPlaceholderForSizing;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendEditableImage : WAMultiSendMediaItem {
	NSObject<OS_dispatch_queue>* _fileCacheQueue;
	NSString* _cachedOriginalImageForPreviewPath;
	NSString* _cachedRenderedImagePath;
	UIImage* _renderedContent;
	UIImage* _originalImageForPreviewToCacheToDisk;
}
-(void).cxx_destruct;
-(id)accessibilityLabel;
-(void)saveRenderedImageToDiskAsync;
-(void)renderWithCompletionHandler:(id)completionHandler;
-(void)didChangeTransform;
-(id)renderedImage;
-(id)renderedContent;
-(void)cacheOriginalImageForPreviewToDisk:(id)disk;
-(id)generateOriginalImageForPreview;
-(void)reallyExportWithProgressHandler:(id)progressHandler completion:(id)completion;
-(void)didReceiveMemoryWarning;
-(void)dealloc;
-(id)copyWithZone:(NSZone*)zone;
-(id)initWithImageURL:(id)imageURL renderedImage:(id)image assetIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendThumbnailBrowserItemView : UIView <UIGestureRecognizerDelegate> {
	UIImageView* _overlayView;
	CGPoint _centerBeforeDraggingInSuperSuperviewCoordinates;
	UIPanGestureRecognizer* _panGesture;
	UITapGestureRecognizer* _singleTapGesture;
	UILongPressGestureRecognizer* _longPressGesture;
	BOOL _selected;
	int _index;
	unsigned _state;
	id<WAMultiSendThumbnailBrowserItemViewDelegate> _delegate;
	UIImageView* _backgroundImageView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isSelected) BOOL selected;
@property(readonly, assign, nonatomic) UIImageView* backgroundImageView;
@property(readonly, assign, nonatomic) UIImageView* overlayView;
@property(assign, nonatomic) __weak id<WAMultiSendThumbnailBrowserItemViewDelegate> delegate;
@property(assign, nonatomic) unsigned state;
@property(assign, nonatomic) int index;
+(void)addWobbleAnimationToView:(id)view;
-(void).cxx_destruct;
-(void)viewDidDrag:(id)view;
-(void)viewWasTapped:(id)tapped;
-(void)viewWasLongPressed:(id)pressed;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)stopWobble;
-(void)startWobble;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)animateOutWithCompletionHandler:(id)completionHandler;
-(void)moveToCenter:(CGPoint)center animated:(BOOL)animated;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAWebClientQRHelpView : UIView {
	BOOL _animating;
	UIView* _stage;
	UIImageView* _laptop;
	UIImageView* _qrCode;
	UIImageView* _checkMark;
	UIImage* _blurredQRCodeImage;
	UIImage* _sharpQRCodeImage;
	UIView* _phoneContainer;
	CGPoint _qrCodeCenter;
	BOOL _firstIterationCompleted;
	id<WAWebClientQRHelpViewDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAWebClientQRHelpViewDelegate> delegate;
-(void).cxx_destruct;
-(void)fadeOut;
-(void)showCheckMark;
-(void)movePhoneDownAndUp;
-(void)slideInPhone;
-(void)showLaptop;
-(void)fadeIn;
-(void)resume;
-(void)pause;
-(void)beginAnimation;
-(void)resetState;
-(void)removeAnimationsInView:(id)view;
-(void)didMoveToWindow;
-(id)init;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAPublicPreKey : NSObject {
	NSData* _keyData;
	int _keyId;
	NSData* _keySignature;
}
@property(retain, nonatomic) NSData* keySignature;
@property(assign, nonatomic) int keyId;
@property(retain, nonatomic) NSData* keyData;
-(void).cxx_destruct;
-(id)initWithId:(int)anId data:(id)data signature:(id)signature;
@end

__attribute__((visibility("hidden")))
@interface WAMultiSendThumbnailBrowserImageView : WAMultiSendThumbnailBrowserItemView {
	WAMediaPickerVideoAssetOverlayView* _videoOverlayView;
	WAMultiSendMediaItem* _item;
	UIImageView* _thumbnailView;
}
@property(readonly, assign, nonatomic) UIImageView* thumbnailView;
+(id)viewWithMediaItem:(id)mediaItem;
-(void).cxx_destruct;
-(id)accessibilityHint;
-(id)accessibilityValue;
-(id)accessibilityLabel;
-(void)configureWithMediaItem:(id)mediaItem;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAAPIKeys : NSObject {
}
+(id)fsqClientSecret;
+(id)fsqClientID;
+(id)facebookAPIToken;
+(id)googleAPIKey;
+(id)bingAPIKey;
@end

__attribute__((visibility("hidden")))
@interface WAOutlineRoundButton : UIButton {
	UILabel* _bottomLabel;
	UIImageView* _outlineMask;
	UIImageView* _solidMask;
	UIImageView* _outlineImageView;
	UIImageView* _solidImageView;
	UIImage* _normalImage;
	UIImage* _selectedImage;
	UIImageView* _blurredImageView;
	BOOL _selectable;
	id<WAOutlineRoundButtonDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAOutlineRoundButtonDelegate> delegate;
@property(copy, nonatomic) NSString* bottomLabelText;
@property(assign, nonatomic, getter=isSelectable) BOOL selectable;
+(id)button;
-(void).cxx_destruct;
-(id)accessibilityValue;
-(void)sendAction:(SEL)action to:(id)to forEvent:(id)event;
-(void)setSelected:(BOOL)selected;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setPressed:(BOOL)pressed;
-(void)setIconImage:(id)image;
-(void)updateBlurredImage;
-(void)setCenter:(CGPoint)center;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAServerProperties : NSObject {
}
+(BOOL)isEndToEndUsesRegularPush;
+(BOOL)isEndToEndEncGroupsEnabled;
+(int)encPlaintextReenableThreshold;
+(BOOL)isEncPlaintextDisabled;
+(BOOL)isEncMspesSet;
+(int)videoMaxEdge;
+(CGSize)maxLandscapeVideoFrameSizeForInAppVideoRecording;
+(BOOL)isWebClientEnabled;
+(BOOL)isWhatsAppIDEnabledForVOIP:(id)voip;
+(BOOL)isPTTOpusRecordingEnabled;
+(BOOL)isVOIPEnabled;
+(int)maxListSize;
+(unsigned)placeSource;
+(BOOL)isLocationSharingEnabled;
+(BOOL)isReadReceiptsEnabledForDate:(id)date;
+(BOOL)isAudioSharingEnabled;
+(float)imageQuality;
+(int)imageMaxEdge;
+(int)imageMaxKBytes;
+(int)maxGroupSubjectLength;
+(int)maxGroupParticipants;
+(unsigned long long)maxMediaSize;
+(BOOL)shouldQueryVersion:(id)version;
+(void)setProperties:(id)properties version:(id)version;
+(void)resetToDefaults;
+(void)reloadServerPropertiesFromPreferences;
+(id)prefBundleKey;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface WAUserLocationRequest : NSObject <CLLocationManagerDelegate> {
	CLLocationManager* _locationManager;
	CLLocation* _location;
	CLPlacemark* _placemark;
	CLGeocoder* _geocoder;
	id _completion;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) id completion;
+(BOOL)canRequestLocation;
+(void)requestCurrentLocationIfPossibleWithCompletionHandler:(id)completionHandler;
-(void).cxx_destruct;
-(void)locationManager:(id)manager didFailWithError:(id)error;
-(void)locationManager:(id)manager didUpdateLocations:(id)locations;
-(void)didFinish;
-(void)didReceiveLocationResponse;
-(void)start;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WADNSCacheEntry : NSObject <NSSecureCoding> {
	WAInetAddress* _inetAddress;
	double _expirationTime;
}
@property(readonly, assign, nonatomic) BOOL expired;
@property(readonly, assign, nonatomic) double expirationTime;
@property(readonly, assign, nonatomic) WAInetAddress* inetAddress;
+(BOOL)supportsSecureCoding;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)initWithInetAddress:(id)inetAddress expirationTime:(double)time;
@end

__attribute__((visibility("hidden")))
@interface WABlockBasedAlertView : UIAlertView {
	NSMutableDictionary* _actionMap;
	BOOL _shouldLog;
}
@property(readonly, assign, nonatomic) BOOL shouldLog;
+(void)showErrorMessage:(id)message;
+(void)showErrorInAlertView:(id)alertView;
+(id)alertViewWithTitle:(id)title message:(id)message;
-(void).cxx_destruct;
-(void)show;
-(void)cancelAlertViewWithAnimation:(BOOL)animation;
-(void)addCancelButtonWithTitle:(id)title handler:(id)handler;
-(void)addButtonWithTitle:(id)title handler:(id)handler;
-(void)alertView:(id)view clickedButtonAtIndex:(int)index;
-(void)didPresentAlertView:(id)view;
-(void)applicationDidEnterBackground:(id)application;
-(void)dealloc;
-(id)initWithTitle:(id)title message:(id)message shouldLogContent:(BOOL)content;
-(id)initWithTitle:(id)title message:(id)message;
-(id)initWithFrame:(CGRect)frame;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface BackupViewController : WAWarningViewController <UITableViewDataSource, UITableViewDelegate, WAVerificationCloudReminderViewControllerDelegate> {
	WAProgressHUD* _progressHUD;
	double _hudDisplayedTime;
	NSTimer* _timer;
	BOOL _registered;
	BOOL _inProgress;
	float _sectionHeight;
	BOOL _showProgressText;
	BOOL _timerEnabled;
	BOOL _backupInProgress;
	BOOL _loadingVideoEstimate;
	WABackupInfoTableCell* _cellBackupInfo;
	UISwitch* _switchIncludeVideos;
	UIView* _viewTableFooter;
	UILabel* _labelProgressInfo;
	UIActivityIndicatorView* _activityIndicator;
	WACloudStatus* _cloudStatus;
	id _cloudStatusListener;
	WAUploadedBackup* _uploadedInformation;
	NSString* _backupStatusMessage;
	NSNumber* _videoEstimate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSNumber* videoEstimate;
@property(assign, nonatomic) BOOL loadingVideoEstimate;
@property(readonly, assign, nonatomic) BOOL needsVideoEstimate;
@property(retain, nonatomic) NSString* backupStatusMessage;
@property(assign, nonatomic) BOOL backupInProgress;
@property(assign, nonatomic) BOOL timerEnabled;
@property(retain, nonatomic) WAUploadedBackup* uploadedInformation;
@property(readonly, assign, nonatomic) BOOL hasCloudStatusNetworkError;
@property(retain, nonatomic) id cloudStatusListener;
@property(retain, nonatomic) WACloudStatus* cloudStatus;
@property(retain, nonatomic) UIActivityIndicatorView* activityIndicator;
@property(retain, nonatomic) UILabel* labelProgressInfo;
@property(retain, nonatomic) UIView* viewTableFooter;
@property(assign, nonatomic) BOOL showProgressText;
@property(retain, nonatomic) UISwitch* switchIncludeVideos;
@property(retain, nonatomic) WABackupInfoTableCell* cellBackupInfo;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(id)tableView:(id)view titleForFooterInSection:(int)section;
-(id)tableView:(id)view viewForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)calculateVideoEstimate;
-(BOOL)tryToUpdateVideoEstimate;
-(void)changedIncludeVideos:(id)videos;
-(void)wa_fontSizeDidChange;
-(void)wa_tintColorDidChange;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dismissModal:(id)modal;
-(void)unregisterForBackupNotifications;
-(void)registerForBackupNotifications;
-(void)startBackupAction;
-(void)backupInformationUpdated:(id)updated;
-(void)backupPhaseCompleted:(id)completed;
-(void)updateBackupDetails;
-(void)checkForInProgressBackup;
-(void)layoutFooterViewAnimated:(BOOL)animated;
-(id)footerTextForUploadProgress:(float)uploadProgress size:(long long)size;
-(id)footerTextForCompressionProgress:(float)compressionProgress;
-(void)updateProgressTimer;
-(void)invalidateProgressTimer;
-(void)scheduleProgressTimer;
-(void)updateProgressFromTimer:(id)timer;
-(void)updateBackupStatusMessage;
-(void)updateProgress;
-(void)cloudStatusUpdated;
-(void)stopAnimatingGears;
-(void)startAnimatingGears;
-(void)updateGearsAnimating;
-(void)removeHUD:(BOOL)hud;
-(void)removeHUD;
-(void)showHUD:(id)hud;
-(void)verificationCloudReminderControllerDidFinish:(id)verificationCloudReminderController;
-(BOOL)verificationCloudReminderControllerShouldShowDoneButton:(id)verificationCloudReminderController;
-(BOOL)verificationCloudReminderControllerShouldShowNextButton:(id)verificationCloudReminderController;
-(void)showCloudInstructions;
-(void)showViewControllerFromErrorBanner:(id)errorBanner;
-(void)showAutobackupSettings;
-(void)dealloc;
-(void)updateErrorDisplay:(id)display;
-(void)backupErrorUpdated:(id)updated;
-(id)init;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAPoofAnimationView : UIView {
	CALayer* _imageLayer;
	id _completionHandler;
}
+(id)poof;
-(void).cxx_destruct;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)performAnimationWithCompletionHandler:(id)completionHandler;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAListRepresentation : NSObject {
	NSString* _listJID;
	NSString* _name;
	NSArray* _recipientJIDs;
}
@property(retain, nonatomic) NSArray* recipientJIDs;
@property(copy, nonatomic) NSString* name;
@property(copy, nonatomic) NSString* listJID;
-(void).cxx_destruct;
-(id)description;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestDeleteBroadcastList : XMPPRequest {
}
-(id)initWithListJID:(id)listJID completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestGetBroadcastLists : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestSetBlockedContactsList : XMPPRequest {
}
-(id)initWithContacts:(id)contacts webClientRequestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestGetBlockedContactsList : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestReportSpamMessages : XMPPRequest {
}
@property(copy, nonatomic) NSString* sourceJID;
@property(copy, nonatomic) NSString* creatorJID;
+(id)stanzaFromMessage:(id)message;
-(id)initWithMessages:(id)messages completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WACallEvent : NSObject <NSCoding> {
	BOOL _incoming;
	BOOL _isCallerKnown;
	int _outcome;
	int _medium;
	int _configuration;
	NSDate* _date;
	int _year;
	int _month;
	int _day;
	NSString* _peerDisplayName;
	NSString* _peerJID;
	NSString* _whatsAppID;
	NSString* _detailText;
	unsigned long long _txBytes;
	unsigned long long _rxBytes;
	double _duration;
}
@property(readonly, copy, nonatomic) NSString* callDataUsageForDisplay;
@property(readonly, copy, nonatomic) NSString* detailTextForDisplay;
@property(readonly, copy, nonatomic) NSString* callDurationForDisplay;
@property(readonly, copy, nonatomic) NSString* callTimeForDisplay;
@property(readonly, copy, nonatomic) NSString* callDateForHeader;
@property(readonly, copy, nonatomic) NSString* callDateForDisplay;
@property(readonly, copy, nonatomic) NSString* callDescriptionForVoiceOver;
@property(readonly, copy, nonatomic) NSString* callDescription;
@property(assign, nonatomic) BOOL isCallerKnown;
@property(copy, nonatomic) NSString* detailText;
@property(readonly, copy, nonatomic) NSString* whatsAppID;
@property(copy, nonatomic) NSString* peerJID;
@property(copy, nonatomic) NSString* peerDisplayName;
@property(assign, nonatomic) double duration;
@property(readonly, assign, nonatomic) int day;
@property(readonly, assign, nonatomic) int month;
@property(readonly, assign, nonatomic) int year;
@property(assign, nonatomic) unsigned long long rxBytes;
@property(assign, nonatomic) unsigned long long txBytes;
@property(retain, nonatomic) NSDate* date;
@property(assign, nonatomic) int configuration;
@property(assign, nonatomic) int medium;
@property(assign, nonatomic) int outcome;
@property(assign, nonatomic) BOOL incoming;
-(void).cxx_destruct;
-(void)encodeWithCoder:(id)coder;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAAggregateCallEvent : NSObject {
	NSMutableArray* _events;
	NSString* _numberStringForSearch;
	NSArray* _tokensForSearch;
	BOOL _useSubstringMatchingForSearch;
}
@property(readonly, assign, nonatomic) BOOL useSubstringMatchingForSearch;
@property(readonly, copy, nonatomic) NSArray* tokensForSearch;
@property(readonly, copy, nonatomic) NSString* numberStringForSearch;
@property(readonly, assign, nonatomic) NSArray* events;
@property(readonly, assign, nonatomic) BOOL showCallIcon;
-(void).cxx_destruct;
-(BOOL)mergeEventIfPossible:(id)possible;
-(BOOL)matchesSearchQuery:(id)query words:(id)words;
-(void)invalidateSearchInfo;
-(id)initWithEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface WACallLogger : NSObject {
	NSMutableArray* _allEvents;
	NSMutableArray* _aggregateEvents;
	NSMutableArray* _missedCallAggregateEvents;
	NSMutableArray* _indexPathsOfUnmissedCallAggregateEvents;
	NSObject<OS_dispatch_queue>* _saveQueue;
	BOOL _dirty;
}
@property(assign, nonatomic) int missedCallCount;
@property(readonly, assign, nonatomic) NSArray* indexPathsOfUnmissedCallAggregateEvents;
@property(readonly, assign, nonatomic) NSArray* missedCallOnlyAggregateEvents;
@property(readonly, assign, nonatomic) NSArray* aggregateEvents;
+(id)peerDisplayNameForUnknownWhatsAppID:(id)unknownWhatsAppID;
+(id)sharedLogger;
-(void).cxx_destruct;
-(void)printAllEvents;
-(void)synchronize;
-(void)applicationWillTerminate:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(id)aggregateEventsForTextSearchQuery:(id)textSearchQuery numberSearchQuery:(id)query;
-(void)reloadAllContactNames;
-(void)syncManagerDidFinishSync:(id)syncManager;
-(void)processMissedCallOnlyAggregateEvents;
-(void)clearAllCallEvents;
-(void)removeAggregateCallEvent:(id)event;
-(void)addCallEvent:(id)event;
-(void)rebuildAggregateCallEvents;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerItem : NSObject {
	id _identifier;
	NSURL* _videoURL;
	UIImage* _image;
}
@property(retain, nonatomic) UIImage* image;
@property(retain, nonatomic) NSURL* videoURL;
@property(retain, nonatomic) id identifier;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerController : WANavigationController <PHPhotoLibraryChangeObserver, UIToolbarDelegate, WAMediaPickerDataSource> {
	int _originalStatusBarStyle;
	NSSet* _initiallySelectedAssetIdentifiers;
	NSMutableArray* _selectedAssetIdentifiers;
	NSTimer* _updateNavigationBarTimer;
	WAMediaPickerLibraryViewController* _libraryViewController;
	BOOL _alreadyNotifiedDelegateOfFirstApperarance;
	UIView* _alertToolbarContainerView;
	UIToolbar* _alertToolbar;
	UILabel* _alertLabel;
	NSMutableArray* _newlySelectedAssets;
	NSMutableSet* _assetsToUnload;
	WAMediaPickerAsset* _lastSelectedAsset;
	WAMediaPickerLibraryController* _libraryController;
	int _maximumSelectionCount;
	id _lastUsedAssetCollectionIdentifier;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) id lastUsedAssetCollectionIdentifier;
@property(assign, nonatomic) int maximumSelectionCount;
@property(assign, nonatomic) __weak id<UINavigationControllerDelegate, WAMediaPickerControllerDelegate> delegate;
@property(retain, nonatomic) WAMediaPickerLibraryController* libraryController;
+(id)mediaPicker;
-(void).cxx_destruct;
-(void)showMaximumSelectionCountExceededError;
-(void)recheckSelectedAssetURLsWithCompletionHandler:(id)completionHandler;
-(void)recheckSelectedAssetIdentifiers;
-(void)setInitiallySelectedAssetIdentifiers:(id)identifiers;
-(id)selectedAssetIdentifiers;
-(void)toggleSelectionOfMediaPickerAsset:(id)mediaPickerAsset;
-(BOOL)allowsMultipleSelection;
-(void)deselectAssetIdentifiers:(id)identifiers;
-(void)clearSelection;
-(BOOL)canAddMoreMediaPickerAssets;
-(BOOL)canSelectMediaPickerAsset:(id)asset;
-(void)setDoneButtonSpinnerHidden:(BOOL)hidden;
-(void)showDoneButtonSpinner;
-(id)mediaPickerItemsFromIdentifiers:(id)identifiers assets:(id)assets;
-(void)dismiss;
-(void)cancel:(id)cancel;
-(void)unloadPreviouslySelectedAssets;
-(void)updateNavigationBar;
-(void)updateToolbarWithWarningText:(id)warningText;
-(void)updateNavigationBarAndToolbar;
-(void)updateToolbarHiddenStateWithAnimation:(BOOL)animation;
-(id)toolbarItems;
-(id)popViewControllerAnimated:(BOOL)animated;
-(void)pushViewController:(id)controller animated:(BOOL)animated;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(int)positionForBar:(id)bar;
-(void)setUpAlertToolbar;
-(void)setAlertToolbarText:(id)text animated:(BOOL)animated;
-(void)notifyViewAppearanceCompletion;
-(void)pushLastUsedAssetCollection;
-(void)presentModallyFromViewController:(id)viewController completion:(id)completion;
-(void)assetsLibraryChanged:(id)changed;
-(void)photoLibraryDidChange:(id)photoLibrary;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerLibraryViewController : WAMediaPickerBaseViewController {
	BOOL _preparingToPresentAlbum;
	BOOL _libraryAvailable;
	WAMediaPickerLibraryController* _libraryController;
}
@property(retain, nonatomic) WAMediaPickerLibraryController* libraryController;
+(id)controller;
-(void).cxx_destruct;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAGradientView : UIView {
}
+(Class)layerClass;
-(void)setGradientDirection:(unsigned)direction;
-(void)setLocations:(id)locations;
-(void)setColors:(id)colors;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAGroupSubjectTableViewCell : UITableViewCell {
	WALabel* _groupSubjectLabel;
}
@property(readonly, assign, nonatomic) WALabel* groupSubjectLabel;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAGroupInfoHeaderView : UIView <UITableViewDelegate, UITableViewDataSource> {
	BOOL _editingAllowed;
	BOOL _activityIndicatorVisible;
	UIImage* _groupPictureOverride;
	UIView* _viewGroupPicture;
	UIButton* _buttonAddPicture;
	UIButton* _buttonEditPicture;
	UIActivityIndicatorView* _aiGroupIcon;
	UITableView* _tableViewSubject;
	_WAGroupSubjectTableViewCell* _cellGroupSubject;
	UIView* _backgroundView;
	UIView* _topSeparatorView;
	UIView* _bottomSeparatorView;
	BOOL _subjectEditingAllowed;
	id<WAGroupInfoHeaderViewDelegate> _delegate;
	UIImageView* _imageViewGroupPicture;
	float _bottomSeparatorInset;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL subjectEditingAllowed;
@property(assign, nonatomic) float bottomSeparatorInset;
@property(readonly, assign, nonatomic) UIImageView* imageViewGroupPicture;
@property(assign, nonatomic) __weak id<WAGroupInfoHeaderViewDelegate> delegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)hideActivityIndicator;
-(void)showActivityIndicatorWithGroupPictureOverride:(id)groupPictureOverride;
-(void)updateWithWAChatSession:(id)wachatSession;
-(void)updateSubjectCellSelectionState;
-(void)editGroupPictureAction:(id)action;
-(void)editSubjectAction;
-(void)contentSizeCategoryDidChange:(id)contentSizeCategory;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAVisibilityTrackingViewController : WAViewController {
	BOOL _appearing;
	BOOL _disappearing;
	BOOL _visible;
}
@property(assign, nonatomic, getter=isVisible) BOOL visible;
@property(assign, nonatomic, getter=isDisappearing) BOOL disappearing;
@property(assign, nonatomic, getter=isAppearing) BOOL appearing;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoPageAction : NSObject {
	BOOL _enabled;
	BOOL _destructive;
	NSString* _title;
	SEL _selector;
	id _userInfo;
	UIColor* _textColor;
}
@property(retain, nonatomic) UIColor* textColor;
@property(retain, nonatomic) id userInfo;
@property(assign, nonatomic) BOOL destructive;
@property(assign, nonatomic) BOOL enabled;
@property(assign, nonatomic) SEL selector;
@property(copy, nonatomic) NSString* title;
+(id)actionWithTitle:(id)title selector:(SEL)selector;
-(void).cxx_destruct;
-(id)initWithTitle:(id)title selector:(SEL)selector;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerLibraryTableViewCell : UITableViewCell {
	BOOL _bottomBorderHidden;
	UILabel* _assetCountLabel;
}
@property(readonly, assign, nonatomic) UILabel* assetCountLabel;
@property(assign, nonatomic, getter=isBottomBorderHidden) BOOL bottomBorderHidden;
+(int)preferredSeparatorStyle;
+(float)preferredHeight;
+(id)cellWithReuseIdentifier:(id)reuseIdentifier;
-(void).cxx_destruct;
-(void)updateWithAssetCount:(unsigned)assetCount;
-(id)assetCountLabelTextForCount:(unsigned)count;
-(void)configureWithAssetCollection:(id)assetCollection;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerLibraryTableViewCell6 : WAMediaPickerLibraryTableViewCell {
}
+(int)preferredSeparatorStyle;
+(float)preferredHeight;
-(void)configureWithAssetCollection:(id)assetCollection;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerLibraryTableViewCell7 : WAMediaPickerLibraryTableViewCell {
	UIImageView* _mainImageView;
	UIImageView* _imageView2;
	UIImageView* _imageView3;
	UIView* _bottomBorder;
	BOOL _hasPosterImage;
	UIColor* _imageViewBackgroundColor;
}
+(int)preferredSeparatorStyle;
+(float)preferredHeight;
-(void).cxx_destruct;
-(void)reapplyBackgroundColors;
-(void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
-(void)setSelected:(BOOL)selected animated:(BOOL)animated;
-(void)updateWithAssetCount:(unsigned)assetCount;
-(void)setImageViewBackgroundColor:(id)color;
-(void)configureWithAssetCollection:(id)assetCollection;
-(void)setBottomBorderHidden:(BOOL)hidden;
-(BOOL)isBottomBorderHidden;
-(void)layoutSubviews;
-(void)prepareForReuse;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

@interface WALocationMessageCell : WALargeMediaMessageCell {
	WAPlaceInfoView* _placeInfoView;
	BOOL _hasPlaceInfo;
	CGPoint _initialHighlightTouchLocation;
	UILongPressGestureRecognizer* _highlightTrackingGesture;
	UITapGestureRecognizer* _contentSingleTapGestureRecognizer;
	UITapGestureRecognizer* _contentDoubleTapGestureRecognizer;
	UILongPressGestureRecognizer* _contentLongPressGestureRecognizer;
}
+(UIEdgeInsets)contentInsetsForCellData:(id)cellData cellWidth:(float)width;
+(float)maximumImageWidth;
+(id)cellReuseIdentifier;
-(void).cxx_destruct;
-(id)accessibilityHintText;
-(id)accessibilityValueText;
-(void)configureForAccessibility;
-(void)prepareFor3DTouchPreviewWithContext:(id)context;
-(id)dataForPreviewingContext:(id)previewingContext atLocation:(CGPoint)location;
-(id)registerSubviewsForPreviewingUsingViewController:(id)previewingUsingViewController previewingDelegate:(id)delegate;
-(void)updateStarIndicatorAnimated:(BOOL)animated;
-(void)configureCellWithAnimation:(BOOL)animation;
-(void)handleContentLongPressGesture:(id)gesture;
-(void)handleContentDoubleTapGesture:(id)gesture;
-(void)handleContentTapGesture:(id)gesture;
-(void)handleHighlightTrackingGesture:(id)gesture;
-(void)handleLongPressOnBubbleWithLocation:(CGPoint)location;
-(void)handleDoubleTapOnBubbleWithLocation:(CGPoint)location;
-(void)handleTapOnBubbleWithLocation:(CGPoint)location;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(BOOL)canEnableHighlightTrackingGesture;
-(void)setDimmed:(BOOL)dimmed;
-(void)performCopy;
-(BOOL)canPerformCopy;
-(void)showPopupMenu;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerAlbumViewController : WAMediaPickerBaseViewController <WAMediaPickerAlbumTableViewCellDelegate, WAMediaPickerAlbumControllerDelegate, WAImageToImageTransitioning> {
	unsigned _assetsCountPerRow;
	UIView* _footerView;
	UILabel* _footerLabel;
	BOOL _albumLoadingInProgress;
	NSNumber* _assetIndexToRestore;
	CGPoint _contentOffsetAtStartOfRotation;
	UIImageView* _beforeRotationSnapshotImageView;
	UIImageView* _afterRotationSnapshotImageView;
	UIView* _whiteBackgroundView;
	BOOL _rotatingViewWithNoMedia;
	UILabel* _noMediaTitleLabel;
	UILabel* _noMediaBodyTextLabel;
	BOOL _needsScrollToSelectedPhoto;
	CGRect _previousPreheatRect;
	WAMediaPickerAlbumController* _albumController;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WAMediaPickerAlbumController* albumController;
+(id)controller;
-(void).cxx_destruct;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)adjustContentOffsetOfTableViewToNearestValidMultipleOfRowHeight;
-(id)tableViewSnapshot;
-(void)computeDifferenceBetweenRect:(CGRect)rect andRect:(CGRect)rect2 removedHandler:(id)handler addedHandler:(id)handler4;
-(NSRange)rangeOfAssetsInRect:(CGRect)rect;
-(void)updateThumbnailCache;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)configureCell:(id)cell atIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(BOOL)mediaPickerAlbumTableViewCell:(id)cell didReceiveTapAtIndex:(int)index;
-(void)reconfigureAllVisibleCells;
-(void)updateFooter;
-(id)formattedTextForPhotoAndVideoCount:(int)photoAndVideoCount;
-(id)formattedTextForVideoCount:(int)videoCount;
-(id)formattedTextForPhotoCount:(int)photoCount;
-(int)assetsCountPerRow;
-(void)mediaPickerAlbumController:(id)controller didFinishLoadingAlbumWithOutcome:(BOOL)outcome;
-(void)mediaPickerAlbumControllerWillBeginLoadingAlbum:(id)mediaPickerAlbumController;
-(void)scrollToBottom;
-(CGPoint)maximumContentOffset;
-(void)scrollToAssetAtIndex:(int)index;
-(int)indexOfAssetAtCenterOfView;
-(BOOL)scrollEnabled;
-(void)reloadTable;
-(void)relayoutNoMediaViews;
-(void)relayoutViews;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerAlbumTableViewCell : UITableViewCell {
	NSMutableArray* _assetViews;
	BOOL _allowsMultipleSelection;
	int _maximumAssetsPerRow;
	id<WAMediaPickerAlbumTableViewCellDelegate> _delegate;
}
@property(readonly, assign, nonatomic) NSMutableArray* assetViews;
@property(assign, nonatomic) BOOL allowsMultipleSelection;
@property(assign, nonatomic) __weak id<WAMediaPickerAlbumTableViewCellDelegate> delegate;
@property(assign, nonatomic) int maximumAssetsPerRow;
+(id)cellWithReuseIdentifier:(id)reuseIdentifier;
+(int)assetsCountForRowOfWidth:(float)width;
+(CGSize)thumbnailSize;
+(float)cellMargin;
+(float)rowHeight;
+(void)initialize;
-(void).cxx_destruct;
-(void)assetViewTapped:(id)tapped;
-(void)configureWithMediaPickerAssets:(id)mediaPickerAssets;
-(void)prepareForReuse;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface FMDatabaseQueue : NSObject {
	NSString* _path;
	NSObject<OS_dispatch_queue>* _queue;
	FMDatabase* _db;
	int _openFlags;
}
@property(readonly, assign) int openFlags;
@property(retain) NSString* path;
+(Class)databaseClass;
+(id)databaseQueueWithPath:(id)path flags:(int)flags;
+(id)databaseQueueWithPath:(id)path;
-(void).cxx_destruct;
-(id)inSavePoint:(id)savePoint;
-(void)inTransaction:(id)transaction;
-(void)inDeferredTransaction:(id)deferredTransaction;
-(void)beginTransaction:(BOOL)transaction withBlock:(id)block;
-(void)inDatabase:(id)database;
-(id)database;
-(void)close;
-(void)dealloc;
-(id)init;
-(id)initWithPath:(id)path;
-(id)initWithPath:(id)path flags:(int)flags;
@end

__attribute__((visibility("hidden")))
@interface WACopyableLabel : UILabel {
	NSAttributedString* _originalAttributedText;
	BOOL _copyEnabled;
	NSAttributedString* _highlightedAttributedText;
}
@property(copy, nonatomic) NSAttributedString* highlightedAttributedText;
@property(assign, nonatomic) BOOL copyEnabled;
-(void).cxx_destruct;
-(void)copy:(id)copy;
-(BOOL)canPerformAction:(SEL)action withSender:(id)sender;
-(BOOL)canBecomeFirstResponder;
-(void)menuControllerDidHideMenu:(id)menuController;
-(void)showPopupMenu;
-(void)handleLongPress:(id)press;
-(void)setHighlighted:(BOOL)highlighted;
-(void)setAttributedText:(id)text;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerAssetView : UIView {
	UIImageView* _checkmarkImageView;
	UIView* _dimmingView;
	BOOL _isHighlighted;
	WAMediaPickerVideoAssetOverlayView* _videoOverlayView;
	WAMediaPickerAsset* _mediaPickerAsset;
	WAPieProgressView* _progressView;
	BOOL _showsCheckmarkWhenSelected;
	BOOL _selected;
	BOOL _imageDimmed;
	UIImageView* _imageView;
}
@property(assign, nonatomic) BOOL imageDimmed;
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@property(readonly, assign, nonatomic) UIImageView* imageView;
@property(assign, nonatomic) BOOL showsCheckmarkWhenSelected;
-(void).cxx_destruct;
-(void)mediaPickerAssetDidUpdateDownloadProgress:(id)mediaPickerAsset;
-(void)performSelectionRefusedAnimation;
-(id)accessibilityLabel;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(void)configureWithMediaPickerAsset:(id)mediaPickerAsset;
-(void)configureWithPHAsset:(id)phasset;
-(void)installProgressViewIfNeeded;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerAsset : NSObject {
	id _localIdentifier;
	ALAsset* _alAsset;
	UIImage* _alImage;
	BOOL _isFetchingALImage;
	PHFetchResult* _fetchResult;
	unsigned _index;
	int _imageDownloadRequestID;
	BOOL _requestInvokedProgressHandler;
	NSObject<OS_dispatch_group>* _downloadDispatchGroup;
	WACloudMediaDownloadRequest* _cloudMediaDownloadRequest;
	BOOL _selected;
}
@property(readonly, assign, nonatomic) PHAsset* phAsset;
@property(readonly, copy, nonatomic) UIImage* image;
@property(readonly, copy, nonatomic) NSURL* mediaURL;
@property(readonly, assign, nonatomic, getter=isDownloadCancelled) BOOL downloadCancelled;
@property(readonly, assign, nonatomic) float downloadProgress;
@property(readonly, assign, nonatomic, getter=isContentAvailable) BOOL contentAvailable;
@property(readonly, assign, nonatomic, getter=isDownloading) BOOL downloading;
@property(readonly, assign, nonatomic, getter=isUsable) BOOL usable;
@property(readonly, assign, nonatomic) NSDate* date;
@property(readonly, assign, nonatomic) unsigned mediaSubtypes;
@property(readonly, assign, nonatomic) float aspectRatio;
@property(readonly, assign, nonatomic) double duration;
@property(assign, nonatomic, getter=isSelected) BOOL selected;
@property(readonly, assign, nonatomic) id localIdentifier;
+(void)stopCachingThumbnailsOfPixelSize:(CGSize)pixelSize forPHAssets:(id)phassets;
+(void)startCachingThumbnailsOfPixelSize:(CGSize)pixelSize forPHAssets:(id)phassets;
+(void)requestFullResolutionImageWithIdentifierOrURL:(id)identifierOrURL completion:(id)completion;
+(id)thumbnailImageOfPixelSize:(CGSize)pixelSize forAsset:(id)asset;
+(id)phAssetWithIdentifier:(id)identifier;
+(void)photoLibraryDidChange:(id)photoLibrary;
+(void)cancelImageRequest:(int)request;
+(id)thumbnailCachingImageManager;
+(CGSize)defaultCachedThumbnailSizeInPixels;
+(void)initialize;
-(void).cxx_destruct;
-(void)performBlockWhenContentIsAvailable:(id)available;
-(void)unloadDownloadedMedia;
-(void)downloadProgressDidChange;
-(void)cancelDownloadMediaIfNeeded;
-(void)downloadMediaIfNeededPhotosKit;
-(void)downloadMediaIfNeededAssetsLibrary;
-(void)downloadMediaIfNeeded;
-(void)preloadOniOS7;
-(id)alAssetThumbnail;
-(void)requestWallpaperImageWithCompletionHandler:(id)completionHandler;
-(int)requestCachedImageWithPixelSize:(CGSize)pixelSize resultHandler:(id)handler;
-(BOOL)isVideo;
-(BOOL)isLocalIdentifierAvailable;
-(id)identifierForLogging;
-(void)updatePHFetchResult:(id)result index:(unsigned)index;
-(id)initWithPHFetchResult:(id)phfetchResult index:(unsigned)index;
-(id)initWithALAsset:(id)alasset;
@end

__attribute__((visibility("hidden")))
@interface WAURLSessionTask : NSObject {
	NSError* _error;
	id<WAURLSessionDownloadTaskHandler> _task;
}
@property(retain, nonatomic) id<WAURLSessionDownloadTaskHandler> task;
@property(readonly, assign, nonatomic) int state;
@property(readonly, assign, nonatomic) long long countOfBytesReceived;
@property(readonly, assign, nonatomic) NSHTTPURLResponse* response;
@property(readonly, assign, nonatomic) NSURLRequest* currentRequest;
@property(readonly, copy, nonatomic) NSString* fileType;
@property(copy, nonatomic) WAURLTaskData* taskData;
@property(readonly, assign, nonatomic) float progress;
@property(retain, nonatomic) NSError* error;
@property(readonly, copy, nonatomic) NSString* shortIdentifier;
@property(readonly, copy, nonatomic) NSString* identifier;
-(void).cxx_destruct;
-(void)reportStatsWitResult:(int)result;
-(BOOL)prepareForRetryWithError:(id)error;
-(void)destroy;
-(void)suspend;
-(void)resume;
@end

__attribute__((visibility("hidden")))
@interface WAURLSessionDownloadTask : WAURLSessionTask {
	int _vendCount;
	BOOL _removeFileAtLocationOnDealloc;
	NSURL* _location;
}
@property(readonly, assign, nonatomic) NSURL* location;
@property(readonly, copy, nonatomic) WAURLDownloadTaskData* taskData;
+(id)downloadTaskWithURLSessionDownloadTask:(id)urlsessionDownloadTask;
-(void).cxx_destruct;
-(BOOL)moveDownloadedContentToPath:(id)path;
-(void)replaceDownloadedFileWithFileAtURL:(id)url;
-(void)didDownloadFileToURL:(id)url;
-(void)cancelByProducingResumeData:(id)data;
-(float)progress;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface _WAAssetsLibrarySaveTask : NSObject {
	NSString* _path;
	id _completionHandler;
}
@property(copy, nonatomic) id completionHandler;
@property(copy, nonatomic) NSString* path;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAAssetsLibraryManager : NSObject {
}
+(id)phAssetWithURL:(id)url;
+(void)showFailedToSaveMediaAlertView;
+(void)showUnusableVideoAlertViewFromViewController:(id)viewController;
+(void)showUnusablePhotoAlertViewFromViewController:(id)viewController;
+(void)showNoPhotoLibraryAccessAlertViewFromViewController:(id)viewController;
+(id)resizedImageForSending:(id)sending;
+(void)saveImage:(id)image completion:(id)completion;
+(void)saveImageInMediaInfo:(id)mediaInfo completion:(id)completion;
+(void)saveMediaAtPath:(id)path completion:(id)completion;
+(BOOL)shouldSaveMediaAtPathAsVideo:(id)pathAsVideo;
+(void)processNextSaveTaskInQueue:(id)queue;
+(void)beginProcessingSaveQueueIfNeeded;
+(void)enqueueSavingMediaToCameraRollAtPath:(id)path completion:(id)completion;
+(void)storePathsOfEnqueuedMediaItems;
+(void)endDeferringSavingMediaToCameraRoll;
+(void)beginDeferringSavingMediaToCameraRoll;
+(void)loadBestEditedImageForAssetURL:(id)assetURL completion:(id)completion;
+(void)creationDateForAssetURL:(id)assetURL completion:(id)completion;
+(void)loadSendableImageForAssetURL:(id)assetURL completion:(id)completion;
+(void)loadFullScreenImageForAssetURL:(id)assetURL completion:(id)completion;
+(void)fetchAllAssetsGroupsForMediaTypes:(unsigned)mediaTypes completion:(id)completion;
+(void)checkPhotosPermissionWithCompletionHandler:(id)completionHandler;
+(void)assetsGroupForURL:(id)url completion:(id)completion;
+(void)assetForURL:(id)url completion:(id)completion;
+(id)assetsFilterForMediaType:(unsigned)mediaType;
+(BOOL)authorizationGranted;
+(id)sharedAssetsLibrary;
+(void)recoverUnsavedMediaIfNeeded;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface WABirthdayDatePicker : UIPickerView <UIPickerViewDataSource, UIPickerViewDelegate> {
	int _currentMonth;
	int _currentYear;
	NSRange _monthRange;
	NSRange _dayRange;
	NSRange _dayRangeForCurrentMonth;
	NSArray* _monthNames;
	int _maximumYear;
	NSString* _emptyYear;
	NSCalendar* _calendar;
	NSDateFormatter* _dayFormatter;
	NSDateFormatter* _yearFormatter;
	int _dayComponent;
	int _monthComponent;
	int _yearComponent;
	float _maxDayWidth;
	float _maxMonthWidth;
	float _maxYearWidth;
	float _maxContentWidth;
	UIFont* _font;
	id _handler;
	NSDate* _date;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSDate* date;
@property(copy, nonatomic) id handler;
-(void).cxx_destruct;
-(float)pickerView:(id)view widthForComponent:(int)component;
-(void)pickerView:(id)view didSelectRow:(int)row inComponent:(int)component;
-(id)pickerView:(id)view viewForRow:(int)row forComponent:(int)component reusingView:(id)view4;
-(int)pickerView:(id)view numberOfRowsInComponent:(int)component;
-(int)numberOfComponentsInPickerView:(id)pickerView;
-(void)transformComponentsToDate;
-(void)transformDateToComponents;
-(void)calculateDayRangeForCurrentMonthAndYear;
-(int)monthNumberForRow:(int)row;
-(void)validateDaySelection;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WALargeImageMessageCell : WALargeMediaMessageCell {
}
+(float)maximumImageWidth;
+(id)cellReuseIdentifier;
-(id)accessibilityValue;
-(unsigned long long)accessibilityTraits;
-(void)performCopy;
-(BOOL)canPerformCopy;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerBaseViewController : WATableViewController {
	BOOL _showDoneButton;
	id<WAMediaPickerDataSource> _mediaPickerDataSource;
	WADoneWithSpinnerBarButtonItem* _doneButton;
}
@property(readonly, assign, nonatomic) WADoneWithSpinnerBarButtonItem* doneButton;
@property(assign, nonatomic) BOOL showDoneButton;
@property(assign, nonatomic) __weak id<WAMediaPickerDataSource> mediaPickerDataSource;
-(void).cxx_destruct;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(id)toolbarItems;
-(BOOL)scrollEnabled;
-(void)done:(id)done;
-(void)updateDoneButton;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)mediaPickerLibraryControllerDidUpdateAssetsGroups:(id)mediaPickerLibraryController;
-(void)mediaPickerLibraryControllerDidFinishLoadingLibrary:(id)mediaPickerLibraryController;
-(void)mediaPickerLibraryControllerWillBeginLoadingLibrary:(id)mediaPickerLibraryController;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WABasicCameraViewController : WAViewController <WACameraControllerDelegate> {
	UIView* _previewSnapshot;
	BOOL _allowAutoRotation;
	id<UIViewControllerTransitionCoordinator> _rotationTransitionCoordinator;
	CMMotionManager* _motionManager;
	int _lastDeviceOrientationForCapture;
	WACameraController* _cameraController;
	UIView* _containerView;
	int _deviceOrientationForInterface;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) int deviceOrientationForCapture;
@property(readonly, assign, nonatomic) int deviceOrientationForInterface;
@property(readonly, assign, nonatomic) UIView* containerView;
@property(readonly, assign, nonatomic) WACameraController* cameraController;
+(BOOL)statusBarHidden;
+(BOOL)useBackCamera;
+(int)cameraMode;
-(void).cxx_destruct;
-(void)videoRecordingDidCancel;
-(void)videoRecordingDidFinishRecordingToFile:(id)videoRecording;
-(void)videoRecordingDidFailWithError:(id)videoRecording;
-(void)cameraControllerDidCancelVideoRecording:(id)cameraController;
-(void)cameraController:(id)controller videoRecordingDidFinishRecordingToFile:(id)videoRecording;
-(void)cameraController:(id)controller videoRecordingDidFailWithError:(id)videoRecording;
-(void)cameraControllerDidReceiveRuntimeErrorNotification:(id)cameraController;
-(void)cameraController:(id)controller didDetectQRCode:(id)code;
-(void)cameraControllerDidChangeFlashActiveState:(id)cameraController;
-(void)cameraControllerDidUpdateFaceObjects:(id)cameraController;
-(void)cameraControllerDidChangePreviewImageSize:(id)cameraController;
-(void)cameraControllerDidResetPointOfInterest:(id)cameraController;
-(void)cameraControllerSessionDidStopRunning:(id)cameraControllerSession;
-(void)cameraControllerSessionDidBeginRunning:(id)cameraControllerSession;
-(void)viewWillTransitionToSize:(CGSize)view withTransitionCoordinator:(id)transitionCoordinator;
-(unsigned)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)rotateToFinalOrientation;
-(void)performDarkenAnimationWithCompletionHandler:(id)completionHandler;
-(void)performBlurOutAnimationWithCompletionHandler:(id)completionHandler;
-(void)deviceOrientationDidChange:(id)deviceOrientation;
-(void)updateDeviceOrientationForCaptureFromCurrentDeviceOrientation;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)deviceOrientationDidChangeWithAnimation:(BOOL)deviceOrientation;
-(void)stopAccelerometerUpdatesIfNeeded;
-(void)startAccelerometerUpdatesIfNeeded;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)tearDownCameraController;
-(void)viewWillDisappear:(BOOL)view;
-(void)didCreateCameraController;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WADimmableButton : UIButton {
	UIImage* _desaturatedImage;
	UIImage* _originalImage;
	BOOL _tintColorChangeInProgress;
}
-(void).cxx_destruct;
-(void)tintColorDidChange;
-(void)setImage:(id)image forState:(unsigned)state;
@end

__attribute__((visibility("hidden")))
@interface WAAddressBookCountryPicker : WATableViewController {
	NSArray* _sectionTitles;
	NSDictionary* _countryMap;
	id<WAAddressBookCountryPickerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAAddressBookCountryPickerDelegate> delegate;
+(id)pickerWithDelegate:(id)delegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(int)tableView:(id)view sectionForSectionIndexTitle:(id)sectionIndexTitle atIndex:(int)index;
-(id)sectionIndexTitlesForTableView:(id)tableView;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)countryInfoForTableIndexPath:(id)tableIndexPath;
-(void)wa_fontSizeDidChange;
-(void)cancelAction:(id)action;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WAE2eMessage : NSObject {
	NSString* _jid;
	NSString* _participant;
	NSString* _stanzaId;
	NSString* _conversation;
	NSData* _encryptedData;
	int _ciphertextMessageType;
	NSMutableArray* _participantMessages;
	NSString* _phash;
}
@property(retain, nonatomic) NSString* phash;
@property(retain, nonatomic) NSMutableArray* participantMessages;
@property(assign) int ciphertextMessageType;
@property(retain, nonatomic) NSData* encryptedData;
@property(retain, nonatomic) NSString* conversation;
@property(retain, nonatomic) NSString* stanzaId;
@property(retain, nonatomic) NSString* participant;
@property(retain, nonatomic) NSString* jid;
-(void).cxx_destruct;
-(void)setDecryptedData:(id)data;
-(id)dataToEncrypt;
-(int)version;
-(long long)recipientId;
-(long long)recepientIdForJid:(id)jid;
-(id)initWithJID:(id)jid participant:(id)participant stanzaId:(id)anId;
-(id)initForMessage:(id)message;
@end

__attribute__((visibility("hidden")))
@interface WAContactsSearchController : NSObject {
	WAChatStorage* _chatStorage;
	WAContactsStorage* _contactsStorage;
	id<WAContactsSearchControllerDelegate> _delegate;
	NSArray* _allContactInfos;
}
@property(retain, nonatomic) NSArray* allContactInfos;
@property(assign, nonatomic) __weak id<WAContactsSearchControllerDelegate> delegate;
-(void).cxx_destruct;
-(id)contactsMatchingText:(id)text;
-(id)contactsMatchingJIDs:(id)jids;
-(void)loadIfNeeded;
-(void)reset;
-(void)syncManagerDidFinishSync:(id)syncManager;
-(void)dealloc;
-(id)initWithChatStorage:(id)chatStorage contactsStorage:(id)storage;
@end

__attribute__((visibility("hidden")))
@interface WAAddressBookUtilities : NSObject {
}
+(id)localizedNameOfSocialService:(id)socialService;
+(id)localizedNameOfIMService:(id)imservice;
+(id)localizedAddressBookLabel:(id)label;
+(id)predefinedLabelsForABPropertyID:(int)abpropertyID;
+(id)predefinedSocialServices;
+(id)predefinedIMServices;
+(id)predefinedDateLabels;
+(id)predefinedAddressLabels;
+(id)predefinedURLLabels;
+(id)predefinedEmailLabels;
+(id)predefinedPhoneLabels;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerAlbumController : NSObject {
	unsigned _mediaTypes;
	WAAssetCollection* _assetCollection;
	NSObject<OS_dispatch_group>* _loadingDispatchGroup;
	BOOL _albumLoadingInProgress;
	BOOL _needsReload;
	BOOL _automaticallyReloadWhenInvalidated;
	id<WAMediaPickerAlbumControllerDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAMediaPickerAlbumControllerDelegate> delegate;
@property(assign, nonatomic) BOOL automaticallyReloadWhenInvalidated;
@property(readonly, assign, nonatomic) WAAssetCollection* assetCollection;
-(void).cxx_destruct;
-(unsigned)indexOfAssetWithIdentifier:(id)identifier;
-(void)reloadAlbumWithCompletionHandler:(id)completionHandler;
-(void)prepareWithCompletionHandler:(id)completionHandler;
-(BOOL)isAlbumReady;
-(void)invalidate;
-(void)setNeedsReload;
-(id)initWithAssetCollection:(id)assetCollection mediaTypes:(unsigned)types;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerLibraryController : NSObject <PHPhotoLibraryChangeObserver> {
	NSObject<OS_dispatch_group>* _loadingDispatchGroup;
	BOOL _assetsLibraryLoadingInProgress;
	NSArray* _albumControllers;
	BOOL _reloadLibraryAfterEnteringForeground;
	BOOL _containsAssets;
	unsigned _mediaType;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic) unsigned mediaType;
@property(readonly, assign, nonatomic) BOOL containsAssets;
@property(readonly, assign, nonatomic) NSArray* albumControllers;
-(void).cxx_destruct;
-(id)albumControllerForAssetCollection:(id)assetCollection fromAvailableAlbums:(id)availableAlbums;
-(void)reloadAssetsLibraryWithCompletionHandler:(id)completionHandler;
-(void)prepareWithCompletionHandler:(id)completionHandler;
-(BOOL)isLibraryReady;
-(void)deferredInvalidateAndReload;
-(void)invalidateAndReload;
-(void)assetsLibraryChanged:(id)changed;
-(void)photoLibraryDidChange:(id)photoLibrary;
-(void)applicationWillEnterForeground:(id)application;
-(void)dealloc;
-(id)initWithMediaType:(unsigned)mediaType;
@end

__attribute__((visibility("hidden")))
@interface WAPlaceIconCache : NSObject {
	NSMutableDictionary* _iconsInProgress;
}
+(id)sharedCache;
-(void).cxx_destruct;
-(id)placeIconImageForWAPlace:(id)waplace completion:(id)completion;
-(id)fsqCategoryIconFromImage:(id)image;
-(id)categoryIconFromWhiteImage:(id)whiteImage;
-(void)saveImage:(id)image withFilename:(id)filename;
-(id)imageWithFilename:(id)filename;
-(id)filenameForImageAtURLPath:(id)urlpath;
@end

__attribute__((visibility("hidden")))
@interface WAVerificationAutoBackupViewController : WAAutobackupSettingsViewController {
	id<WAVerificationAutoBackupViewControllerDelegate> _delegate;
	UIView* _intervalHeader;
	UILabel* _labelTopTitle;
	UIImageView* _imageBackupLogo;
	UILabel* _labelTopHelperText;
}
@property(retain, nonatomic) UILabel* labelTopHelperText;
@property(retain, nonatomic) UIImageView* imageBackupLogo;
@property(retain, nonatomic) UILabel* labelTopTitle;
@property(retain, nonatomic) UIView* intervalHeader;
@property(assign, nonatomic) __weak id<WAVerificationAutoBackupViewControllerDelegate> delegate;
+(id)adjustChatSettingsSequence;
-(void).cxx_destruct;
-(void)wa_fontSizeDidChange;
-(void)layoutHeaderView;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(void)nextAction:(id)action;
-(id)bottomText;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)updateNextButtonEnabled;
-(void)refreshNextButton;
-(void)updateTableViewHeader;
-(id)initWithAutoBackupSettings:(id)autoBackupSettings delegate:(id)delegate;
-(id)initWithAutoBackupSettings:(id)autoBackupSettings;
-(id)initWithDelegate:(id)delegate;
@end

__attribute__((visibility("hidden")))
@interface WASearchBar : UISearchBar {
	UIView* _backgroundView;
}
@property(readonly, assign, nonatomic) UIView* backgroundView;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)commonInit;
-(void)awakeFromNib;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WACameraWellView : UIView {
	UIView* _wellContainer;
	WAGradientView* _gradientView;
	UIImageView* _imageView;
	NSMutableArray* _stackedViews;
	UIView* _topSlice;
	int _currentValue;
	int _maximumValue;
}
@property(retain, nonatomic) UIImage* image;
@property(assign, nonatomic) int maximumValue;
@property(assign, nonatomic) int currentValue;
-(void).cxx_destruct;
-(void)reset;
-(id)newStackView;
-(void)animateInImageInWell:(id)well completion:(id)completion;
-(void)addImage:(id)image animated:(BOOL)animated completion:(id)completion;
-(void)adjustImageViewToFit:(id)fit;
-(void)layoutSubviews;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface WAContactEmailEditingCell : WAContactMultiValueEditingCell {
}
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WALocationPlaceTableViewCell : UITableViewCell {
}
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _WAGrabHandleLayer : CALayer {
	float _radius;
}
@property(assign) float radius;
@property(assign) float state;
+(BOOL)needsDisplayForKey:(id)key;
-(id)initWithLayer:(id)layer;
@end

__attribute__((visibility("hidden")))
@interface WAGrabHandleView : UIView {
	float _radius;
	UIColor* _fillColor;
}
@property(retain, nonatomic) UIColor* fillColor;
@property(assign, nonatomic) float state;
@property(assign, nonatomic) float radius;
+(Class)layerClass;
+(float)preferredHeight;
-(void).cxx_destruct;
-(id)bezierPathForCurrentState;
-(float)angleForState:(float)state;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAPagingScrollView : UIScrollView {
}
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
@end

__attribute__((visibility("hidden")))
@interface WAShareContactViewController : WAViewController <UITableViewDataSource, UITableViewDelegate> {
	NSArray* _sharingGroups;
	NSArray* _allSharingUnits;
	WAVCardNameSharingUnit* _nameSharingUnit;
	WAVCardProfilePhotoSharingUnit* _profilePhotoSharingUnit;
	WAShareContactTableHeaderView* _tableHeaderView;
	id<WAShareContactViewControllerDelegate> _delegate;
	UITableView* _tableView;
	WAMergedContact* _mergedContact;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WAMergedContact* mergedContact;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) __weak id<WAShareContactViewControllerDelegate> delegate;
+(id)controllerWithMergedContact:(id)mergedContact;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)sendContact:(id)contact;
-(void)cancelAction:(id)action;
-(void)viewDidAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)rebuildSharingGroups;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAChatBarManagerFactory : NSObject {
}
+(BOOL)isInteractiveKeyboardDraggingSupported;
+(id)PTTButtonAccessibilityHint;
+(BOOL)isPTTRecordingInProgress;
+(void)setPTTRecordingInProgress:(BOOL)progress;
+(id)chatBarManagerWithInitialWidth:(float)initialWidth;
@end

__attribute__((visibility("hidden")))
@interface WAChatBarManagerImpl : NSObject <WAChatBarManager, WAChatBarDelegate, WAWebPageFromTextLoaderDelegate> {
	WAChatBar* _placeholderChatBar;
	WAChatBar* _chatBar;
	unsigned _keyboardState;
	BOOL _interfaceRotationInProgress;
	BOOL _notifyDelegateOfHeightChangeInKeyboardDidShow;
	float _keyboardHeight;
	BOOL _suppressScrollingOnNextKeyboardWillShow;
	NSObject<OS_dispatch_group>* _keyboardDispatchGroup;
	float _lastKeyboardDragOffset;
	BOOL _lastKeyboardDragDirectionIsUp;
	CGAffineTransform _keyboardTransformBeforeKeyboardDrag;
	NSNumber* _externalDragInProgressStartingWithKeyboardShown;
	CGRect _prevStatusBarFrame;
	BOOL _isUsingExternalKeyboard;
	BOOL _lastKeyWindowWasModalWindow;
	BOOL _forceViewRotationOnShowingOrHidingKeyboard;
	BOOL _isRegisteredForKeyboardNotifications;
	BOOL _unregisterForKeyboardNotificationsOnHide;
	WAWebPageFromTextLoader* _webPageLoader;
	BOOL _interactiveKeyboardDraggingInProgress;
	BOOL _enabled;
	BOOL _scrollToBottomOnShowKeyboardOnAppear;
	BOOL _interactiveKeyboardDraggingEnabled;
	BOOL _showKeyboardOnAppear;
	UIViewController<WAChatBarManagerDelegate>* _delegate;
}
@property(readonly, assign, nonatomic) UIButton* pttButton;
@property(readonly, assign, nonatomic) UIButton* attachMediaButton;
@property(assign, nonatomic, getter=isKeyboardPresentationDisabled) BOOL keyboardPresentationDisabled;
@property(assign, nonatomic, getter=isEnabled) BOOL enabled;
@property(readonly, assign, nonatomic) BOOL shouldAutorotate;
@property(assign, nonatomic) BOOL interactiveKeyboardDraggingEnabled;
@property(assign, nonatomic) float chatBarAlpha;
@property(assign, nonatomic) BOOL scrollToBottomOnShowKeyboardOnAppear;
@property(assign, nonatomic) BOOL showKeyboardOnAppear;
@property(readonly, assign, nonatomic) BOOL interactiveKeyboardDraggingInProgress;
@property(copy, nonatomic) NSString* text;
@property(readonly, assign, nonatomic) float bottomInset;
@property(readonly, assign, nonatomic) float contentViewHeight;
@property(readonly, assign, nonatomic) UIView* contentView;
@property(assign, nonatomic) __weak UIViewController<WAChatBarManagerDelegate>* delegate;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(void)windowDidBecomeVisible:(id)window;
+(void)windowDidResignKey:(id)window;
+(void)windowDidBecomeKey:(id)window;
+(void)initialize;
-(void).cxx_destruct;
-(void)endDraggingChatBarWithTranslation:(float)translation;
-(void)updateChatBarDraggingWithTranslation:(float)translation;
-(BOOL)beginDraggingChatBar;
-(void)handleChatBarDragging:(id)dragging;
-(void)chatBarDidEndDragging:(id)chatBar;
-(void)chatBarDidDrag:(id)chatBar;
-(void)beginDraggingWithKeyboardShown;
-(void)chatBarDidBeginDragging:(id)chatBar;
-(void)hideKeyboardAfterDragging;
-(CGAffineTransform)applyTranslation:(float)translation toKeyboardWindowTransform:(CGAffineTransform)keyboardWindowTransform;
-(void)endDraggingWithKeyboardOffset:(float)keyboardOffset;
-(void)updateDraggingWithKeyboardOffset:(float)keyboardOffset;
-(void)webPageFromTextLoaderDidUpdateMetadata:(id)webPageFromTextLoader;
-(void)chatBarWantsToDismissWebURLPreview:(id)dismissWebURLPreview;
-(void)chatBarWantsToScrollToTop:(id)top;
-(void)chatBar:(id)bar didCancelPTTRecordingByUser:(BOOL)user;
-(void)chatBarDidEndPTTRecording:(id)chatBar;
-(double)chatBarWillEndPTTRecording:(id)chatBar;
-(void)chatBarDidBeginPTTRecording:(id)chatBar;
-(BOOL)chatBarShouldBeginPTTRecording:(id)chatBar;
-(void)chatBarDidChangeHeight:(id)chatBar;
-(void)chatBarUserDidSubmitText:(id)chatBarUser;
-(void)chatBarWantsToPresentCamera:(id)presentCamera;
-(void)chatBarWantsToAttachMedia:(id)attachMedia;
-(void)chatBar:(id)bar didPasteImage:(id)image;
-(void)chatBarDidChangeText:(id)chatBar;
-(void)chatBarDidEndEditing:(id)chatBar;
-(void)chatBarWillEndEditing:(id)chatBar;
-(void)chatBarDidBeginEditing:(id)chatBar;
-(BOOL)chatBarShouldBeginEditing:(id)chatBar;
-(void)chatBarUserDidFocusChatBar:(id)chatBarUser;
-(void)chatBarDidMoveToWindow:(id)chatBar;
-(void)chatBar:(id)bar willMoveToWindow:(id)window;
-(float)chatBarMaximumHeight:(id)height;
-(unsigned)chatBarVisibleConnectionStatus:(id)status;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidChangeFrame:(id)keyboard;
-(void)keyboardWillChangeFrame:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(BOOL)isKeyboardFrameChangeNotification:(id)notification;
-(CGRect)rectRoundedToNearestPoint:(CGRect)nearestPoint;
-(BOOL)rect:(CGRect)rect intersectsRect:(CGRect)rect2;
-(void)ensureKeyboardHidden;
-(void)applicationWillDismissCallWindow:(id)application;
-(void)applicationWillPresentCallWindow:(id)application;
-(void)resetKeyboardLayout;
-(void)applicationDidChangeStatusBarFrame:(id)application;
-(void)applicationWillChangeStatusBarFrame:(id)application;
-(void)delegateWillDisappearWithoutInteraction;
-(void)updatePlaceholderChatBarFromChatBar;
-(void)setNeedsUpdateButtons;
-(void)makeMainApplicationWindowKeyWindow;
-(void)makeKeyboardWindowKeyWindow;
-(void)restoreKeyWindow;
-(BOOL)isKeyboardVisible;
-(void)hideKeyboard;
-(BOOL)showKeyboard;
-(void)showPopupMenuForMessageCell:(id)messageCell;
-(void)cancelPTTRecording;
-(void)setPTTRecordingTime:(double)time;
-(void)didChangeInterfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation;
-(void)willChangeInterfaceOrientation;
-(void)unregisterForKeyboardNotificationsIfNeeded;
-(void)registerForKeyboardNotificationsIfNeeded;
-(void)dealloc;
-(id)initWithInitialWidth:(float)initialWidth;
-(void)windowDidBecomeKey:(id)window;
@end

__attribute__((visibility("hidden")))
@interface WAVCardSharingUnit : NSObject <WAVCardSerializing> {
	WAMergedContact* _mergedContact;
	unsigned _multiValueIndex;
	BOOL _sharingEnabled;
	NSString* _labelText;
	NSString* _valueText;
}
@property(assign, nonatomic) BOOL sharingEnabled;
@property(readonly, copy, nonatomic) NSString* stringForVCard;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* valueText;
@property(copy, nonatomic) NSString* labelText;
+(int)nextVCardCustomItemIndex;
+(void)resetVCardCustomItemIndex;
+(id)sharingUnitForMergedContact:(id)mergedContact index:(unsigned)index;
+(id)sharingUnitForMergedContact:(id)mergedContact;
-(void).cxx_destruct;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardNameSharingUnit : WAVCardSharingUnit {
}
-(BOOL)sharingEnabled;
-(void)setSharingEnabled:(BOOL)enabled;
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardProfilePhotoSharingUnit : WAVCardSharingUnit {
	UIImage* _image;
	int _maxWidthInPixels;
}
@property(assign, nonatomic) int maxWidthInPixels;
@property(readonly, assign, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardNicknameSharingUnit : WAVCardSharingUnit {
}
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardBirthdaySharingUnit : WAVCardSharingUnit {
}
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardWorkInfoSharingUnit : WAVCardSharingUnit {
}
+(id)stringForVCardForContact:(id)contact;
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardPhoneNumberSharingUnit : WAVCardSharingUnit {
}
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardEmailAddressSharingUnit : WAVCardSharingUnit {
}
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardStreetAddressSharingUnit : WAVCardSharingUnit {
}
+(id)vCardValueForStreetAddressInfo:(id)streetAddressInfo;
+(id)displayStringForStreetAddressInfo:(id)streetAddressInfo;
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardURLSharingUnit : WAVCardSharingUnit {
}
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WAVCardIMSharingUnit : WAVCardSharingUnit {
}
-(id)stringForVCard;
-(id)initWithMergedContact:(id)mergedContact index:(unsigned)index;
@end

__attribute__((visibility("hidden")))
@interface WADNSResolver : NSObject {
	NSMutableDictionary* _addressCache;
	unsigned _networkStatusForCache;
	NSObject<OS_dispatch_queue>* _primaryResolverQueue;
}
+(id)sharedResolver;
-(void).cxx_destruct;
-(id)cachedAddressesForHost:(id)host;
-(void)setCacheAddresses:(id)addresses host:(id)host;
-(void)freeDNSSocket:(CFSocketRef)socket;
-(CFSocketRef)createDNSSocketWithNameServerAddress:(const char*)nameServerAddress overIPv6:(BOOL)a6;
-(void)freeQueryBuffer:(void*)buffer replyBuffer:(void*)buffer2 dnsSocket:(CFSocketRef)socket dnsReply:(XXStruct_uGjhZD*)reply;
-(id)resolveAddressForHost:(id)host serverAddress:(id)address usingIPV6:(BOOL)a6;
-(id)addressesWithSecondaryResolverForHost:(id)host;
-(void)cleanUpCFHost:(CFHostRef)host mode:(CFStringRef)mode runloop:(CFRunLoopRef)runloop;
-(id)addressesWithPrimaryResolverForHost:(id)host;
-(void)updateNetworkStatus:(unsigned)status;
-(id)addressesForHost:(id)host;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAVCardSharingGroup : NSObject <WAVCardSerializing> {
	BOOL _sharingEnabled;
	NSArray* _sharingUnits;
}
@property(assign, nonatomic) BOOL sharingEnabled;
@property(readonly, copy, nonatomic) NSString* stringForVCard;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* sharingUnits;
+(id)vCardStringWithVCardSerializingObjects:(id)vcardSerializingObjects;
-(void).cxx_destruct;
-(void)addRepeatedSharingUnitWithClass:(Class)aClass forMergedContact:(id)mergedContact;
-(void)addSharingUnitsWithClasses:(id)classes forMergedContact:(id)mergedContact;
-(BOOL)isEmpty;
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface WAVCardPersonalSharingGroup : WAVCardSharingGroup {
}
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface WAVCardWorkSharingGroup : WAVCardSharingGroup {
}
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface WAVCardPhoneNumberSharingGroup : WAVCardSharingGroup {
}
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface WAVCardEmailAddressSharingGroup : WAVCardSharingGroup {
}
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface WAVCardStreetAddressSharingGroup : WAVCardSharingGroup {
}
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface WAVCardURLSharingGroup : WAVCardSharingGroup {
}
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface WAVCardIMSharingGroup : WAVCardSharingGroup {
}
-(id)initWithMergedContact:(id)mergedContact;
@end

__attribute__((visibility("hidden")))
@interface WAMediaGalleryViewController : WASavedContentBrowserChildViewController <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, WAImageToImageTransitioning, WANavigationControllerPopToAnimating, WAMediaGalleryCellMenuDelegate, WAMediaGallery> {
	NSOperationQueue* _thumbnailLoadingOpQueue;
	UILabel* _mediaCountLabel;
	UIView* _noMediaView;
	UIImageView* _noMediaImageView;
	UILabel* _noMediaTitleLabel;
	UILabel* _noMediaTextLabel;
	UIBarButtonItem* _editBarButton;
	UIBarButtonItem* _cancelBarButton;
	UIBarButtonItem* _deleteBarButton;
	UIBarButtonItem* _shareItemsBarButton;
	UIBarButtonItem* _doneBarButton;
	BOOL _editing;
	BOOL _footerVisible;
	BOOL _needsAutoScroll;
	BOOL _tallScreen;
	UIView* _transitionAnimationSourceView;
	NSIndexPath* _messageIndexPathForTransitionAnimation;
	NSMutableSet* _selectedIndexPaths;
	NSMutableArray* _selectedMessagesBeforeMediaManagerContentChange;
	BOOL _mediaManagerUpdateInProgress;
	BOOL _ignoreMediaManagerNotifications;
	NSMutableIndexSet* _insertedSections;
	NSMutableArray* _insertedIndexPaths;
	NSMutableIndexSet* _deletedSections;
	NSMutableArray* _deletedIndexPaths;
	BOOL _isPerformingFancyRotation;
	UIImageView* _beforeRotationSnapshotImageView;
	UIImageView* _afterRotationSnapshotImageView;
	UIView* _whiteBackgroundView;
	NSIndexPath* _thumbnailIndexPathToRestore;
	WAMediaGalleryFlowLayout* _portraitLayout;
	WAMediaGalleryFlowLayout* _landscapeLayout;
	WAMediaManager* _mediaManager;
	id<WAMediaGalleryControllerDelegate> _delegate;
	NSIndexPath* _indexPathOfMessageToScrollToWhenAppearing;
	UICollectionView* _collectionView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UICollectionView* collectionView;
@property(retain, nonatomic) NSIndexPath* indexPathOfMessageToScrollToWhenAppearing;
@property(assign, nonatomic) __weak id<WAMediaGalleryControllerDelegate> delegate;
@property(retain, nonatomic) WAMediaManager* mediaManager;
+(id)controller;
-(void).cxx_destruct;
-(void)handleInteractiveDismissGesture:(id)gesture;
-(BOOL)shouldBeginCustomPopAnimationForAnimationIdentifier:(id)animationIdentifier;
-(id)popAnimationControllerFromViewController:(id)viewController;
-(id)popAnimationInteractionControllerFromViewController:(id)viewController;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForFooterInSection:(int)section;
-(CGSize)collectionView:(id)view layout:(id)layout referenceSizeForHeaderInSection:(int)section;
-(void)collectionView:(id)view didDeselectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didSelectItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didUnhighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view didHighlightItemAtIndexPath:(id)indexPath;
-(void)collectionView:(id)view performAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view canPerformAction:(SEL)action forItemAtIndexPath:(id)indexPath withSender:(id)sender;
-(BOOL)collectionView:(id)view shouldShowMenuForItemAtIndexPath:(id)indexPath;
-(id)collectionView:(id)view viewForSupplementaryElementOfKind:(id)kind atIndexPath:(id)indexPath;
-(id)collectionView:(id)view cellForItemAtIndexPath:(id)indexPath;
-(int)collectionView:(id)view numberOfItemsInSection:(int)section;
-(int)numberOfSectionsInCollectionView:(id)collectionView;
-(void)menuControllerDidHideMenu:(id)menuController;
-(BOOL)canPerformAction:(SEL)action forMediaGalleryCell:(id)mediaGalleryCell withSender:(id)sender;
-(void)copyMessageInCell:(id)cell;
-(void)markMessageAsStarredInCell:(id)cell;
-(void)addIndexPathForAddedCell:(id)addedCell;
-(void)addIndexPathForDeletedCell:(id)deletedCell;
-(void)mediaManagerDidAddContent:(id)mediaManager;
-(void)mediaManagerDidDeleteContent:(id)mediaManager;
-(void)mediaManagerDidChangeContent:(id)mediaManager;
-(void)mediaManagerWillChangeContent:(id)mediaManager;
-(void)forwardMediaItems:(id)items toContactInfo:(id)contactInfo;
-(void)shareSelectedItems:(id)items;
-(void)deleteSelectedMedia;
-(void)deleteAction:(id)action;
-(void)presentMediaAtIndexPath:(id)indexPath;
-(void)exit:(id)exit;
-(void)cancelAction:(id)action;
-(void)editAction:(id)action;
-(void)updateCollectionViewLayoutToCurrentInterfaceOrientationIfNecessary;
-(void)scrollAutomaticallyToRelevantItem;
-(void)relayoutNoMediaViews;
-(void)updateCollectionViewInsets;
-(void)updateEditingWithAnimation:(BOOL)animation;
-(void)updateSelection;
-(void)updateFooter;
-(void)updateMainVisibleView;
-(id)uniqueIdentifier;
-(void)didRotateFromInterfaceOrientation:(int)interfaceOrientation;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)willRotateToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(id)collectionViewSnapshot;
-(void)viewDidLayoutSubviews;
-(void)viewWillLayoutSubviews;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAShareContactTableViewCell : UITableViewCell {
	UILabel* _titleLabel;
	UILabel* _bodyLabel;
	UIImageView* _checkmarkView;
	UIView* _bottomEdgeView;
}
@property(assign, nonatomic) BOOL checked;
@property(assign, nonatomic) BOOL showBottomEdge;
+(float)heightForSharingUnit:(id)sharingUnit displayWidth:(float)width;
+(float)preferredContentInset;
+(id)cellWithReuseIdentifier:(id)reuseIdentifier;
-(void).cxx_destruct;
-(void)configureWithSharingUnit:(id)sharingUnit;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WAShareContactTableHeaderView : UIView {
	UILabel* _nameLabel;
	UIImageView* _profilePhotoImageView;
	UIImageView* _checkmarkImageView;
	UIView* _checkmarkBackgroundView;
	BOOL _profilePhotoSharingEnabled;
}
@property(assign, nonatomic) BOOL profilePhotoSharingEnabled;
-(void).cxx_destruct;
-(void)photoTapped:(id)tapped;
-(void)configureWithNameSharingUnit:(id)nameSharingUnit profilePhotoSharingUnit:(id)unit;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAArchivedChatsTableViewCell : UITableViewCell {
}
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface _WAArchivedChatsButtonView : UITableView <UITableViewDataSource, UITableViewDelegate> {
	UITableViewCell* _allArchivedChatsCell;
	id _target;
	SEL _action;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) SEL action;
@property(assign, nonatomic) __weak id target;
+(float)preferredHeight;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)updateArchivedChatsCell;
-(void)tintColorDidChange;
-(void)applicationWillEnterForeground:(id)application;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame style:(int)style;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAChatListSearchBar : WASearchBar <UIGestureRecognizerDelegate> {
	_WAArchivedChatsButtonView* _buttonView;
	UIColor* _expandedBackgroundColor;
	UIColor* _contractedBackgroundColor;
	BOOL _expanded;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) __weak id<WAChatListSearchBarDelegate> delegate;
@property(readonly, assign, nonatomic) float incrementalHeight;
@property(assign, nonatomic, getter=isExpanded) BOOL expanded;
-(void).cxx_destruct;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)setExpanded:(BOOL)expanded animated:(BOOL)animated;
-(void)layoutSubviews;
-(BOOL)gestureRecognizerShouldBegin:(id)gestureRecognizer;
-(void)archivedChatsButtonTapped:(id)tapped;
-(void)updateArchivedChatsCell;
-(void)commonInit;
@end

__attribute__((visibility("hidden")))
@interface WAInAppNotificationsViewController : WAStaticTableViewController {
	UISwitch* _switchInAppVibrate;
	UISwitch* _switchInAppSounds;
	WATableRow* _rowInAppAlerts;
}
+(id)controller;
-(void).cxx_destruct;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)inAppSoundsAction:(id)appSoundsAction;
-(void)inAppVibrateAction:(id)appVibrateAction;
-(void)reloadData;
-(void)setupTableView;
-(void)viewDidLoad;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WACloudBackupManager_Documents : WACloudBackupManager {
	NSString* _capturedRemoteBackupPath;
	id _ubiquityURL;
}
@property(readonly, assign, nonatomic) NSString* remoteBackupPath;
@property(retain, nonatomic) NSURL* ubiquityURL;
+(BOOL)getValue:(BOOL*)value ofKey:(id)key forPath:(id)path;
+(BOOL)getFileDownloaded:(BOOL*)downloaded forPath:(id)path;
+(BOOL)getFileDownloading:(BOOL*)downloading forPath:(id)path;
+(BOOL)startFileDownloading:(id)downloading;
+(id)phoneNumberFromBackupInfoFilePath:(id)backupInfoFilePath;
-(void).cxx_destruct;
-(BOOL)extractToTmp;
-(BOOL)logFiles;
-(BOOL)evictFiles;
-(void)removeCloudItemsAtPaths:(id)paths;
-(void)fixCloudAccount;
-(void)loadUbiquityURL;
-(void)ubiquityIdentityTokenDidChange;
-(id)remoteBackupPathEnumeratorWithProperties:(id)properties;
-(void)downloadMetadataForAllBackups;
-(void)deleteBackup:(id)backup withOptions:(unsigned)options completion:(id)completion;
-(BOOL)isUserRegistered_cached;
-(id)createDownloadOperationWithRestore:(id)restore;
-(id)createUploadOperationWithBackup:(id)backup fromOperation:(id)operation;
-(void)configureCloudOperation:(id)operation;
-(void)startCurrentAction;
-(id)createDownloadStatus;
-(id)createUploadStatus;
-(void)reportUploadStatusFinished:(id)finished;
-(id)createPreviousBackup;
-(id)statisticsFileName;
-(id)buildRemoteBackupPath:(id)path;
-(id)localRestorePath;
-(id)localBackupPath;
-(BOOL)initialized;
-(BOOL)availableEstimate;
-(BOOL)available;
-(id)initWithAutoBackupSettings:(id)autoBackupSettings errorManager:(id)manager;
@end

__attribute__((visibility("hidden")))
@interface _WADoneWithSpinnerButton : UIButton {
	BOOL _rightAligned;
	UIActivityIndicatorView* _spinner;
}
@property(readonly, assign, nonatomic) UIActivityIndicatorView* spinner;
@property(assign, nonatomic) BOOL rightAligned;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(UIEdgeInsets)alignmentRectInsets;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WADoneWithSpinnerBarButtonItem : UIBarButtonItem {
	unsigned _buttonStyle;
}
@property(assign, nonatomic) unsigned buttonStyle;
@property(assign, nonatomic) BOOL spinnerHidden;
+(id)buttonWithTarget:(id)target action:(SEL)action;
-(void)done:(id)done;
-(void)sizeToFit;
-(id)initWithTitle:(id)title;
-(id)initWithCoder:(id)coder;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WASinglePhotoPickerController : NSObject <UIImagePickerControllerDelegate, UINavigationControllerDelegate, WAPhotoMoveAndScaleViewControllerDelegate> {
	int _lastStatusBarStyle;
	BOOL _lastStatusBarHidden;
	BOOL _preferFrontCamera;
	id<WASinglePhotoPickerControllerDelegate> _delegate;
	int _sourceType;
	float _minimumWidth;
	float _maximumWidth;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL preferFrontCamera;
@property(assign, nonatomic) float maximumWidth;
@property(assign, nonatomic) float minimumWidth;
@property(assign, nonatomic) int sourceType;
@property(assign, nonatomic) __weak id<WASinglePhotoPickerControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)performCustomPushTransitionOnNavigationController:(id)controller toViewController:(id)viewController;
-(void)photoMoveAndScaleViewController:(id)controller didFinishWithImage:(id)image;
-(void)imagePickerControllerDidCancel:(id)imagePickerController;
-(void)imagePickerController:(id)controller didFinishPickingMediaWithInfo:(id)info;
-(void)presentFromViewController:(id)viewController;
-(void)applicationDidEnterBackground:(id)application;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WADownloadBackupOperation_Documents : WACloudInteractionBackupOperation_Documents {
	float _progress;
	WAActionManager* _actionManager;
	unsigned _failureCode;
	WACloudStatus* _capturedCloudStatus;
	NSSet* _filesToDownload;
}
@property(readonly, assign, nonatomic) NSSet* filesToDownload;
@property(readonly, assign, nonatomic) WACloudStatus* capturedCloudStatus;
@property(readonly, assign, nonatomic) unsigned failureCode;
@property(readonly, assign, nonatomic) WAActionManager* actionManager;
-(void).cxx_destruct;
-(void)startDownloadingRelevantBackupFiles;
-(void)run;
-(void)listenForCloudStatus;
-(id)cloudStatusToObserve;
-(float)progress;
-(id)initWithActionManager:(id)actionManager failureCode:(unsigned)code cloudManager:(id)manager filesToDownload:(id)download;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAPhotoMoveAndScaleViewController : WAViewController <UIScrollViewDelegate> {
	WAPhotoMoveAndScaleCropView* _cropView;
	UIActivityIndicatorView* _spinner;
	BOOL _statusBarWasHidden;
	UIView* _imageContainerView;
	UIImageView* _imageView;
	UIImage* _blurredImage;
	UIImageView* _blurredImageView;
	float _blurredImageScaleFactor;
	BOOL _adjustsStatusBarAutomatically;
	unsigned _mode;
	UIImage* _originalImage;
	float _minimumWidth;
	float _maximumWidth;
	id<WAPhotoMoveAndScaleViewControllerDelegate> _delegate;
	id _completionHandler;
	UIScrollView* _scrollView;
	UILabel* _titleLabel;
	UIButton* _cancelButton;
	UIButton* _doneButton;
	UIView* _bottomView;
	UIImageView* _bottomViewBackgroundView;
	UIImageView* _bottomViewShadowView;
	UIView* _footerContentView;
	UIImageView* _staticImageView;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIImageView* staticImageView;
@property(retain, nonatomic) UIView* footerContentView;
@property(retain, nonatomic) UIImageView* bottomViewShadowView;
@property(retain, nonatomic) UIImageView* bottomViewBackgroundView;
@property(retain, nonatomic) UIView* bottomView;
@property(retain, nonatomic) UIButton* doneButton;
@property(retain, nonatomic) UIButton* cancelButton;
@property(retain, nonatomic) UILabel* titleLabel;
@property(retain, nonatomic) UIScrollView* scrollView;
@property(assign, nonatomic) BOOL adjustsStatusBarAutomatically;
@property(copy, nonatomic) id completionHandler;
@property(assign, nonatomic) __weak id<WAPhotoMoveAndScaleViewControllerDelegate> delegate;
@property(assign, nonatomic) float maximumWidth;
@property(assign, nonatomic) float minimumWidth;
@property(retain, nonatomic) UIImage* originalImage;
@property(assign, nonatomic) unsigned mode;
-(void).cxx_destruct;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(id)rotatingHeaderView;
-(id)rotatingFooterView;
-(void)scrollViewDidZoom:(id)scrollView;
-(void)recenterContainerView;
-(id)viewForZoomingInScrollView:(id)scrollView;
-(void)configureScrollViewForZooming;
-(id)imageForCurrentZoomRect;
-(void)cancel:(id)cancel;
-(void)done:(id)done;
-(void)layoutFooter;
-(void)relayout;
-(void)updateInterfaceForMode;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(void)makeBlurredImage;
-(void)resetImageViewLayout;
-(int)preferredStatusBarStyle;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface _WALayoutSupport : NSObject <UILayoutSupport> {
	float _length;
	NSLayoutYAxisAnchor* _topAnchor;
	NSLayoutYAxisAnchor* _bottomAnchor;
	NSLayoutDimension* _heightAnchor;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign) NSLayoutDimension* heightAnchor;
@property(readonly, assign) NSLayoutYAxisAnchor* bottomAnchor;
@property(readonly, assign) NSLayoutYAxisAnchor* topAnchor;
@property(assign, nonatomic) float length;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WAViewController : UIViewController <WAViewControllerPrivateExtensions, WAViewControllerExtensions> {
	_WAViewControllerHelper* _wa_helper;
}
@property(readonly, assign, nonatomic) _WAViewControllerHelper* wa_helper;
@property(retain, nonatomic) NSArray* defaultPreviewActionItems;
@property(readonly, assign, nonatomic) unsigned visibleConnectionStatus;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)wa_is3DTouchAvailable;
-(BOOL)wa_isBeingPreviewed;
-(void)visibleConnectionStatusDidChange;
-(void)performAfterTransitionEnds:(id)ends;
-(void)wa_applicationDidBecomeActive;
-(void)wa_applicationWillResignActive;
-(void)wa_applicationDidEnterBackground;
-(void)wa_applicationWillEnterForeground;
-(void)wa_tintColorDidChange;
-(void)wa_fontSizeDidChange;
-(void)dismissAllDropDownAlertViewsWithAnimation:(BOOL)animation;
-(void)dismissDropDownAlertView:(id)view animated:(BOOL)animated;
-(void)showDropDownAlertView:(id)view animated:(BOOL)animated;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(id)uniqueIdentifier;
-(void)dealloc;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
-(id)initWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WATableViewController : UITableViewController <WAViewControllerPrivateExtensions, WAViewControllerExtensions> {
	_WAViewControllerHelper* _wa_helper;
	BOOL _needsContentInsetUpdate;
}
@property(readonly, assign, nonatomic) _WAViewControllerHelper* wa_helper;
@property(retain, nonatomic) NSArray* defaultPreviewActionItems;
@property(readonly, assign, nonatomic) unsigned visibleConnectionStatus;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(BOOL)wa_is3DTouchAvailable;
-(BOOL)wa_isBeingPreviewed;
-(void)visibleConnectionStatusDidChange;
-(void)performAfterTransitionEnds:(id)ends;
-(void)wa_applicationDidBecomeActive;
-(void)wa_applicationWillResignActive;
-(void)wa_applicationDidEnterBackground;
-(void)wa_applicationWillEnterForeground;
-(void)wa_tintColorDidChange;
-(void)wa_fontSizeDidChange;
-(void)_applicationDidDismissCallScreen:(id)_application;
-(void)dismissAllDropDownAlertViewsWithAnimation:(BOOL)animation;
-(void)dismissDropDownAlertView:(id)view animated:(BOOL)animated;
-(void)showDropDownAlertView:(id)view animated:(BOOL)animated;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)viewDidLayoutSubviews;
-(void)viewWillLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)uniqueIdentifier;
-(void)dealloc;
-(id)initWithStyle:(int)style;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface _WAViewControllerHelper : NSObject <WADropDownAlertViewDelegate> {
	NSMutableArray* _activeDropDownAlertViews;
	double _lastVisibleConnectionStatusUpdateTime;
	unsigned _visibleConnectionStatusCounter;
	unsigned _targetVisibleConnectionStatus;
	UIViewController<WAViewControllerPrivateExtensions>* _parentViewController;
	_WALayoutSupport* _topLayoutGuide;
	unsigned _visibleConnectionStatus;
	NSArray* _defaultPreviewActionItems;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) NSArray* defaultPreviewActionItems;
@property(readonly, assign, nonatomic) unsigned visibleConnectionStatus;
@property(readonly, assign, nonatomic) _WALayoutSupport* topLayoutGuide;
@property(assign, nonatomic) __weak UIViewController<WAViewControllerPrivateExtensions>* parentViewController;
+(unsigned)connectionStatusToShow;
+(void)initialize;
+(void)handleCorruptedNavigationStack;
-(void).cxx_destruct;
-(void)layoutDropDownAlertView:(id)view;
-(void)dismissAllDropDownAlertViewsWithAnimation:(BOOL)animation;
-(void)dismissDropDownAlertView:(id)view animated:(BOOL)animated;
-(void)dropDownAlertViewDidDismiss:(id)dropDownAlertView;
-(void)showDropDownAlertView:(id)view animated:(BOOL)animated;
-(void)didScroll;
-(void)relayout;
-(void)actualConnectionStatusDidChange;
-(void)xmppConnectionStateDidChange:(id)xmppConnectionState;
-(void)xmppConnectionNetworkStatusDidChange:(id)xmppConnectionNetworkStatus;
-(BOOL)is3DTouchAvailable;
-(BOOL)isBeingPreviewed;
-(void)logMethodCall:(SEL)call;
-(void)performAfterTransitionEnds:(id)ends;
-(void)viewWillAppear:(BOOL)view;
-(void)applicationWillPresentCallScreen:(id)application;
-(void)applicationDidBecomeActive:(id)application;
-(void)applicationWillResignActive:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)tintColorDidChange:(id)tintColor;
-(void)fontSizeDidChange:(id)fontSize;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WADebugPlaceSourceTableViewController : UITableViewController {
	unsigned _source;
}
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)didReceiveMemoryWarning;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface WAPhotoMoveAndScaleCropView : UIView {
	WAShapeView* _maskView;
}
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAPercentDrivenInteractiveTransition : UIPercentDrivenInteractiveTransition <WAPercentDrivenInteractiveTransitioning> {
	id _updateHandler;
}
@property(copy, nonatomic) id updateHandler;
@property(assign, nonatomic) float completionSpeed;
@property(readonly, assign, nonatomic) float percentComplete;
@property(readonly, assign, nonatomic) float duration;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
@end

__attribute__((visibility("hidden")))
@interface WACustomPercentDrivenInteractiveTransition : NSObject <WAPercentDrivenInteractiveTransitioning> {
	id<UIViewControllerContextTransitioning> _transitionContext;
	id<UIViewControllerAnimatedTransitioning> _animator;
	CADisplayLink* _displayLink;
	float _percentComplete;
	double _initialTimeOffset;
	float _completionSpeed;
	id _updateHandler;
}
@property(copy, nonatomic) id updateHandler;
@property(assign, nonatomic) float completionSpeed;
@property(readonly, assign, nonatomic) float percentComplete;
@property(readonly, assign, nonatomic) float duration;
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)removeAllAnimationsInLayer:(id)layer;
-(void)didFinishTransition;
-(void)animate:(id)animate;
-(void)completeTransition;
-(void)setPercentComplete:(float)complete;
-(void)finishInteractiveTransition;
-(void)cancelInteractiveTransition;
-(void)updateInteractiveTransition:(float)transition;
-(void)startInteractiveTransition:(id)transition;
-(id)initWithAnimator:(id)animator;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAImageToImageTransitionController : NSObject <UIViewControllerAnimatedTransitioning> {
	id<UIViewControllerContextTransitioning> _transitionContext;
	UIView* _animatedFromView;
	UIView* _animatedToView;
	CGPoint _animateFromCenter;
	CGPoint _animateToCenter;
	float _animationScaleFactor;
	UIView* _navBarSnapshot;
	BOOL _useSpringAnimation;
	NSMutableDictionary* _context;
	double _animationDuration;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL useSpringAnimation;
@property(assign, nonatomic) double animationDuration;
@property(readonly, assign, nonatomic) NSMutableDictionary* context;
+(id)transitionControllerForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3;
-(void).cxx_destruct;
-(void)performCompletedTransitionAnimationWithDuration:(double)duration translation:(CGPoint)translation velocity:(CGPoint)velocity;
-(void)performCancelledTransitionAnimationWithDuration:(double)duration;
-(id)interactivePopTransitionForAnimator:(id)animator;
-(void)animationEnded:(BOOL)ended;
-(void)animateNonInteractiveTransition;
-(void)animateInteractiveTransition;
-(id)flattenTransitionAnimationViewIfNeeded:(id)needed;
-(float)scaleFactorFromView:(id)view toView:(id)view2;
-(void)animateTransition:(id)transition;
-(double)transitionDuration:(id)duration;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAImageToImagePanPopGestureRecognizer : UIPanGestureRecognizer {
	UIViewController* _parentViewController;
	int _transitionState;
}
@property(assign, nonatomic) id<WAImageToImagePanPopGestureRecognizerDelegate> delegate;
-(void).cxx_destruct;
-(void)handleGestureRecognizer:(id)recognizer;
-(id)initWithParentViewController:(id)parentViewController;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestPrivacySettingGet : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithCompletion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestPrivacySettingSet : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithSettings:(id)settings completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAStatsRecord : NSManagedObject {
}
@property(retain, nonatomic) NSNumber* videoSize;
@property(retain, nonatomic) NSNumber* videoCount;
@property(retain, nonatomic) NSNumber* totalSize;
@property(retain, nonatomic) NSNumber* totalCount;
@property(retain, nonatomic) NSNumber* textCount;
@property(retain, nonatomic) NSString* recurringID;
@property(retain, nonatomic) NSDate* recordDate;
@property(retain, nonatomic) NSDate* messageDate;
@property(retain, nonatomic) NSNumber* locationCount;
@property(retain, nonatomic) NSString* jid;
@property(retain, nonatomic) NSNumber* isRecurring;
@property(retain, nonatomic) NSNumber* imageSize;
@property(retain, nonatomic) NSNumber* imageCount;
@property(retain, nonatomic) NSNumber* contactCount;
@property(retain, nonatomic) NSString* chatName;
@property(retain, nonatomic) NSNumber* audioSize;
@property(retain, nonatomic) NSNumber* audioCount;
@end

__attribute__((visibility("hidden")))
@interface WASharedMetadataQuery : NSObject {
	BOOL _finishedGathering;
	NSMetadataQuery* _internalQuery;
	WACloudBackupManager_Documents* _manager;
	unsigned _queryRetainCount;
	id _creator;
}
@property(copy, nonatomic) id creator;
@property(assign, nonatomic) unsigned queryRetainCount;
@property(assign, nonatomic) __weak WACloudBackupManager_Documents* manager;
@property(assign, nonatomic, getter=isFinishedGathering) BOOL finishedGathering;
@property(retain, nonatomic) NSMetadataQuery* internalQuery;
-(void).cxx_destruct;
-(void)jidDidChange:(id)jid;
-(void)cloudAccountChanged:(id)changed;
-(void)queryReady:(id)ready;
-(void)queryUpdated:(id)updated;
-(void)postUpdatedNotification;
-(void)restartQuery;
-(void)stopQuery;
-(void)startQuery;
-(void)startInternalQuery;
-(void)dealloc;
-(id)initWithManager:(id)manager queryCreator:(id)creator;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAQueryEnumerator : NSEnumerator {
	NSMetadataQuery* _query;
	unsigned _count;
	unsigned _index;
	NSMutableArray* _validators;
}
@property(readonly, assign, nonatomic) NSMutableArray* validators;
@property(assign, nonatomic) unsigned index;
@property(readonly, assign, nonatomic) unsigned count;
@property(retain, nonatomic) NSMetadataQuery* query;
-(void).cxx_destruct;
-(id)nextObject;
-(void)addFileValidator:(id)validator;
-(void)addFileIncluder:(id)includer;
-(void)ignoreDirectories;
-(id)initWithQuery:(id)query;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WACompiledDNS : NSObject {
}
+(id)createBuiltinDNS;
+(id)addressesForChatHost:(id)chatHost;
@end

__attribute__((visibility("hidden")))
@interface WAPhoneNumberTextFieldHelper : NSObject <UITextFieldDelegate> {
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
+(BOOL)isStringADecimalNumber:(id)number;
+(id)stringByKeepingOnlyDecimalDigits:(id)digits;
+(void)initialize;
-(BOOL)textFieldShouldReturn:(id)textField;
-(void)textFieldDidBeginEditing:(id)textField;
-(BOOL)textField:(id)field shouldChangeCharactersInRange:(NSRange)range replacementString:(id)string;
-(NSRange)expandRange:(NSRange)range inTextFieldToIncludeNumber:(id)includeNumber;
-(unsigned)endPositionOfPrefix:(id)prefix inFormattedString:(id)formattedString;
@end

__attribute__((visibility("hidden")))
@interface WAPhoneNumberTextField : UITextField {
	WAPhoneNumberTextFieldHelper* _textFieldHelper;
	NSString* _countryCode;
	UIFont* _phoneNumberFont;
	id<WAPhoneNumberTextFieldDelegate> _textFieldDelegate;
}
@property(assign, nonatomic) __weak id<WAPhoneNumberTextFieldDelegate> textFieldDelegate;
@property(retain, nonatomic) UIFont* phoneNumberFont;
@property(copy, nonatomic) NSString* countryCode;
-(void).cxx_destruct;
-(void)reformatTextField;
-(void)setText:(id)text;
-(void)awakeFromNib;
@end

__attribute__((visibility("hidden")))
@interface WABorderlessButton : UIButton {
	UILabel* _bottomLabel;
	UIImage* _normalImage;
	UIImage* _highlightedImage;
}
@property(copy, nonatomic) NSString* bottomLabelText;
+(id)button;
-(void).cxx_destruct;
-(id)accessibilityValue;
-(void)setIconImage:(id)image;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAAudioTrack : NSObject {
	id _exportCompletionHandler;
	id _exportProgressHandler;
	AVAssetExportSession* _exportSession;
	NSTimer* _progressTimer;
	float _lastProgressValue;
	NSURL* _assetURL;
	UIImage* _artwork;
	NSString* _title;
	NSString* _authorName;
	NSString* _collectionName;
	NSString* _outputFileType;
	NSURL* _outputMediaURLWithoutFileExtension;
	NSURL* _outputMediaURL;
	double _duration;
}
@property(readonly, assign, nonatomic) NSURL* outputMediaURL;
@property(retain, nonatomic) NSURL* outputMediaURLWithoutFileExtension;
@property(readonly, assign, nonatomic) NSString* outputFileType;
@property(readonly, assign, nonatomic) double duration;
@property(readonly, assign, nonatomic) NSString* collectionName;
@property(readonly, assign, nonatomic) NSString* authorName;
@property(readonly, assign, nonatomic) NSString* title;
@property(readonly, assign, nonatomic) UIImage* artwork;
@property(readonly, assign, nonatomic) NSURL* assetURL;
+(id)audioFileExtensionForFileType:(id)fileType;
+(id)cachePathForAssetURL:(id)assetURL;
+(void)pruneAudioTrackExportCacheFiles;
+(id)pathToAudioTrackExportCacheFiles;
+(BOOL)isMediaItemShareable:(id)shareable error:(out id*)error;
-(void).cxx_destruct;
-(void)updateProgress:(id)progress;
-(void)stopProgressTimer;
-(void)startProgressTimer;
-(void)handleExportCompletionWithSuccessfulOutcome:(BOOL)successfulOutcome;
-(void)performExport;
-(void)transferToMediaDirectoryWithProgressHandler:(id)progressHandler completion:(id)completion;
-(void)addOutputFileToCache;
-(id)pathOfCachedAudioTrackFileForExport;
-(void)prepareWithCompletionHandler:(id)completionHandler;
-(id)initWithMediaItem:(id)mediaItem;
@end

__attribute__((visibility("hidden")))
@interface WAUntarFileOperation : WABackupOperation {
	BOOL _succeeded;
	NSString* _path;
	NSString* _destination;
	unsigned long long _extracted;
	unsigned long long _total;
	int _atomic;
}
@property(assign) BOOL atomic;
-(void).cxx_destruct;
-(void)run;
-(float)progress;
-(id)initWithPath:(id)path destination:(id)destination;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface _WAFAQBrowserTableViewCell : UITableViewCell {
	UILabel* _bodyLabel;
}
+(float)maximumContentWidthExcludingInsets;
+(float)preferredRowHeightForText:(id)text width:(float)width;
+(id)preferredBodyFont;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)configureWithContents:(id)contents;
-(id)initWithReuseIdentifier:(id)reuseIdentifier;
@end

__attribute__((visibility("hidden")))
@interface WAFAQBrowserViewController : WATableViewController {
	NSMutableArray* _entries;
	id _delegate;
}
@property(readonly, assign, nonatomic) unsigned numberOfEntriesOpened;
@property(assign, nonatomic) __weak id delegate;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)tableView:(id)view titleForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(void)sendEmail:(id)email;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)wa_tintColorDidChange;
-(void)wa_fontSizeDidChange;
-(id)initWithEntries:(id)entries;
@end

__attribute__((visibility("hidden")))
@interface _WAGroupMessageDetailsTableHeaderView : UIView {
	UIView* _topBorder;
	UIView* _bottomBorder;
	BOOL _showTopBorder;
	BOOL _showBottomBorder;
	UILabel* _titleLabel;
	UIImageView* _imageView;
}
@property(assign, nonatomic) BOOL showBottomBorder;
@property(assign, nonatomic) BOOL showTopBorder;
@property(readonly, assign, nonatomic) UIImageView* imageView;
@property(readonly, assign, nonatomic) UILabel* titleLabel;
-(void).cxx_destruct;
-(void)setBorderColor:(id)color;
-(void)setBottomBorderHidden:(BOOL)hidden;
-(void)setTopBorderHidden:(BOOL)hidden;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAGroupMessageDetailsTableDelegate : NSObject <UITableViewDelegate, UITableViewDataSource, WAMessageDetailsTableUpdateDelegate> {
	id<WADetailsTableSizeObzerver> _sizeObserver;
	NSDictionary* _receiptsInfo;
	NSDate* _sentDate;
	NSArray* _groupMembers;
	NSMutableDictionary* _pushNames;
	BOOL _isMediaMessage;
	BOOL _isPttMessage;
	int _numberOfReceipients;
	float _selectedHeightUnit;
	UIFont* _contactNameFont;
	UIFont* _pushNameFont;
	UIFont* _dateTimeFont;
	float _timeLabelWidth;
	float _dateTimeLabelSpace;
	NSMutableArray* _receipts[3];
	int _receiptSection[3];
	int _numberOfReceipts[3];
	BOOL _showUnfinishedIndication[3];
	NSIndexPath* _expandedIndexPath;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)tableView:(id)view messageUpdated:(id)updated;
-(void)reloadFonts;
-(void)stopOperations;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)footerViewForTableView:(id)tableView;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(id)titleForHeaderInSection:(int)section;
-(id)imageForHeaderInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)initWithMessage:(id)message sizeObzerver:(id)obzerver;
@end

__attribute__((visibility("hidden")))
@interface WADeleteAccountPhoneConfirmationViewController : PhoneConfirmationController {
}
-(id)buttonTitle;
-(id)warningBulletPoints;
-(id)warningText;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface WAMessageHelper : NSObject {
	NSObject<OS_dispatch_queue>* _generateImageRepresentationQueue;
	NSObject<OS_dispatch_group>* _thumbnailLoadingGroup;
	NSObject<OS_dispatch_queue>* _localThumbnailLoadingQueue;
	NSConditionLock* _xmppLoadingLock;
	int _activeOperationCount;
	BOOL _thumbnailLoadingInProgress;
	BOOL _mapThumbnailRequestInProgress;
	WAMessage* _message;
	UIImage* _imageRepresentation;
	UIImage* _xmppImage;
	UIImage* _blurredImage;
	double _cachedMediaDuration;
}
@property(assign) BOOL mapThumbnailRequestInProgress;
@property(assign) BOOL thumbnailLoadingInProgress;
@property(assign, nonatomic) double cachedMediaDuration;
@property(retain) UIImage* blurredImage;
@property(retain) UIImage* xmppImage;
@property(retain) UIImage* imageRepresentation;
@property(assign, nonatomic) __weak WAMessage* message;
+(id)alertStringToSendMultipleMessagesWithParts:(id)parts overflowed:(BOOL)overflowed;
+(id)imageForMediaAtPath:(id)path;
+(double)durationOfMediaAtPath:(id)path;
+(Class)helperClassForMessage:(id)message;
+(id)messageHelperForMessage:(id)message;
+(id)jpegDataFromImage:(id)image error:(out id*)error;
+(BOOL)checkMediaSize:(id)size error:(out id*)error;
+(id)errorWithDescription:(id)description failureReason:(id)reason;
+(id)messageTimestampForVoiceOverFromDate:(id)date;
+(id)stringRepresentationForVoiceOverForMessage:(id)message;
+(id)stringRepresentationForNotificationForMessage:(id)message;
+(id)stringRepresentationForChatForMessage:(id)message;
+(id)stringRepresentationForMessage:(id)message;
+(id)senderNameForStringRepresentationForMessage:(id)message;
+(id)cachedThumbnailPathFromMediaPath:(id)mediaPath;
+(id)cachedThumbnailPathForLocation:(id)location;
+(unsigned)blurredImagePreference;
+(float)blurredImageMaximumWidth;
+(id)staticMediaBrowserThumbnail;
+(CGSize)mediaBrowserThumbnailSize;
+(void)initialize;
-(void).cxx_destruct;
-(BOOL)isProcessing;
-(void)freeCachedData;
-(void)didReceiveMemoryWarning:(id)warning;
-(void)applicationDidEnterBackground:(id)application;
-(void)dealloc;
-(id)init;
-(id)activityDataTypeIdentifierForActivityType:(id)activityType;
-(id)activitySubjectForActivityType:(id)activityType;
-(id)activityItemForActivityType:(id)activityType;
-(id)activityPlaceholderItem;
-(void)internalRepeatedlyFetchBetterThumbnailsWithBlock:(id)block;
-(void)repeatedlyFetchBetterThumbnailsWithBlock:(id)block;
-(void)fetchMapPreviewIfNecessary;
-(void)prepareForDisplay;
-(id)internalGenerateImageRepresentationFromSourceMediaAtPath:(id)path;
-(id)generateImageRepresentationFromSourceMediaAtPath:(id)path;
-(void)messageDidStoreIncomingMedia;
-(void)storeIncomingMediaWithFilename:(id)filename data:(id)data completion:(id)completion;
-(void)sanitizeIncomingMediaData:(id)data completion:(id)completion;
-(void)storeOutgoingMedia:(id)media completion:(id)completion;
-(CGSize)chatThumbnailSize;
-(id)chatThumbnailReturningPermanentState:(out BOOL*)state;
-(void)internalGenerateMediaBrowserThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
-(void)generateMediaBrowserThumbnailWithCompletionHandler:(id)completionHandler;
-(void)internalGenerateChatThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
-(void)generateChatThumbnailWithCompletionHandler:(id)completionHandler;
-(void)internalGenerateXMPPThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
-(void)generateXMPPThumbnailWithCompletionHandler:(id)completionHandler;
-(void)internalFetchImageRepresentationWithCompletionHandler:(id)completionHandler;
-(void)fetchImageRepresentationWithCompletionHandler:(id)completionHandler;
@end

__attribute__((visibility("hidden")))
@interface WAVideoMessageHelper : WAMessageHelper {
}
+(id)stringRepresentationForVoiceOverForMessage:(id)message;
+(id)stringRepresentationForNotificationForMessage:(id)message;
+(id)stringRepresentationForChatForMessage:(id)message;
+(id)stringRepresentationForMessage:(id)message;
+(float)blurredImageMaximumWidth;
+(float)maximumChatBubbleImageWidth;
+(unsigned)blurredImagePreference;
-(id)activitySubjectForActivityType:(id)activityType;
-(id)activityItemForActivityType:(id)activityType;
-(id)activityPlaceholderItem;
-(id)internalGenerateImageRepresentationFromSourceMediaAtPath:(id)path;
-(CGSize)chatThumbnailSize;
-(void)messageDidStoreIncomingMedia;
-(void)storeOutgoingMedia:(id)media completion:(id)completion;
-(void)internalGenerateChatThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
-(id)chatThumbnailReturningPermanentState:(out BOOL*)state;
-(void)internalGenerateMediaBrowserThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WATextMessageHelper : WAMessageHelper {
}
+(unsigned)blurredImagePreference;
@end

__attribute__((visibility("hidden")))
@interface WAImageMessageHelper : WAMessageHelper {
}
+(float)maximumChatBubbleTransformedImageWidth;
+(float)maximumChatBubbleImageWidth;
+(id)stringRepresentationForVoiceOverForMessage:(id)message;
+(id)stringRepresentationForNotificationForMessage:(id)message;
+(id)stringRepresentationForChatForMessage:(id)message;
+(id)stringRepresentationForMessage:(id)message;
+(float)blurredImageMaximumWidth;
-(id)activitySubjectForActivityType:(id)activityType;
-(id)activityItemForActivityType:(id)activityType;
-(id)activityPlaceholderItem;
-(CGSize)chatThumbnailSize;
-(id)internalGenerateImageRepresentationFromSourceMediaAtPath:(id)path;
-(void)messageDidStoreIncomingMedia;
-(void)sanitizeIncomingMediaData:(id)data completion:(id)completion;
-(void)storeOutgoingMedia:(id)media completion:(id)completion;
-(void)internalGenerateMediaBrowserThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
-(void)internalGenerateChatThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WACameraFocusBoxView : UIView {
	UIColor* _borderColor;
}
@property(retain, nonatomic) UIColor* borderColor;
+(id)focusAnimationOfDuration:(double)duration;
-(void).cxx_destruct;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)presentAtPoint:(CGPoint)point inView:(id)view;
-(void)drawRect:(CGRect)rect;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WACameraRollStripView : UIView <_WACameraRollStripScrollViewDelegate, UIGestureRecognizerDelegate> {
	_WACameraRollStripScrollView* _scrollView;
	WAAssetCollection* _assetCollection;
	id<WACameraRollStripViewDelegate> _delegate;
	float _imageRotationAngle;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) UIColor* baseColor;
@property(readonly, assign, nonatomic) unsigned presentationState;
@property(assign, nonatomic) float imageRotationAngle;
@property(assign, nonatomic) __weak id<WACameraRollStripViewDelegate> delegate;
@property(retain, nonatomic) WAAssetCollection* assetCollection;
+(float)preferredHeight;
-(void).cxx_destruct;
-(void)cameraRollStripScrollView:(id)view didDeselectItemAtIndex:(int)index;
-(void)cameraRollStripScrollView:(id)view didSelectItemAtIndex:(int)index;
-(void)cameraRollStripScrollView:(id)view didUnhighlightItemAtIndex:(int)index;
-(void)cameraRollStripScrollView:(id)view didHighlightItemAtIndex:(int)index;
-(void)cameraRollStripScrollView:(id)view willDisplayCell:(id)cell atIndex:(int)index;
-(int)numberOfItemsInCameraRollStripScrollView:(id)cameraRollStripScrollView;
-(id)viewForMediaPickerAsset:(id)mediaPickerAsset;
-(void)setPresentationState:(unsigned)state animated:(BOOL)animated;
-(void)setPresentationState:(unsigned)state;
-(void)contractIfPossible;
-(void)expandIfPossible;
-(void)reloadData;
-(void)layoutSubviews;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WACameraRollStripScrollView : UIScrollView <UIGestureRecognizerDelegate> {
	WAGrabHandleView* _grabBarView;
	float _grabBarHeight;
	float _visibleHeightBeforeDragging;
	float _initialVisibleHeight;
	float _lastVisibleHeight;
	NSMutableSet* _visibleViews;
	NSMutableSet* _recycledViews;
	UIPanGestureRecognizer* _panGesture;
	int _panGestureCounter;
	int _panGestureCounterOnTouchDown;
	float _panGestureOffset;
	int _itemCount;
	int _initialHighlightedIndex;
	BOOL _isHighlightingCell;
	UIView* _backgroundView;
	CADisplayLink* _displayLink;
	float _animationToValue;
	float _animationFromValue;
	double _animationStartTime;
	double _animationDuration;
	double _swipeStartTime;
	BOOL _horizontallyFlipped;
	float _visibleHeight;
	unsigned _presentationState;
	CGSize _maximumThumbnailSizeInPixels;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic, getter=isHorizontallyFlipped) BOOL horizontallyFlipped;
@property(readonly, assign, nonatomic) CGSize maximumThumbnailSizeInPixels;
@property(assign, nonatomic) unsigned presentationState;
@property(readonly, assign, nonatomic) UIView* backgroundView;
@property(readonly, assign, nonatomic) NSArray* visibleCells;
@property(assign, nonatomic) id<_WACameraRollStripScrollViewDelegate> delegate;
@property(readonly, assign, nonatomic) float visibleHeight;
+(float)preferredThumbnailWidth;
+(float)preferredHeight;
-(void).cxx_destruct;
-(void)reloadData;
-(id)cellForItemAtIndex:(int)index;
-(void)willMoveToWindow:(id)window;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(id)cellAtPoint:(CGPoint)point;
-(BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
-(BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)gestureRecognizer;
-(void)animationDidStop:(id)animation finished:(BOOL)finished;
-(void)setGrabBarState:(float)state animated:(BOOL)animated;
-(void)setGrabBarStateWithAnimation:(BOOL)animation;
-(float)targetVisibleHeightForCurrentHeight:(float)currentHeight velocity:(CGPoint)velocity;
-(void)handleSecondaryPanGesture:(id)gesture;
-(NSRange)visibleRange;
-(float)thumbnailWidthForVisibleHeight:(float)visibleHeight;
-(float)currentThumbnailWidth;
-(CGRect)centerAndSizeForItemAtIndex:(int)index;
-(void)layoutSubviews;
-(void)updateAnimation:(id)animation;
-(void)animateFromVisibleHeight:(float)visibleHeight to:(float)to duration:(double)duration;
-(void)setVisibleHeight:(float)height animated:(BOOL)animated;
-(void)setPresentationState:(unsigned)state animated:(BOOL)animated;
-(void)contractIfPossible;
-(void)expandIfPossible;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAHTTPFetcher : NSObject {
	BOOL _validateServerCertificate;
	BOOL _overrideUserAgent;
	BOOL _shouldFetchInBackground;
	NSURLRequest* _request;
	NSData* _postData;
	id _completionHandler;
}
@property(copy, nonatomic) id completionHandler;
@property(assign, nonatomic) BOOL shouldFetchInBackground;
@property(assign, nonatomic) BOOL overrideUserAgent;
@property(assign, nonatomic) BOOL validateServerCertificate;
@property(retain) NSData* postData;
@property(copy, nonatomic) NSURLRequest* request;
+(id)httpErrorForStatusCode:(int)statusCode;
+(id)fetcherWithURLString:(id)urlstring;
+(id)fetcherWithURL:(id)url;
+(id)fetcherWithRequest:(id)request;
-(void).cxx_destruct;
-(void)stopFetching;
-(void)beginFetchOnQueue:(id)queue completion:(id)completion;
-(void)beginFetchWithCompletionHandler:(id)completionHandler;
-(id)description;
-(id)initWithRequest:(id)request;
-(id)init;
@end

@interface _WAHTTPFetcherNSURLSession : WAHTTPFetcher <NSURLSessionDelegate> {
	NSURLSession* _urlSession;
	NSURLSessionTask* _urlSessionTask;
	BOOL _cancelled;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)URLSession:(id)session task:(id)task didReceiveChallenge:(id)challenge completionHandler:(id)handler;
-(void)stopFetching;
-(void)beginFetchOnQueue:(id)queue completion:(id)completion;
-(void)invokeCompletionHandlerWithData:(id)data response:(id)response error:(id)error;
@end

@interface _WAHTTPFetcherNSURLConnection : WAHTTPFetcher <NSURLSessionTaskDelegate> {
	NSURLResponse* _response;
	NSMutableData* _receivedData;
	NSURLConnection* _connection;
	unsigned _backgroundTaskIdentifier;
	BOOL _isCancellingChallenge;
	BOOL _connectionHasEnded;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)endBackgroundTask;
-(void)failToBeginFetchWithError:(id)error;
-(void)invokeCompletionHandlerWithData:(id)data error:(id)error;
-(void)stopFetching;
-(void)beginFetchOnQueue:(id)queue completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAAudioMessageHelper : WAMessageHelper {
}
+(id)stringRepresentationForNotificationForMessage:(id)message;
+(id)stringRepresentationForChatForMessage:(id)message;
+(id)stringRepresentationForMessage:(id)message;
+(id)staticMediaBrowserThumbnail;
-(id)activitySubjectForActivityType:(id)activityType;
-(id)activityItemForActivityType:(id)activityType;
-(id)activityPlaceholderItem;
-(CGSize)chatThumbnailSize;
-(id)chatThumbnailReturningPermanentState:(out BOOL*)state;
-(void)internalGenerateMediaBrowserThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAAudioTrackMessageHelper : WAMessageHelper {
}
+(id)stringRepresentationForNotificationForMessage:(id)message;
+(id)stringRepresentationForChatForMessage:(id)message;
+(id)stringRepresentationForMessage:(id)message;
-(id)activitySubjectForActivityType:(id)activityType;
-(id)activityItemForActivityType:(id)activityType;
-(id)activityPlaceholderItem;
-(id)chatThumbnailReturningPermanentState:(out BOOL*)state;
-(void)storeOutgoingMedia:(id)media completion:(id)completion;
-(void)internalFetchImageRepresentationWithCompletionHandler:(id)completionHandler;
-(void)internalGenerateMediaBrowserThumbnailFromImageRepresentation:(id)imageRepresentation completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WABackup : WAActionManager {
	BOOL _additionalSpaceRequired;
	BOOL _includeVideos;
	BOOL _didTransferToCloud;
	WACloudBackupManager* _manager;
	WAChatStorage* _storage;
	WAFieldStatsEventICloudBackup* _event;
	NSDate* _startDate;
	unsigned _backupVersion;
	unsigned long long _potentialSize;
	unsigned long long _additionalSpaceAmount;
	unsigned long long _actualSize;
}
@property(assign) BOOL didTransferToCloud;
@property(assign) unsigned backupVersion;
@property(assign) BOOL includeVideos;
@property(retain) NSDate* startDate;
@property(readonly, assign, nonatomic) WAFieldStatsEventICloudBackup* event;
@property(readonly, assign, nonatomic) WAChatStorage* storage;
@property(readonly, assign, nonatomic) WACloudBackupManager* manager;
@property(assign, nonatomic) unsigned long long actualSize;
@property(assign, nonatomic) unsigned long long additionalSpaceAmount;
@property(assign, nonatomic) BOOL additionalSpaceRequired;
@property(assign, nonatomic) unsigned long long potentialSize;
-(void).cxx_destruct;
-(void)sendFieldStatsWithError:(id)error;
-(void)phaseCompleted:(id)completed;
-(void)initializeFieldStats;
-(BOOL)test:(int)test didPass:(BOOL)pass;
-(unsigned)maximumPhase;
-(id)errorForCode:(unsigned)code;
-(id)errorDomain;
-(void)start;
-(id)initWithManager:(id)manager chatStorage:(id)storage options:(unsigned)options completion:(id)completion;
-(id)initWithOptions:(unsigned)options;
@end

__attribute__((visibility("hidden")))
@interface WAMediaCacheItem : NSObject {
	NSString* _path;
	NSString* _mediaHash;
	NSDate* _timestamp;
}
@property(retain, nonatomic) NSDate* timestamp;
@property(retain, nonatomic) NSString* mediaHash;
@property(retain, nonatomic) NSString* path;
+(void)insertMediaCacheItemWithReferenceURL:(id)referenceURL storedAtPath:(id)path;
+(id)mediaCacheItemForReferenceURL:(id)referenceURL;
-(void).cxx_destruct;
-(id)initWithCoder:(id)coder;
-(void)encodeWithCoder:(id)coder;
@end

__attribute__((visibility("hidden")))
@interface WAMediaCache : NSObject {
	NSString* _cacheFile;
	NSMutableArray* _items;
}
+(id)sharedInstance;
-(void).cxx_destruct;
-(void)synchronize;
-(void)saveItem:(id)item;
-(id)mediaCacheItem;
-(id)itemByHash:(id)hash;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WACloudInteractionBackupOperation_Documents : WACloudInteractionOperation {
	BOOL _failed;
	WACloudStatus* _capturedCloudStatus;
	NSString* _remoteBackupPath;
	id _cloudStatusListener;
}
@property(assign, nonatomic) BOOL failed;
@property(retain, nonatomic) id cloudStatusListener;
@property(retain, nonatomic) WACloudStatus* capturedCloudStatus;
@property(retain, nonatomic) NSString* remoteBackupPath;
-(void).cxx_destruct;
-(id)pathForRemoteFile:(id)remoteFile;
-(void)finish;
-(void)run;
-(void)cloudStatusUpdated:(id)updated;
-(void)listenForCloudStatus;
-(id)cloudStatusToObserve;
-(BOOL)succeeded;
-(id)init;
-(id)initWithCount:(int)count;
@end

__attribute__((visibility("hidden")))
@interface WAServerStatus : NSObject {
	WAHTTPFetcher* _fetcher;
	BOOL _email;
	BOOL _last;
	BOOL _sync;
	BOOL _chat;
	BOOL _group;
	BOOL _multimedia;
	BOOL _online;
	BOOL _profile;
	BOOL _push;
	BOOL _registration;
	BOOL _status;
	BOOL _broadcast;
	BOOL _version;
	BOOL _requestError;
	BOOL _requestInProgress;
	int _numberOfServicesDown;
}
@property(readonly, assign, nonatomic) int numberOfServicesDown;
@property(readonly, assign, nonatomic) BOOL requestInProgress;
@property(readonly, assign, nonatomic) BOOL requestError;
@property(assign, nonatomic) BOOL version;
@property(assign, nonatomic) BOOL broadcast;
@property(assign, nonatomic) BOOL status;
@property(assign, nonatomic) BOOL registration;
@property(assign, nonatomic) BOOL push;
@property(assign, nonatomic) BOOL profile;
@property(assign, nonatomic) BOOL online;
@property(assign, nonatomic) BOOL multimedia;
@property(assign, nonatomic) BOOL group;
@property(assign, nonatomic) BOOL chat;
@property(assign, nonatomic) BOOL sync;
@property(assign, nonatomic) BOOL last;
@property(assign, nonatomic) BOOL email;
-(void).cxx_destruct;
-(id)servicesStatusString;
-(id)registrationStatusString;
-(void)cancelRequest;
-(void)parseStatusResponse:(id)response withCompletion:(id)completion;
-(void)requestStatusWithCompletion:(id)completion;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoBaseViewController : WATableViewController <ABNewPersonViewControllerDelegate, ABDisabledControllerDelegate, ABPeoplePickerNavigationControllerDelegate, WAInfoInputViewControllerDelegate> {
	void* _selectedContact;
	BOOL _ignoreBlockedContactListNotifications;
	BOOL _dismissOnContactSaveCompletion;
	BOOL _contactIsBlocked;
	WAMediaManager* _mediaManager;
	NSString* _highlightedWhatsAppID;
	NSString* _detailTextForUnknownContact;
	WAAggregateCallEvent* _aggregateCallEvent;
	id _unknownContactData;
	WAMergedContact* _mergedContact;
	NSString* _anyJID;
	unsigned long long _unknownContactDataType;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* anyJID;
@property(readonly, assign, nonatomic) BOOL contactIsBlocked;
@property(retain, nonatomic) WAMergedContact* mergedContact;
@property(assign, nonatomic) BOOL dismissOnContactSaveCompletion;
@property(retain, nonatomic) id unknownContactData;
@property(assign, nonatomic) unsigned long long unknownContactDataType;
@property(readonly, assign, nonatomic) WAContact* contact;
@property(retain, nonatomic) WAAggregateCallEvent* aggregateCallEvent;
@property(copy, nonatomic) NSString* detailTextForUnknownContact;
@property(copy, nonatomic) NSString* highlightedWhatsAppID;
@property(retain, nonatomic) WAMediaManager* mediaManager;
+(id)viewControllerWithContact:(id)contact merged:(BOOL)merged whatsAppID:(id)anId detailText:(id)text;
-(void).cxx_destruct;
-(void)askToUnblockContactBeforeCalling;
-(void)blockedContactsListUpdated:(id)updated;
-(void)contactBlockedStatusDidChange;
-(void)blockOrUnblockContact;
-(void)reallyBlockOrUnblockContact;
-(void)reloadBlockedStatusForCurrentContact;
-(id)allJIDs;
-(void)abDisabledViewControllerDidCancel:(id)abDisabledViewController;
-(void)presentDisabledAddressBookViewController;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)infoInputViewControllerDidCancel:(id)infoInputViewController;
-(void)infoInputViewControllerDidFinish:(id)infoInputViewController;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(void*)person;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)presentABNewPersonViewControllerInNavigationController:(id)navigationController;
-(void)addWhatsAppIDToExistingContact;
-(void)createNewContactFromWhatsAppID;
-(void)sendMessageToUnknownContact;
-(void)callUnknownContact;
-(void)askToMuteOrUnmuteContact;
-(void)muteContactUntil:(id)until;
-(void)openCustomNotificationSettings;
-(void)viewGroupsInCommon;
-(void)viewStarredMessages;
-(void)viewAllMedia;
-(void)mediaManagerDidChangeContent:(id)mediaManager;
-(void)mediaManagerDidChangeContent;
-(void)reportClearChatAction;
-(void)didDeleteAllMessages;
-(void)didDeleteMessages:(id)messages;
-(void)willDeleteMessages:(id)messages;
-(void)chatStorageDidDeleteAllMessagesInChatSession:(id)chatStorage;
-(void)chatStorageDidDeleteMessagesInChatSession:(id)chatStorage;
-(void)chatStorageWillDeleteMessagesInChatSession:(id)chatStorage;
-(void)didAddMessages:(id)messages;
-(void)chatStorageDidAddMessages:(id)chatStorage;
-(void)chatStorageDidUpdateParticipantsOfChatSession:(id)chatStorage;
-(void)chatStorageDidReplaceChatSession:(id)chatStorage;
-(void)chatStorageDidDeleteChatSessions:(id)chatStorage;
-(void)chatStorageDidInsertChatSessions:(id)chatStorage;
-(void)dismiss;
-(void)reloadWithContact:(id)contact;
-(id)headerTextForLinkedContacts;
-(void)viewDidLoad;
-(void)commonInit;
@end

__attribute__((visibility("hidden")))
@interface WAAutomationWindow : UIWindow {
	UIButton* _screenshotButton;
	UIButton* _showFormButton;
	UIButton* _saveDataButton;
	NSString* _currentSeriesName;
	int _screenshotCounter;
	NSMutableArray* _allLabelInfos;
	NSMutableSet* _allSeriesNames;
	BOOL _isShowingForm;
}
-(void).cxx_destruct;
-(id)allLabelsInView:(id)view;
-(id)allVisibleLabels;
-(id)jsonArrayForLabel:(id)label;
-(void)saveLabelInfo;
-(void)snapshot;
-(void)saveData:(id)data;
-(void)detectTruncations;
-(void)showForm:(id)form;
-(id)filePathForJSONData;
-(id)filePathForScreenshot;
-(id)currentIdentifierWithPrefix:(id)prefix;
-(void)takeScreenshot:(id)screenshot;
-(id)hitTest:(CGPoint)test withEvent:(id)event;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WABorderlessToolbar : UIToolbar {
}
-(void)layoutSubviews;
@end

__attribute__((visibility("hidden")))
@interface WAAccessibilityElement : UIAccessibilityElement {
	id _delegate;
	CGRect _frame;
}
@property(assign, nonatomic) __weak id delegate;
@property(assign, nonatomic) CGRect frame;
-(void).cxx_destruct;
-(void)accessibilityDecrement;
-(void)accessibilityIncrement;
-(id)accessibilityHint;
-(id)accessibilityLabel;
-(id)accessibilityValue;
@end

__attribute__((visibility("hidden")))
@interface WAMainThreadWatchDog : NSObject {
}
+(void)startObservingMainRunLoop;
+(void)processMainThreadCallStackAddresses:(id)addresses symbols:(id)symbols;
+(void)reportCriticalEventForSeverity:(unsigned)severity;
+(void)update;
+(unsigned)severityForDelay:(double)delay;
+(void)stopMonitoring;
+(void)startMonitoring;
+(float)sampleRate;
+(void)enableDebugLevel;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface WAChatMessagesSection : NSObject {
	NSMutableArray* _rows;
	int _day;
	int _month;
	int _year;
	NSDate* _earliestDate;
}
@property(retain, nonatomic) NSDate* earliestDate;
@property(assign, nonatomic) int year;
@property(assign, nonatomic) int month;
@property(assign, nonatomic) int day;
@property(retain, nonatomic) NSMutableArray* rows;
-(void).cxx_destruct;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAChatMessagesController : NSObject {
	NSMutableArray* _sections;
	BOOL _showReportSpamCell;
	id<WAChatMessagesControllerDelegate> _delegate;
	NSSet* _highlightedTerms;
}
@property(readonly, assign, nonatomic, getter=isEmpty) BOOL empty;
@property(retain, nonatomic) NSSet* highlightedTerms;
@property(readonly, assign, nonatomic) NSArray* sections;
@property(readonly, assign, nonatomic) unsigned messageCount;
@property(readonly, assign, nonatomic) NSIndexPath* reportSpamCellIndexPath;
@property(readonly, assign, nonatomic) NSIndexPath* dividerIndexPath;
@property(readonly, assign, nonatomic) NSIndexPath* bottomMostIndexPath;
@property(assign, nonatomic) BOOL showReportSpamCell;
@property(assign, nonatomic) __weak id<WAChatMessagesControllerDelegate> delegate;
-(void).cxx_destruct;
-(void)prependMessages:(id)messages withConfigurationBlock:(id)configurationBlock;
-(BOOL)appendMessages:(id)messages currentUnreadCount:(int)count searchResultMessageIDs:(id)ids dividerBehavior:(unsigned)behavior withConfigurationBlock:(id)configurationBlock;
-(void)clearSearchResultIndicators;
-(void)deleteChatCellDataObjects:(id)objects updatingIndexPaths:(id)paths;
-(void)deleteChatCellDataObjects:(id)objects;
-(unsigned)removeMessages:(id)messages;
-(void)enumerateChatCellDataUsingBlock:(id)block;
-(BOOL)removeReportSpamCell;
-(BOOL)removeUnreadDivider;
-(id)chatCellDataForMessage:(id)message;
-(id)allSelectedCellDataObjects;
-(id)allUnsentMessagesAroundCellData:(id)data cellDataObjectCount:(unsigned*)count;
-(BOOL)hasEditableMessages;
-(void)removeChatCellDataAtIndexPath:(id)indexPath;
-(id)indexPathOfChatCellData:(id)chatCellData;
-(id)indexPathOfMessage:(id)message;
-(id)chatCellDataAtIndexPath:(id)indexPath;
-(id)indexPathOfRowFollowingRowAtIndexPath:(id)indexPath;
-(void)removeAllMessages;
-(id)titleForSection:(int)section;
-(int)numberOfRowsInSection:(int)section;
-(int)numberOfSections;
-(void)getDay:(int*)day month:(int*)month year:(int*)year fromDate:(id)date;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WACleanUpBackupOperation : WABackupOperation {
	BOOL _disconnected;
	BOOL _locked;
	BOOL _dropped;
	WAActionManager* _actionManager;
	WAChatStorage* _storage;
}
@property(readonly, assign, nonatomic) WAChatStorage* storage;
@property(readonly, assign, nonatomic) WAActionManager* actionManager;
@property(assign) BOOL dropped;
@property(assign) BOOL locked;
@property(assign) BOOL disconnected;
-(void).cxx_destruct;
-(void)reloadStore;
-(void)releaseLock;
-(void)reenableConnection;
-(void)storeWasDropped;
-(void)syncManagerLockWasAcquired;
-(void)serverWasDisconnected;
-(void)cancel;
-(void)run;
-(id)initWithActionManager:(id)actionManager andStorage:(id)storage;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface WAThumbnailView : UIView {
	UIImageView* _imageView;
	UIImageView* _checkmarkImageView;
	UIView* _dimmingView;
	UIImage* _placeholderImage;
	unsigned _state;
}
@property(assign, nonatomic) unsigned state;
@property(retain, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WASQLiteDebugger : NSObject {
}
+(id)SQLResultStringFromInteger:(int)integer;
+(void)checkIntegrityOfDatabaseAtPath:(id)path completion:(id)completion;
+(id)processingQueue;
+(void)runSQLiteMetaCommand:(id)command output:(sFILE*)output;
+(void)closeSQLiteShell;
+(void)openSQLiteShellForDatabaseAtPath:(id)path readOnly:(BOOL)only;
+(void)initialize;
@end

__attribute__((visibility("hidden")))
@interface WABackupErrorManager : NSObject {
	int _autoBackupCode;
	BOOL _badge;
	id _formatSize;
	WAAutoBackupSettings* _autoBackupSettings;
	int _mask;
	int _expirationDateMultiplier;
}
@property(retain, nonatomic) NSDate* customDateMarker;
@property(readonly, assign, nonatomic) int expirationDateMultiplier;
@property(readonly, assign, nonatomic) NSDate* autoBackupExpirationDate;
@property(retain, nonatomic) NSNumber* spaceNeeded;
@property(readonly, assign, nonatomic) int code;
@property(assign, nonatomic) int mask;
@property(readonly, assign, nonatomic, getter=isBadgeMuted) BOOL badgeMuted;
@property(retain, nonatomic) NSDate* badgeMutedDate;
@property(retain, nonatomic) WAAutoBackupSettings* autoBackupSettings;
@property(copy, nonatomic) id formatSize;
@property(readonly, assign, nonatomic) NSDate* autoBackupStartDate;
@property(readonly, assign, nonatomic) NSError* error;
@property(assign, nonatomic) BOOL badge;
+(unsigned)sortValueForFrequency:(unsigned)frequency;
+(int)expirationDateMultiplierForInterval:(unsigned)interval;
-(void).cxx_destruct;
-(void)reportCodeToFieldStats:(int)fieldStats;
-(void)save;
-(void)restore;
-(void)reportSpaceNeeded:(unsigned long long)needed;
-(void)sendErrorUpdatedNotification;
-(void)updateError;
-(void)reportErrorWithObject:(id)object;
-(void)refresh;
-(void)checkForErrorUpdate:(int)errorUpdate;
-(void)set:(BOOL)set error:(int)error;
-(void)clearError:(int)error;
-(void)reportError:(int)error;
-(void)scheduleBadgeUnmute;
-(void)unmuteBadge;
-(void)muteBadge;
-(void)sendBadgeUpdatedNotification;
-(void)updateBadge;
-(void)hideTransientErrors;
-(void)didChangeAutoBackupInterval;
-(void)willChangeAutoBackupInterval;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)dealloc;
-(void)reset;
-(id)initWithSettings:(id)settings;
-(id)init;
-(id)expirationForDate:(id)date requiresAutoBackup:(BOOL)backup;
-(void)setOrRemoveObject:(id)object forKey:(id)key;
-(id)errorForCode:(int)code;
@end

__attribute__((visibility("hidden")))
@interface WAImageAttachmentView : UIView {
	UIImageView* _imageView;
	UIButton* _addButton;
	id<WAImageAttachmentViewDelegate> _delegate;
	UIButton* _removeButton;
}
@property(readonly, assign, nonatomic) UIButton* removeButton;
@property(assign, nonatomic) __weak id<WAImageAttachmentViewDelegate> delegate;
@property(retain, nonatomic) UIImage* image;
-(void).cxx_destruct;
-(void)addImageButtonTapped:(id)tapped;
-(void)removeImageButtonTapped:(id)tapped;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAImageAttachmentContainerView : UIView <WAImageAttachmentViewDelegate> {
	UIScrollView* _scrollView;
	NSMutableArray* _attachments;
	BOOL _removeButtonsHidden;
	id<WAImageAttachmentContainerViewDelegate> _delegate;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL removeButtonsHidden;
@property(readonly, assign, nonatomic) NSArray* attachedImages;
@property(assign, nonatomic) __weak id<WAImageAttachmentContainerViewDelegate> delegate;
-(void).cxx_destruct;
-(void)imageAttachmentViewDidRequestAddImage:(id)imageAttachmentView;
-(void)imageAttachmentViewDidRequestRemoveImage:(id)imageAttachmentView;
-(void)attachImage:(id)image;
-(void)addAttachment:(id)attachment;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WACloudStatus : NSObject {
	BOOL _valid;
	BOOL _inProgress;
	BOOL _corruptionDetected;
	id _fileIncluder;
	NSSet* _errorCodes;
	WASharedMetadataQuery* _query;
	unsigned _mode;
	NSString* _loadingKey;
	NSString* _loadedKey;
	NSString* _percentKey;
	NSDate* _lastForcedRefreshDate;
	NSDate* _lastErrorReportedDate;
	NSDate* _lastQueryUpdateDate;
	unsigned _errorTrackerLoadingCount;
	unsigned _errorTrackerNeitherCount;
	NSTimer* _potentialErrorTimer;
	unsigned _listenerIndex;
	NSMutableDictionary* _listeners;
	unsigned long long _totalSize;
	unsigned long long _completedSize;
}
@property(retain, nonatomic) NSMutableDictionary* listeners;
@property(assign, nonatomic) unsigned listenerIndex;
@property(retain, nonatomic) NSTimer* potentialErrorTimer;
@property(assign, nonatomic, getter=isCorruptionDetected) BOOL corruptionDetected;
@property(assign, nonatomic) unsigned errorTrackerNeitherCount;
@property(assign, nonatomic) unsigned errorTrackerLoadingCount;
@property(retain, nonatomic) NSDate* lastQueryUpdateDate;
@property(retain, nonatomic) NSDate* lastErrorReportedDate;
@property(retain, nonatomic) NSDate* lastForcedRefreshDate;
@property(retain, nonatomic) NSString* percentKey;
@property(retain, nonatomic) NSString* loadedKey;
@property(retain, nonatomic) NSString* loadingKey;
@property(readonly, assign, nonatomic) NSString* modeAsString;
@property(readonly, assign, nonatomic) unsigned mode;
@property(retain, nonatomic) WASharedMetadataQuery* query;
@property(retain, nonatomic) NSSet* errorCodes;
@property(readonly, assign, nonatomic) float completedPercent;
@property(assign, nonatomic) unsigned long long completedSize;
@property(assign, nonatomic) unsigned long long totalSize;
@property(copy, nonatomic) id fileIncluder;
@property(assign, nonatomic) BOOL inProgress;
@property(assign, nonatomic, getter=isValid) BOOL valid;
+(id)statusForDownloadingWithManager:(id)manager;
+(id)statusForUploadingWithManager:(id)manager;
+(id)percentKeyForMode:(unsigned)mode;
+(id)loadedKeyForMode:(unsigned)mode;
+(id)loadingKeyForMode:(unsigned)mode;
-(void).cxx_destruct;
-(void)removeListener:(id)listener;
-(id)addListenerWithBlock:(id)block;
-(id)nextUniqueListenerIdentifier;
-(void)postUpdatedNotification;
-(void)logFileNamesWithProblems;
-(void)logStuckFileNamesFromQuery:(id)query;
-(void)processSharedQuery:(id)query;
-(void)invalidateQuery;
-(void)forceRefresh;
-(BOOL)checkForCorruptionInQuery:(id)query;
-(BOOL)checkError:(unsigned)error;
-(void)reportDelayedError:(id)error;
-(void)reportErrors:(id)errors afterDelay:(double)delay;
-(void)printListOfCodes:(id)codes;
-(void)checkForErrorsWithNetworkStatus:(unsigned)networkStatus;
-(void)networkStatusDidChange:(id)networkStatus;
-(void)updateErrorValuesFromQuery:(id)query;
-(void)finishWithDelay_done;
-(void)finishWithDelay;
-(void)cancelFinishWithDelay;
-(void)updateValuesFromQuery:(id)query;
-(id)indicatorsForItem:(id)item;
-(void)processQuery:(id)query;
-(void)dealloc;
-(id)initWithManager:(id)manager mode:(unsigned)mode;
@end

__attribute__((visibility("hidden")))
@interface WANullDatabaseResultsFetcher : WADatabaseResultsFetcher {
}
-(id)fetchResults;
@end

__attribute__((visibility("hidden")))
@interface WADatabaseResultsFetcher : NSObject {
	NSManagedObjectContext* _sourceManagedObjectContext;
	NSManagedObjectContext* _destinationManagedObjectContext;
	NSArray* _objectIDs;
	NSArray* _relationshipKeyPathsForPrefetching;
}
@property(readonly, assign, nonatomic) unsigned objectCount;
@property(retain, nonatomic) NSArray* relationshipKeyPathsForPrefetching;
@property(retain, nonatomic) NSArray* objectIDs;
@property(retain, nonatomic) NSManagedObjectContext* destinationManagedObjectContext;
@property(retain, nonatomic) NSManagedObjectContext* sourceManagedObjectContext;
+(id)nullFetcher;
-(void).cxx_destruct;
-(id)fetchResults;
@end

__attribute__((visibility("hidden")))
@interface WADatabaseIntegrityCheckerViewController : WAViewController {
	UITextView* _consoleTextView;
}
@property(retain, nonatomic) UITextView* consoleTextView;
-(void).cxx_destruct;
-(void)performRepairChatDatabase;
-(void)repairChatDatabase:(id)database;
-(void)email:(id)email;
-(void)checkDatabaseIntegrity:(id)integrity;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestSetLocationSharing : XMPPRequest {
}
-(id)initWithGroupJID:(id)groupJID endDate:(id)date completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestLocationSharing : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID reportParticipants:(BOOL)participants completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestLocationSharingOff : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithGroupJID:(id)groupJID completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface FileBrowserViewController : WATableViewController <MFMailComposeViewControllerDelegate> {
	NSArray* _files;
	NSString* _path;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(copy, nonatomic) NSString* path;
-(void).cxx_destruct;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(BOOL)fileIsDirectory:(id)directory;
-(id)pathForFile:(id)file;
-(void)done:(id)done;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithStyle:(int)style;
@end

__attribute__((visibility("hidden")))
@interface WABackupOperation : NSOperation {
	BOOL _dependencyResult;
	BOOL _requireDependencies;
	unsigned _indirectDependenciesCount;
}
@property(readonly, assign, nonatomic) unsigned indirectDependenciesCount;
@property(readonly, assign, nonatomic) BOOL requireDependencies;
@property(readonly, assign, nonatomic) float progress;
@property(readonly, assign, nonatomic) BOOL succeeded;
-(void)addDependencies:(id)dependencies;
-(BOOL)dependenciesSucceeded;
-(void)addDependency:(id)dependency;
-(void)run;
-(void)main;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAChatTableView : UITableView {
}
-(CGSize)actualContentSize;
-(void)setContentOffset:(CGPoint)offset;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)handleSingleTap:(id)tap;
@end

__attribute__((visibility("hidden")))
@interface WAChatBaseViewController : WAChatBackgroundViewController <ABPersonViewControllerDelegate, WAInfoInputViewControllerDelegate, WALocationDataSource, MFMailComposeViewControllerDelegate, MFMessageComposeViewControllerDelegate, WADateBubbleViewDelegate, ABDisabledControllerDelegate, EKEventEditViewDelegate, WAVCardMessagePreviewActionDelegate, WATableViewCellPreviewingDelegate, WAPttPlayerDelegate, UITableViewDelegate, UITableViewDataSource, TextBlockDelegate, WAMessageCellDelegate, WAImageToImageTransitioning, WANavigationControllerPushAnimating, WANavigationControllerPopToAnimating, WAChatMessagesControllerDelegate, WATranslucentTableViewCellDelegate, ABNewPersonViewControllerDelegate, ABPeoplePickerNavigationControllerDelegate> {
	WALocationData* _locationData;
	WAPttPlayer* _pttPlayer;
	NSString* _newContactJID;
	BOOL _editingContact;
	int _indexPathsInserted;
	BOOL _isTableUpdatingContent;
	NSDate* _allowTableRefreshTime;
	NSURL* _previewedWebURL;
	BOOL _previewed;
	BOOL _animateMessagesControllerChanges;
	BOOL _appearing;
	BOOL _disappearing;
	WAChatTableView* _tableViewMessages;
	WAChatMessagesController* _messagesController;
	WAMessageCell* _messageCellToUnhighlightOnDisappear;
	UIViewController* _viewControllerToPresentInViewDidAppear;
	WAChatCellData* _bottomCellData;
	float _bottomCellOffset;
	int _bottomCellDataInterfaceOrientation;
	WALargeMediaMessageCell* _mediaMessageCellForAnimatedTransition;
	WAMessage* _messageForAnimatedTransition;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain, nonatomic) WAMessage* messageForAnimatedTransition;
@property(retain, nonatomic) WALargeMediaMessageCell* mediaMessageCellForAnimatedTransition;
@property(assign, nonatomic) int bottomCellDataInterfaceOrientation;
@property(assign, nonatomic) float bottomCellOffset;
@property(retain, nonatomic) WAChatCellData* bottomCellData;
@property(retain, nonatomic) WAPttPlayer* pttPlayer;
@property(retain, nonatomic) UIViewController* viewControllerToPresentInViewDidAppear;
@property(retain, nonatomic) WAMessageCell* messageCellToUnhighlightOnDisappear;
@property(readonly, assign, nonatomic, getter=isDisappearing) BOOL disappearing;
@property(readonly, assign, nonatomic, getter=isAppearing) BOOL appearing;
@property(assign, nonatomic) BOOL animateMessagesControllerChanges;
@property(retain, nonatomic) WAChatMessagesController* messagesController;
@property(retain, nonatomic) WAChatTableView* tableViewMessages;
-(void).cxx_destruct;
-(void)addVCardContactToExistingContact:(id)existingContact withPreviewAction:(id)previewAction;
-(void)saveVCardContactAsNewContact:(id)contact withPreviewAction:(id)previewAction;
-(void)messageVCardContact:(id)contact withPreviewAction:(id)previewAction;
-(void)deleteMessage:(id)message withPreviewAction:(id)previewAction;
-(void)forwardMessage:(id)message withPreviewAction:(id)previewAction;
-(id)defaultPreviewActionsForMessage:(id)message;
-(void)previewingContext:(id)context inTableViewCell:(id)tableViewCell commitViewController:(id)controller;
-(id)previewingContext:(id)context viewControllerForData:(id)data inTableViewCell:(id)tableViewCell;
-(id)viewControllerForAddressComponents:(id)addressComponents displayName:(id)name message:(id)message;
-(id)viewControllerForPhotoOrVideoInCellData:(id)cellData;
-(id)viewControllerForLocationInCellData:(id)cellData;
-(id)viewControllerForVCardInCellData:(id)cellData;
-(id)viewControllerForWebURLPreview:(id)webURLPreview;
-(void)textBlockWillAddToContacts:(id)textBlock;
-(void)textBlockWillAddToExistingContact:(id)textBlock;
-(void)textBlock:(id)block willAddNewPerson:(void*)person;
-(void)textBlockWillCreateEvent:(id)textBlock;
-(void)textBlock:(id)block willCallPhoneURL:(id)url;
-(void)textBlock:(id)block willOpenURL:(id)url;
-(void)eventEditViewController:(id)controller didCompleteWithAction:(int)action;
-(id)newEventForTextCheckingResult:(id)textCheckingResult withStore:(id)store;
-(void)prepareNewEventFromDateCheckingResult:(id)dateCheckingResult withCompletionHandler:(id)completionHandler;
-(void)createEventFromTextCheckingResult:(id)textCheckingResult;
-(void)showCalendarPermissionsAlertView;
-(void)reallyDeleteMessages:(id)messages;
-(void)deleteMessages:(id)messages;
-(void)deleteMessagesInCellData:(id)cellData;
-(void)shareMessages:(id)messages;
-(BOOL)allMessagesContainVisualMedia:(id)media;
-(void)forwardMessages:(id)messages;
-(void)forwardMessages:(id)messages toContactInfo:(id)contactInfo;
-(void)showTooManyMessagesToForwardError;
-(void)forwardMessagesInCellData:(id)cellData;
-(void)newPersonViewController:(id)controller didCompleteWithNewPerson:(void*)newPerson;
-(void)infoInputViewControllerDidCancel:(id)infoInputViewController;
-(void)infoInputViewControllerDidFinish:(id)infoInputViewController;
-(void)peoplePickerNavigationControllerDidCancel:(id)peoplePickerNavigationController;
-(void)peoplePickerNavigationController:(id)controller didSelectPerson:(void*)person;
-(BOOL)peoplePickerNavigationController:(id)controller shouldContinueAfterSelectingPerson:(void*)person;
-(id)peoplePickerNavigationController;
-(BOOL)personViewController:(id)controller shouldPerformDefaultActionForPerson:(void*)person property:(int)property identifier:(int)identifier;
-(void)abDisabledViewControllerDidCancel:(id)abDisabledViewController;
-(void)presentAddressBookPermissionsScreenWithTitle:(id)title;
-(void)showActionSheet:(id)sheet;
-(void)addTextBlock:(id)block toPersonRecord:(void*)personRecord onNavigationController:(id)controller;
-(void*)copyEditablePersonRecordFromPersonRecord:(void*)personRecord;
-(void)presentUnknownContactScreenForDataInTextBlock:(id)textBlock;
-(void)addInfoInTextBlockToExistingContact:(id)existingContact;
-(void)showContactEditingScreenForPerson:(void*)person whatsAppJID:(id)jid inNavigationController:(id)navigationController;
-(void)addPhoneNumberFromCellData:(id)cellData toPersonRecord:(void*)personRecord onNavigationController:(id)controller;
-(void)addSenderInCellDataToExistingContact:(id)existingContact;
-(void)createNewContactForSenderInCellData:(id)cellData;
-(void)presentUnknownContactScreenForSenderInCellData:(id)cellData;
-(void)pttPlayerSuggestsReboot:(id)reboot;
-(BOOL)canPushViewController;
-(void)pausePTTPlayer;
-(BOOL)shouldBeginCustomPopAnimationForAnimationIdentifier:(id)animationIdentifier;
-(id)popAnimationControllerFromViewController:(id)viewController;
-(id)popAnimationInteractionControllerFromViewController:(id)viewController;
-(id)pushAnimationControllerToViewController:(id)viewController;
-(id)pushAnimationInteractionControllerToViewController:(id)viewController;
-(BOOL)isPerformingCustomPushAnimation;
-(void)finishTransitionWithView:(id)view context:(id)context;
-(id)viewForTransitionAnimationWithContext:(id)context;
-(void)prepareForTransitionWithContext:(id)context;
-(BOOL)isTableViewCellSufficientlyVisibleToParticipateInTransition:(id)transition;
-(BOOL)shouldUseImageToImageTransitionForOperation:(int)operation fromViewController:(id)viewController toViewController:(id)viewController3 context:(id)context;
-(void)scrollViewDidEndDecelerating:(id)scrollView;
-(void)scrollViewWillBeginDecelerating:(id)scrollView;
-(void)scrollViewDidEndDragging:(id)scrollView willDecelerate:(BOOL)decelerate;
-(void)scrollViewWillBeginDragging:(id)scrollView;
-(void)scrollViewDidScrollToTop:(id)scrollView;
-(void)scrollViewDidScroll:(id)scrollView;
-(void)messagesTableDidEndDecelerating;
-(void)messagesTableWillBeginDecelerating;
-(void)messagesTableDidEndDraggingAndWillDecelerate:(BOOL)messagesTable;
-(void)messagesTableWillBeginDragging;
-(void)messagesTableDidScrollToTop;
-(void)messagesTableDidScroll;
-(void)addMergedContactFromVCard:(id)vcard toPersonRecord:(void*)personRecord onNavigationController:(id)controller;
-(void)presentPeoplePickerToSaveMergedContactFromVCard:(id)vcard;
-(void)addVCardContactToExistingContact:(id)existingContact;
-(void)saveVCardContactAsNewContact:(id)contact;
-(void)startChatWithJIDFromVCard:(id)vcard;
-(void)messageVCardContact:(id)contact;
-(void)inviteContact:(id)contact;
-(void)messageComposeViewController:(id)controller didFinishWithResult:(int)result;
-(void)mailComposeController:(id)controller didFinishWithResult:(int)result error:(id)error;
-(void)sendTextInvitationTo:(id)to;
-(void)sendEmailTo:(id)to subject:(id)subject body:(id)body;
-(void)sendEmailInvitationTo:(id)to;
-(void)inviteVCardPersonFromCell:(id)cell;
-(void)saveVCardPersonFromCell:(id)cell;
-(void)messageVCardPersonFromCell:(id)cell;
-(void)messageCell:(id)cell willShowMoreOptionsForTextBlock:(id)textBlock completionHandler:(id)handler;
-(void)messageCell:(id)cell didSelectTextBlock:(id)block;
-(void)markAsStarredMessageInCell:(id)cell;
-(void)messageCell:(id)cell didRequestOpenPlaceURL:(id)url;
-(void)addMessageSenderInCell:(id)cell;
-(void)replyMessageSenderFromCell:(id)cell;
-(void)deleteMessagesInCell:(id)cell;
-(void)forwardMessagesInCell:(id)cell;
-(void)viewMediaInCell:(id)cell;
-(void)cancelMediaUploadOrDownloadInCell:(id)cell;
-(void)downloadMediaInCell:(id)cell;
-(void)handleDoubleTapInCell:(id)cell;
-(void)handleSingleTapInCell:(id)cell;
-(void)invertSelectionForCell:(id)cell;
-(void)alertButtonTappedInCell:(id)cell;
-(id)currentBlurredWallpaperImage;
-(id)translucentTableViewBlurredImage:(id)image;
-(id)translucentTableViewCellBackgroundImageView:(id)view;
-(void)notifyVisibleCellsOfScrolling;
-(void)refreshViews;
-(void)refreshDateBubbleView:(id)view;
-(void)fadeOutDateBubblesWithAnimation:(BOOL)animation;
-(void)fadeOutDateBubbles;
-(void)cancelFadeOutDateBubbles;
-(void)fadeOutDateBubblesAfterDelay;
-(void)fadeOutDateBubblesImmediately;
-(void)fadeInDateBubblesWithAnimation:(BOOL)animation;
-(void)tableView:(id)view didEndDisplayingHeaderView:(id)view2 forSection:(int)section;
-(id)dateBubbleBlurredImage:(id)image;
-(id)dateBubbleBackgroundImageView:(id)view;
-(id)tableView:(id)view viewForHeaderInSection:(int)section;
-(float)tableView:(id)view heightForHeaderInSection:(int)section;
-(BOOL)tableView:(id)view shouldIndentWhileEditingRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didEndDisplayingCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(id)cellForRowWithCellData:(id)cellData inTableView:(id)tableView;
-(float)heightForRowWithCellData:(id)cellData inTableView:(id)tableView;
-(void)didUpdateMessagesTableAfterControllerDidChangeContent;
-(void)controllerDidChangeContent:(id)controller;
-(void)controller:(id)controller didInsertIndexPaths:(id)paths;
-(void)controller:(id)controller didInsertSections:(id)sections;
-(void)controller:(id)controller didReloadIndexPaths:(id)paths;
-(void)controller:(id)controller didUpdateGroupingStateForMessageAtIndexPath:(id)indexPath;
-(void)controller:(id)controller didRemoveSections:(id)sections;
-(void)controller:(id)controller didRemoveIndexPaths:(id)paths;
-(void)controllerWillChangeContent:(id)controller;
-(id)locationsWithCoordinate:(XXStruct_gLbvpC)coordinate;
-(id)locationDataAtIndex:(int)index;
-(unsigned)numberOfLocations;
-(void)openMapForAddress:(id)address displayName:(id)name message:(id)message;
-(void)openMediaViewerFromMessageCell:(id)messageCell;
-(void)viewMediaFromMessageCell:(id)messageCell;
-(void)retryDownloadingMediaForCellData:(id)cellData;
-(void)retrySendingMessages:(id)messages;
-(void)messageUpdated:(id)updated;
-(void)handleWAMessageUpdateNotification:(id)notification;
-(void)reloadTableRowForCellData:(id)cellData;
-(void)restoreContentOffset;
-(void)storeContentOffset;
-(void)dealloc;
-(void)wa_applicationDidEnterBackground;
-(BOOL)shouldAutorotate;
-(void)updateLayoutForCurrentOrientation;
-(void)viewDidLayoutSubviews;
-(void)viewDidDisappear:(BOOL)view;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface WAMediaPickerVideoAssetOverlayView : UIView {
	UILabel* _durationLabel;
	UIImageView* _cameraIconImageView;
	UIImageView* _gradientView;
	unsigned _iconType;
}
@property(assign, nonatomic) unsigned iconType;
+(float)preferredHeight;
+(void)initialize;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(void)setDuration:(double)duration;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAActionSheetPresenter : NSObject {
	BOOL _presentsInWindow;
	id _completionHandler;
}
@property(assign, nonatomic) BOOL presentsInWindow;
@property(copy, nonatomic) id completionHandler;
-(void).cxx_destruct;
-(void)addCancelButton;
-(void)addButtonWithTitle:(id)title handler:(id)handler;
-(void)addDestructiveButtonWithTitle:(id)title handler:(id)handler;
-(void)didDismissByCancelling:(BOOL)cancelling;
-(void)dismissByCancellingWithAnimation:(BOOL)animation;
-(void)presentFromViewController:(id)viewController;
-(id)initWithTitle:(id)title;
-(void)applicationWillResetUserInterface:(id)application;
-(void)applicationDidEnterBackground:(id)application;
-(void)dealloc;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface _WAActionSheetPresenterOS7 : WAActionSheetPresenter <UIActionSheetDelegate> {
	UIActionSheet* _actionSheet;
	UIActionSheet* _retainedActionSheetBeforePresentation;
	NSMutableDictionary* _actionMap;
	id _destructiveActionHandler;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)didPresentActionSheet:(id)sheet;
-(void)actionSheet:(id)sheet didDismissWithButtonIndex:(int)buttonIndex;
-(void)actionSheet:(id)sheet clickedButtonAtIndex:(int)index;
-(void)addCancelButton;
-(void)addDestructiveButtonWithTitle:(id)title handler:(id)handler;
-(void)addButtonWithTitle:(id)title handler:(id)handler;
-(void)dismissByCancellingWithAnimation:(BOOL)animation;
-(void)presentFromViewController:(id)viewController;
-(id)initWithTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface _WAActionSheetPresenterWindow : UIWindow {
}
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAActionSheetPresenterOS8 : WAActionSheetPresenter {
	UIAlertController* _alertController;
	UIAlertController* _retainedControllerBeforePresentation;
	UIWindow* _window;
	UIWindow* _applicationWindow;
}
-(void).cxx_destruct;
-(void)addCancelButton;
-(void)addButtonWithTitle:(id)title handler:(id)handler;
-(void)addDestructiveButtonWithTitle:(id)title handler:(id)handler;
-(void)dismissByCancellingWithAnimation:(BOOL)animation;
-(void)didDismissByCancelling:(BOOL)cancelling;
-(void)presentFromViewController:(id)viewController;
-(id)initWithTitle:(id)title;
@end

__attribute__((visibility("hidden")))
@interface WAVideoTranscoder : NSObject {
	NSObject<OS_dispatch_queue>* _exportQueue;
	NSObject<OS_dispatch_group>* _exportDispatchGroup;
	id _completionHandler;
	float _progress;
	BOOL _cancelExportRequested;
	AVAsset* _asset;
	AVVideoComposition* _videoComposition;
	AVAssetReader* _assetReader;
	AVAssetReaderOutput* _videoOutput;
	AVAssetReaderTrackOutput* _audioOutput;
	AVAssetWriter* _assetWriter;
	AVAssetWriterInput* _videoInput;
	AVAssetWriterInput* _audioInput;
	AVAssetExportSession* _passThroughExportSession;
	BOOL _passThroughOnly;
	BOOL _preservesOriginalDimensions;
	NSURL* _outputURL;
	int _status;
	NSError* _error;
	double _exportedDuration;
	XXStruct_yD8eWC _timeRange;
}
@property(assign, nonatomic) BOOL preservesOriginalDimensions;
@property(assign, nonatomic) BOOL passThroughOnly;
@property(assign, nonatomic) XXStruct_yD8eWC timeRange;
@property(readonly, assign, nonatomic) double exportedDuration;
@property(readonly, assign, nonatomic) NSError* error;
@property(readonly, assign, nonatomic) int status;
@property(readonly, assign, nonatomic) float progress;
@property(readonly, copy, nonatomic) NSURL* outputURL;
+(id)initialCompressionSettingsForVideoTrack:(id)videoTrack;
+(id)genericUnusableVideoError;
+(id)errorWithCode:(int)code reason:(id)reason;
+(void)changeContainerToMP4IfNeededForVideoAtPath:(id)path completion:(id)completion;
-(void).cxx_destruct;
-(void)reallyPerformPassThroughExport;
-(void)performPassThroughExportWithTimeRange:(XXStruct_yD8eWC)timeRange resultBlock:(id)block;
-(void)transcoderDidFinishExporting;
-(void)finishExporting;
-(void)writeSamplesStartingAtTime:(XXStruct_pwHToB)time;
-(void)reallyPerformExportWithTimeRange:(XXStruct_yD8eWC)timeRange;
-(void)performExportWithTimeRange:(XXStruct_yD8eWC)timeRange passThroughOnly:(BOOL)only;
-(void)abortWithError:(id)error;
-(CGSize)transcodedSizeFromNaturalSize:(CGSize)naturalSize;
-(BOOL)videoSizeIsEligibleForPassThrough:(CGSize)passThrough;
-(void)cancelExport;
-(void)exportAsynchronouslyWithCompletionHandler:(id)completionHandler;
-(id)initWithAsset:(id)asset videoComposition:(id)composition outputURL:(id)url;
@end

__attribute__((visibility("hidden")))
@interface WAVideoPickerProgressView : UIView {
	UILabel* _titleLabel;
	UIProgressView* _progressBar;
}
-(void).cxx_destruct;
-(void)setProgress:(float)progress;
-(void)setTitle:(id)title;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAMediaUploadOperation : WAMediaUploadOperationBase <NSURLConnectionDelegate> {
	NSString* _fileName;
	NSDate* _startDate;
	NSDate* _httpUploadStartDate;
	NSURLConnection* _urlConnection;
	BOOL _isExecuting;
	BOOL _isFinished;
	NSString* _uploadURL;
	NSString* _uploadIp;
	NSString* _uploadHost;
	NSMutableData* _postData;
	NSMutableData* _receiveData;
	NSString* _mediaPath;
	unsigned long long _fileSize;
	int _bodySize;
	int _tailSize;
	int _uploadAttemt;
	NSString* _fileHash;
	NSString* _origHash;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(retain) NSString* origHash;
@property(retain) NSString* fileHash;
+(void)promptUserIfNecessaryToTruncateVideoAt:(id)at completion:(id)completion;
+(BOOL)willTruncateMediaAt:(id)at uploadingOnly:(unsigned long long*)only;
-(void).cxx_destruct;
-(void)checkUploadRequestFailedWithError:(id)error;
-(void)checkUploadRequestFinishedWithResult:(id)result;
-(void)uploadRequestFailedWithError:(id)error;
-(void)uploadRequestFinishedWithResult:(id)result;
-(void)connectionDidFinishLoading:(id)connection;
-(void)connection:(id)connection didFailWithError:(id)error;
-(void)connection:(id)connection didReceiveData:(id)data;
-(void)connection:(id)connection didSendBodyData:(int)data totalBytesWritten:(int)written totalBytesExpectedToWrite:(int)write;
-(void)connection:(id)connection didReceiveResponse:(id)response;
-(void)connection:(id)connection willSendRequestForAuthenticationChallenge:(id)authenticationChallenge;
-(id)connection:(id)connection willSendRequest:(id)request redirectResponse:(id)response;
-(void)reportFieldStatsWithResult:(int)result;
-(void)startHTTPUploadFrom:(int)from ip:(id)ip;
-(void)checkUploadProgress;
-(void)initiateTransfer;
-(id)hashOfMedia;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(void)cancel;
-(void)finish;
-(void)reallyStartUpload;
-(void)start;
-(void)dealloc;
@end

__attribute__((visibility("hidden")))
@interface WASQLiteDatabaseRepairer : NSObject {
	BOOL _databaseRepairInProgress;
	id _progressHandler;
	NSString* _sourceFilePath;
	NSString* _outputFilePath;
	NSString* _dumpFilePath;
	NSTimer* _progressTrackingTimer;
	unsigned _backgroundTaskID;
	double _repairStartTime;
	BOOL _disconnectBeforeRepairing;
}
@property(assign, nonatomic) BOOL disconnectBeforeRepairing;
+(void)mergePendingJournalIfPossibleForDatabaseAtPath:(id)path;
+(unsigned long long)estimatedDiskSpaceRequiredToRepairDatabaseAtPath:(id)path;
-(void).cxx_destruct;
-(void)restoreFromDump;
-(BOOL)isDumpFileValid;
-(void)dumpDatabase;
-(void)finishWithStatus:(unsigned)status completion:(id)completion;
-(void)performAfterDisconnectingWithCompletionHandler:(id)completionHandler;
-(void)repairDatabaseAtPath:(id)path progressHandler:(id)handler completionHandler:(id)handler3;
-(void)fileSizeProgressTimerHandler:(id)handler;
-(void)fakeProgressTimerHandler:(id)handler;
-(void)stopTrackingFileSize;
-(void)startTrackingSizeOfFileAtPath:(id)path estimatedSize:(unsigned long long)size offset:(float)offset range:(float)range;
-(void)stopFakeProgressTracking;
-(void)startFakeProgressTrackingWithDuration:(double)duration offset:(float)offset range:(float)range;
@end

__attribute__((visibility("hidden")))
@interface _WARatingStar : WAShapeView {
	CGSize _prevSize;
}
@property(assign, nonatomic, getter=isFilled) BOOL filled;
@property(retain, nonatomic) UIColor* color;
+(float)preferredWidth;
-(void)layoutSubviews;
-(CGSize)intrinsicContentSize;
-(id)initWithFrame:(CGRect)frame;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WAStarRatingControl : UIControl {
	NSArray* _stars;
	float _margin;
}
@property(retain, nonatomic) UIColor* color;
@property(assign, nonatomic) int value;
@property(assign, nonatomic) float margin;
+(CGSize)preferredSizeForStarCount:(int)starCount margin:(float)margin;
-(void).cxx_destruct;
-(void)updateValueWithTouch:(id)touch;
-(BOOL)continueTrackingWithTouch:(id)touch withEvent:(id)event;
-(BOOL)beginTrackingWithTouch:(id)touch withEvent:(id)event;
-(void)layoutSubviews;
-(CGSize)intrinsicContentSize;
-(id)initWithStarCount:(int)starCount;
@end

__attribute__((visibility("hidden")))
@interface WABackupInformation : NSObject {
	NSDictionary* _data;
}
@property(retain, nonatomic) NSDictionary* data;
@property(readonly, assign, nonatomic) NSDictionary* debugFileSizes;
@property(readonly, assign, nonatomic) NSNumber* sizeOfVideos;
@property(readonly, assign, nonatomic) NSNumber* size;
@property(readonly, assign, nonatomic) NSNumber* version;
@property(readonly, assign, nonatomic) NSNumber* includeVideos;
@property(readonly, assign, nonatomic) NSString* formattedRelativeDate;
@property(readonly, assign, nonatomic) NSDate* date;
@property(readonly, assign, nonatomic) BOOL exists;
-(void).cxx_destruct;
-(void)postUpdatedNotification;
-(BOOL)replaceData:(id)data;
-(void)log;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithBackupInformation:(id)backupInformation;
-(id)initWithContentsOfFile:(id)file;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface WADeleteChatsPhoneConfirmationViewController : PhoneConfirmationController {
}
-(id)buttonTitle;
-(id)warningBulletPoints;
-(id)warningText;
-(id)title;
@end

__attribute__((visibility("hidden")))
@interface WAPreviousBackup : WABackupInformation {
}
@property(readonly, assign, nonatomic) BOOL initialized;
@end

__attribute__((visibility("hidden")))
@interface WAReportSpamCell : WATranslucentTableViewCell {
	UIView* _blurredBackgroundTrackingView;
	WAChatButton* _blockButton;
	WAChatButton* _reportButton;
	WAChatButton* _trustButton;
	BOOL _groupChat;
	id _blockAction;
	id _reportAction;
	id _trustAction;
}
@property(copy, nonatomic) id trustAction;
@property(copy, nonatomic) id reportAction;
@property(copy, nonatomic) id blockAction;
@property(assign, nonatomic, getter=isGroupChat) BOOL groupChat;
+(float)preferredHeightForWidth:(float)width isGroupChat:(BOOL)chat;
+(BOOL)selectable;
+(id)warningTextFont;
+(id)warningTextForGroup:(BOOL)group;
-(void).cxx_destruct;
-(void)setBlockButtonTitle:(id)title;
-(void)reloadFonts;
-(void)trustButtonAction:(id)action;
-(void)reportButtonAction:(id)action;
-(void)blockButtonAction:(id)action;
-(void)layoutSubviews;
-(id)initWithStyle:(int)style reuseIdentifier:(id)identifier;
@end

__attribute__((visibility("hidden")))
@interface WARepairDatabaseViewController : UIViewController {
	id<WARepairDatabaseViewControllerDelegate> _delegate;
	UILabel* _paragraphLabel;
	UILabel* _warningLabel;
	UIButton* _beginButton;
	UIProgressView* _progressView;
	UILabel* _completionLabel;
	UIImageView* _warningImageView;
	UIView* _topHairlineView;
	UIView* _bottomHairlineView;
	UIView* _buttonBackgroundView;
	UIView* _contentView;
}
@property(retain, nonatomic) UIView* contentView;
@property(retain, nonatomic) UIView* buttonBackgroundView;
@property(retain, nonatomic) UIView* bottomHairlineView;
@property(retain, nonatomic) UIView* topHairlineView;
@property(retain, nonatomic) UIImageView* warningImageView;
@property(retain, nonatomic) UILabel* completionLabel;
@property(retain, nonatomic) UIProgressView* progressView;
@property(retain, nonatomic) UIButton* beginButton;
@property(retain, nonatomic) UILabel* warningLabel;
@property(retain, nonatomic) UILabel* paragraphLabel;
@property(assign, nonatomic) __weak id<WARepairDatabaseViewControllerDelegate> delegate;
+(void)showInWindow:(id)window withDelegate:(id)delegate;
-(void).cxx_destruct;
-(unsigned)supportedInterfaceOrientations;
-(void)handleRepairOutcome:(unsigned)outcome;
-(void)performRecovery:(id)recovery;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestSetProfilePicture : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithJID:(id)jid previewData:(id)data pictureData:(id)data3 webClientRequestID:(id)anId completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface XMPPRequestGetProfilePicture : XMPPRequest {
}
@property(copy, nonatomic) id completion;
-(void)didFailWithError:(id)error;
-(void)didSuceedWithResponse:(id)response;
-(id)initWithJID:(id)jid pictureType:(unsigned)type currentIdentifier:(id)identifier completion:(id)completion;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoTableHeaderView : UIView {
	UIView* _profilePhotoView;
	UIImageView* _profilePhotoImageView;
	BOOL _hasProfilePhoto;
	NSString* _headerText;
	NSRange _nameRange;
	WACopyableLabel* _label;
	UIEdgeInsets _contentInset;
}
@property(assign, nonatomic) UIEdgeInsets contentInset;
-(void).cxx_destruct;
-(void)reloadFonts;
-(void)setAllowCopyText:(BOOL)text;
-(void)configureWithName:(id)name;
-(void)configureWithMergedContact:(id)mergedContact;
-(void)configureWithContactInfoNameUnit:(id)contactInfoNameUnit photoUnit:(id)unit;
-(void)reloadText;
-(void)setupContactPicture:(id)picture;
-(CGSize)sizeThatFits:(CGSize)fits;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAContactInfoSectionHeaderView : UIView {
	UILabel* _titleLabel;
	UIView* _topBorder;
	UIView* _bottomBorder;
	NSLayoutConstraint* _titleHorizontalConstraint;
	NSLayoutConstraint* _backgroundViewBottomConstraint;
	UIView* _backgroundView;
	BOOL _extendsLowerEdge;
	UIEdgeInsets _insets;
}
@property(assign, nonatomic) BOOL extendsLowerEdge;
@property(assign, nonatomic) BOOL bottomEdgeHidden;
@property(assign, nonatomic) BOOL topEdgeHidden;
@property(copy, nonatomic) NSString* text;
@property(assign, nonatomic) UIEdgeInsets insets;
-(void).cxx_destruct;
-(void)updateConstraints;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAAxolotlStore : NSObject {
	NSManagedObjectModel* _managedObjectModel;
	NSPersistentStoreCoordinator* _persistentStoreCoordinator;
	NSPersistentStore* _axolotlStore;
	NSManagedObjectContext* _managedObjectContext;
	BOOL _mustDeferStoreSaves;
	int _registrationId;
	NSData* _publicKey;
	NSData* _privateKey;
	id<WAAxolotlStoreDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WAAxolotlStoreDelegate> delegate;
@property(copy, nonatomic) NSData* privateKey;
@property(copy, nonatomic) NSData* publicKey;
@property(assign) int registrationId;
-(void).cxx_destruct;
-(void)saveStore;
-(void)deferStoreSaves;
-(int)deleteSenderKeyRecordForName:(const axolotl_sender_key_name*)name;
-(id)senderKeyRecordForName:(const axolotl_sender_key_name*)name;
-(BOOL)storeSenderKey:(id)key senderKeyName:(const axolotl_sender_key_name*)name;
-(void)saveMessageBaseKey:(id)key recipientJID:(id)jid stanzaId:(id)anId;
-(BOOL)hasSameBaseKey:(id)key recipientJID:(id)jid stanzaId:(id)anId;
-(void)deleteMessageBaseKeyForMessageTo:(id)to stanzaId:(id)anId;
-(BOOL)isTrustedIdentity:(id)identity recipientName:(const char*)name length:(unsigned long)length;
-(BOOL)storeIdentity:(id)identity recipientName:(const char*)name length:(unsigned long)length;
-(void)clearIdentityForRecipientId:(long long)recipientId;
-(int)deleteAllSessionsForRecipientName:(const char*)recipientName length:(unsigned long)length;
-(int)deleteSessionForRecipient:(const axolotl_address*)recipient;
-(BOOL)containsSessionForRecipient:(const axolotl_address*)recipient;
-(BOOL)storeSessionRecord:(id)record recipient:(const axolotl_address*)recipient;
-(id)timeForSessionWithRecipientId:(long long)recipientId deviceId:(int)anId;
-(id)sessionRecordForRecipient:(const axolotl_address*)recipient;
-(id)signedPreKeyData;
-(BOOL)removeSignedPreKeyRecordWithId:(int)anId;
-(BOOL)containsSignedPreKeyRecordWithId:(int)anId;
-(BOOL)storeSignedPreKeyRecord:(id)record id:(int)anId;
-(id)signedPreKeyRecordForId:(int)anId;
-(BOOL)checkPreKeysPresent:(id)present;
-(id)unsentPreKeys;
-(void)setLastSentPreKeyId:(int)anId;
-(int)lastSentPreKeyId;
-(void)setLastPreKeyId:(int)anId;
-(int)lastPreKeyId;
-(BOOL)removePreKeyRecordWithId:(int)anId;
-(BOOL)containsPreKeyRecordWithId:(int)anId;
-(BOOL)storePreKeyRecord:(id)record id:(int)anId;
-(id)preKeyRecordForId:(int)anId;
-(id)metadataForKey:(id)key;
-(void)setMetadata:(id)metadata forKey:(id)key;
-(BOOL)saveContext;
-(id)managedObjectContext;
-(void)clearStore;
-(BOOL)loadStore;
-(id)persistentStoreURL;
-(id)persistentStorePath;
-(id)init;
@end

__attribute__((visibility("hidden")))
@interface XMPPError : NSObject {
}
+(id)errorWithCode:(int)code;
+(id)errorAborted;
+(id)errorCancelled;
+(id)errorUnknown;
+(id)errorNotConnected;
+(id)errorTimeout;
@end

__attribute__((visibility("hidden")))
@interface WAPreviousBackup_Documents : WAPreviousBackup {
	BOOL _loading;
	WASharedMetadataQuery* _query;
	WACloudBackupManager_Documents* _manager;
}
@property(readonly, assign, nonatomic) __weak WACloudBackupManager_Documents* manager;
@property(retain, nonatomic) WASharedMetadataQuery* query;
-(void).cxx_destruct;
-(BOOL)initialized;
-(void)cloudAccountLoadOverrideExpired:(id)expired;
-(void)startQuery;
-(void)queryUpdated:(id)updated;
-(void)reloadFile;
-(void)dealloc;
-(id)initWithManager:(id)manager;
-(id)initWithDictionary:(id)dictionary;
-(id)initWithContentsOfFile:(id)file;
@end

__attribute__((visibility("hidden")))
@interface WASingleVideoPreviewViewController : WAVideoPreviewViewController <UIVideoEditorControllerDelegate, UINavigationControllerDelegate> {
	MPMoviePlayerController* _player;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
-(void).cxx_destruct;
-(void)videoEditorControllerDidCancel:(id)videoEditorController;
-(void)videoEditorController:(id)controller didFailWithError:(id)error;
-(void)videoEditorController:(id)controller didSaveEditedVideoToPath:(id)path;
-(void)processTranscodedVideoOfDuration:(double)duration atURL:(id)url referenceURL:(id)url3;
-(void)setProgressViewHidden:(BOOL)hidden;
-(void)sendVideo:(id)video;
-(id)fullscreenButtonOniOS7InView:(id)view;
-(void)hideFullscreenButton;
-(void)playerDidPostNotification:(id)player;
-(void)playerDidEnterFullscreen:(id)player;
-(void)playerWillEnterFullscreen:(id)player;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)captionBarWillHideKeyboard:(id)captionBar;
-(void)captionBarWillShowKeyboard:(id)captionBar;
-(void)relayoutViews;
-(void)viewDidLayoutSubviews;
-(void)viewWillDisappear:(BOOL)view;
-(void)viewDidAppear:(BOOL)view;
-(void)viewWillAppear:(BOOL)view;
-(void)viewDidLoad;
@end

__attribute__((visibility("hidden")))
@interface _WAMoveFileHelper : NSObject {
	NSString* _fromPath;
	NSString* _toPath;
	NSFileManager* _fileManager;
}
-(void).cxx_destruct;
-(void)revert;
-(BOOL)performMove;
-(id)initWithFromPath:(id)path toPath:(id)path2;
@end

__attribute__((visibility("hidden")))
@interface WASharedAppData : NSObject {
}
+(void)sendDataToServer:(id)server;
+(void)handleClientConnection:(int)connection;
+(BOOL)startIPCServer;
+(id)IPCSocketPath;
+(void)unlockConnection;
+(void)lockConnection;
+(BOOL)tryConnectionLock;
+(void)unmigrateData;
+(void)migrateUserPreferences;
+(void)migrateData;
+(BOOL)isDataInAppGroup;
+(void)showAlertText:(id)text fromViewController:(id)viewController;
+(void)setPhoneNumber:(id)number;
+(id)phoneNumber;
+(void)setCountryCode:(id)code;
+(id)countryCode;
+(void)removePasswordFile;
+(BOOL)setPassword:(id)password;
+(id)password;
+(id)passwordFilePathInMainContainer;
+(id)passwordFilePathInAppGroup;
+(id)passwordFilePath;
+(id)normalizedNumberFromJID:(id)jid;
+(id)normalizedNumber;
+(void)setUserJID:(id)jid;
+(id)userJID;
+(void)showCriticallyLowStorageAlert;
+(void)showLocalNotificationForJailbrokenPhoneAndTerminate;
+(void)setStatusBarStyle:(int)style animated:(BOOL)animated;
+(void)setStatusBarHidden:(BOOL)hidden withAnimation:(int)animation;
+(void)endIgnoringInteractionEventsInExtension;
+(void)beginIgnoringInteractionEventsInExtension;
+(void)endIgnoringInteractionEvents;
+(void)beginIgnoringInteractionEvents;
+(void)endBackgroundTask:(unsigned)task;
+(unsigned)beginBackgroundTaskWithName:(id)name expirationHandler:(id)handler;
+(void)internalEndBackgroundTask:(unsigned)task;
+(unsigned)internalBeginBackgroundTaskWithExpirationHandler:(id)expirationHandler;
+(void)prepareToSuspend;
+(void)setDidResumeHandler:(id)resumeHandler;
+(void)setWillSuspendHandler:(id)suspendHandler;
+(void)resetSuspendingIfNeeded;
+(void)checkApplicationBackgroundState;
+(void)setUpMainBackgroundTaskIfNeeded;
+(void)applicationWillEnterForeground:(id)application;
+(void)applicationDidEnterBackground:(id)application;
+(id)sharedApplication;
+(BOOL)isRestoreInProgress;
+(BOOL)isBackupInProgress;
+(id)launchTime;
+(double)backgroundTimeRemaining;
+(int)applicationState;
+(BOOL)isVOIPCallActive;
+(BOOL)hasVOIPCallStarted;
+(BOOL)isWebClientAvailable;
+(BOOL)isUserAvailable;
+(id)URLSessionManager;
+(void*)sharedAddressBook;
+(id)profilePictureManager;
+(id)xmppConnection;
+(id)notificationsConfig;
+(id)contactsStorage;
+(id)chatStorage;
+(id)axolotlDatabaseURLInMainContainer;
+(id)axolotlDatabaseURLInAppGroup;
+(id)axolotlDatabaseURL;
+(id)sharedLogsDirectoryURL;
+(id)profilePicturesStorageDirectoryInMainContainer;
+(id)profilePicturesStorageDirectoryInAppGroup;
+(id)contactsDatabaseURLInMainContainer;
+(id)contactsDatabaseURLInAppGroup;
+(id)contactsDatabaseURL;
+(id)chatSearchDatabaseURLInMainContainer;
+(id)chatSearchDatabaseURLInAppGroup;
+(id)chatSearchDatabaseURL;
+(id)chatDatabaseURLInMainContainer;
+(id)chatDatabaseURLInAppGroup;
+(id)chatDatabaseURL;
+(id)sharedItemOutboxesURL;
+(id)userDefaults;
+(id)appGroupURL;
+(void)registerExtensionContainerView:(id)view;
+(BOOL)isRunningAsExtension;
+(BOOL)isChatDatabaseAccessible;
+(void)prepareConnectionLock;
+(void)registerConnectionConditionals;
+(void)prepareBackgroundTaskManagement;
+(BOOL)prepareAppContainer;
+(BOOL)internalPrepare;
+(BOOL)prepare;
@end

__attribute__((visibility("hidden")))
@interface WACropAwareImageView : UIImageView {
	float _fixedHeight;
	CGRect _normalizedCropRect;
}
@property(assign, nonatomic) float fixedHeight;
@property(assign, nonatomic) CGRect normalizedCropRect;
+(CGRect)transformNormalizedCropRect:(CGRect)rect forImageOrientation:(int)imageOrientation;
-(void)recalculateImageMetrics;
-(void)setImage:(id)image;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WAImageCropToolGridView : UIView {
	NSArray* _horizontalLines;
	NSArray* _verticalLines;
}
@property(retain, nonatomic) UIColor* lineColor;
-(void).cxx_destruct;
-(void)layoutSubviews;
-(id)initWithGridLineCount:(int)gridLineCount;
@end

__attribute__((visibility("hidden")))
@interface WAImageCropToolView : UIView {
	CGPoint _touchPositionBeforeDragging;
	BOOL _dragging;
	CGRect _cropRectBeforeDragging;
	CGRect _lastReportedCropRect;
	unsigned _adjustmentPoint;
	UIImageView* _borderView;
	_WAImageCropToolGridView* _rotationGridView;
	_WAImageCropToolGridView* _cropGridView;
	WAShapeView* _maskView;
	BOOL _allowsWidthIncrease;
	BOOL _allowsHeightIncrease;
	id<WAImageCropToolViewDelegate> _delegate;
	double _minAspectRatio;
	double _maxAspectRatio;
	CGRect _cropRect;
	CGRect _initialCropRect;
}
@property(assign, nonatomic) BOOL allowsHeightIncrease;
@property(assign, nonatomic) BOOL allowsWidthIncrease;
@property(retain, nonatomic) UIColor* maskColor;
@property(assign, nonatomic) float cropGridAlpha;
@property(assign, nonatomic) float rotationGridAlpha;
@property(assign, nonatomic) float borderAlpha;
@property(assign, nonatomic) double maxAspectRatio;
@property(assign, nonatomic) double minAspectRatio;
@property(assign, nonatomic) CGRect initialCropRect;
@property(assign, nonatomic) CGRect cropRect;
@property(assign, nonatomic) __weak id<WAImageCropToolViewDelegate> delegate;
-(void).cxx_destruct;
-(void)reportCropRectChangeIfNeeded;
-(void)didEndDragging;
-(void)touchesCancelled:(id)cancelled withEvent:(id)event;
-(void)touchesEnded:(id)ended withEvent:(id)event;
-(void)touchesMoved:(id)moved withEvent:(id)event;
-(void)touchesBegan:(id)began withEvent:(id)event;
-(BOOL)pointIsInsideCroppedArea:(CGPoint)area;
-(BOOL)pointInside:(CGPoint)inside withEvent:(id)event;
-(void)layoutSubviews;
-(void)constrainAspectRatioForVideo;
-(void)constrainAspectRatioForImage;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface _WADownloadIndefiniteProgressView : WAShapeView {
	BOOL _animating;
}
@property(readonly, assign, nonatomic) BOOL animating;
-(void)applicationWillEnterForeground:(id)application;
-(void)didMoveToWindow;
-(void)stopRotating;
-(void)startRotating;
-(void)layoutSubviews;
-(void)dealloc;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WADownloadProgressView : UIView {
	UIImageView* _downloadIconView;
	UILabel* _fileSizeLabel;
	WAShapeView* _pillView;
	UIView* _cancelDownloadView;
	WACircularProgressView* _arcView;
	_WADownloadIndefiniteProgressView* _indefiniteProgressView;
	UIView* _containerView;
	BOOL _downloading;
	BOOL _showIndeterminateProgressBarOnly;
	id<WADownloadProgressViewDelegate> _delegate;
}
@property(assign, nonatomic) __weak id<WADownloadProgressViewDelegate> delegate;
@property(copy, nonatomic) NSString* fileSizeText;
@property(assign, nonatomic) BOOL showIndeterminateProgressBarOnly;
@property(assign, nonatomic) BOOL downloadIconHidden;
@property(assign, nonatomic) BOOL downloading;
@property(assign, nonatomic) float progress;
-(void).cxx_destruct;
-(void)handleSingleTap:(id)tap;
-(void)reset;
-(void)stopAnimation;
-(void)setDownloading:(BOOL)downloading animated:(BOOL)animated;
-(void)setProgress:(float)progress animated:(BOOL)animated;
-(id)pillPathInsideRect:(CGRect)rect;
-(void)layoutSubviews;
-(id)initWithFrame:(CGRect)frame;
@end

__attribute__((visibility("hidden")))
@interface WAWaitOperation : WABackupOperation {
	int _completionIndex;
	int _count;
	int _waitIndex;
	NSObject<OS_dispatch_semaphore>* _semaphore;
}
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore>* semaphore;
@property(assign, nonatomic) int waitIndex;
@property(readonly, assign) int count;
-(void).cxx_destruct;
-(void)finishIndex:(int)index;
-(void)waitForIndexToFinish:(int)finish;
-(void)finish;
-(void)cancel;
-(void)run;
-(id)initWithCount:(int)count;
-(id)init;
-(id)initWithDependenciesRequired:(BOOL)dependenciesRequired;
@end

__attribute__((visibility("hidden")))
@interface WAContactEditViewController : WAViewController <UITableViewDataSource, UITableViewDelegate, WAContactEditingHeaderViewDelegate, WAAddressBookLabelPickerDelegate, WAAddressBookCountryPickerDelegate, WAAddressBookFieldPickerDelegate, WAContactMultiValueEditingCellDelegate, WAContactAddressEditingCellDelegate, WASinglePhotoPickerControllerDelegate> {
	float _keyboardHeight;
	NSArray* _properties;
	int _addFieldSectionIndex;
	int _deleteContactSectionIndex;
	NSIndexPath* _indexPathForEditingCell;
	float _labelSectionWidthMain;
	float _labelSectionWidthOthers;
	id<WAContactEditViewControllerDelegate> _delegate;
	UITableView* _tableView;
	WAContactEditingHeaderView* _tableHeader;
	WAMergedContact* _originalContact;
	WAMergedContact* _editingContact;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, copy, nonatomic) WAMergedContact* editingContact;
@property(readonly, assign, nonatomic) WAMergedContact* originalContact;
@property(retain, nonatomic) WAContactEditingHeaderView* tableHeader;
@property(retain, nonatomic) UITableView* tableView;
@property(assign, nonatomic) __weak id<WAContactEditViewControllerDelegate> delegate;
+(id)controllerForMergedContact:(id)mergedContact;
-(void).cxx_destruct;
-(void)keyboardDidHide:(id)keyboard;
-(void)keyboardWillHide:(id)keyboard;
-(void)keyboardDidShow:(id)keyboard;
-(void)keyboardWillShow:(id)keyboard;
-(void)scrollToEditingTableViewCellAnimated:(BOOL)editingTableViewCellAnimated;
-(void)adjustContentInsetForKeyboardHeight:(float)keyboardHeight;
-(void)hideKeyboard;
-(void)contactNoteCellNeedsResize:(id)resize;
-(void)addressBookCountryPickerDidCancel:(id)addressBookCountryPicker;
-(void)addressBookCountryPicker:(id)picker didSelectCountryCode:(id)code;
-(void)presentCountryPickerForAddressEditingCell:(id)addressEditingCell;
-(void)addressBookLabelPickerDidFinish:(id)addressBookLabelPicker;
-(void)addressBookLabelPickerDidCancel:(id)addressBookLabelPicker;
-(void)handleLabelButtonActionInContactMultiValueEditingCell:(id)contactMultiValueEditingCell;
-(void)contactPropertyEditingCellValueChanged:(id)changed;
-(BOOL)contactPropertyEditingCellShouldReturn:(id)contactPropertyEditingCell;
-(void)contactPropertyEditingCellDidEndEditing:(id)contactPropertyEditingCell;
-(BOOL)contactPropertyEditingCellShouldEndEditing:(id)contactPropertyEditingCell;
-(void)contactPropertyEditingCellDidBeginEditing:(id)contactPropertyEditingCell;
-(BOOL)contactPropertyEditingCellShouldBeginEditing:(id)contactPropertyEditingCell;
-(void)handleCellSelectedForTableView:(id)tableView atIndexPath:(id)indexPath;
-(void)tableView:(id)view commitEditingStyle:(int)style forRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view didSelectRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view willSelectRowAtIndexPath:(id)indexPath;
-(int)tableView:(id)view editingStyleForRowAtIndexPath:(id)indexPath;
-(id)tableView:(id)view cellForRowAtIndexPath:(id)indexPath;
-(void)tableView:(id)view willDisplayCell:(id)cell forRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForRowAtIndexPath:(id)indexPath;
-(float)tableView:(id)view heightForFooterInSection:(int)section;
-(int)tableView:(id)view numberOfRowsInSection:(int)section;
-(int)numberOfSectionsInTableView:(id)tableView;
-(void)wa_fontSizeDidChange;
-(void)validateChanges;
-(void)doneAction:(id)action;
-(void)cancelAction:(id)action;
-(void)willAnimateRotationToInterfaceOrientation:(int)interfaceOrientation duration:(double)duration;
-(void)viewDidLayoutSubviews;
-(void)viewDidLoad;
-(void)loadView;
-(void)singlePhotoPickerControllerDidCancel:(id)singlePhotoPickerController;
-(void)singlePhotoPickerController:(id)controller didFinishWithImage:(id)image;
-(void)reallyShowImagePickerForSourceType:(int)sourceType;
-(void)showImagePickerForSourceType:(int)sourceType;
-(void)deleteCurrentContactImage;
-(void)editCurrentContactImage;
-(void)setContactImage:(id)image;
-(void)contactEditingHeaderEditPhotoTapped:(id)tapped;
-(void)contactEditingHeaderValueChanged:(id)changed;
-(BOOL)contactEditingHeaderViewShouldReturn:(id)contactEditingHeaderView;
-(void)addressBookFieldPickerDidCancel:(id)addressBookFieldPicker;
-(void)addressBookFieldPicker:(id)picker didFinishWithABPropertyID:(int)abpropertyID;
-(void)addContactPropertyField;
-(void)reloadHeaderView;
-(void)deleteContact;
-(void)reallyDeleteContact;
-(void)calculateLabelSectionWidth;
-(id)contactPropertyForTableIndexPath:(id)tableIndexPath;
-(id)contactPropertyForTableSection:(int)tableSection;
-(id)tableIndexPathForContactProperty:(id)contactProperty;
-(void)addNewValueToMultiValueProperty:(id)multiValueProperty;
-(void)rebuildContactData;
-(void)setMergedContact:(id)contact;
-(id)initWithNibName:(id)nibName bundle:(id)bundle;
@end

@interface UIScreen (Additions)
-(float)wa_applicationFrameHeight;
-(CGSize)wa_sizeForPortraitOrientation;
-(CGSize)wa_sizeForCurrentOrientation;
-(BOOL)wa_isLandscapeOrientation;
-(BOOL)wa_is3_5InchScreen;
@end

@interface NSDate (TimeShift)
+(double)serverTimeShift;
+(id)wa_serverDate;
-(double)wa_timeIntervalSinceServerNow;
-(id)wa_dateByRemovingShiftCorrection;
-(id)wa_dateByIncludingShiftCorrection;
@end

@interface NSString (Additions)
+(id)wa_stringWithData:(id)data encodingHint:(unsigned)hint actualEncoding:(unsigned*)encoding;
+(id)digraphs;
-(id)wa_componentsOfURLStringForIndexing;
-(id)wa_bestWebURLReturningMatchedText:(id*)text;
-(id)wa_htmlUnescapedString;
-(BOOL)wa_isIPAddress;
-(id)wa_decodedStringFromBase64;
-(BOOL)wa_hasVideoFileExtension;
-(id)wa_whatsAppIDFromJID;
-(id)wa_jidFromIdOrJID;
-(id)wa_jidFromWhatsAppID;
-(id)localPhoneNumberFormattedUsingCountryCode:(id)code;
-(id)unformattedPhoneNumber;
-(id)unformattedPhoneNumberFromJID;
-(id)formattedPhoneNumberFromJID;
-(id)formattedPhoneNumber;
-(id)phoneNumberForVoiceOver;
-(id)wa_splitIntoPartsWithMaxParts:(unsigned)maxParts maxCharactersPerPart:(unsigned)part overflowed:(BOOL*)overflowed;
-(unsigned)wa_indexOfClosestWordBoundaryBeforeIndex:(unsigned)closestWordBoundaryBeforeIndex;
-(unsigned)wa_indexOfComposedCharacterContainingIndex:(unsigned)composedCharacterContainingIndex;
-(id)wa_redactedURLString;
-(id)wa_redactedString;
-(id)wa_stringByReplacingGreaterThanSignWithImageUsingColor:(id)imageUsingColor andFont:(id)font;
-(id)wa_substringWithComposedCharacterSequenceLength:(unsigned)composedCharacterSequenceLength;
-(unsigned)wa_lengthInCharacters;
-(id)wa_bestStringLanguage;
-(BOOL)isRTLText;
-(BOOL)isEmptyOrWhitespace;
-(id)wa_suffixWithMaximumLength:(unsigned)maximumLength;
-(id)wa_trimmedStringByNormalizingNewlines;
-(id)wa_trimmedString;
-(id)wa_stringByRemovingEmoji;
-(id)wa_stringByStandardizingEmoji;
-(id)mimeType;
-(id)tokens;
-(id)upperBoundSearchString;
-(id)normalizedString;
-(id)wa_URLEncodedString;
@end

@interface NSString (Crypto)
-(id)wa_URLEncodedHexToBinary;
-(id)wa_decodedStringWithSalt:(id)salt;
-(id)wa_encodedStringWithSalt:(id)salt;
-(id)wa_decodedString;
-(id)wa_encodedString;
-(id)wa_SHA256String;
-(id)wa_MD5String;
-(id)wa_dataValue;
@end

@interface NSString (RegExp)
-(id)stringByReplacingMatchesInString:(id)string withTemplate:(id)aTemplate;
-(NSRange)rangeOfFirstMatchInString:(id)string;
@end

@interface UIImage (Additions)
+(id)wa_singlePixelClearImage;
+(id)wa_singlePixelImageWithColor:(id)color;
+(id)wa_singleColorImageOfSizeInPixels:(CGSize)pixels color:(id)color;
+(id)wa_decodedImageWithData:(id)data;
+(id)wa_decodedImageAtPath:(id)path;
-(id)wa_imageThatFlipsAutomaticallyForLayoutDirection;
-(id)wa_imageByFastResizingToSizeInPixels:(CGSize)pixels;
-(id)wa_templateImageWithColor:(id)color;
-(id)wa_desaturatedImage;
-(id)wa_imageByResizingToSizeInPixels:(CGSize)pixels blurRadius:(float)radius blurEdges:(BOOL)edges saturationAdjustment:(float)adjustment;
-(id)wa_imageByResizingToSizeInPixels:(CGSize)pixels blurRadius:(float)radius blurEdges:(BOOL)edges;
-(id)wa_imageByResizingToSizeInPixels:(CGSize)pixels blurRadius:(float)radius;
-(id)wa_transformedImageOfPixelSize:(CGSize)pixelSize anchorPoint:(CGPoint)point cropSize:(CGSize)size rotationAngle:(float)angle;
-(id)wa_imageBySquareCroppingToNormalizedRect:(CGRect)normalizedRect widthInPixels:(float)pixels;
-(id)wa_imageByRotatingByAngle:(float)angle croppingToNormalizedRect:(CGRect)normalizedRect maximumEdge:(float)edge;
-(CGSize)wa_sizeInPoints;
-(id)wa_imageWithAlpha:(float)alpha;
-(id)wa_normalizedImage;
-(id)normalizedImage;
-(id)imageWithColorFrame:(id)colorFrame;
-(id)wa_imageByRotatingToDefaultOrientation;
-(id)wa_imageByMultiplyingColor:(id)color;
-(id)wa_imageWithColorOverlay:(id)colorOverlay;
-(id)thumbnailOfSize:(CGSize)size overlayImage:(id)image text:(id)text textPadding:(float)padding;
-(id)wa_imageByResizingToSizeInPixels:(CGSize)pixels contentMode:(int)mode downscaleOnly:(BOOL)only;
@end

@interface UIImage (Bubbles)
+(id)blueBubble;
+(id)greenBubbleInNoTailHighlighted;
+(id)greenBubbleInNoTail;
+(id)greenBubbleInHighlighted;
+(id)greenBubbleIn;
+(id)greenBubbleOutNoTailHighlighted;
+(id)greenBubbleOutNoTail;
+(id)greenBubbleOutHighlighted;
+(id)greenBubbleOut;
+(id)grayBubbleOutNoTailHighlighted;
+(id)grayBubbleOutNoTail;
+(id)grayBubbleOutHighlighted;
+(id)grayBubbleOut;
+(id)grayBubbleInNoTailHighlighted;
+(id)grayBubbleInNoTail;
+(id)grayBubbleInHighlighted;
+(id)grayBubbleIn;
+(void)wa_makeAllBubblesiOS7;
+(void)wa_makeAllBubblesiOS6;
+(void)wa_makeAllBubbles;
@end

@interface UIView (Additions)
@property(readonly, assign, nonatomic) BOOL wa_isLayoutDirectionRightToLeft;
@property(assign, nonatomic) CGSize size;
@property(assign, nonatomic) CGPoint origin;
@property(assign, nonatomic) float height;
@property(assign, nonatomic) float width;
@property(assign, nonatomic) float bottom;
@property(assign, nonatomic) float right;
@property(assign, nonatomic) float top;
@property(assign, nonatomic) float left;
-(id)wa_constrainToSuperviewCenterY;
-(id)wa_constrainToSuperviewCenterYWithInset:(float)inset;
-(id)wa_constrainToSuperviewCenterX;
-(void)wa_constrainToSuperviewHorizontalEdges;
-(void)wa_constrainToSuperviewHorizontalEdgesWithInset:(float)inset;
-(id)wa_constrainToSuperviewCenterXWithInset:(float)inset;
-(id)wa_constrainToSuperviewTrailingEdge;
-(id)wa_constrainToSuperviewTrailingEdgeWithInset:(float)inset;
-(id)wa_constrainToSuperviewLeadingEdge;
-(id)wa_constrainToSuperviewLeadingEdgeWithInset:(float)inset;
-(void)wa_constrainToSuperviewVerticalEdges;
-(void)wa_constrainToSuperviewVerticalEdgesWithInset:(float)inset;
-(id)wa_constrainToSuperviewBottomEdge;
-(id)wa_constrainToSuperviewBottomEdgeWithInset:(float)inset;
-(id)wa_constrainToSuperviewTopEdge;
-(id)wa_constrainToSuperviewTopEdgeWithInset:(float)inset;
-(id)wa_constrainToHeight:(float)height;
-(id)wa_constrainToWidth:(float)width;
-(void)wa_snapToPixelOrigin;
-(CGPoint)wa_alignedCenterFromCenter:(CGPoint)center flippedForRTL:(BOOL)rtl;
-(CGPoint)wa_alignedCenterFromCenter:(CGPoint)center;
@end

@interface NSLocale (WhatsAppExtras)
+(BOOL)wa_isUsing24HrTimeFormat;
+(int)wa_textAlignment;
+(BOOL)wa_isInterfaceRTL;
+(id)wa_localeCode;
+(id)wa_languageVariant;
+(id)wa_languageCode;
+(id)wa_oldStyleFullLanguageCode;
+(id)wa_fullLanguageCode;
+(id)wa_currencySymbolForCurrencyCode:(id)currencyCode;
@end

@interface NSData (Additions)
+(id)wa_randomDataOfLength:(unsigned)length;
-(id)wa_URLEncodedString;
-(id)wa_SHA256String;
-(id)wa_MD5String;
-(id)aesDecodeWithKey:(id)key;
-(id)aesEncodeWithKey:(id)key;
-(id)aesDecodeWithPassphrase:(id)passphrase;
-(id)aesEncodeWithPassphrase:(id)passphrase;
-(id)aesCryptoWithPassphrase:(id)passphrase encode:(BOOL)encode;
-(id)aesCryptoWithKey:(id)key encode:(BOOL)encode options:(unsigned)options;
-(id)wa_stringValue;
-(id)wa_stringDump;
-(id)wa_base64DecodedData;
-(id)wa_base64EncodedString;
-(id)wa_UTF8StringValue;
-(id)wa_HEXStringValue;
-(id)wa_SHA256Digest;
-(id)wa_MD5Digest;
-(BOOL)wa_constantTimeIsEqualToData:(id)data;
@end

@interface NSData (JSON)
-(id)wa_JSONObjectReturningError:(out id*)error;
-(id)wa_JSONObject;
@end

@interface NSMutableData (HTTPPost)
-(void)appendTextParam:(id)param withName:(id)name boundary:(id)boundary;
@end

@interface NSData (ZLib)
-(id)wa_zlibDeflate;
-(id)wa_zlibInflate;
@end

@interface NSManagedObjectContext (WhatsAppExtras)
-(id)wa_executeFetchRequest:(id)request error:(id*)error;
-(void)wa_performFetchRequest:(id)request completion:(id)completion;
-(void)wa_prefetchToOneRelationshipName:(id)oneRelationshipName inObjects:(id)objects;
@end

@interface NSFetchedResultsController (WhatsAppExtras)
-(BOOL)wa_performFetch:(id*)fetch;
@end

@interface NSFetchRequest (WhatsAppExtras)
-(void)wa_prefetchRelationshipsInFetchedObjects:(id)fetchedObjects;
@end

@interface UIDevice (machine)
-(BOOL)wa_shouldBeAskedToReview;
-(id)wa_memoryInfo;
-(double)estimatedMigrationTimeForDatabaseSize:(unsigned long long)databaseSize;
-(BOOL)wa_hasMulticoreProcessor;
-(BOOL)wa_supports4KVideo;
-(id)modelName;
-(id)machine;
-(id)wa_systemDescription;
-(id)wa_systemBuild;
-(id)wa_stringForSystemControlWithName:(const char*)name;
-(id)wa_systemBootDate;
-(BOOL)wa_isDeviceSupported;
-(BOOL)wa_isDeviceSuspicious;
-(id)wa_deviceInfoForXMPPAuth;
@end

@interface UITableView (WAWarningViewControllerAdditions)
-(void)wa_setContentOffsetToTop;
@end

@interface NSString (XMPPBinaryCoder)
-(BOOL)wa_isHex8Encodable;
-(BOOL)wa_isNibble8Encodable;
@end

@interface NSUserDefaults (Encryption)
-(void)setDate:(id)date forKey:(id)key;
-(id)dateForKey:(id)key;
-(void)setEncryptedInteger:(int)integer forKey:(id)key;
-(void)setEncryptedString:(id)string forKey:(id)key;
-(int)encryptedIntegerForKey:(id)key;
-(id)encryptedStringForKey:(id)key;
@end

@interface UIApplication (WhatsAppExtras)
+(id)wa_statusBarView;
+(BOOL)wa_isProductionBuild;
+(BOOL)wa_blurEffectsEnabled;
+(BOOL)iOS9;
+(BOOL)iOS8;
+(BOOL)iOS7;
+(id)packageHash;
+(id)wa_cachesDirectory;
+(id)wa_libraryDirectory;
+(id)wa_documentsDirectory;
+(id)wa_httpUserAgentString;
+(id)wa_versionString;
+(void)setupEnv;
+(BOOL)wa_isDirtyCached;
+(BOOL)isDirty;
-(id)wa_matchingViewInView:(id)view;
-(id)wa_mainAppPrimaryContentView;
-(id)wa_mainAppView;
-(id)wa_mainAppSecondaryView;
-(id)wa_mainAppPrimaryView;
-(id)wa_mainAppWindows;
-(id)wa_mainAppWindow;
-(id)wa_viewWithIdentifier:(id)identifier;
-(float)wa_currentStatusBarHeight;
-(id)wa_topMostWindow;
-(void)wa_clearNotificationCenterAndApplicationBadge;
-(void)showLocalNotification:(id)notification hasAction:(BOOL)action alertAction:(id)action3 fireDate:(id)date;
-(BOOL)isActive;
-(BOOL)isBackgrounded;
@end

@interface NSError (WAAdditions)
+(id)wa_errorWithDomain:(id)domain code:(int)code description:(id)description localizedFailureReason:(id)reason localizedRecoverySuggestion:(id)suggestion;
@end

@interface NSArray (WhatsApp)
-(id)wa_shuffledArray;
@end

@interface NSString (Attachments)
+(id)wa_allCountryCombinations;
-(BOOL)wa_containsCustomEmoji;
@end

@interface NSMutableAttributedString (Attachments)
-(void)wa_insertAttachentWithAttachmentNamed:(id)attachmentNamed location:(int)location font:(id)font addControlCharacters:(BOOL)characters insertNameIfNoAttachement:(BOOL)attachement;
@end

@interface NSAttributedString (Attachments)
-(id)wa_attributedStringWithResizedAttachmentsUsingFont:(id)resizedAttachmentsUsingFont;
-(id)wa_attributedStringWithAttachmentsUsingFont:(id)attachmentsUsingFont withControlCharacters:(BOOL)controlCharacters;
-(id)wa_stringWithAttachmentsStripped;
-(BOOL)wa_containsAttachments;
@end

@interface NSFileManager (Additions)
+(id)uniqueFilename;
-(BOOL)wa_isFileAccessibleAtPath:(id)path;
-(BOOL)wa_prepareFilePathForWriting:(id)writing;
-(void)purgeTmpDirectory;
-(id)wa_freeDiskSpace;
-(id)wa_totalDiskSpace;
-(id)wa_numberForFileSystemKey:(id)fileSystemKey;
-(unsigned)wa_storageStatus;
-(unsigned long long)sizeOfFileAtPath:(id)path;
-(unsigned long long)wa_sizeOfDirectoryAtPath:(id)path error:(out id*)error;
-(id)cpFileAtPath:(id)path forJID:(id)jid preserveName:(BOOL)name;
-(id)saveData:(id)data forJID:(id)jid withName:(id)name;
-(id)saveData:(id)data forJID:(id)jid fileExtension:(id)extension;
-(id)prepareToSaveTempMedia:(id)saveTempMedia;
-(id)prepareToSaveMedia:(id)saveMedia forJID:(id)jid;
-(id)prepareToSaveMedia:(id)saveMedia inDirectory:(id)directory;
-(id)mediaDirectoryForJID:(id)jid;
@end

@interface NSLocale (Plurals)
+(int)pluralFormForNumber:(id)number;
@end

@interface NSBundle (Plurals)
-(id)localizedStringForKey:(id)key number:(id)number formatSpecifier:(id)specifier;
@end

@interface NSDictionary (Types)
-(id)wa_arrayForKey:(id)key;
-(id)wa_dictionaryForKey:(id)key;
-(id)wa_dataForKey:(id)key;
-(id)wa_stringForKey:(id)key;
-(id)wa_dateForKey:(id)key;
-(id)wa_numberForKey:(id)key;
-(id)wa_objectForKey:(id)key ofClass:(Class)aClass;
@end

@interface NSCalendar (Additions)
-(int)daysFromDate:(id)date toDate:(id)date2;
@end

@interface NSURL (WhatsApp)
-(id)wa_URLByAddingParameter:(id)parameter value:(id)value;
-(id)wa_URLByReplacingHost:(id)host;
@end

@interface UILabel (Additions)
-(BOOL)wa_isTruncated;
-(float)wa_widthWithoutTruncation;
-(void)wa_drawRect:(CGRect)rect;
-(float)wa_baselineOffsetFromBottom;
@end

@interface NSDictionary (Callback)
+(id)callbackDictionaryForDelegate:(id)delegate userInfo:(id)info finishedSelector:(SEL)selector failedSelector:(SEL)selector4;
-(SEL)callbackFailedSelector;
-(SEL)callbackFinishedSelector;
-(id)callbackUserInfo;
-(id)callbackDelegate;
@end

@interface UIMotionEffect (Additions)
+(BOOL)wa_motionEffectsSupportedAndEnabled;
@end

@interface UISearchBar (Additions)
-(id)searchBarTextField;
@end

@interface PHChange (WhatsApp)
@property(readonly, assign, nonatomic) BOOL isSingleItemCloudDownloadChange;
-(id)wa_description;
@end

@interface UIFont (Additions)
+(id)wa_mediumSystemFontOfSize:(float)size;
+(id)wa_lightSystemFontOfSize:(float)size;
+(id)wa_ultraLightSystemFontOfSize:(float)size;
+(id)wa_fontForTextStyleBody;
@end

@interface NSURLSessionTask (WAURLTaskData)
@property(copy, nonatomic) WAURLTaskData* wa_taskData;
@end

@interface NSDictionary (X_WA_Metadata)
-(id)wa_fileHash;
-(id)wa_fileType;
-(id)wa_metadataHeaderValueForKey:(id)key;
-(id)wa_headerValueForKey:(id)key;
-(id)wa_metadata;
@end

@interface NSString (VCardAdditions)
-(id)vCardSafeString;
@end

@interface NSArray (WABackupErrorManagerAdditions)
-(id)maximumObject;
@end

