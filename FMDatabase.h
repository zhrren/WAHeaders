/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "WhatsApp-Structs.h"
#import </libobjc.A.h>

@class NSMutableDictionary, NSMutableSet, NSString, NSDateFormatter;

__attribute__((visibility("hidden")))
@interface FMDatabase : NSObject {
	sqlite3* _db;
	NSString* _databasePath;
	BOOL _logsErrors;
	BOOL _crashOnErrors;
	BOOL _traceExecution;
	BOOL _checkedOut;
	BOOL _shouldCacheStatements;
	BOOL _isExecutingStatement;
	BOOL _inTransaction;
	double _busyTimeout;
	NSMutableDictionary* _cachedStatements;
	NSMutableSet* _openResultSets;
	NSMutableSet* _openFunctions;
	NSDateFormatter* _dateFormat;
}
@property(retain) NSMutableDictionary* cachedStatements;
@property(assign) BOOL logsErrors;
@property(assign) BOOL crashOnErrors;
@property(assign) double busyTimeout;
@property(assign) BOOL checkedOut;
@property(assign) BOOL traceExecution;
+(id)storeableDateFormat:(id)format;
+(BOOL)isSQLiteThreadSafe;
+(id)sqliteLibVersion;
+(id)databaseWithPath:(id)path;
-(void).cxx_destruct;
-(void)makeFunctionNamed:(id)named maximumArguments:(int)arguments withBlock:(id)block;
-(void)setShouldCacheStatements:(BOOL)cacheStatements;
-(BOOL)shouldCacheStatements;
-(id)inSavePoint:(id)savePoint;
-(BOOL)rollbackToSavePointWithName:(id)name error:(id*)error;
-(BOOL)releaseSavePointWithName:(id)name error:(id*)error;
-(BOOL)startSavePointWithName:(id)name error:(id*)error;
-(BOOL)inTransaction;
-(BOOL)beginTransaction;
-(BOOL)beginDeferredTransaction;
-(BOOL)commit;
-(BOOL)rollback;
-(BOOL)update:(id)update withErrorAndBindings:(id*)errorAndBindings;
-(BOOL)executeUpdateWithFormat:(id)format;
-(BOOL)executeUpdate:(id)update withVAList:(void*)valist;
-(BOOL)executeUpdate:(id)update withParameterDictionary:(id)parameterDictionary;
-(BOOL)executeUpdate:(id)update withArgumentsInArray:(id)array;
-(BOOL)executeUpdate:(id)update;
-(BOOL)executeUpdate:(id)update error:(id*)error withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;
-(id)executeQuery:(id)query withVAList:(void*)valist;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array;
-(id)executeQueryWithFormat:(id)format;
-(id)executeQuery:(id)query;
-(id)executeQuery:(id)query withArgumentsInArray:(id)array orDictionary:(id)dictionary orVAList:(void*)list;
-(id)executeQuery:(id)query withParameterDictionary:(id)parameterDictionary;
-(void)extractSQL:(id)sql argumentsList:(void*)list intoString:(id)string arguments:(id)arguments;
-(void)bindObject:(id)object toColumn:(int)column inStatement:(sqlite3_stmt*)statement;
-(int)changes;
-(long long)lastInsertRowId;
-(id)lastError;
-(id)errorWithMessage:(id)message;
-(int)lastErrorCode;
-(BOOL)hadError;
-(id)lastErrorMessage;
-(BOOL)databaseExists;
-(void)warnInUse;
-(BOOL)goodConnection;
-(id)stringFromDate:(id)date;
-(id)dateFromString:(id)string;
-(void)setDateFormat:(id)format;
-(BOOL)hasDateFormatter;
-(BOOL)setKeyWithData:(id)data;
-(BOOL)setKey:(id)key;
-(BOOL)rekeyWithData:(id)data;
-(BOOL)rekey:(id)rekey;
-(void)setCachedStatement:(id)statement forQuery:(id)query;
-(id)cachedStatementForQuery:(id)query;
-(void)resultSetDidClose:(id)resultSet;
-(void)closeOpenResultSets;
-(BOOL)hasOpenResultSets;
-(void)clearCachedStatements;
-(void)setBusyRetryTimeout:(int)timeout;
-(int)busyRetryTimeout;
-(double)retryTimeout;
-(void)setRetryTimeout:(double)timeout;
-(BOOL)close;
-(BOOL)openWithFlags:(int)flags;
-(BOOL)open;
-(const char*)sqlitePath;
-(sqlite3*)sqliteHandle;
-(id)databasePath;
-(void)dealloc;
-(void)finalize;
-(id)initWithPath:(id)path;
-(id)init;
-(BOOL)validateSQL:(id)sql error:(id*)error;
-(BOOL)columnExists:(id)exists columnName:(id)name;
-(void)setUserVersion:(unsigned)version;
-(unsigned)userVersion;
-(void)setApplicationID:(unsigned)anId;
-(unsigned)applicationID;
-(BOOL)columnExists:(id)exists inTableWithName:(id)name;
-(id)getTableSchema:(id)schema;
-(id)getSchema;
-(BOOL)tableExists:(id)exists;
-(id)dateForQuery:(id)query;
-(id)dataForQuery:(id)query;
-(double)doubleForQuery:(id)query;
-(BOOL)boolForQuery:(id)query;
-(long)longForQuery:(id)query;
-(int)intForQuery:(id)query;
-(id)stringForQuery:(id)query;
@end

