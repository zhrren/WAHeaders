/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import </libobjc.A.h>
#import "WhatsApp-Structs.h"
#import "AVCaptureVideoDataOutputSampleBufferDelegate.h"
#import "AVCaptureMetadataOutputObjectsDelegate.h"
#import "AVCaptureAudioDataOutputSampleBufferDelegate.h"
#import "WACameraPreviewViewDelegate.h"

@class NSSet, NSString, WACameraFilter, UIView, NSMutableDictionary, NSArray, CIContext, AVCaptureSession, AVCaptureDeviceInput, AVCaptureStillImageOutput, AVCaptureVideoDataOutput, AVCaptureAudioDataOutput, AVCaptureMetadataOutput, AVAssetWriterInput, AVAssetWriter, WACameraPreviewView;
@protocol WACameraControllerDelegate, OS_dispatch_group, OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface WACameraController : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate, AVCaptureMetadataOutputObjectsDelegate, AVCaptureAudioDataOutputSampleBufferDelegate, WACameraPreviewViewDelegate> {
	WACameraPreviewView* _previewView;
	NSObject<OS_dispatch_queue>* _captureQueue;
	NSObject<OS_dispatch_queue>* _audioCaptureQueue;
	NSObject<OS_dispatch_queue>* _videoCaptureQueue;
	NSObject<OS_dispatch_group>* _cameraConfigGroup;
	NSMutableDictionary* _faceObjects;
	BOOL _isChangingCamerasInteractively;
	double _lastAutoFocusOnFaceTime;
	BOOL _startSessionOnDidEnterForeground;
	id _defaultAudioActivity;
	id _videoRecordingAudioActivity;
	int _cameraState;
	AVCaptureSession* _captureSession;
	AVCaptureDeviceInput* _videoDeviceInput;
	AVCaptureDeviceInput* _audioDeviceInput;
	AVCaptureStillImageOutput* _stillImageOutput;
	AVCaptureVideoDataOutput* _videoDataOutput;
	AVCaptureAudioDataOutput* _audioDataOutput;
	AVCaptureMetadataOutput* _metadataOutput;
	AVAssetWriterInput* _audioWriterInput;
	AVAssetWriterInput* _videoWriterInput;
	opaqueCMFormatDescription* _audioFormatDescription;
	opaqueCMFormatDescription* _videoFormatDescription;
	CIContext* _ciContext;
	BOOL _lockExposureAfterAutoExposure;
	BOOL _needsReexposure;
	double _lastExposureLockTime;
	CGPoint _exposurePointOfInterest;
	opaqueCMBufferQueue* _previewBufferQueue;
	unsigned long long _exposureLockID;
	int _deviceOrientationForCapture;
	AVAssetWriter* _assetWriter;
	BOOL _isAssetWriterSessionStarted;
	BOOL _needsFinishAssetWriterSession;
	int _acceptSampleBuffersLock;
	BOOL _isAssetWriterAcceptingSampleBuffers;
	int _videoSampleTimeLock;
	XXStruct_pwHToB _timeOfFirstAppendedVideoSampleBuffer;
	XXStruct_pwHToB _timeOfLastAppendedVideoSampleBuffer;
	XXStruct_pwHToB _maximumRecordingDuration;
	AVCaptureSession* _audioCaptureSession;
	struct {
		XXStruct_pwHToB duration;
		XXStruct_pwHToB presentationTimeStamp;
		XXStruct_pwHToB decodeTimeStamp;
	} _sampleTimingInfo;
	BOOL _needsStartAssetWriterWhenAudioFormatDescriptionIsReady;
	int _startSessionCounter;
	BOOL _useBackCamera;
	BOOL _exposurePointOfInterestSupported;
	BOOL _focusPointOfInterestSupported;
	BOOL _flashActive;
	BOOL _running;
	id<WACameraControllerDelegate> _delegate;
	int _cameraMode;
	NSSet* _supportedFlashModes;
	int _flashMode;
	float _maximumZoomFactor;
	float _currentZoomFactor;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(readonly, assign, nonatomic, getter=isRecordingVideo) BOOL recordingVideo;
@property(readonly, assign) XXStruct_pwHToB durationOfCurrentVideoRecording;
@property(retain, nonatomic) WACameraFilter* filter;
@property(readonly, copy, nonatomic) NSArray* faceObjects;
@property(readonly, assign, nonatomic, getter=isRunning) BOOL running;
@property(readonly, assign, nonatomic) float currentZoomFactor;
@property(readonly, assign, nonatomic) float maximumZoomFactor;
@property(readonly, assign, nonatomic, getter=isFlashActive) BOOL flashActive;
@property(readonly, assign, nonatomic) int flashMode;
@property(readonly, assign, nonatomic) NSSet* supportedFlashModes;
@property(readonly, assign, nonatomic) BOOL focusPointOfInterestSupported;
@property(readonly, assign, nonatomic) BOOL exposurePointOfInterestSupported;
@property(readonly, assign, nonatomic) int cameraMode;
@property(readonly, assign, nonatomic) BOOL readyForMediaCapture;
@property(readonly, assign, nonatomic) BOOL useBackCamera;
@property(readonly, assign, nonatomic) CGSize previewImageSize;
@property(assign, nonatomic, getter=isPreviewPaused) BOOL previewPaused;
@property(readonly, assign, nonatomic) UIView* previewView;
@property(assign, nonatomic) __weak id<WACameraControllerDelegate> delegate;
+(int)imageOrientationForSourceVideoOrientation:(int)sourceVideoOrientation targetVideoOrientation:(int)orientation backFacingCamera:(BOOL)camera;
+(int)numberOfRightAnglesForVideoOrientation:(int)videoOrientation;
+(int)frontCameraVideoOrientationForDeviceOrientation:(int)deviceOrientation;
+(int)backCameraVideoOrientationForDeviceOrientation:(int)deviceOrientation;
+(id)videoCaptureDeviceWithPreferredPosition:(int)preferredPosition;
+(BOOL)hasActiveInstances;
+(void)recoverUnsavedMediaIfNeeded;
+(id)temporaryMediaPathWithExtension:(id)extension;
+(id)cameraMediaDirectory;
+(void)requestCameraPermissionWithCompletionHandler:(id)completionHandler;
-(void).cxx_destruct;
-(void)observeValueForKeyPath:(id)keyPath ofObject:(id)object change:(id)change context:(void*)context;
-(void)applicationDidReceiveMemoryWarning:(id)application;
-(void)applicationWillEnterForeground:(id)application;
-(void)handleCaptureSessionRuntimeError:(id)error;
-(void)mediaServicesWereReset:(id)reset;
-(void)mediaServicesWereLost:(id)lost;
-(void)captureDeviceSubjectAreaDidChange:(id)captureDeviceSubjectArea;
-(id)imageFromImageBuffer:(CVBufferRef)imageBuffer imageOrientation:(int)orientation;
-(id)imageFromSampleBuffer:(opaqueCMSampleBuffer*)sampleBuffer;
-(void)drainBufferQueue:(opaqueCMBufferQueue*)queue;
-(opaqueCMSampleBuffer*)dequeueAndRetainBestSampleBufferInQueue:(opaqueCMBufferQueue*)queue forPresentationTime:(XXStruct_pwHToB)presentationTime;
-(void)updatePreviewWithSampleBuffer:(opaqueCMSampleBuffer*)sampleBuffer;
-(void)captureOutput:(id)output didOutputSampleBuffer:(opaqueCMSampleBuffer*)buffer fromConnection:(id)connection;
-(void)performAnimationWithDuration:(double)duration key:(id)key callback:(id)callback completion:(id)completion;
-(void)blockCurrentThreadUntilDisplay;
-(id)redrawPreviewAndSnapshot;
-(void)cameraPreviewViewDidChangeImageSize:(id)cameraPreviewView;
-(void)getZoomFactorWithCompletionBlock:(id)completionBlock;
-(void)setZoomFactor:(float)factor completion:(id)completion;
-(float)maximumZoomFactorForCurrentSettings;
-(void)updatePointOfInterestWithFaceMetadata;
-(id)faceObjectWithMetadataObject:(id)metadataObject fromConnection:(id)connection;
-(id)qrCodeObjectWithMetadataObject:(id)metadataObject;
-(void)captureOutput:(id)output didOutputMetadataObjects:(id)objects fromConnection:(id)connection;
-(void)setUpMetadataOutputForCameraMode:(int)cameraMode;
-(void)finishAssetWriterSession;
-(void)appendSampleBuffer:(opaqueCMSampleBuffer*)buffer toWriterInput:(id)writerInput;
-(void)cleanUpAfterRecording;
-(void)didFailToPrepareRecording;
-(void)startAssetWriterSession;
-(void)cancelVideoRecording;
-(void)stopVideoRecording;
-(XXStruct_pwHToB)preferredFrameRateForDevice:(id)device;
-(void)resetCaptureDeviceAfterVideoRecording:(id)recording;
-(void)prepareCaptureDeviceForVideoRecording:(id)videoRecording;
-(BOOL)startVideoRecording;
-(void)performStillImageCaptureAnimation;
-(void)captureImageWithCompletion:(id)completion;
-(void)exposeAtPoint:(CGPoint)point;
-(void)exposeAndFocusWithMode:(int)mode atDevicePoint:(CGPoint)devicePoint monitorSubjectAreaChange:(BOOL)change;
-(void)unlockExposure;
-(void)lockExposure;
-(BOOL)isHoldingExposureLock;
-(void)setDeviceOrientation:(int)orientation;
-(void)resetPointOfInterest;
-(void)setPointOfInterest:(CGPoint)interest;
-(id)supportedFlashModesForCurrentDevice;
-(void)internalSetFlashMode:(int)mode;
-(void)setFlashMode:(int)mode completion:(id)completion;
-(void)internalSetCameraMode:(int)mode;
-(void)setCameraMode:(int)mode fromQueue:(id)queue completion:(id)completion;
-(void)internalSetUseBackCamera:(BOOL)camera forCameraMode:(int)cameraMode;
-(void)handleAudioSessionRouteChangeNotification:(id)notification;
-(void)setUpMicrophoneForCameraPosition:(BOOL)cameraPosition;
-(void)setUseBackCamera:(BOOL)camera forCameraMode:(int)cameraMode fromQueue:(id)queue completion:(id)completion;
-(void)setUseBackCamera:(BOOL)camera completion:(id)completion;
-(CGAffineTransform)previewTransform;
-(void)stopRunning;
-(void)startRunning;
-(void)dealloc;
-(id)initWithCameraMode:(int)cameraMode useBackCamera:(BOOL)camera;
-(id)init;
@end

