/**
 * This header is generated by class-dump-z 0.2-0.
 * class-dump-z is Copyright (C) 2009 by KennyTM~, licensed under GPLv3.
 *
 * Source: (null)
 */

#import "WhatsApp-Structs.h"
#import "WAUpgradeCallback.h"
#import "WAAxolotlStoreDelegate.h"
#import </libobjc.A.h>

@class NSMutableDictionary, WAAxolotlStore, NSMutableSet, NSString, WAAxolotlCryptoProvider;
@protocol OS_dispatch_group;

__attribute__((visibility("hidden")))
@interface WAEndToEndEncryptionManager : NSObject <WAUpgradeCallback, WAAxolotlStoreDelegate> {
	WAAxolotlCryptoProvider* _cryptoProvider;
	axolotl_store_context* store_context;
	ratchet_identity_key_pair* _identityKeyPair;
	NSObject<OS_dispatch_group>* _registrationDispatchGroup;
	BOOL _needServerRegistration;
	BOOL _digestCheckPending;
	NSMutableSet* _pendingKeyRequestJids;
	NSMutableDictionary* _pendingTasksForJid;
	WAAxolotlStore* _axolotlStore;
	BOOL _registrationOnIdMismatchPermitted;
	BOOL _needPhoneRestart;
	unsigned _registrationId;
	axolotl_context* _globalContext;
}
@property(readonly, copy) NSString* debugDescription;
@property(readonly, copy) NSString* description;
@property(readonly, assign) Class superclass;
@property(readonly, assign) unsigned hash;
@property(assign, nonatomic) BOOL needPhoneRestart;
@property(assign) axolotl_context* globalContext;
@property(assign) unsigned registrationId;
+(unsigned)wmCipherTypeFromXMPPCipherTypeString:(id)xmppcipherTypeString;
+(id)xmppCipherTypeStringFromWMCipherType:(unsigned)wmcipherType;
+(unsigned)wmCipherTypeFromAxolotlCipherType:(int)axolotlCipherType;
+(void)setNeedDigestCheckFlag;
+(void)wa_didUpgradeFrom:(id)from to:(id)to;
+(id)sharedManager;
-(void).cxx_destruct;
-(void)axolotlFailedWithError:(id)error;
-(BOOL)canVerifyFingerprintForJid:(id)jid;
-(id)fingerprintForRemoteJID:(id)remoteJID;
-(id)stableJidFromJid:(id)jid;
-(id)decryptedVoIPKeyForCiphertext:(id)ciphertext withCipherType:(unsigned)cipherType forJid:(id)jid error:(out id*)error;
-(void)encryptedPayloadForVoIPKey:(id)voIPKey toJid:(id)jid withCompletionBlock:(id)completionBlock;
-(void)checkRegistrationId:(unsigned)anId forJid:(id)jid;
-(int)sessionCipher:(session_cipher**)cipher forJid:(id)jid;
-(void)setAxolotlAddress:(axolotl_address*)address forJid:(id)jid participant:(id)participant;
-(BOOL)createIdentity;
-(BOOL)loadIdentity;
-(BOOL)migrateKeychainIdentity;
-(void)regenerateIdentity;
-(void)clearIdentity;
-(id)keychainIdentityQuery;
-(void)xmppConnectionStateDidChange:(id)xmppConnectionState;
-(BOOL)processMismatchedRegistrationID:(int)anId forXMPPMessageStanza:(id)xmppmessageStanza withRetryCount:(int)retryCount;
-(void)serverRejectRetryForReceipt:(id)receipt registrationId:(int)anId fromJID:(id)jid participanr:(id)participanr;
-(void)requestNewKeyForJid:(id)jid;
-(void)checkPreKeysCount;
-(void)sendMorePreKeys;
-(void)clearSessionForGroup:(id)group;
-(void)checkServerDigest;
-(void)registerWithServerWithCompletion:(id)completion;
-(void)endProcessingIncomingMessages;
-(void)beginProcessingIncomingMessages;
-(void)didReceiveUnknownTagsReceiptForStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid3 unknownTags:(id)tags;
-(void)didReceiveRetryReceiptForStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid3 registrationId:(int)anId retryCount:(int)count;
-(void)retrySendMessageWithStanzaID:(id)stanzaID fromJID:(id)jid participantJID:(id)jid3 retryCount:(int)count;
-(void)checkSessionForJID:(id)jid participant:(id)participant registrationId:(int)anId;
-(id)e2eMessageForMessage:(id)message;
-(void)sendE2eMessage:(id)message forParticipant:(id)participant;
-(id)processPrekeyTasksWaitingOnPrekeyForJid:(id)jid;
-(void)addTask:(id)task toResendQueueForJid:(id)jid;
-(void)addPendingEncryptVoIPKey:(id)key forJid:(id)jid withCompletion:(id)completion;
-(void)addPendingMessage:(id)message forParticipant:(id)participant toResendQueueForJids:(id)jids;
-(BOOL)isUserJidCapabilities:(id)capabilities e2eCapableForMessageType:(unsigned)messageType withSessionType:(short)sessionType;
-(BOOL)shouldEncryptMediaType:(unsigned)type origin:(unsigned)origin chatSession:(id)session;
-(BOOL)shouldEncryptMessage:(id)message;
-(id)requiredCapabilitiesForSendingMessages:(id)sendingMessages;
-(BOOL)preflightChatSessionForSendingDocuments:(id)sendingDocuments requiringCapabilities:(id)capabilities showingErrorFromViewControllerIfNeeded:(id)viewControllerIfNeeded;
-(BOOL)areCapabilities:(id)capabilities enabledForChatSession:(id)chatSession unsupportedJIDs:(id*)jids;
-(unsigned)sessionStatusForJid:(id)jid;
-(id)e2eMessageForMessage:(id)message forParticipant:(id)participant errorReason:(int*)reason;
-(int)fsFailureReasonForAxolotlError:(int)axolotlError;
-(id)decryptedE2eMessageForVersion:(int)version jid:(id)jid participant:(id)participant stanzaId:(id)anId cipherType:(id)type encryptedData:(id)data retryCount:(int)count success:(BOOL*)success unknownTags:(id*)tags;
-(id)decryptedE2eV2MessageForJid:(id)jid participant:(id)participant stanzaId:(id)anId cipherType:(id)type encryptedData:(id)data decryptEvent:(id)event success:(BOOL*)success unknownTags:(id*)tags;
-(id)decryptedE2eV1MessageForJid:(id)jid stanzaId:(id)anId cipherType:(id)type encryptedData:(id)data decryptEvent:(id)event success:(BOOL*)success;
-(void)processSenderKeyDistributionMessageData:(id)data axolotlSenderKeyName:(axolotl_sender_key_name*)name errorReason:(int*)reason;
-(id)plaintextFromSenderKeyCiphertext:(id)senderKeyCiphertext axolotlSenderKeyName:(axolotl_sender_key_name*)name axolotlErrno:(int*)errno;
-(id)plaintextFromStandardCiphertext:(id)standardCiphertext axolotlAddress:(axolotl_address*)address axolotlErrno:(int*)errno;
-(id)plaintextFromPreKeyCiphertext:(id)preKeyCiphertext axolotlAddress:(axolotl_address*)address axolotlErrno:(int*)errno;
-(id)deriveHkdfSecretsFromInputKey:(id)inputKey info:(id)info outputLength:(int)length;
-(void)generatePreKeys;
-(long long)recepientIdForJid:(id)jid;
-(void)dealloc;
-(id)init;
@end

